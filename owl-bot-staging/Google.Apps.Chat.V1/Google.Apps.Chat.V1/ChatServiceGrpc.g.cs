// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/chat/v1/chat_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Apps.Chat.V1 {
  /// <summary>
  /// Enables developers to build Chat apps and
  /// integrations on Google Chat Platform.
  /// </summary>
  public static partial class ChatService
  {
    static readonly string __ServiceName = "google.chat.v1.ChatService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.CreateMessageRequest> __Marshaller_google_chat_v1_CreateMessageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.CreateMessageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.Message> __Marshaller_google_chat_v1_Message = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.Message.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListMessagesRequest> __Marshaller_google_chat_v1_ListMessagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListMessagesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListMessagesResponse> __Marshaller_google_chat_v1_ListMessagesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListMessagesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListMembershipsRequest> __Marshaller_google_chat_v1_ListMembershipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListMembershipsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListMembershipsResponse> __Marshaller_google_chat_v1_ListMembershipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListMembershipsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.GetMembershipRequest> __Marshaller_google_chat_v1_GetMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.GetMembershipRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.Membership> __Marshaller_google_chat_v1_Membership = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.Membership.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.GetMessageRequest> __Marshaller_google_chat_v1_GetMessageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.GetMessageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.UpdateMessageRequest> __Marshaller_google_chat_v1_UpdateMessageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.UpdateMessageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.DeleteMessageRequest> __Marshaller_google_chat_v1_DeleteMessageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.DeleteMessageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.GetAttachmentRequest> __Marshaller_google_chat_v1_GetAttachmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.GetAttachmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.Attachment> __Marshaller_google_chat_v1_Attachment = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.Attachment.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.UploadAttachmentRequest> __Marshaller_google_chat_v1_UploadAttachmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.UploadAttachmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.UploadAttachmentResponse> __Marshaller_google_chat_v1_UploadAttachmentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.UploadAttachmentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListSpacesRequest> __Marshaller_google_chat_v1_ListSpacesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListSpacesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListSpacesResponse> __Marshaller_google_chat_v1_ListSpacesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListSpacesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.SearchSpacesRequest> __Marshaller_google_chat_v1_SearchSpacesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.SearchSpacesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.SearchSpacesResponse> __Marshaller_google_chat_v1_SearchSpacesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.SearchSpacesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.GetSpaceRequest> __Marshaller_google_chat_v1_GetSpaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.GetSpaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.Space> __Marshaller_google_chat_v1_Space = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.Space.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.CreateSpaceRequest> __Marshaller_google_chat_v1_CreateSpaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.CreateSpaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.SetUpSpaceRequest> __Marshaller_google_chat_v1_SetUpSpaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.SetUpSpaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.UpdateSpaceRequest> __Marshaller_google_chat_v1_UpdateSpaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.UpdateSpaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.DeleteSpaceRequest> __Marshaller_google_chat_v1_DeleteSpaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.DeleteSpaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.CompleteImportSpaceRequest> __Marshaller_google_chat_v1_CompleteImportSpaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.CompleteImportSpaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.CompleteImportSpaceResponse> __Marshaller_google_chat_v1_CompleteImportSpaceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.CompleteImportSpaceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.FindDirectMessageRequest> __Marshaller_google_chat_v1_FindDirectMessageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.FindDirectMessageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.CreateMembershipRequest> __Marshaller_google_chat_v1_CreateMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.CreateMembershipRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.UpdateMembershipRequest> __Marshaller_google_chat_v1_UpdateMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.UpdateMembershipRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.DeleteMembershipRequest> __Marshaller_google_chat_v1_DeleteMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.DeleteMembershipRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.CreateReactionRequest> __Marshaller_google_chat_v1_CreateReactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.CreateReactionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.Reaction> __Marshaller_google_chat_v1_Reaction = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.Reaction.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListReactionsRequest> __Marshaller_google_chat_v1_ListReactionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListReactionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListReactionsResponse> __Marshaller_google_chat_v1_ListReactionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListReactionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.DeleteReactionRequest> __Marshaller_google_chat_v1_DeleteReactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.DeleteReactionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.GetSpaceReadStateRequest> __Marshaller_google_chat_v1_GetSpaceReadStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.GetSpaceReadStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.SpaceReadState> __Marshaller_google_chat_v1_SpaceReadState = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.SpaceReadState.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest> __Marshaller_google_chat_v1_UpdateSpaceReadStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.GetThreadReadStateRequest> __Marshaller_google_chat_v1_GetThreadReadStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.GetThreadReadStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ThreadReadState> __Marshaller_google_chat_v1_ThreadReadState = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ThreadReadState.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.GetSpaceEventRequest> __Marshaller_google_chat_v1_GetSpaceEventRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.GetSpaceEventRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.SpaceEvent> __Marshaller_google_chat_v1_SpaceEvent = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.SpaceEvent.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListSpaceEventsRequest> __Marshaller_google_chat_v1_ListSpaceEventsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListSpaceEventsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Apps.Chat.V1.ListSpaceEventsResponse> __Marshaller_google_chat_v1_ListSpaceEventsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Apps.Chat.V1.ListSpaceEventsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.CreateMessageRequest, global::Google.Apps.Chat.V1.Message> __Method_CreateMessage = new grpc::Method<global::Google.Apps.Chat.V1.CreateMessageRequest, global::Google.Apps.Chat.V1.Message>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMessage",
        __Marshaller_google_chat_v1_CreateMessageRequest,
        __Marshaller_google_chat_v1_Message);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.ListMessagesRequest, global::Google.Apps.Chat.V1.ListMessagesResponse> __Method_ListMessages = new grpc::Method<global::Google.Apps.Chat.V1.ListMessagesRequest, global::Google.Apps.Chat.V1.ListMessagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListMessages",
        __Marshaller_google_chat_v1_ListMessagesRequest,
        __Marshaller_google_chat_v1_ListMessagesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.ListMembershipsRequest, global::Google.Apps.Chat.V1.ListMembershipsResponse> __Method_ListMemberships = new grpc::Method<global::Google.Apps.Chat.V1.ListMembershipsRequest, global::Google.Apps.Chat.V1.ListMembershipsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListMemberships",
        __Marshaller_google_chat_v1_ListMembershipsRequest,
        __Marshaller_google_chat_v1_ListMembershipsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.GetMembershipRequest, global::Google.Apps.Chat.V1.Membership> __Method_GetMembership = new grpc::Method<global::Google.Apps.Chat.V1.GetMembershipRequest, global::Google.Apps.Chat.V1.Membership>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMembership",
        __Marshaller_google_chat_v1_GetMembershipRequest,
        __Marshaller_google_chat_v1_Membership);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.GetMessageRequest, global::Google.Apps.Chat.V1.Message> __Method_GetMessage = new grpc::Method<global::Google.Apps.Chat.V1.GetMessageRequest, global::Google.Apps.Chat.V1.Message>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMessage",
        __Marshaller_google_chat_v1_GetMessageRequest,
        __Marshaller_google_chat_v1_Message);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.UpdateMessageRequest, global::Google.Apps.Chat.V1.Message> __Method_UpdateMessage = new grpc::Method<global::Google.Apps.Chat.V1.UpdateMessageRequest, global::Google.Apps.Chat.V1.Message>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMessage",
        __Marshaller_google_chat_v1_UpdateMessageRequest,
        __Marshaller_google_chat_v1_Message);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.DeleteMessageRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteMessage = new grpc::Method<global::Google.Apps.Chat.V1.DeleteMessageRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMessage",
        __Marshaller_google_chat_v1_DeleteMessageRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.GetAttachmentRequest, global::Google.Apps.Chat.V1.Attachment> __Method_GetAttachment = new grpc::Method<global::Google.Apps.Chat.V1.GetAttachmentRequest, global::Google.Apps.Chat.V1.Attachment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAttachment",
        __Marshaller_google_chat_v1_GetAttachmentRequest,
        __Marshaller_google_chat_v1_Attachment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.UploadAttachmentRequest, global::Google.Apps.Chat.V1.UploadAttachmentResponse> __Method_UploadAttachment = new grpc::Method<global::Google.Apps.Chat.V1.UploadAttachmentRequest, global::Google.Apps.Chat.V1.UploadAttachmentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UploadAttachment",
        __Marshaller_google_chat_v1_UploadAttachmentRequest,
        __Marshaller_google_chat_v1_UploadAttachmentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.ListSpacesRequest, global::Google.Apps.Chat.V1.ListSpacesResponse> __Method_ListSpaces = new grpc::Method<global::Google.Apps.Chat.V1.ListSpacesRequest, global::Google.Apps.Chat.V1.ListSpacesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSpaces",
        __Marshaller_google_chat_v1_ListSpacesRequest,
        __Marshaller_google_chat_v1_ListSpacesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.SearchSpacesRequest, global::Google.Apps.Chat.V1.SearchSpacesResponse> __Method_SearchSpaces = new grpc::Method<global::Google.Apps.Chat.V1.SearchSpacesRequest, global::Google.Apps.Chat.V1.SearchSpacesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchSpaces",
        __Marshaller_google_chat_v1_SearchSpacesRequest,
        __Marshaller_google_chat_v1_SearchSpacesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.GetSpaceRequest, global::Google.Apps.Chat.V1.Space> __Method_GetSpace = new grpc::Method<global::Google.Apps.Chat.V1.GetSpaceRequest, global::Google.Apps.Chat.V1.Space>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSpace",
        __Marshaller_google_chat_v1_GetSpaceRequest,
        __Marshaller_google_chat_v1_Space);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.CreateSpaceRequest, global::Google.Apps.Chat.V1.Space> __Method_CreateSpace = new grpc::Method<global::Google.Apps.Chat.V1.CreateSpaceRequest, global::Google.Apps.Chat.V1.Space>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSpace",
        __Marshaller_google_chat_v1_CreateSpaceRequest,
        __Marshaller_google_chat_v1_Space);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.SetUpSpaceRequest, global::Google.Apps.Chat.V1.Space> __Method_SetUpSpace = new grpc::Method<global::Google.Apps.Chat.V1.SetUpSpaceRequest, global::Google.Apps.Chat.V1.Space>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetUpSpace",
        __Marshaller_google_chat_v1_SetUpSpaceRequest,
        __Marshaller_google_chat_v1_Space);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.UpdateSpaceRequest, global::Google.Apps.Chat.V1.Space> __Method_UpdateSpace = new grpc::Method<global::Google.Apps.Chat.V1.UpdateSpaceRequest, global::Google.Apps.Chat.V1.Space>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSpace",
        __Marshaller_google_chat_v1_UpdateSpaceRequest,
        __Marshaller_google_chat_v1_Space);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.DeleteSpaceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSpace = new grpc::Method<global::Google.Apps.Chat.V1.DeleteSpaceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSpace",
        __Marshaller_google_chat_v1_DeleteSpaceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.CompleteImportSpaceRequest, global::Google.Apps.Chat.V1.CompleteImportSpaceResponse> __Method_CompleteImportSpace = new grpc::Method<global::Google.Apps.Chat.V1.CompleteImportSpaceRequest, global::Google.Apps.Chat.V1.CompleteImportSpaceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CompleteImportSpace",
        __Marshaller_google_chat_v1_CompleteImportSpaceRequest,
        __Marshaller_google_chat_v1_CompleteImportSpaceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.FindDirectMessageRequest, global::Google.Apps.Chat.V1.Space> __Method_FindDirectMessage = new grpc::Method<global::Google.Apps.Chat.V1.FindDirectMessageRequest, global::Google.Apps.Chat.V1.Space>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindDirectMessage",
        __Marshaller_google_chat_v1_FindDirectMessageRequest,
        __Marshaller_google_chat_v1_Space);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.CreateMembershipRequest, global::Google.Apps.Chat.V1.Membership> __Method_CreateMembership = new grpc::Method<global::Google.Apps.Chat.V1.CreateMembershipRequest, global::Google.Apps.Chat.V1.Membership>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMembership",
        __Marshaller_google_chat_v1_CreateMembershipRequest,
        __Marshaller_google_chat_v1_Membership);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.UpdateMembershipRequest, global::Google.Apps.Chat.V1.Membership> __Method_UpdateMembership = new grpc::Method<global::Google.Apps.Chat.V1.UpdateMembershipRequest, global::Google.Apps.Chat.V1.Membership>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMembership",
        __Marshaller_google_chat_v1_UpdateMembershipRequest,
        __Marshaller_google_chat_v1_Membership);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.DeleteMembershipRequest, global::Google.Apps.Chat.V1.Membership> __Method_DeleteMembership = new grpc::Method<global::Google.Apps.Chat.V1.DeleteMembershipRequest, global::Google.Apps.Chat.V1.Membership>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMembership",
        __Marshaller_google_chat_v1_DeleteMembershipRequest,
        __Marshaller_google_chat_v1_Membership);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.CreateReactionRequest, global::Google.Apps.Chat.V1.Reaction> __Method_CreateReaction = new grpc::Method<global::Google.Apps.Chat.V1.CreateReactionRequest, global::Google.Apps.Chat.V1.Reaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateReaction",
        __Marshaller_google_chat_v1_CreateReactionRequest,
        __Marshaller_google_chat_v1_Reaction);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.ListReactionsRequest, global::Google.Apps.Chat.V1.ListReactionsResponse> __Method_ListReactions = new grpc::Method<global::Google.Apps.Chat.V1.ListReactionsRequest, global::Google.Apps.Chat.V1.ListReactionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListReactions",
        __Marshaller_google_chat_v1_ListReactionsRequest,
        __Marshaller_google_chat_v1_ListReactionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.DeleteReactionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteReaction = new grpc::Method<global::Google.Apps.Chat.V1.DeleteReactionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteReaction",
        __Marshaller_google_chat_v1_DeleteReactionRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.GetSpaceReadStateRequest, global::Google.Apps.Chat.V1.SpaceReadState> __Method_GetSpaceReadState = new grpc::Method<global::Google.Apps.Chat.V1.GetSpaceReadStateRequest, global::Google.Apps.Chat.V1.SpaceReadState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSpaceReadState",
        __Marshaller_google_chat_v1_GetSpaceReadStateRequest,
        __Marshaller_google_chat_v1_SpaceReadState);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest, global::Google.Apps.Chat.V1.SpaceReadState> __Method_UpdateSpaceReadState = new grpc::Method<global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest, global::Google.Apps.Chat.V1.SpaceReadState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSpaceReadState",
        __Marshaller_google_chat_v1_UpdateSpaceReadStateRequest,
        __Marshaller_google_chat_v1_SpaceReadState);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.GetThreadReadStateRequest, global::Google.Apps.Chat.V1.ThreadReadState> __Method_GetThreadReadState = new grpc::Method<global::Google.Apps.Chat.V1.GetThreadReadStateRequest, global::Google.Apps.Chat.V1.ThreadReadState>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetThreadReadState",
        __Marshaller_google_chat_v1_GetThreadReadStateRequest,
        __Marshaller_google_chat_v1_ThreadReadState);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.GetSpaceEventRequest, global::Google.Apps.Chat.V1.SpaceEvent> __Method_GetSpaceEvent = new grpc::Method<global::Google.Apps.Chat.V1.GetSpaceEventRequest, global::Google.Apps.Chat.V1.SpaceEvent>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSpaceEvent",
        __Marshaller_google_chat_v1_GetSpaceEventRequest,
        __Marshaller_google_chat_v1_SpaceEvent);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Apps.Chat.V1.ListSpaceEventsRequest, global::Google.Apps.Chat.V1.ListSpaceEventsResponse> __Method_ListSpaceEvents = new grpc::Method<global::Google.Apps.Chat.V1.ListSpaceEventsRequest, global::Google.Apps.Chat.V1.ListSpaceEventsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSpaceEvents",
        __Marshaller_google_chat_v1_ListSpaceEventsRequest,
        __Marshaller_google_chat_v1_ListSpaceEventsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Apps.Chat.V1.ChatServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ChatService</summary>
    [grpc::BindServiceMethod(typeof(ChatService), "BindService")]
    public abstract partial class ChatServiceBase
    {
      /// <summary>
      /// Creates a message in a Google Chat space. For an example, see [Send a
      /// message](https://developers.google.com/workspace/chat/create-messages).
      ///
      /// The `create()` method requires either [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// or [app
      /// authentication](https://developers.google.com/workspace/chat/authorize-import).
      /// Chat attributes the message sender differently depending on the type of
      /// authentication that you use in your request.
      ///
      /// The following image shows how Chat attributes a message when you use app
      /// authentication. Chat displays the Chat app as the message
      /// sender. The content of the message can contain text (`text`), cards
      /// (`cardsV2`), and accessory widgets (`accessoryWidgets`).
      ///
      /// ![Message sent with app
      /// authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
      ///
      /// The following image shows how Chat attributes a message when you use user
      /// authentication. Chat displays the user as the message sender and attributes
      /// the Chat app to the message by displaying its name. The content of message
      /// can only contain text (`text`).
      ///
      /// ![Message sent with user
      /// authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
      ///
      /// The maximum message size, including the message contents, is 32,000 bytes.
      ///
      /// For
      /// [webhook](https://developers.google.com/workspace/chat/quickstart/webhooks)
      /// requests, the response doesn't contain the full message. The response only
      /// populates the `name` and `thread.name` fields in addition to the
      /// information that was in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Message> CreateMessage(global::Google.Apps.Chat.V1.CreateMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists messages in a space that the caller is a member of, including
      /// messages from blocked members and spaces. If you list messages from a
      /// space with no messages, the response is an empty object. When using a
      /// REST/HTTP interface, the response contains an empty JSON object, `{}`.
      /// For an example, see
      /// [List
      /// messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.ListMessagesResponse> ListMessages(global::Google.Apps.Chat.V1.ListMessagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists memberships in a space. For an example, see [List users and Google
      /// Chat apps in a
      /// space](https://developers.google.com/workspace/chat/list-members). Listing
      /// memberships with [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// lists memberships in spaces that the Chat app has
      /// access to, but excludes Chat app memberships,
      /// including its own. Listing memberships with
      /// [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// lists memberships in spaces that the authenticated user has access to.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.ListMembershipsResponse> ListMemberships(global::Google.Apps.Chat.V1.ListMembershipsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns details about a membership. For an example, see
      /// [Get details about a user's or Google Chat app's
      /// membership](https://developers.google.com/workspace/chat/get-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Membership> GetMembership(global::Google.Apps.Chat.V1.GetMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns details about a message.
      /// For an example, see [Get details about a
      /// message](https://developers.google.com/workspace/chat/get-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// Note: Might return a message from a blocked member or space.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Message> GetMessage(global::Google.Apps.Chat.V1.GetMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a message. There's a difference between the `patch` and `update`
      /// methods. The `patch`
      /// method uses a `patch` request while the `update` method uses a `put`
      /// request. We recommend using the `patch` method. For an example, see
      /// [Update a
      /// message](https://developers.google.com/workspace/chat/update-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only update messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Message> UpdateMessage(global::Google.Apps.Chat.V1.UpdateMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a message.
      /// For an example, see [Delete a
      /// message](https://developers.google.com/workspace/chat/delete-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only delete messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteMessage(global::Google.Apps.Chat.V1.DeleteMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the metadata of a message attachment. The attachment data is fetched
      /// using the [media
      /// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
      /// For an example, see
      /// [Get metadata about a message
      /// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Attachment> GetAttachment(global::Google.Apps.Chat.V1.GetAttachmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Uploads an attachment. For an example, see
      /// [Upload media as a file
      /// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
      ///
      /// Requires user
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      ///
      /// You can upload attachments up to 200 MB. Certain file types aren't
      /// supported. For details, see [File types blocked by Google
      /// Chat](https://support.google.com/chat/answer/7651457?&amp;co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.UploadAttachmentResponse> UploadAttachment(global::Google.Apps.Chat.V1.UploadAttachmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists spaces the caller is a member of. Group chats and DMs aren't listed
      /// until the first message is sent. For an example, see
      /// [List
      /// spaces](https://developers.google.com/workspace/chat/list-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// To list all named spaces by Google Workspace organization, use the
      /// [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
      /// method using Workspace administrator privileges instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.ListSpacesResponse> ListSpaces(global::Google.Apps.Chat.V1.ListSpacesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of spaces in a Google Workspace organization based on an
      /// administrator's search.
      ///
      /// Requires [user
      /// authentication with administrator
      /// privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
      /// In the request, set `use_admin_access` to `true`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.SearchSpacesResponse> SearchSpaces(global::Google.Apps.Chat.V1.SearchSpacesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns details about a space. For an example, see
      /// [Get details about a
      /// space](https://developers.google.com/workspace/chat/get-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Space> GetSpace(global::Google.Apps.Chat.V1.GetSpaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a space with no members. Can be used to create a named space, or a
      /// group chat in `Import mode`. For an example, see [Create a
      /// space](https://developers.google.com/workspace/chat/create-spaces).
      ///
      ///  If you receive the error message `ALREADY_EXISTS` when creating
      ///  a space, try a different `displayName`. An existing space within
      ///  the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When authenticating as an app, the `space.customer` field must be set in
      /// the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Space> CreateSpace(global::Google.Apps.Chat.V1.CreateSpaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a space and adds specified users to it. The calling user is
      /// automatically added to the space, and shouldn't be specified as a
      /// membership in the request. For an example, see
      /// [Set up a space with initial
      /// members](https://developers.google.com/workspace/chat/set-up-spaces).
      ///
      /// To specify the human members to add, add memberships with the appropriate
      /// `membership.member.name`. To add a human user, use `users/{user}`, where
      /// `{user}` can be the email address for the user. For users in the same
      /// Workspace organization `{user}` can also be the `id` for the person from
      /// the People API, or the `id` for the user in the Directory API. For example,
      /// if the People API Person profile ID for `user@example.com` is `123456789`,
      /// you can add the user to the space by setting the `membership.member.name`
      /// to `users/user@example.com` or `users/123456789`.
      ///
      /// To specify the Google groups to add, add memberships with the
      /// appropriate `membership.group_member.name`. To add or invite a Google
      /// group, use `groups/{group}`, where `{group}` is the `id` for the group from
      /// the Cloud Identity Groups API. For example, you can use [Cloud Identity
      /// Groups lookup
      /// API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
      /// to retrieve the ID `123456789` for group email `group@example.com`, then
      /// you can add the group to the space by setting the
      /// `membership.group_member.name` to `groups/123456789`. Group email is not
      /// supported, and Google groups can only be added as members in named spaces.
      ///
      /// For a named space or group chat, if the caller blocks, or is blocked
      /// by some members, or doesn't have permission to add some members, then
      /// those members aren't added to the created space.
      ///
      /// To create a direct message (DM) between the calling user and another human
      /// user, specify exactly one membership to represent the human user. If
      /// one user blocks the other, the request fails and the DM isn't created.
      ///
      /// To create a DM between the calling user and the calling app, set
      /// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
      /// can only use this method to set up a DM with the calling app. To add the
      /// calling app as a member of a space or an existing DM between two human
      /// users, see
      /// [Invite or add a user or app to a
      /// space](https://developers.google.com/workspace/chat/create-members).
      ///
      /// If a DM already exists between two users, even when one user blocks the
      /// other at the time a request is made, then the existing DM is returned.
      ///
      /// Spaces with threaded replies aren't supported. If you receive the error
      /// message `ALREADY_EXISTS` when setting up a space, try a different
      /// `displayName`. An existing space within the Google Workspace organization
      /// might already use this display name.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Space> SetUpSpace(global::Google.Apps.Chat.V1.SetUpSpaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a space. For an example, see
      /// [Update a
      /// space](https://developers.google.com/workspace/chat/update-spaces).
      ///
      /// If you're updating the `displayName` field and receive the error message
      /// `ALREADY_EXISTS`, try a different display name.. An existing space within
      /// the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Space> UpdateSpace(global::Google.Apps.Chat.V1.UpdateSpaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a named space. Always performs a cascading delete, which means
      /// that the space's child resources—like messages posted in the space and
      /// memberships in the space—are also deleted. For an example, see
      /// [Delete a
      /// space](https://developers.google.com/workspace/chat/delete-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSpace(global::Google.Apps.Chat.V1.DeleteSpaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Completes the
      /// [import process](https://developers.google.com/workspace/chat/import-data)
      /// for the specified space and makes it visible to users.
      ///
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// and domain-wide delegation. For more information, see [Authorize Google
      /// Chat apps to import
      /// data](https://developers.google.com/workspace/chat/authorize-import).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.CompleteImportSpaceResponse> CompleteImportSpace(global::Google.Apps.Chat.V1.CompleteImportSpaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the existing direct message with the specified user. If no direct
      /// message space is found, returns a `404 NOT_FOUND` error. For an example,
      /// see
      /// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
      ///
      /// With [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
      /// returns the direct message space between the specified user and the calling
      /// Chat app.
      ///
      /// With [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
      /// returns the direct message space between the specified user and the
      /// authenticated user.
      ///
      /// // Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Space> FindDirectMessage(global::Google.Apps.Chat.V1.FindDirectMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a membership for the calling Chat app, a user, or a Google Group.
      /// Creating memberships for other Chat apps isn't supported.
      /// When creating a membership, if the specified member has their auto-accept
      /// policy turned off, then they're invited, and must accept the space
      /// invitation before joining. Otherwise, creating a membership adds the member
      /// directly to the specified space.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      ///
      /// For example usage, see:
      ///
      /// - [Invite or add a user to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
      ///
      /// - [Invite or add a Google Group to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
      ///
      /// - [Add the Chat app to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Membership> CreateMembership(global::Google.Apps.Chat.V1.CreateMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a membership. For an example, see [Update a user's membership in
      /// a space](https://developers.google.com/workspace/chat/update-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Membership> UpdateMembership(global::Google.Apps.Chat.V1.UpdateMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a membership. For an example, see
      /// [Remove a user or a Google Chat app from a
      /// space](https://developers.google.com/workspace/chat/delete-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Membership> DeleteMembership(global::Google.Apps.Chat.V1.DeleteMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a reaction and adds it to a message. For an example, see
      /// [Add a reaction to a
      /// message](https://developers.google.com/workspace/chat/create-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.Reaction> CreateReaction(global::Google.Apps.Chat.V1.CreateReactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists reactions to a message. For an example, see
      /// [List reactions for a
      /// message](https://developers.google.com/workspace/chat/list-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.ListReactionsResponse> ListReactions(global::Google.Apps.Chat.V1.ListReactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a reaction to a message. For an example, see
      /// [Delete a
      /// reaction](https://developers.google.com/workspace/chat/delete-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteReaction(global::Google.Apps.Chat.V1.DeleteReactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns details about a user's read state within a space, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// space read
      /// state](https://developers.google.com/workspace/chat/get-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.SpaceReadState> GetSpaceReadState(global::Google.Apps.Chat.V1.GetSpaceReadStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a user's read state within a space, used to identify read and
      /// unread messages. For an example, see [Update a user's space read
      /// state](https://developers.google.com/workspace/chat/update-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.SpaceReadState> UpdateSpaceReadState(global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns details about a user's read state within a thread, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// thread read
      /// state](https://developers.google.com/workspace/chat/get-thread-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.ThreadReadState> GetThreadReadState(global::Google.Apps.Chat.V1.GetThreadReadStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns an event from a Google Chat space. The [event
      /// payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the resource that changed. For example,
      /// if you request an event about a new message but the message was later
      /// updated, the server returns the updated `Message` resource in the event
      /// payload.
      ///
      /// Note: The `permissionSettings` field is not returned in the Space
      /// object of the Space event data for this request.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To get an event, the authenticated user must be a member of the space.
      ///
      /// For an example, see [Get details about an
      /// event from a Google Chat
      /// space](https://developers.google.com/workspace/chat/get-space-event).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.SpaceEvent> GetSpaceEvent(global::Google.Apps.Chat.V1.GetSpaceEventRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists events from a Google Chat space. For each event, the
      /// [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the Chat resource. For example, if you
      /// list events about new space members, the server returns `Membership`
      /// resources that contain the latest membership details. If new members were
      /// removed during the requested period, the event payload contains an empty
      /// `Membership` resource.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To list events, the authenticated user must be a member of the space.
      ///
      /// For an example, see [List events from a Google Chat
      /// space](https://developers.google.com/workspace/chat/list-space-events).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Apps.Chat.V1.ListSpaceEventsResponse> ListSpaceEvents(global::Google.Apps.Chat.V1.ListSpaceEventsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChatService</summary>
    public partial class ChatServiceClient : grpc::ClientBase<ChatServiceClient>
    {
      /// <summary>Creates a new client for ChatService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ChatServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChatService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ChatServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ChatServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ChatServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a message in a Google Chat space. For an example, see [Send a
      /// message](https://developers.google.com/workspace/chat/create-messages).
      ///
      /// The `create()` method requires either [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// or [app
      /// authentication](https://developers.google.com/workspace/chat/authorize-import).
      /// Chat attributes the message sender differently depending on the type of
      /// authentication that you use in your request.
      ///
      /// The following image shows how Chat attributes a message when you use app
      /// authentication. Chat displays the Chat app as the message
      /// sender. The content of the message can contain text (`text`), cards
      /// (`cardsV2`), and accessory widgets (`accessoryWidgets`).
      ///
      /// ![Message sent with app
      /// authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
      ///
      /// The following image shows how Chat attributes a message when you use user
      /// authentication. Chat displays the user as the message sender and attributes
      /// the Chat app to the message by displaying its name. The content of message
      /// can only contain text (`text`).
      ///
      /// ![Message sent with user
      /// authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
      ///
      /// The maximum message size, including the message contents, is 32,000 bytes.
      ///
      /// For
      /// [webhook](https://developers.google.com/workspace/chat/quickstart/webhooks)
      /// requests, the response doesn't contain the full message. The response only
      /// populates the `name` and `thread.name` fields in addition to the
      /// information that was in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Message CreateMessage(global::Google.Apps.Chat.V1.CreateMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a message in a Google Chat space. For an example, see [Send a
      /// message](https://developers.google.com/workspace/chat/create-messages).
      ///
      /// The `create()` method requires either [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// or [app
      /// authentication](https://developers.google.com/workspace/chat/authorize-import).
      /// Chat attributes the message sender differently depending on the type of
      /// authentication that you use in your request.
      ///
      /// The following image shows how Chat attributes a message when you use app
      /// authentication. Chat displays the Chat app as the message
      /// sender. The content of the message can contain text (`text`), cards
      /// (`cardsV2`), and accessory widgets (`accessoryWidgets`).
      ///
      /// ![Message sent with app
      /// authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
      ///
      /// The following image shows how Chat attributes a message when you use user
      /// authentication. Chat displays the user as the message sender and attributes
      /// the Chat app to the message by displaying its name. The content of message
      /// can only contain text (`text`).
      ///
      /// ![Message sent with user
      /// authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
      ///
      /// The maximum message size, including the message contents, is 32,000 bytes.
      ///
      /// For
      /// [webhook](https://developers.google.com/workspace/chat/quickstart/webhooks)
      /// requests, the response doesn't contain the full message. The response only
      /// populates the `name` and `thread.name` fields in addition to the
      /// information that was in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Message CreateMessage(global::Google.Apps.Chat.V1.CreateMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMessage, null, options, request);
      }
      /// <summary>
      /// Creates a message in a Google Chat space. For an example, see [Send a
      /// message](https://developers.google.com/workspace/chat/create-messages).
      ///
      /// The `create()` method requires either [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// or [app
      /// authentication](https://developers.google.com/workspace/chat/authorize-import).
      /// Chat attributes the message sender differently depending on the type of
      /// authentication that you use in your request.
      ///
      /// The following image shows how Chat attributes a message when you use app
      /// authentication. Chat displays the Chat app as the message
      /// sender. The content of the message can contain text (`text`), cards
      /// (`cardsV2`), and accessory widgets (`accessoryWidgets`).
      ///
      /// ![Message sent with app
      /// authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
      ///
      /// The following image shows how Chat attributes a message when you use user
      /// authentication. Chat displays the user as the message sender and attributes
      /// the Chat app to the message by displaying its name. The content of message
      /// can only contain text (`text`).
      ///
      /// ![Message sent with user
      /// authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
      ///
      /// The maximum message size, including the message contents, is 32,000 bytes.
      ///
      /// For
      /// [webhook](https://developers.google.com/workspace/chat/quickstart/webhooks)
      /// requests, the response doesn't contain the full message. The response only
      /// populates the `name` and `thread.name` fields in addition to the
      /// information that was in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Message> CreateMessageAsync(global::Google.Apps.Chat.V1.CreateMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a message in a Google Chat space. For an example, see [Send a
      /// message](https://developers.google.com/workspace/chat/create-messages).
      ///
      /// The `create()` method requires either [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// or [app
      /// authentication](https://developers.google.com/workspace/chat/authorize-import).
      /// Chat attributes the message sender differently depending on the type of
      /// authentication that you use in your request.
      ///
      /// The following image shows how Chat attributes a message when you use app
      /// authentication. Chat displays the Chat app as the message
      /// sender. The content of the message can contain text (`text`), cards
      /// (`cardsV2`), and accessory widgets (`accessoryWidgets`).
      ///
      /// ![Message sent with app
      /// authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
      ///
      /// The following image shows how Chat attributes a message when you use user
      /// authentication. Chat displays the user as the message sender and attributes
      /// the Chat app to the message by displaying its name. The content of message
      /// can only contain text (`text`).
      ///
      /// ![Message sent with user
      /// authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
      ///
      /// The maximum message size, including the message contents, is 32,000 bytes.
      ///
      /// For
      /// [webhook](https://developers.google.com/workspace/chat/quickstart/webhooks)
      /// requests, the response doesn't contain the full message. The response only
      /// populates the `name` and `thread.name` fields in addition to the
      /// information that was in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Message> CreateMessageAsync(global::Google.Apps.Chat.V1.CreateMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMessage, null, options, request);
      }
      /// <summary>
      /// Lists messages in a space that the caller is a member of, including
      /// messages from blocked members and spaces. If you list messages from a
      /// space with no messages, the response is an empty object. When using a
      /// REST/HTTP interface, the response contains an empty JSON object, `{}`.
      /// For an example, see
      /// [List
      /// messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListMessagesResponse ListMessages(global::Google.Apps.Chat.V1.ListMessagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists messages in a space that the caller is a member of, including
      /// messages from blocked members and spaces. If you list messages from a
      /// space with no messages, the response is an empty object. When using a
      /// REST/HTTP interface, the response contains an empty JSON object, `{}`.
      /// For an example, see
      /// [List
      /// messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListMessagesResponse ListMessages(global::Google.Apps.Chat.V1.ListMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListMessages, null, options, request);
      }
      /// <summary>
      /// Lists messages in a space that the caller is a member of, including
      /// messages from blocked members and spaces. If you list messages from a
      /// space with no messages, the response is an empty object. When using a
      /// REST/HTTP interface, the response contains an empty JSON object, `{}`.
      /// For an example, see
      /// [List
      /// messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListMessagesResponse> ListMessagesAsync(global::Google.Apps.Chat.V1.ListMessagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMessagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists messages in a space that the caller is a member of, including
      /// messages from blocked members and spaces. If you list messages from a
      /// space with no messages, the response is an empty object. When using a
      /// REST/HTTP interface, the response contains an empty JSON object, `{}`.
      /// For an example, see
      /// [List
      /// messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListMessagesResponse> ListMessagesAsync(global::Google.Apps.Chat.V1.ListMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListMessages, null, options, request);
      }
      /// <summary>
      /// Lists memberships in a space. For an example, see [List users and Google
      /// Chat apps in a
      /// space](https://developers.google.com/workspace/chat/list-members). Listing
      /// memberships with [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// lists memberships in spaces that the Chat app has
      /// access to, but excludes Chat app memberships,
      /// including its own. Listing memberships with
      /// [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// lists memberships in spaces that the authenticated user has access to.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListMembershipsResponse ListMemberships(global::Google.Apps.Chat.V1.ListMembershipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMemberships(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists memberships in a space. For an example, see [List users and Google
      /// Chat apps in a
      /// space](https://developers.google.com/workspace/chat/list-members). Listing
      /// memberships with [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// lists memberships in spaces that the Chat app has
      /// access to, but excludes Chat app memberships,
      /// including its own. Listing memberships with
      /// [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// lists memberships in spaces that the authenticated user has access to.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListMembershipsResponse ListMemberships(global::Google.Apps.Chat.V1.ListMembershipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListMemberships, null, options, request);
      }
      /// <summary>
      /// Lists memberships in a space. For an example, see [List users and Google
      /// Chat apps in a
      /// space](https://developers.google.com/workspace/chat/list-members). Listing
      /// memberships with [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// lists memberships in spaces that the Chat app has
      /// access to, but excludes Chat app memberships,
      /// including its own. Listing memberships with
      /// [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// lists memberships in spaces that the authenticated user has access to.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListMembershipsResponse> ListMembershipsAsync(global::Google.Apps.Chat.V1.ListMembershipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMembershipsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists memberships in a space. For an example, see [List users and Google
      /// Chat apps in a
      /// space](https://developers.google.com/workspace/chat/list-members). Listing
      /// memberships with [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// lists memberships in spaces that the Chat app has
      /// access to, but excludes Chat app memberships,
      /// including its own. Listing memberships with
      /// [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// lists memberships in spaces that the authenticated user has access to.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListMembershipsResponse> ListMembershipsAsync(global::Google.Apps.Chat.V1.ListMembershipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListMemberships, null, options, request);
      }
      /// <summary>
      /// Returns details about a membership. For an example, see
      /// [Get details about a user's or Google Chat app's
      /// membership](https://developers.google.com/workspace/chat/get-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Membership GetMembership(global::Google.Apps.Chat.V1.GetMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a membership. For an example, see
      /// [Get details about a user's or Google Chat app's
      /// membership](https://developers.google.com/workspace/chat/get-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Membership GetMembership(global::Google.Apps.Chat.V1.GetMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMembership, null, options, request);
      }
      /// <summary>
      /// Returns details about a membership. For an example, see
      /// [Get details about a user's or Google Chat app's
      /// membership](https://developers.google.com/workspace/chat/get-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Membership> GetMembershipAsync(global::Google.Apps.Chat.V1.GetMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a membership. For an example, see
      /// [Get details about a user's or Google Chat app's
      /// membership](https://developers.google.com/workspace/chat/get-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Membership> GetMembershipAsync(global::Google.Apps.Chat.V1.GetMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMembership, null, options, request);
      }
      /// <summary>
      /// Returns details about a message.
      /// For an example, see [Get details about a
      /// message](https://developers.google.com/workspace/chat/get-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// Note: Might return a message from a blocked member or space.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Message GetMessage(global::Google.Apps.Chat.V1.GetMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a message.
      /// For an example, see [Get details about a
      /// message](https://developers.google.com/workspace/chat/get-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// Note: Might return a message from a blocked member or space.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Message GetMessage(global::Google.Apps.Chat.V1.GetMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMessage, null, options, request);
      }
      /// <summary>
      /// Returns details about a message.
      /// For an example, see [Get details about a
      /// message](https://developers.google.com/workspace/chat/get-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// Note: Might return a message from a blocked member or space.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Message> GetMessageAsync(global::Google.Apps.Chat.V1.GetMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a message.
      /// For an example, see [Get details about a
      /// message](https://developers.google.com/workspace/chat/get-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// Note: Might return a message from a blocked member or space.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Message> GetMessageAsync(global::Google.Apps.Chat.V1.GetMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMessage, null, options, request);
      }
      /// <summary>
      /// Updates a message. There's a difference between the `patch` and `update`
      /// methods. The `patch`
      /// method uses a `patch` request while the `update` method uses a `put`
      /// request. We recommend using the `patch` method. For an example, see
      /// [Update a
      /// message](https://developers.google.com/workspace/chat/update-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only update messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Message UpdateMessage(global::Google.Apps.Chat.V1.UpdateMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a message. There's a difference between the `patch` and `update`
      /// methods. The `patch`
      /// method uses a `patch` request while the `update` method uses a `put`
      /// request. We recommend using the `patch` method. For an example, see
      /// [Update a
      /// message](https://developers.google.com/workspace/chat/update-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only update messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Message UpdateMessage(global::Google.Apps.Chat.V1.UpdateMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMessage, null, options, request);
      }
      /// <summary>
      /// Updates a message. There's a difference between the `patch` and `update`
      /// methods. The `patch`
      /// method uses a `patch` request while the `update` method uses a `put`
      /// request. We recommend using the `patch` method. For an example, see
      /// [Update a
      /// message](https://developers.google.com/workspace/chat/update-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only update messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Message> UpdateMessageAsync(global::Google.Apps.Chat.V1.UpdateMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a message. There's a difference between the `patch` and `update`
      /// methods. The `patch`
      /// method uses a `patch` request while the `update` method uses a `put`
      /// request. We recommend using the `patch` method. For an example, see
      /// [Update a
      /// message](https://developers.google.com/workspace/chat/update-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only update messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Message> UpdateMessageAsync(global::Google.Apps.Chat.V1.UpdateMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMessage, null, options, request);
      }
      /// <summary>
      /// Deletes a message.
      /// For an example, see [Delete a
      /// message](https://developers.google.com/workspace/chat/delete-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only delete messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteMessage(global::Google.Apps.Chat.V1.DeleteMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a message.
      /// For an example, see [Delete a
      /// message](https://developers.google.com/workspace/chat/delete-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only delete messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteMessage(global::Google.Apps.Chat.V1.DeleteMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMessage, null, options, request);
      }
      /// <summary>
      /// Deletes a message.
      /// For an example, see [Delete a
      /// message](https://developers.google.com/workspace/chat/delete-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only delete messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteMessageAsync(global::Google.Apps.Chat.V1.DeleteMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a message.
      /// For an example, see [Delete a
      /// message](https://developers.google.com/workspace/chat/delete-messages).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When using app authentication, requests can only delete messages
      /// created by the calling Chat app.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteMessageAsync(global::Google.Apps.Chat.V1.DeleteMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMessage, null, options, request);
      }
      /// <summary>
      /// Gets the metadata of a message attachment. The attachment data is fetched
      /// using the [media
      /// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
      /// For an example, see
      /// [Get metadata about a message
      /// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Attachment GetAttachment(global::Google.Apps.Chat.V1.GetAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttachment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the metadata of a message attachment. The attachment data is fetched
      /// using the [media
      /// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
      /// For an example, see
      /// [Get metadata about a message
      /// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Attachment GetAttachment(global::Google.Apps.Chat.V1.GetAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAttachment, null, options, request);
      }
      /// <summary>
      /// Gets the metadata of a message attachment. The attachment data is fetched
      /// using the [media
      /// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
      /// For an example, see
      /// [Get metadata about a message
      /// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Attachment> GetAttachmentAsync(global::Google.Apps.Chat.V1.GetAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttachmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the metadata of a message attachment. The attachment data is fetched
      /// using the [media
      /// API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
      /// For an example, see
      /// [Get metadata about a message
      /// attachment](https://developers.google.com/workspace/chat/get-media-attachments).
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Attachment> GetAttachmentAsync(global::Google.Apps.Chat.V1.GetAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAttachment, null, options, request);
      }
      /// <summary>
      /// Uploads an attachment. For an example, see
      /// [Upload media as a file
      /// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
      ///
      /// Requires user
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      ///
      /// You can upload attachments up to 200 MB. Certain file types aren't
      /// supported. For details, see [File types blocked by Google
      /// Chat](https://support.google.com/chat/answer/7651457?&amp;co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.UploadAttachmentResponse UploadAttachment(global::Google.Apps.Chat.V1.UploadAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadAttachment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Uploads an attachment. For an example, see
      /// [Upload media as a file
      /// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
      ///
      /// Requires user
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      ///
      /// You can upload attachments up to 200 MB. Certain file types aren't
      /// supported. For details, see [File types blocked by Google
      /// Chat](https://support.google.com/chat/answer/7651457?&amp;co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.UploadAttachmentResponse UploadAttachment(global::Google.Apps.Chat.V1.UploadAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UploadAttachment, null, options, request);
      }
      /// <summary>
      /// Uploads an attachment. For an example, see
      /// [Upload media as a file
      /// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
      ///
      /// Requires user
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      ///
      /// You can upload attachments up to 200 MB. Certain file types aren't
      /// supported. For details, see [File types blocked by Google
      /// Chat](https://support.google.com/chat/answer/7651457?&amp;co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.UploadAttachmentResponse> UploadAttachmentAsync(global::Google.Apps.Chat.V1.UploadAttachmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadAttachmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Uploads an attachment. For an example, see
      /// [Upload media as a file
      /// attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
      ///
      /// Requires user
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      ///
      /// You can upload attachments up to 200 MB. Certain file types aren't
      /// supported. For details, see [File types blocked by Google
      /// Chat](https://support.google.com/chat/answer/7651457?&amp;co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.UploadAttachmentResponse> UploadAttachmentAsync(global::Google.Apps.Chat.V1.UploadAttachmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UploadAttachment, null, options, request);
      }
      /// <summary>
      /// Lists spaces the caller is a member of. Group chats and DMs aren't listed
      /// until the first message is sent. For an example, see
      /// [List
      /// spaces](https://developers.google.com/workspace/chat/list-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// To list all named spaces by Google Workspace organization, use the
      /// [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
      /// method using Workspace administrator privileges instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListSpacesResponse ListSpaces(global::Google.Apps.Chat.V1.ListSpacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSpaces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists spaces the caller is a member of. Group chats and DMs aren't listed
      /// until the first message is sent. For an example, see
      /// [List
      /// spaces](https://developers.google.com/workspace/chat/list-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// To list all named spaces by Google Workspace organization, use the
      /// [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
      /// method using Workspace administrator privileges instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListSpacesResponse ListSpaces(global::Google.Apps.Chat.V1.ListSpacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSpaces, null, options, request);
      }
      /// <summary>
      /// Lists spaces the caller is a member of. Group chats and DMs aren't listed
      /// until the first message is sent. For an example, see
      /// [List
      /// spaces](https://developers.google.com/workspace/chat/list-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// To list all named spaces by Google Workspace organization, use the
      /// [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
      /// method using Workspace administrator privileges instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListSpacesResponse> ListSpacesAsync(global::Google.Apps.Chat.V1.ListSpacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSpacesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists spaces the caller is a member of. Group chats and DMs aren't listed
      /// until the first message is sent. For an example, see
      /// [List
      /// spaces](https://developers.google.com/workspace/chat/list-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// To list all named spaces by Google Workspace organization, use the
      /// [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
      /// method using Workspace administrator privileges instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListSpacesResponse> ListSpacesAsync(global::Google.Apps.Chat.V1.ListSpacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSpaces, null, options, request);
      }
      /// <summary>
      /// Returns a list of spaces in a Google Workspace organization based on an
      /// administrator's search.
      ///
      /// Requires [user
      /// authentication with administrator
      /// privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
      /// In the request, set `use_admin_access` to `true`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.SearchSpacesResponse SearchSpaces(global::Google.Apps.Chat.V1.SearchSpacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchSpaces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of spaces in a Google Workspace organization based on an
      /// administrator's search.
      ///
      /// Requires [user
      /// authentication with administrator
      /// privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
      /// In the request, set `use_admin_access` to `true`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.SearchSpacesResponse SearchSpaces(global::Google.Apps.Chat.V1.SearchSpacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchSpaces, null, options, request);
      }
      /// <summary>
      /// Returns a list of spaces in a Google Workspace organization based on an
      /// administrator's search.
      ///
      /// Requires [user
      /// authentication with administrator
      /// privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
      /// In the request, set `use_admin_access` to `true`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.SearchSpacesResponse> SearchSpacesAsync(global::Google.Apps.Chat.V1.SearchSpacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchSpacesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of spaces in a Google Workspace organization based on an
      /// administrator's search.
      ///
      /// Requires [user
      /// authentication with administrator
      /// privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
      /// In the request, set `use_admin_access` to `true`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.SearchSpacesResponse> SearchSpacesAsync(global::Google.Apps.Chat.V1.SearchSpacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchSpaces, null, options, request);
      }
      /// <summary>
      /// Returns details about a space. For an example, see
      /// [Get details about a
      /// space](https://developers.google.com/workspace/chat/get-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space GetSpace(global::Google.Apps.Chat.V1.GetSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a space. For an example, see
      /// [Get details about a
      /// space](https://developers.google.com/workspace/chat/get-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space GetSpace(global::Google.Apps.Chat.V1.GetSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSpace, null, options, request);
      }
      /// <summary>
      /// Returns details about a space. For an example, see
      /// [Get details about a
      /// space](https://developers.google.com/workspace/chat/get-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> GetSpaceAsync(global::Google.Apps.Chat.V1.GetSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a space. For an example, see
      /// [Get details about a
      /// space](https://developers.google.com/workspace/chat/get-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> GetSpaceAsync(global::Google.Apps.Chat.V1.GetSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSpace, null, options, request);
      }
      /// <summary>
      /// Creates a space with no members. Can be used to create a named space, or a
      /// group chat in `Import mode`. For an example, see [Create a
      /// space](https://developers.google.com/workspace/chat/create-spaces).
      ///
      ///  If you receive the error message `ALREADY_EXISTS` when creating
      ///  a space, try a different `displayName`. An existing space within
      ///  the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When authenticating as an app, the `space.customer` field must be set in
      /// the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space CreateSpace(global::Google.Apps.Chat.V1.CreateSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a space with no members. Can be used to create a named space, or a
      /// group chat in `Import mode`. For an example, see [Create a
      /// space](https://developers.google.com/workspace/chat/create-spaces).
      ///
      ///  If you receive the error message `ALREADY_EXISTS` when creating
      ///  a space, try a different `displayName`. An existing space within
      ///  the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When authenticating as an app, the `space.customer` field must be set in
      /// the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space CreateSpace(global::Google.Apps.Chat.V1.CreateSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSpace, null, options, request);
      }
      /// <summary>
      /// Creates a space with no members. Can be used to create a named space, or a
      /// group chat in `Import mode`. For an example, see [Create a
      /// space](https://developers.google.com/workspace/chat/create-spaces).
      ///
      ///  If you receive the error message `ALREADY_EXISTS` when creating
      ///  a space, try a different `displayName`. An existing space within
      ///  the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When authenticating as an app, the `space.customer` field must be set in
      /// the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> CreateSpaceAsync(global::Google.Apps.Chat.V1.CreateSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a space with no members. Can be used to create a named space, or a
      /// group chat in `Import mode`. For an example, see [Create a
      /// space](https://developers.google.com/workspace/chat/create-spaces).
      ///
      ///  If you receive the error message `ALREADY_EXISTS` when creating
      ///  a space, try a different `displayName`. An existing space within
      ///  the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      ///
      /// When authenticating as an app, the `space.customer` field must be set in
      /// the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> CreateSpaceAsync(global::Google.Apps.Chat.V1.CreateSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSpace, null, options, request);
      }
      /// <summary>
      /// Creates a space and adds specified users to it. The calling user is
      /// automatically added to the space, and shouldn't be specified as a
      /// membership in the request. For an example, see
      /// [Set up a space with initial
      /// members](https://developers.google.com/workspace/chat/set-up-spaces).
      ///
      /// To specify the human members to add, add memberships with the appropriate
      /// `membership.member.name`. To add a human user, use `users/{user}`, where
      /// `{user}` can be the email address for the user. For users in the same
      /// Workspace organization `{user}` can also be the `id` for the person from
      /// the People API, or the `id` for the user in the Directory API. For example,
      /// if the People API Person profile ID for `user@example.com` is `123456789`,
      /// you can add the user to the space by setting the `membership.member.name`
      /// to `users/user@example.com` or `users/123456789`.
      ///
      /// To specify the Google groups to add, add memberships with the
      /// appropriate `membership.group_member.name`. To add or invite a Google
      /// group, use `groups/{group}`, where `{group}` is the `id` for the group from
      /// the Cloud Identity Groups API. For example, you can use [Cloud Identity
      /// Groups lookup
      /// API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
      /// to retrieve the ID `123456789` for group email `group@example.com`, then
      /// you can add the group to the space by setting the
      /// `membership.group_member.name` to `groups/123456789`. Group email is not
      /// supported, and Google groups can only be added as members in named spaces.
      ///
      /// For a named space or group chat, if the caller blocks, or is blocked
      /// by some members, or doesn't have permission to add some members, then
      /// those members aren't added to the created space.
      ///
      /// To create a direct message (DM) between the calling user and another human
      /// user, specify exactly one membership to represent the human user. If
      /// one user blocks the other, the request fails and the DM isn't created.
      ///
      /// To create a DM between the calling user and the calling app, set
      /// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
      /// can only use this method to set up a DM with the calling app. To add the
      /// calling app as a member of a space or an existing DM between two human
      /// users, see
      /// [Invite or add a user or app to a
      /// space](https://developers.google.com/workspace/chat/create-members).
      ///
      /// If a DM already exists between two users, even when one user blocks the
      /// other at the time a request is made, then the existing DM is returned.
      ///
      /// Spaces with threaded replies aren't supported. If you receive the error
      /// message `ALREADY_EXISTS` when setting up a space, try a different
      /// `displayName`. An existing space within the Google Workspace organization
      /// might already use this display name.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space SetUpSpace(global::Google.Apps.Chat.V1.SetUpSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUpSpace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a space and adds specified users to it. The calling user is
      /// automatically added to the space, and shouldn't be specified as a
      /// membership in the request. For an example, see
      /// [Set up a space with initial
      /// members](https://developers.google.com/workspace/chat/set-up-spaces).
      ///
      /// To specify the human members to add, add memberships with the appropriate
      /// `membership.member.name`. To add a human user, use `users/{user}`, where
      /// `{user}` can be the email address for the user. For users in the same
      /// Workspace organization `{user}` can also be the `id` for the person from
      /// the People API, or the `id` for the user in the Directory API. For example,
      /// if the People API Person profile ID for `user@example.com` is `123456789`,
      /// you can add the user to the space by setting the `membership.member.name`
      /// to `users/user@example.com` or `users/123456789`.
      ///
      /// To specify the Google groups to add, add memberships with the
      /// appropriate `membership.group_member.name`. To add or invite a Google
      /// group, use `groups/{group}`, where `{group}` is the `id` for the group from
      /// the Cloud Identity Groups API. For example, you can use [Cloud Identity
      /// Groups lookup
      /// API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
      /// to retrieve the ID `123456789` for group email `group@example.com`, then
      /// you can add the group to the space by setting the
      /// `membership.group_member.name` to `groups/123456789`. Group email is not
      /// supported, and Google groups can only be added as members in named spaces.
      ///
      /// For a named space or group chat, if the caller blocks, or is blocked
      /// by some members, or doesn't have permission to add some members, then
      /// those members aren't added to the created space.
      ///
      /// To create a direct message (DM) between the calling user and another human
      /// user, specify exactly one membership to represent the human user. If
      /// one user blocks the other, the request fails and the DM isn't created.
      ///
      /// To create a DM between the calling user and the calling app, set
      /// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
      /// can only use this method to set up a DM with the calling app. To add the
      /// calling app as a member of a space or an existing DM between two human
      /// users, see
      /// [Invite or add a user or app to a
      /// space](https://developers.google.com/workspace/chat/create-members).
      ///
      /// If a DM already exists between two users, even when one user blocks the
      /// other at the time a request is made, then the existing DM is returned.
      ///
      /// Spaces with threaded replies aren't supported. If you receive the error
      /// message `ALREADY_EXISTS` when setting up a space, try a different
      /// `displayName`. An existing space within the Google Workspace organization
      /// might already use this display name.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space SetUpSpace(global::Google.Apps.Chat.V1.SetUpSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetUpSpace, null, options, request);
      }
      /// <summary>
      /// Creates a space and adds specified users to it. The calling user is
      /// automatically added to the space, and shouldn't be specified as a
      /// membership in the request. For an example, see
      /// [Set up a space with initial
      /// members](https://developers.google.com/workspace/chat/set-up-spaces).
      ///
      /// To specify the human members to add, add memberships with the appropriate
      /// `membership.member.name`. To add a human user, use `users/{user}`, where
      /// `{user}` can be the email address for the user. For users in the same
      /// Workspace organization `{user}` can also be the `id` for the person from
      /// the People API, or the `id` for the user in the Directory API. For example,
      /// if the People API Person profile ID for `user@example.com` is `123456789`,
      /// you can add the user to the space by setting the `membership.member.name`
      /// to `users/user@example.com` or `users/123456789`.
      ///
      /// To specify the Google groups to add, add memberships with the
      /// appropriate `membership.group_member.name`. To add or invite a Google
      /// group, use `groups/{group}`, where `{group}` is the `id` for the group from
      /// the Cloud Identity Groups API. For example, you can use [Cloud Identity
      /// Groups lookup
      /// API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
      /// to retrieve the ID `123456789` for group email `group@example.com`, then
      /// you can add the group to the space by setting the
      /// `membership.group_member.name` to `groups/123456789`. Group email is not
      /// supported, and Google groups can only be added as members in named spaces.
      ///
      /// For a named space or group chat, if the caller blocks, or is blocked
      /// by some members, or doesn't have permission to add some members, then
      /// those members aren't added to the created space.
      ///
      /// To create a direct message (DM) between the calling user and another human
      /// user, specify exactly one membership to represent the human user. If
      /// one user blocks the other, the request fails and the DM isn't created.
      ///
      /// To create a DM between the calling user and the calling app, set
      /// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
      /// can only use this method to set up a DM with the calling app. To add the
      /// calling app as a member of a space or an existing DM between two human
      /// users, see
      /// [Invite or add a user or app to a
      /// space](https://developers.google.com/workspace/chat/create-members).
      ///
      /// If a DM already exists between two users, even when one user blocks the
      /// other at the time a request is made, then the existing DM is returned.
      ///
      /// Spaces with threaded replies aren't supported. If you receive the error
      /// message `ALREADY_EXISTS` when setting up a space, try a different
      /// `displayName`. An existing space within the Google Workspace organization
      /// might already use this display name.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> SetUpSpaceAsync(global::Google.Apps.Chat.V1.SetUpSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetUpSpaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a space and adds specified users to it. The calling user is
      /// automatically added to the space, and shouldn't be specified as a
      /// membership in the request. For an example, see
      /// [Set up a space with initial
      /// members](https://developers.google.com/workspace/chat/set-up-spaces).
      ///
      /// To specify the human members to add, add memberships with the appropriate
      /// `membership.member.name`. To add a human user, use `users/{user}`, where
      /// `{user}` can be the email address for the user. For users in the same
      /// Workspace organization `{user}` can also be the `id` for the person from
      /// the People API, or the `id` for the user in the Directory API. For example,
      /// if the People API Person profile ID for `user@example.com` is `123456789`,
      /// you can add the user to the space by setting the `membership.member.name`
      /// to `users/user@example.com` or `users/123456789`.
      ///
      /// To specify the Google groups to add, add memberships with the
      /// appropriate `membership.group_member.name`. To add or invite a Google
      /// group, use `groups/{group}`, where `{group}` is the `id` for the group from
      /// the Cloud Identity Groups API. For example, you can use [Cloud Identity
      /// Groups lookup
      /// API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
      /// to retrieve the ID `123456789` for group email `group@example.com`, then
      /// you can add the group to the space by setting the
      /// `membership.group_member.name` to `groups/123456789`. Group email is not
      /// supported, and Google groups can only be added as members in named spaces.
      ///
      /// For a named space or group chat, if the caller blocks, or is blocked
      /// by some members, or doesn't have permission to add some members, then
      /// those members aren't added to the created space.
      ///
      /// To create a direct message (DM) between the calling user and another human
      /// user, specify exactly one membership to represent the human user. If
      /// one user blocks the other, the request fails and the DM isn't created.
      ///
      /// To create a DM between the calling user and the calling app, set
      /// `Space.singleUserBotDm` to `true` and don't specify any memberships. You
      /// can only use this method to set up a DM with the calling app. To add the
      /// calling app as a member of a space or an existing DM between two human
      /// users, see
      /// [Invite or add a user or app to a
      /// space](https://developers.google.com/workspace/chat/create-members).
      ///
      /// If a DM already exists between two users, even when one user blocks the
      /// other at the time a request is made, then the existing DM is returned.
      ///
      /// Spaces with threaded replies aren't supported. If you receive the error
      /// message `ALREADY_EXISTS` when setting up a space, try a different
      /// `displayName`. An existing space within the Google Workspace organization
      /// might already use this display name.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> SetUpSpaceAsync(global::Google.Apps.Chat.V1.SetUpSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetUpSpace, null, options, request);
      }
      /// <summary>
      /// Updates a space. For an example, see
      /// [Update a
      /// space](https://developers.google.com/workspace/chat/update-spaces).
      ///
      /// If you're updating the `displayName` field and receive the error message
      /// `ALREADY_EXISTS`, try a different display name.. An existing space within
      /// the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space UpdateSpace(global::Google.Apps.Chat.V1.UpdateSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSpace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a space. For an example, see
      /// [Update a
      /// space](https://developers.google.com/workspace/chat/update-spaces).
      ///
      /// If you're updating the `displayName` field and receive the error message
      /// `ALREADY_EXISTS`, try a different display name.. An existing space within
      /// the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space UpdateSpace(global::Google.Apps.Chat.V1.UpdateSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSpace, null, options, request);
      }
      /// <summary>
      /// Updates a space. For an example, see
      /// [Update a
      /// space](https://developers.google.com/workspace/chat/update-spaces).
      ///
      /// If you're updating the `displayName` field and receive the error message
      /// `ALREADY_EXISTS`, try a different display name.. An existing space within
      /// the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> UpdateSpaceAsync(global::Google.Apps.Chat.V1.UpdateSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSpaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a space. For an example, see
      /// [Update a
      /// space](https://developers.google.com/workspace/chat/update-spaces).
      ///
      /// If you're updating the `displayName` field and receive the error message
      /// `ALREADY_EXISTS`, try a different display name.. An existing space within
      /// the Google Workspace organization might already use this display name.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> UpdateSpaceAsync(global::Google.Apps.Chat.V1.UpdateSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSpace, null, options, request);
      }
      /// <summary>
      /// Deletes a named space. Always performs a cascading delete, which means
      /// that the space's child resources—like messages posted in the space and
      /// memberships in the space—are also deleted. For an example, see
      /// [Delete a
      /// space](https://developers.google.com/workspace/chat/delete-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSpace(global::Google.Apps.Chat.V1.DeleteSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSpace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a named space. Always performs a cascading delete, which means
      /// that the space's child resources—like messages posted in the space and
      /// memberships in the space—are also deleted. For an example, see
      /// [Delete a
      /// space](https://developers.google.com/workspace/chat/delete-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSpace(global::Google.Apps.Chat.V1.DeleteSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSpace, null, options, request);
      }
      /// <summary>
      /// Deletes a named space. Always performs a cascading delete, which means
      /// that the space's child resources—like messages posted in the space and
      /// memberships in the space—are also deleted. For an example, see
      /// [Delete a
      /// space](https://developers.google.com/workspace/chat/delete-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSpaceAsync(global::Google.Apps.Chat.V1.DeleteSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSpaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a named space. Always performs a cascading delete, which means
      /// that the space's child resources—like messages posted in the space and
      /// memberships in the space—are also deleted. For an example, see
      /// [Delete a
      /// space](https://developers.google.com/workspace/chat/delete-spaces).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSpaceAsync(global::Google.Apps.Chat.V1.DeleteSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSpace, null, options, request);
      }
      /// <summary>
      /// Completes the
      /// [import process](https://developers.google.com/workspace/chat/import-data)
      /// for the specified space and makes it visible to users.
      ///
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// and domain-wide delegation. For more information, see [Authorize Google
      /// Chat apps to import
      /// data](https://developers.google.com/workspace/chat/authorize-import).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.CompleteImportSpaceResponse CompleteImportSpace(global::Google.Apps.Chat.V1.CompleteImportSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteImportSpace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Completes the
      /// [import process](https://developers.google.com/workspace/chat/import-data)
      /// for the specified space and makes it visible to users.
      ///
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// and domain-wide delegation. For more information, see [Authorize Google
      /// Chat apps to import
      /// data](https://developers.google.com/workspace/chat/authorize-import).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.CompleteImportSpaceResponse CompleteImportSpace(global::Google.Apps.Chat.V1.CompleteImportSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CompleteImportSpace, null, options, request);
      }
      /// <summary>
      /// Completes the
      /// [import process](https://developers.google.com/workspace/chat/import-data)
      /// for the specified space and makes it visible to users.
      ///
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// and domain-wide delegation. For more information, see [Authorize Google
      /// Chat apps to import
      /// data](https://developers.google.com/workspace/chat/authorize-import).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.CompleteImportSpaceResponse> CompleteImportSpaceAsync(global::Google.Apps.Chat.V1.CompleteImportSpaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteImportSpaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Completes the
      /// [import process](https://developers.google.com/workspace/chat/import-data)
      /// for the specified space and makes it visible to users.
      ///
      /// Requires [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// and domain-wide delegation. For more information, see [Authorize Google
      /// Chat apps to import
      /// data](https://developers.google.com/workspace/chat/authorize-import).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.CompleteImportSpaceResponse> CompleteImportSpaceAsync(global::Google.Apps.Chat.V1.CompleteImportSpaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CompleteImportSpace, null, options, request);
      }
      /// <summary>
      /// Returns the existing direct message with the specified user. If no direct
      /// message space is found, returns a `404 NOT_FOUND` error. For an example,
      /// see
      /// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
      ///
      /// With [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
      /// returns the direct message space between the specified user and the calling
      /// Chat app.
      ///
      /// With [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
      /// returns the direct message space between the specified user and the
      /// authenticated user.
      ///
      /// // Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space FindDirectMessage(global::Google.Apps.Chat.V1.FindDirectMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindDirectMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the existing direct message with the specified user. If no direct
      /// message space is found, returns a `404 NOT_FOUND` error. For an example,
      /// see
      /// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
      ///
      /// With [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
      /// returns the direct message space between the specified user and the calling
      /// Chat app.
      ///
      /// With [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
      /// returns the direct message space between the specified user and the
      /// authenticated user.
      ///
      /// // Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Space FindDirectMessage(global::Google.Apps.Chat.V1.FindDirectMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindDirectMessage, null, options, request);
      }
      /// <summary>
      /// Returns the existing direct message with the specified user. If no direct
      /// message space is found, returns a `404 NOT_FOUND` error. For an example,
      /// see
      /// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
      ///
      /// With [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
      /// returns the direct message space between the specified user and the calling
      /// Chat app.
      ///
      /// With [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
      /// returns the direct message space between the specified user and the
      /// authenticated user.
      ///
      /// // Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> FindDirectMessageAsync(global::Google.Apps.Chat.V1.FindDirectMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindDirectMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the existing direct message with the specified user. If no direct
      /// message space is found, returns a `404 NOT_FOUND` error. For an example,
      /// see
      /// [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
      ///
      /// With [app
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
      /// returns the direct message space between the specified user and the calling
      /// Chat app.
      ///
      /// With [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
      /// returns the direct message space between the specified user and the
      /// authenticated user.
      ///
      /// // Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Space> FindDirectMessageAsync(global::Google.Apps.Chat.V1.FindDirectMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindDirectMessage, null, options, request);
      }
      /// <summary>
      /// Creates a membership for the calling Chat app, a user, or a Google Group.
      /// Creating memberships for other Chat apps isn't supported.
      /// When creating a membership, if the specified member has their auto-accept
      /// policy turned off, then they're invited, and must accept the space
      /// invitation before joining. Otherwise, creating a membership adds the member
      /// directly to the specified space.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      ///
      /// For example usage, see:
      ///
      /// - [Invite or add a user to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
      ///
      /// - [Invite or add a Google Group to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
      ///
      /// - [Add the Chat app to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Membership CreateMembership(global::Google.Apps.Chat.V1.CreateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a membership for the calling Chat app, a user, or a Google Group.
      /// Creating memberships for other Chat apps isn't supported.
      /// When creating a membership, if the specified member has their auto-accept
      /// policy turned off, then they're invited, and must accept the space
      /// invitation before joining. Otherwise, creating a membership adds the member
      /// directly to the specified space.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      ///
      /// For example usage, see:
      ///
      /// - [Invite or add a user to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
      ///
      /// - [Invite or add a Google Group to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
      ///
      /// - [Add the Chat app to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Membership CreateMembership(global::Google.Apps.Chat.V1.CreateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMembership, null, options, request);
      }
      /// <summary>
      /// Creates a membership for the calling Chat app, a user, or a Google Group.
      /// Creating memberships for other Chat apps isn't supported.
      /// When creating a membership, if the specified member has their auto-accept
      /// policy turned off, then they're invited, and must accept the space
      /// invitation before joining. Otherwise, creating a membership adds the member
      /// directly to the specified space.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      ///
      /// For example usage, see:
      ///
      /// - [Invite or add a user to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
      ///
      /// - [Invite or add a Google Group to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
      ///
      /// - [Add the Chat app to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Membership> CreateMembershipAsync(global::Google.Apps.Chat.V1.CreateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a membership for the calling Chat app, a user, or a Google Group.
      /// Creating memberships for other Chat apps isn't supported.
      /// When creating a membership, if the specified member has their auto-accept
      /// policy turned off, then they're invited, and must accept the space
      /// invitation before joining. Otherwise, creating a membership adds the member
      /// directly to the specified space.
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      ///
      /// For example usage, see:
      ///
      /// - [Invite or add a user to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
      ///
      /// - [Invite or add a Google Group to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
      ///
      /// - [Add the Chat app to a
      /// space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Membership> CreateMembershipAsync(global::Google.Apps.Chat.V1.CreateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMembership, null, options, request);
      }
      /// <summary>
      /// Updates a membership. For an example, see [Update a user's membership in
      /// a space](https://developers.google.com/workspace/chat/update-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Membership UpdateMembership(global::Google.Apps.Chat.V1.UpdateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a membership. For an example, see [Update a user's membership in
      /// a space](https://developers.google.com/workspace/chat/update-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Membership UpdateMembership(global::Google.Apps.Chat.V1.UpdateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMembership, null, options, request);
      }
      /// <summary>
      /// Updates a membership. For an example, see [Update a user's membership in
      /// a space](https://developers.google.com/workspace/chat/update-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Membership> UpdateMembershipAsync(global::Google.Apps.Chat.V1.UpdateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a membership. For an example, see [Update a user's membership in
      /// a space](https://developers.google.com/workspace/chat/update-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Membership> UpdateMembershipAsync(global::Google.Apps.Chat.V1.UpdateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMembership, null, options, request);
      }
      /// <summary>
      /// Deletes a membership. For an example, see
      /// [Remove a user or a Google Chat app from a
      /// space](https://developers.google.com/workspace/chat/delete-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Membership DeleteMembership(global::Google.Apps.Chat.V1.DeleteMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a membership. For an example, see
      /// [Remove a user or a Google Chat app from a
      /// space](https://developers.google.com/workspace/chat/delete-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Membership DeleteMembership(global::Google.Apps.Chat.V1.DeleteMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMembership, null, options, request);
      }
      /// <summary>
      /// Deletes a membership. For an example, see
      /// [Remove a user or a Google Chat app from a
      /// space](https://developers.google.com/workspace/chat/delete-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Membership> DeleteMembershipAsync(global::Google.Apps.Chat.V1.DeleteMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a membership. For an example, see
      /// [Remove a user or a Google Chat app from a
      /// space](https://developers.google.com/workspace/chat/delete-members).
      ///
      /// Supports the following types of
      /// [authentication](https://developers.google.com/workspace/chat/authenticate-authorize):
      ///
      /// - [App
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
      /// with [administrator approval](https://support.google.com/a?p=chat-app-auth)
      /// in [Developer Preview](https://developers.google.com/workspace/preview)
      ///
      /// - [User
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
      /// You can authenticate and authorize this method with administrator
      /// privileges by setting the `use_admin_access` field in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Membership> DeleteMembershipAsync(global::Google.Apps.Chat.V1.DeleteMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMembership, null, options, request);
      }
      /// <summary>
      /// Creates a reaction and adds it to a message. For an example, see
      /// [Add a reaction to a
      /// message](https://developers.google.com/workspace/chat/create-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Reaction CreateReaction(global::Google.Apps.Chat.V1.CreateReactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a reaction and adds it to a message. For an example, see
      /// [Add a reaction to a
      /// message](https://developers.google.com/workspace/chat/create-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.Reaction CreateReaction(global::Google.Apps.Chat.V1.CreateReactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateReaction, null, options, request);
      }
      /// <summary>
      /// Creates a reaction and adds it to a message. For an example, see
      /// [Add a reaction to a
      /// message](https://developers.google.com/workspace/chat/create-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Reaction> CreateReactionAsync(global::Google.Apps.Chat.V1.CreateReactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a reaction and adds it to a message. For an example, see
      /// [Add a reaction to a
      /// message](https://developers.google.com/workspace/chat/create-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.Reaction> CreateReactionAsync(global::Google.Apps.Chat.V1.CreateReactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateReaction, null, options, request);
      }
      /// <summary>
      /// Lists reactions to a message. For an example, see
      /// [List reactions for a
      /// message](https://developers.google.com/workspace/chat/list-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListReactionsResponse ListReactions(global::Google.Apps.Chat.V1.ListReactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListReactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists reactions to a message. For an example, see
      /// [List reactions for a
      /// message](https://developers.google.com/workspace/chat/list-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListReactionsResponse ListReactions(global::Google.Apps.Chat.V1.ListReactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListReactions, null, options, request);
      }
      /// <summary>
      /// Lists reactions to a message. For an example, see
      /// [List reactions for a
      /// message](https://developers.google.com/workspace/chat/list-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListReactionsResponse> ListReactionsAsync(global::Google.Apps.Chat.V1.ListReactionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListReactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists reactions to a message. For an example, see
      /// [List reactions for a
      /// message](https://developers.google.com/workspace/chat/list-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListReactionsResponse> ListReactionsAsync(global::Google.Apps.Chat.V1.ListReactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListReactions, null, options, request);
      }
      /// <summary>
      /// Deletes a reaction to a message. For an example, see
      /// [Delete a
      /// reaction](https://developers.google.com/workspace/chat/delete-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteReaction(global::Google.Apps.Chat.V1.DeleteReactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a reaction to a message. For an example, see
      /// [Delete a
      /// reaction](https://developers.google.com/workspace/chat/delete-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteReaction(global::Google.Apps.Chat.V1.DeleteReactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteReaction, null, options, request);
      }
      /// <summary>
      /// Deletes a reaction to a message. For an example, see
      /// [Delete a
      /// reaction](https://developers.google.com/workspace/chat/delete-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteReactionAsync(global::Google.Apps.Chat.V1.DeleteReactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteReactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a reaction to a message. For an example, see
      /// [Delete a
      /// reaction](https://developers.google.com/workspace/chat/delete-reactions).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteReactionAsync(global::Google.Apps.Chat.V1.DeleteReactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteReaction, null, options, request);
      }
      /// <summary>
      /// Returns details about a user's read state within a space, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// space read
      /// state](https://developers.google.com/workspace/chat/get-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.SpaceReadState GetSpaceReadState(global::Google.Apps.Chat.V1.GetSpaceReadStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpaceReadState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a user's read state within a space, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// space read
      /// state](https://developers.google.com/workspace/chat/get-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.SpaceReadState GetSpaceReadState(global::Google.Apps.Chat.V1.GetSpaceReadStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSpaceReadState, null, options, request);
      }
      /// <summary>
      /// Returns details about a user's read state within a space, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// space read
      /// state](https://developers.google.com/workspace/chat/get-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.SpaceReadState> GetSpaceReadStateAsync(global::Google.Apps.Chat.V1.GetSpaceReadStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpaceReadStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a user's read state within a space, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// space read
      /// state](https://developers.google.com/workspace/chat/get-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.SpaceReadState> GetSpaceReadStateAsync(global::Google.Apps.Chat.V1.GetSpaceReadStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSpaceReadState, null, options, request);
      }
      /// <summary>
      /// Updates a user's read state within a space, used to identify read and
      /// unread messages. For an example, see [Update a user's space read
      /// state](https://developers.google.com/workspace/chat/update-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.SpaceReadState UpdateSpaceReadState(global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSpaceReadState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a user's read state within a space, used to identify read and
      /// unread messages. For an example, see [Update a user's space read
      /// state](https://developers.google.com/workspace/chat/update-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.SpaceReadState UpdateSpaceReadState(global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSpaceReadState, null, options, request);
      }
      /// <summary>
      /// Updates a user's read state within a space, used to identify read and
      /// unread messages. For an example, see [Update a user's space read
      /// state](https://developers.google.com/workspace/chat/update-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.SpaceReadState> UpdateSpaceReadStateAsync(global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSpaceReadStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a user's read state within a space, used to identify read and
      /// unread messages. For an example, see [Update a user's space read
      /// state](https://developers.google.com/workspace/chat/update-space-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.SpaceReadState> UpdateSpaceReadStateAsync(global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSpaceReadState, null, options, request);
      }
      /// <summary>
      /// Returns details about a user's read state within a thread, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// thread read
      /// state](https://developers.google.com/workspace/chat/get-thread-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ThreadReadState GetThreadReadState(global::Google.Apps.Chat.V1.GetThreadReadStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetThreadReadState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a user's read state within a thread, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// thread read
      /// state](https://developers.google.com/workspace/chat/get-thread-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ThreadReadState GetThreadReadState(global::Google.Apps.Chat.V1.GetThreadReadStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetThreadReadState, null, options, request);
      }
      /// <summary>
      /// Returns details about a user's read state within a thread, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// thread read
      /// state](https://developers.google.com/workspace/chat/get-thread-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ThreadReadState> GetThreadReadStateAsync(global::Google.Apps.Chat.V1.GetThreadReadStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetThreadReadStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns details about a user's read state within a thread, used to identify
      /// read and unread messages. For an example, see [Get details about a user's
      /// thread read
      /// state](https://developers.google.com/workspace/chat/get-thread-read-state).
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ThreadReadState> GetThreadReadStateAsync(global::Google.Apps.Chat.V1.GetThreadReadStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetThreadReadState, null, options, request);
      }
      /// <summary>
      /// Returns an event from a Google Chat space. The [event
      /// payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the resource that changed. For example,
      /// if you request an event about a new message but the message was later
      /// updated, the server returns the updated `Message` resource in the event
      /// payload.
      ///
      /// Note: The `permissionSettings` field is not returned in the Space
      /// object of the Space event data for this request.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To get an event, the authenticated user must be a member of the space.
      ///
      /// For an example, see [Get details about an
      /// event from a Google Chat
      /// space](https://developers.google.com/workspace/chat/get-space-event).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.SpaceEvent GetSpaceEvent(global::Google.Apps.Chat.V1.GetSpaceEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpaceEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns an event from a Google Chat space. The [event
      /// payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the resource that changed. For example,
      /// if you request an event about a new message but the message was later
      /// updated, the server returns the updated `Message` resource in the event
      /// payload.
      ///
      /// Note: The `permissionSettings` field is not returned in the Space
      /// object of the Space event data for this request.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To get an event, the authenticated user must be a member of the space.
      ///
      /// For an example, see [Get details about an
      /// event from a Google Chat
      /// space](https://developers.google.com/workspace/chat/get-space-event).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.SpaceEvent GetSpaceEvent(global::Google.Apps.Chat.V1.GetSpaceEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSpaceEvent, null, options, request);
      }
      /// <summary>
      /// Returns an event from a Google Chat space. The [event
      /// payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the resource that changed. For example,
      /// if you request an event about a new message but the message was later
      /// updated, the server returns the updated `Message` resource in the event
      /// payload.
      ///
      /// Note: The `permissionSettings` field is not returned in the Space
      /// object of the Space event data for this request.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To get an event, the authenticated user must be a member of the space.
      ///
      /// For an example, see [Get details about an
      /// event from a Google Chat
      /// space](https://developers.google.com/workspace/chat/get-space-event).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.SpaceEvent> GetSpaceEventAsync(global::Google.Apps.Chat.V1.GetSpaceEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpaceEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns an event from a Google Chat space. The [event
      /// payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the resource that changed. For example,
      /// if you request an event about a new message but the message was later
      /// updated, the server returns the updated `Message` resource in the event
      /// payload.
      ///
      /// Note: The `permissionSettings` field is not returned in the Space
      /// object of the Space event data for this request.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To get an event, the authenticated user must be a member of the space.
      ///
      /// For an example, see [Get details about an
      /// event from a Google Chat
      /// space](https://developers.google.com/workspace/chat/get-space-event).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.SpaceEvent> GetSpaceEventAsync(global::Google.Apps.Chat.V1.GetSpaceEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSpaceEvent, null, options, request);
      }
      /// <summary>
      /// Lists events from a Google Chat space. For each event, the
      /// [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the Chat resource. For example, if you
      /// list events about new space members, the server returns `Membership`
      /// resources that contain the latest membership details. If new members were
      /// removed during the requested period, the event payload contains an empty
      /// `Membership` resource.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To list events, the authenticated user must be a member of the space.
      ///
      /// For an example, see [List events from a Google Chat
      /// space](https://developers.google.com/workspace/chat/list-space-events).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListSpaceEventsResponse ListSpaceEvents(global::Google.Apps.Chat.V1.ListSpaceEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSpaceEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists events from a Google Chat space. For each event, the
      /// [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the Chat resource. For example, if you
      /// list events about new space members, the server returns `Membership`
      /// resources that contain the latest membership details. If new members were
      /// removed during the requested period, the event payload contains an empty
      /// `Membership` resource.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To list events, the authenticated user must be a member of the space.
      ///
      /// For an example, see [List events from a Google Chat
      /// space](https://developers.google.com/workspace/chat/list-space-events).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Apps.Chat.V1.ListSpaceEventsResponse ListSpaceEvents(global::Google.Apps.Chat.V1.ListSpaceEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSpaceEvents, null, options, request);
      }
      /// <summary>
      /// Lists events from a Google Chat space. For each event, the
      /// [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the Chat resource. For example, if you
      /// list events about new space members, the server returns `Membership`
      /// resources that contain the latest membership details. If new members were
      /// removed during the requested period, the event payload contains an empty
      /// `Membership` resource.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To list events, the authenticated user must be a member of the space.
      ///
      /// For an example, see [List events from a Google Chat
      /// space](https://developers.google.com/workspace/chat/list-space-events).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListSpaceEventsResponse> ListSpaceEventsAsync(global::Google.Apps.Chat.V1.ListSpaceEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSpaceEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists events from a Google Chat space. For each event, the
      /// [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
      /// contains the most recent version of the Chat resource. For example, if you
      /// list events about new space members, the server returns `Membership`
      /// resources that contain the latest membership details. If new members were
      /// removed during the requested period, the event payload contains an empty
      /// `Membership` resource.
      ///
      /// Requires [user
      /// authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
      /// To list events, the authenticated user must be a member of the space.
      ///
      /// For an example, see [List events from a Google Chat
      /// space](https://developers.google.com/workspace/chat/list-space-events).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Apps.Chat.V1.ListSpaceEventsResponse> ListSpaceEventsAsync(global::Google.Apps.Chat.V1.ListSpaceEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSpaceEvents, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ChatServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChatServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ChatServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateMessage, serviceImpl.CreateMessage)
          .AddMethod(__Method_ListMessages, serviceImpl.ListMessages)
          .AddMethod(__Method_ListMemberships, serviceImpl.ListMemberships)
          .AddMethod(__Method_GetMembership, serviceImpl.GetMembership)
          .AddMethod(__Method_GetMessage, serviceImpl.GetMessage)
          .AddMethod(__Method_UpdateMessage, serviceImpl.UpdateMessage)
          .AddMethod(__Method_DeleteMessage, serviceImpl.DeleteMessage)
          .AddMethod(__Method_GetAttachment, serviceImpl.GetAttachment)
          .AddMethod(__Method_UploadAttachment, serviceImpl.UploadAttachment)
          .AddMethod(__Method_ListSpaces, serviceImpl.ListSpaces)
          .AddMethod(__Method_SearchSpaces, serviceImpl.SearchSpaces)
          .AddMethod(__Method_GetSpace, serviceImpl.GetSpace)
          .AddMethod(__Method_CreateSpace, serviceImpl.CreateSpace)
          .AddMethod(__Method_SetUpSpace, serviceImpl.SetUpSpace)
          .AddMethod(__Method_UpdateSpace, serviceImpl.UpdateSpace)
          .AddMethod(__Method_DeleteSpace, serviceImpl.DeleteSpace)
          .AddMethod(__Method_CompleteImportSpace, serviceImpl.CompleteImportSpace)
          .AddMethod(__Method_FindDirectMessage, serviceImpl.FindDirectMessage)
          .AddMethod(__Method_CreateMembership, serviceImpl.CreateMembership)
          .AddMethod(__Method_UpdateMembership, serviceImpl.UpdateMembership)
          .AddMethod(__Method_DeleteMembership, serviceImpl.DeleteMembership)
          .AddMethod(__Method_CreateReaction, serviceImpl.CreateReaction)
          .AddMethod(__Method_ListReactions, serviceImpl.ListReactions)
          .AddMethod(__Method_DeleteReaction, serviceImpl.DeleteReaction)
          .AddMethod(__Method_GetSpaceReadState, serviceImpl.GetSpaceReadState)
          .AddMethod(__Method_UpdateSpaceReadState, serviceImpl.UpdateSpaceReadState)
          .AddMethod(__Method_GetThreadReadState, serviceImpl.GetThreadReadState)
          .AddMethod(__Method_GetSpaceEvent, serviceImpl.GetSpaceEvent)
          .AddMethod(__Method_ListSpaceEvents, serviceImpl.ListSpaceEvents).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ChatServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.CreateMessageRequest, global::Google.Apps.Chat.V1.Message>(serviceImpl.CreateMessage));
      serviceBinder.AddMethod(__Method_ListMessages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.ListMessagesRequest, global::Google.Apps.Chat.V1.ListMessagesResponse>(serviceImpl.ListMessages));
      serviceBinder.AddMethod(__Method_ListMemberships, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.ListMembershipsRequest, global::Google.Apps.Chat.V1.ListMembershipsResponse>(serviceImpl.ListMemberships));
      serviceBinder.AddMethod(__Method_GetMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.GetMembershipRequest, global::Google.Apps.Chat.V1.Membership>(serviceImpl.GetMembership));
      serviceBinder.AddMethod(__Method_GetMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.GetMessageRequest, global::Google.Apps.Chat.V1.Message>(serviceImpl.GetMessage));
      serviceBinder.AddMethod(__Method_UpdateMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.UpdateMessageRequest, global::Google.Apps.Chat.V1.Message>(serviceImpl.UpdateMessage));
      serviceBinder.AddMethod(__Method_DeleteMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.DeleteMessageRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteMessage));
      serviceBinder.AddMethod(__Method_GetAttachment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.GetAttachmentRequest, global::Google.Apps.Chat.V1.Attachment>(serviceImpl.GetAttachment));
      serviceBinder.AddMethod(__Method_UploadAttachment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.UploadAttachmentRequest, global::Google.Apps.Chat.V1.UploadAttachmentResponse>(serviceImpl.UploadAttachment));
      serviceBinder.AddMethod(__Method_ListSpaces, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.ListSpacesRequest, global::Google.Apps.Chat.V1.ListSpacesResponse>(serviceImpl.ListSpaces));
      serviceBinder.AddMethod(__Method_SearchSpaces, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.SearchSpacesRequest, global::Google.Apps.Chat.V1.SearchSpacesResponse>(serviceImpl.SearchSpaces));
      serviceBinder.AddMethod(__Method_GetSpace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.GetSpaceRequest, global::Google.Apps.Chat.V1.Space>(serviceImpl.GetSpace));
      serviceBinder.AddMethod(__Method_CreateSpace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.CreateSpaceRequest, global::Google.Apps.Chat.V1.Space>(serviceImpl.CreateSpace));
      serviceBinder.AddMethod(__Method_SetUpSpace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.SetUpSpaceRequest, global::Google.Apps.Chat.V1.Space>(serviceImpl.SetUpSpace));
      serviceBinder.AddMethod(__Method_UpdateSpace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.UpdateSpaceRequest, global::Google.Apps.Chat.V1.Space>(serviceImpl.UpdateSpace));
      serviceBinder.AddMethod(__Method_DeleteSpace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.DeleteSpaceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteSpace));
      serviceBinder.AddMethod(__Method_CompleteImportSpace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.CompleteImportSpaceRequest, global::Google.Apps.Chat.V1.CompleteImportSpaceResponse>(serviceImpl.CompleteImportSpace));
      serviceBinder.AddMethod(__Method_FindDirectMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.FindDirectMessageRequest, global::Google.Apps.Chat.V1.Space>(serviceImpl.FindDirectMessage));
      serviceBinder.AddMethod(__Method_CreateMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.CreateMembershipRequest, global::Google.Apps.Chat.V1.Membership>(serviceImpl.CreateMembership));
      serviceBinder.AddMethod(__Method_UpdateMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.UpdateMembershipRequest, global::Google.Apps.Chat.V1.Membership>(serviceImpl.UpdateMembership));
      serviceBinder.AddMethod(__Method_DeleteMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.DeleteMembershipRequest, global::Google.Apps.Chat.V1.Membership>(serviceImpl.DeleteMembership));
      serviceBinder.AddMethod(__Method_CreateReaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.CreateReactionRequest, global::Google.Apps.Chat.V1.Reaction>(serviceImpl.CreateReaction));
      serviceBinder.AddMethod(__Method_ListReactions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.ListReactionsRequest, global::Google.Apps.Chat.V1.ListReactionsResponse>(serviceImpl.ListReactions));
      serviceBinder.AddMethod(__Method_DeleteReaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.DeleteReactionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteReaction));
      serviceBinder.AddMethod(__Method_GetSpaceReadState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.GetSpaceReadStateRequest, global::Google.Apps.Chat.V1.SpaceReadState>(serviceImpl.GetSpaceReadState));
      serviceBinder.AddMethod(__Method_UpdateSpaceReadState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.UpdateSpaceReadStateRequest, global::Google.Apps.Chat.V1.SpaceReadState>(serviceImpl.UpdateSpaceReadState));
      serviceBinder.AddMethod(__Method_GetThreadReadState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.GetThreadReadStateRequest, global::Google.Apps.Chat.V1.ThreadReadState>(serviceImpl.GetThreadReadState));
      serviceBinder.AddMethod(__Method_GetSpaceEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.GetSpaceEventRequest, global::Google.Apps.Chat.V1.SpaceEvent>(serviceImpl.GetSpaceEvent));
      serviceBinder.AddMethod(__Method_ListSpaceEvents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Apps.Chat.V1.ListSpaceEventsRequest, global::Google.Apps.Chat.V1.ListSpaceEventsResponse>(serviceImpl.ListSpaceEvents));
    }

  }
}
#endregion
