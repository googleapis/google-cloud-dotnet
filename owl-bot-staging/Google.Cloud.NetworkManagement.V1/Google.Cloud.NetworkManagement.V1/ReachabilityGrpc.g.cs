// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/networkmanagement/v1/reachability.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.NetworkManagement.V1 {
  /// <summary>
  /// The Reachability service in the Google Cloud Network Management API provides
  /// services that analyze the reachability within a single Google Virtual Private
  /// Cloud (VPC) network, between peered VPC networks, between VPC and on-premises
  /// networks, or between VPC networks and internet hosts. A reachability analysis
  /// is based on Google Cloud network configurations.
  ///
  /// You can use the analysis results to verify these configurations and
  /// to troubleshoot connectivity issues.
  /// </summary>
  public static partial class ReachabilityService
  {
    static readonly string __ServiceName = "google.cloud.networkmanagement.v1.ReachabilityService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest> __Marshaller_google_cloud_networkmanagement_v1_ListConnectivityTestsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse> __Marshaller_google_cloud_networkmanagement_v1_ListConnectivityTestsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest> __Marshaller_google_cloud_networkmanagement_v1_GetConnectivityTestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.NetworkManagement.V1.ConnectivityTest> __Marshaller_google_cloud_networkmanagement_v1_ConnectivityTest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.NetworkManagement.V1.ConnectivityTest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest> __Marshaller_google_cloud_networkmanagement_v1_CreateConnectivityTestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest> __Marshaller_google_cloud_networkmanagement_v1_UpdateConnectivityTestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest> __Marshaller_google_cloud_networkmanagement_v1_RerunConnectivityTestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest> __Marshaller_google_cloud_networkmanagement_v1_DeleteConnectivityTestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest, global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse> __Method_ListConnectivityTests = new grpc::Method<global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest, global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConnectivityTests",
        __Marshaller_google_cloud_networkmanagement_v1_ListConnectivityTestsRequest,
        __Marshaller_google_cloud_networkmanagement_v1_ListConnectivityTestsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest, global::Google.Cloud.NetworkManagement.V1.ConnectivityTest> __Method_GetConnectivityTest = new grpc::Method<global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest, global::Google.Cloud.NetworkManagement.V1.ConnectivityTest>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnectivityTest",
        __Marshaller_google_cloud_networkmanagement_v1_GetConnectivityTestRequest,
        __Marshaller_google_cloud_networkmanagement_v1_ConnectivityTest);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest, global::Google.LongRunning.Operation> __Method_CreateConnectivityTest = new grpc::Method<global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateConnectivityTest",
        __Marshaller_google_cloud_networkmanagement_v1_CreateConnectivityTestRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest, global::Google.LongRunning.Operation> __Method_UpdateConnectivityTest = new grpc::Method<global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateConnectivityTest",
        __Marshaller_google_cloud_networkmanagement_v1_UpdateConnectivityTestRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest, global::Google.LongRunning.Operation> __Method_RerunConnectivityTest = new grpc::Method<global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RerunConnectivityTest",
        __Marshaller_google_cloud_networkmanagement_v1_RerunConnectivityTestRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest, global::Google.LongRunning.Operation> __Method_DeleteConnectivityTest = new grpc::Method<global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConnectivityTest",
        __Marshaller_google_cloud_networkmanagement_v1_DeleteConnectivityTestRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.NetworkManagement.V1.ReachabilityReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ReachabilityService</summary>
    [grpc::BindServiceMethod(typeof(ReachabilityService), "BindService")]
    public abstract partial class ReachabilityServiceBase
    {
      /// <summary>
      /// Lists all Connectivity Tests owned by a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse> ListConnectivityTests(global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the details of a specific Connectivity Test.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.NetworkManagement.V1.ConnectivityTest> GetConnectivityTest(global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new Connectivity Test.
      /// After you create a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, containing non-existent resources in the network, or you
      /// don't have read permissions to the network configurations of listed
      /// projects), then the reachability result returns a value of `UNKNOWN`.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are
      /// incomplete, the reachability result returns a value of
      /// &lt;code>AMBIGUOUS&lt;/code>. For more information,
      /// see the Connectivity Test documentation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateConnectivityTest(global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the configuration of an existing `ConnectivityTest`.
      /// After you update a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      /// The Reachability state in the test resource is updated with the new result.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, they contain non-existent resources in the network, or the
      /// user does not have read permissions to the network configurations of
      /// listed projects), then the reachability result returns a value of
      /// &lt;code>UNKNOWN&lt;/code>.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are incomplete, the
      /// reachability result returns a value of `AMBIGUOUS`. See the documentation
      /// in `ConnectivityTest` for more details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateConnectivityTest(global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Rerun an existing `ConnectivityTest`.
      /// After the user triggers the rerun, the reachability analysis is performed
      /// as part of the long running operation, which completes when the analysis
      /// completes.
      ///
      /// Even though the test configuration remains the same, the reachability
      /// result may change due to underlying network configuration changes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` become invalid (for
      /// example, specified resources are deleted in the network, or you lost
      /// read permissions to the network configurations of listed projects), then
      /// the reachability result returns a value of `UNKNOWN`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RerunConnectivityTest(global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a specific `ConnectivityTest`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteConnectivityTest(global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReachabilityService</summary>
    public partial class ReachabilityServiceClient : grpc::ClientBase<ReachabilityServiceClient>
    {
      /// <summary>Creates a new client for ReachabilityService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ReachabilityServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReachabilityService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ReachabilityServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ReachabilityServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ReachabilityServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists all Connectivity Tests owned by a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse ListConnectivityTests(global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConnectivityTests(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all Connectivity Tests owned by a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse ListConnectivityTests(global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConnectivityTests, null, options, request);
      }
      /// <summary>
      /// Lists all Connectivity Tests owned by a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse> ListConnectivityTestsAsync(global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConnectivityTestsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all Connectivity Tests owned by a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse> ListConnectivityTestsAsync(global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConnectivityTests, null, options, request);
      }
      /// <summary>
      /// Gets the details of a specific Connectivity Test.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.NetworkManagement.V1.ConnectivityTest GetConnectivityTest(global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectivityTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a specific Connectivity Test.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.NetworkManagement.V1.ConnectivityTest GetConnectivityTest(global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Gets the details of a specific Connectivity Test.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.NetworkManagement.V1.ConnectivityTest> GetConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectivityTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a specific Connectivity Test.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.NetworkManagement.V1.ConnectivityTest> GetConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Creates a new Connectivity Test.
      /// After you create a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, containing non-existent resources in the network, or you
      /// don't have read permissions to the network configurations of listed
      /// projects), then the reachability result returns a value of `UNKNOWN`.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are
      /// incomplete, the reachability result returns a value of
      /// &lt;code>AMBIGUOUS&lt;/code>. For more information,
      /// see the Connectivity Test documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateConnectivityTest(global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnectivityTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Connectivity Test.
      /// After you create a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, containing non-existent resources in the network, or you
      /// don't have read permissions to the network configurations of listed
      /// projects), then the reachability result returns a value of `UNKNOWN`.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are
      /// incomplete, the reachability result returns a value of
      /// &lt;code>AMBIGUOUS&lt;/code>. For more information,
      /// see the Connectivity Test documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateConnectivityTest(global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Creates a new Connectivity Test.
      /// After you create a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, containing non-existent resources in the network, or you
      /// don't have read permissions to the network configurations of listed
      /// projects), then the reachability result returns a value of `UNKNOWN`.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are
      /// incomplete, the reachability result returns a value of
      /// &lt;code>AMBIGUOUS&lt;/code>. For more information,
      /// see the Connectivity Test documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnectivityTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Connectivity Test.
      /// After you create a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, containing non-existent resources in the network, or you
      /// don't have read permissions to the network configurations of listed
      /// projects), then the reachability result returns a value of `UNKNOWN`.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are
      /// incomplete, the reachability result returns a value of
      /// &lt;code>AMBIGUOUS&lt;/code>. For more information,
      /// see the Connectivity Test documentation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Updates the configuration of an existing `ConnectivityTest`.
      /// After you update a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      /// The Reachability state in the test resource is updated with the new result.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, they contain non-existent resources in the network, or the
      /// user does not have read permissions to the network configurations of
      /// listed projects), then the reachability result returns a value of
      /// &lt;code>UNKNOWN&lt;/code>.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are incomplete, the
      /// reachability result returns a value of `AMBIGUOUS`. See the documentation
      /// in `ConnectivityTest` for more details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateConnectivityTest(global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConnectivityTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the configuration of an existing `ConnectivityTest`.
      /// After you update a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      /// The Reachability state in the test resource is updated with the new result.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, they contain non-existent resources in the network, or the
      /// user does not have read permissions to the network configurations of
      /// listed projects), then the reachability result returns a value of
      /// &lt;code>UNKNOWN&lt;/code>.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are incomplete, the
      /// reachability result returns a value of `AMBIGUOUS`. See the documentation
      /// in `ConnectivityTest` for more details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateConnectivityTest(global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Updates the configuration of an existing `ConnectivityTest`.
      /// After you update a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      /// The Reachability state in the test resource is updated with the new result.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, they contain non-existent resources in the network, or the
      /// user does not have read permissions to the network configurations of
      /// listed projects), then the reachability result returns a value of
      /// &lt;code>UNKNOWN&lt;/code>.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are incomplete, the
      /// reachability result returns a value of `AMBIGUOUS`. See the documentation
      /// in `ConnectivityTest` for more details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConnectivityTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the configuration of an existing `ConnectivityTest`.
      /// After you update a test, the reachability analysis is performed as part
      /// of the long running operation, which completes when the analysis completes.
      /// The Reachability state in the test resource is updated with the new result.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are invalid
      /// (for example, they contain non-existent resources in the network, or the
      /// user does not have read permissions to the network configurations of
      /// listed projects), then the reachability result returns a value of
      /// &lt;code>UNKNOWN&lt;/code>.
      ///
      /// If the endpoint specifications in `ConnectivityTest` are incomplete, the
      /// reachability result returns a value of `AMBIGUOUS`. See the documentation
      /// in `ConnectivityTest` for more details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Rerun an existing `ConnectivityTest`.
      /// After the user triggers the rerun, the reachability analysis is performed
      /// as part of the long running operation, which completes when the analysis
      /// completes.
      ///
      /// Even though the test configuration remains the same, the reachability
      /// result may change due to underlying network configuration changes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` become invalid (for
      /// example, specified resources are deleted in the network, or you lost
      /// read permissions to the network configurations of listed projects), then
      /// the reachability result returns a value of `UNKNOWN`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RerunConnectivityTest(global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RerunConnectivityTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rerun an existing `ConnectivityTest`.
      /// After the user triggers the rerun, the reachability analysis is performed
      /// as part of the long running operation, which completes when the analysis
      /// completes.
      ///
      /// Even though the test configuration remains the same, the reachability
      /// result may change due to underlying network configuration changes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` become invalid (for
      /// example, specified resources are deleted in the network, or you lost
      /// read permissions to the network configurations of listed projects), then
      /// the reachability result returns a value of `UNKNOWN`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RerunConnectivityTest(global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RerunConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Rerun an existing `ConnectivityTest`.
      /// After the user triggers the rerun, the reachability analysis is performed
      /// as part of the long running operation, which completes when the analysis
      /// completes.
      ///
      /// Even though the test configuration remains the same, the reachability
      /// result may change due to underlying network configuration changes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` become invalid (for
      /// example, specified resources are deleted in the network, or you lost
      /// read permissions to the network configurations of listed projects), then
      /// the reachability result returns a value of `UNKNOWN`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RerunConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RerunConnectivityTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rerun an existing `ConnectivityTest`.
      /// After the user triggers the rerun, the reachability analysis is performed
      /// as part of the long running operation, which completes when the analysis
      /// completes.
      ///
      /// Even though the test configuration remains the same, the reachability
      /// result may change due to underlying network configuration changes.
      ///
      /// If the endpoint specifications in `ConnectivityTest` become invalid (for
      /// example, specified resources are deleted in the network, or you lost
      /// read permissions to the network configurations of listed projects), then
      /// the reachability result returns a value of `UNKNOWN`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RerunConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RerunConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Deletes a specific `ConnectivityTest`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteConnectivityTest(global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnectivityTest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific `ConnectivityTest`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteConnectivityTest(global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConnectivityTest, null, options, request);
      }
      /// <summary>
      /// Deletes a specific `ConnectivityTest`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnectivityTestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific `ConnectivityTest`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteConnectivityTestAsync(global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConnectivityTest, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ReachabilityServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReachabilityServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ReachabilityServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListConnectivityTests, serviceImpl.ListConnectivityTests)
          .AddMethod(__Method_GetConnectivityTest, serviceImpl.GetConnectivityTest)
          .AddMethod(__Method_CreateConnectivityTest, serviceImpl.CreateConnectivityTest)
          .AddMethod(__Method_UpdateConnectivityTest, serviceImpl.UpdateConnectivityTest)
          .AddMethod(__Method_RerunConnectivityTest, serviceImpl.RerunConnectivityTest)
          .AddMethod(__Method_DeleteConnectivityTest, serviceImpl.DeleteConnectivityTest).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ReachabilityServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListConnectivityTests, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsRequest, global::Google.Cloud.NetworkManagement.V1.ListConnectivityTestsResponse>(serviceImpl.ListConnectivityTests));
      serviceBinder.AddMethod(__Method_GetConnectivityTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.NetworkManagement.V1.GetConnectivityTestRequest, global::Google.Cloud.NetworkManagement.V1.ConnectivityTest>(serviceImpl.GetConnectivityTest));
      serviceBinder.AddMethod(__Method_CreateConnectivityTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.NetworkManagement.V1.CreateConnectivityTestRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateConnectivityTest));
      serviceBinder.AddMethod(__Method_UpdateConnectivityTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.NetworkManagement.V1.UpdateConnectivityTestRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateConnectivityTest));
      serviceBinder.AddMethod(__Method_RerunConnectivityTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.NetworkManagement.V1.RerunConnectivityTestRequest, global::Google.LongRunning.Operation>(serviceImpl.RerunConnectivityTest));
      serviceBinder.AddMethod(__Method_DeleteConnectivityTest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.NetworkManagement.V1.DeleteConnectivityTestRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteConnectivityTest));
    }

  }
}
#endregion
