// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/networkmanagement/v1/vpc_flow_logs_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.NetworkManagement.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/networkmanagement/v1/vpc_flow_logs_config.proto</summary>
  public static partial class VpcFlowLogsConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/networkmanagement/v1/vpc_flow_logs_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VpcFlowLogsConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjxnb29nbGUvY2xvdWQvbmV0d29ya21hbmFnZW1lbnQvdjEvdnBjX2Zsb3df",
            "bG9nc19jb25maWcucHJvdG8SIWdvb2dsZS5jbG91ZC5uZXR3b3JrbWFuYWdl",
            "bWVudC52MRofZ29vZ2xlL2FwaS9maWVsZF9iZWhhdmlvci5wcm90bxoZZ29v",
            "Z2xlL2FwaS9yZXNvdXJjZS5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVz",
            "dGFtcC5wcm90byKIDQoRVnBjRmxvd0xvZ3NDb25maWcSEQoEbmFtZRgBIAEo",
            "CUID4EEIEh0KC2Rlc2NyaXB0aW9uGAIgASgJQgPgQQFIAYgBARJTCgVzdGF0",
            "ZRgDIAEoDjI6Lmdvb2dsZS5jbG91ZC5uZXR3b3JrbWFuYWdlbWVudC52MS5W",
            "cGNGbG93TG9nc0NvbmZpZy5TdGF0ZUID4EEBSAKIAQEScAoUYWdncmVnYXRp",
            "b25faW50ZXJ2YWwYBCABKA4ySC5nb29nbGUuY2xvdWQubmV0d29ya21hbmFn",
            "ZW1lbnQudjEuVnBjRmxvd0xvZ3NDb25maWcuQWdncmVnYXRpb25JbnRlcnZh",
            "bEID4EEBSAOIAQESHwoNZmxvd19zYW1wbGluZxgFIAEoAkID4EEBSASIAQES",
            "WQoIbWV0YWRhdGEYBiABKA4yPS5nb29nbGUuY2xvdWQubmV0d29ya21hbmFn",
            "ZW1lbnQudjEuVnBjRmxvd0xvZ3NDb25maWcuTWV0YWRhdGFCA+BBAUgFiAEB",
            "EhwKD21ldGFkYXRhX2ZpZWxkcxgHIAMoCUID4EEBEh0KC2ZpbHRlcl9leHBy",
            "GAggASgJQgPgQQFIBogBARJxChV0YXJnZXRfcmVzb3VyY2Vfc3RhdGUYDCAB",
            "KA4ySC5nb29nbGUuY2xvdWQubmV0d29ya21hbmFnZW1lbnQudjEuVnBjRmxv",
            "d0xvZ3NDb25maWcuVGFyZ2V0UmVzb3VyY2VTdGF0ZUID4EEDSAeIAQESIQoX",
            "aW50ZXJjb25uZWN0X2F0dGFjaG1lbnQYZiABKAlIABIUCgp2cG5fdHVubmVs",
            "GGcgASgJSAASVQoGbGFiZWxzGAsgAygLMkAuZ29vZ2xlLmNsb3VkLm5ldHdv",
            "cmttYW5hZ2VtZW50LnYxLlZwY0Zsb3dMb2dzQ29uZmlnLkxhYmVsc0VudHJ5",
            "QgPgQQESNAoLY3JlYXRlX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wQgPgQQMSNAoLdXBkYXRlX3RpbWUYCiABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wQgPgQQMaLQoLTGFiZWxzRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASI5CgVTdGF0ZRIVChFTVEFURV9V",
            "TlNQRUNJRklFRBAAEgsKB0VOQUJMRUQQARIMCghESVNBQkxFRBACIrYBChNB",
            "Z2dyZWdhdGlvbkludGVydmFsEiQKIEFHR1JFR0FUSU9OX0lOVEVSVkFMX1VO",
            "U1BFQ0lGSUVEEAASEgoOSU5URVJWQUxfNV9TRUMQARITCg9JTlRFUlZBTF8z",
            "MF9TRUMQAhISCg5JTlRFUlZBTF8xX01JThADEhIKDklOVEVSVkFMXzVfTUlO",
            "EAQSEwoPSU5URVJWQUxfMTBfTUlOEAUSEwoPSU5URVJWQUxfMTVfTUlOEAYi",
            "bQoITWV0YWRhdGESGAoUTUVUQURBVEFfVU5TUEVDSUZJRUQQABIYChRJTkNM",
            "VURFX0FMTF9NRVRBREFUQRABEhgKFEVYQ0xVREVfQUxMX01FVEFEQVRBEAIS",
            "EwoPQ1VTVE9NX01FVEFEQVRBEAMifAoTVGFyZ2V0UmVzb3VyY2VTdGF0ZRIl",
            "CiFUQVJHRVRfUkVTT1VSQ0VfU1RBVEVfVU5TUEVDSUZJRUQQABIaChZUQVJH",
            "RVRfUkVTT1VSQ0VfRVhJU1RTEAESIgoeVEFSR0VUX1JFU09VUkNFX0RPRVNf",
            "Tk9UX0VYSVNUEAI6sgHqQa4BCjJuZXR3b3JrbWFuYWdlbWVudC5nb29nbGVh",
            "cGlzLmNvbS9WcGNGbG93TG9nc0NvbmZpZxJRcHJvamVjdHMve3Byb2plY3R9",
            "L2xvY2F0aW9ucy97bG9jYXRpb259L3ZwY0Zsb3dMb2dzQ29uZmlncy97dnBj",
            "X2Zsb3dfbG9nc19jb25maWd9KhJ2cGNGbG93TG9nc0NvbmZpZ3MyEXZwY0Zs",
            "b3dMb2dzQ29uZmlnQhEKD3RhcmdldF9yZXNvdXJjZUIOCgxfZGVzY3JpcHRp",
            "b25CCAoGX3N0YXRlQhcKFV9hZ2dyZWdhdGlvbl9pbnRlcnZhbEIQCg5fZmxv",
            "d19zYW1wbGluZ0ILCglfbWV0YWRhdGFCDgoMX2ZpbHRlcl9leHByQhgKFl90",
            "YXJnZXRfcmVzb3VyY2Vfc3RhdGVChQIKJWNvbS5nb29nbGUuY2xvdWQubmV0",
            "d29ya21hbmFnZW1lbnQudjFCFlZwY0Zsb3dMb2dzQ29uZmlnUHJvdG9QAVpT",
            "Y2xvdWQuZ29vZ2xlLmNvbS9nby9uZXR3b3JrbWFuYWdlbWVudC9hcGl2MS9u",
            "ZXR3b3JrbWFuYWdlbWVudHBiO25ldHdvcmttYW5hZ2VtZW50cGKqAiFHb29n",
            "bGUuQ2xvdWQuTmV0d29ya01hbmFnZW1lbnQuVjHKAiFHb29nbGVcQ2xvdWRc",
            "TmV0d29ya01hbmFnZW1lbnRcVjHqAiRHb29nbGU6OkNsb3VkOjpOZXR3b3Jr",
            "TWFuYWdlbWVudDo6VjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig), global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Parser, new[]{ "Name", "Description", "State", "AggregationInterval", "FlowSampling", "Metadata", "MetadataFields", "FilterExpr", "TargetResourceState", "InterconnectAttachment", "VpnTunnel", "Labels", "CreateTime", "UpdateTime" }, new[]{ "TargetResource", "Description", "State", "AggregationInterval", "FlowSampling", "Metadata", "FilterExpr", "TargetResourceState" }, new[]{ typeof(global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.State), typeof(global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.AggregationInterval), typeof(global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.Metadata), typeof(global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.TargetResourceState) }, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A configuration to generate VPC Flow Logs.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class VpcFlowLogsConfig : pb::IMessage<VpcFlowLogsConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VpcFlowLogsConfig> _parser = new pb::MessageParser<VpcFlowLogsConfig>(() => new VpcFlowLogsConfig());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VpcFlowLogsConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VpcFlowLogsConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VpcFlowLogsConfig(VpcFlowLogsConfig other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      description_ = other.description_;
      state_ = other.state_;
      aggregationInterval_ = other.aggregationInterval_;
      flowSampling_ = other.flowSampling_;
      metadata_ = other.metadata_;
      metadataFields_ = other.metadataFields_.Clone();
      filterExpr_ = other.filterExpr_;
      targetResourceState_ = other.targetResourceState_;
      labels_ = other.labels_.Clone();
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      switch (other.TargetResourceCase) {
        case TargetResourceOneofCase.InterconnectAttachment:
          InterconnectAttachment = other.InterconnectAttachment;
          break;
        case TargetResourceOneofCase.VpnTunnel:
          VpnTunnel = other.VpnTunnel;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VpcFlowLogsConfig Clone() {
      return new VpcFlowLogsConfig(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Identifier. Unique name of the configuration using the form:
    ///     `projects/{project_id}/locations/global/vpcFlowLogsConfigs/{vpc_flow_logs_config_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Optional. The user-supplied description of the VPC Flow Logs configuration.
    /// Maximum of 512 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private readonly static global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.State StateDefaultValue = global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.State.Unspecified;

    private global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.State state_;
    /// <summary>
    /// Optional. The state of the VPC Flow Log configuration. Default value is
    /// ENABLED. When creating a new configuration, it must be enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.State State {
      get { if ((_hasBits0 & 1) != 0) { return state_; } else { return StateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasState {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearState() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "aggregation_interval" field.</summary>
    public const int AggregationIntervalFieldNumber = 4;
    private readonly static global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.AggregationInterval AggregationIntervalDefaultValue = global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.AggregationInterval.Unspecified;

    private global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.AggregationInterval aggregationInterval_;
    /// <summary>
    /// Optional. The aggregation interval for the logs. Default value is
    /// INTERVAL_5_SEC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.AggregationInterval AggregationInterval {
      get { if ((_hasBits0 & 2) != 0) { return aggregationInterval_; } else { return AggregationIntervalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        aggregationInterval_ = value;
      }
    }
    /// <summary>Gets whether the "aggregation_interval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAggregationInterval {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "aggregation_interval" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAggregationInterval() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "flow_sampling" field.</summary>
    public const int FlowSamplingFieldNumber = 5;
    private readonly static float FlowSamplingDefaultValue = 0F;

    private float flowSampling_;
    /// <summary>
    /// Optional. The value of the field must be in (0, 1]. The sampling rate of
    /// VPC Flow Logs where 1.0 means all collected logs are reported. Setting the
    /// sampling rate to 0.0 is not allowed. If you want to disable VPC Flow Logs,
    /// use the state field instead. Default value is 1.0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FlowSampling {
      get { if ((_hasBits0 & 4) != 0) { return flowSampling_; } else { return FlowSamplingDefaultValue; } }
      set {
        _hasBits0 |= 4;
        flowSampling_ = value;
      }
    }
    /// <summary>Gets whether the "flow_sampling" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlowSampling {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "flow_sampling" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlowSampling() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private readonly static global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.Metadata MetadataDefaultValue = global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.Metadata.Unspecified;

    private global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.Metadata metadata_;
    /// <summary>
    /// Optional. Configures whether all, none or a subset of metadata fields
    /// should be added to the reported VPC flow logs. Default value is
    /// INCLUDE_ALL_METADATA.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.Metadata Metadata {
      get { if ((_hasBits0 & 8) != 0) { return metadata_; } else { return MetadataDefaultValue; } }
      set {
        _hasBits0 |= 8;
        metadata_ = value;
      }
    }
    /// <summary>Gets whether the "metadata" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMetadata {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "metadata" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMetadata() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "metadata_fields" field.</summary>
    public const int MetadataFieldsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_metadataFields_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> metadataFields_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional. Custom metadata fields to include in the reported VPC flow logs.
    /// Can only be specified if "metadata" was set to CUSTOM_METADATA.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> MetadataFields {
      get { return metadataFields_; }
    }

    /// <summary>Field number for the "filter_expr" field.</summary>
    public const int FilterExprFieldNumber = 8;
    private readonly static string FilterExprDefaultValue = "";

    private string filterExpr_;
    /// <summary>
    /// Optional. Export filter used to define which VPC Flow Logs should be
    /// logged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FilterExpr {
      get { return filterExpr_ ?? FilterExprDefaultValue; }
      set {
        filterExpr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "filter_expr" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFilterExpr {
      get { return filterExpr_ != null; }
    }
    /// <summary>Clears the value of the "filter_expr" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFilterExpr() {
      filterExpr_ = null;
    }

    /// <summary>Field number for the "target_resource_state" field.</summary>
    public const int TargetResourceStateFieldNumber = 12;
    private readonly static global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.TargetResourceState TargetResourceStateDefaultValue = global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.TargetResourceState.Unspecified;

    private global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.TargetResourceState targetResourceState_;
    /// <summary>
    /// Output only. A diagnostic bit - describes the state of the configured
    /// target resource for diagnostic purposes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.TargetResourceState TargetResourceState {
      get { if ((_hasBits0 & 16) != 0) { return targetResourceState_; } else { return TargetResourceStateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        targetResourceState_ = value;
      }
    }
    /// <summary>Gets whether the "target_resource_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetResourceState {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "target_resource_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetResourceState() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "interconnect_attachment" field.</summary>
    public const int InterconnectAttachmentFieldNumber = 102;
    /// <summary>
    /// Traffic will be logged from the Interconnect Attachment.
    /// Format:
    /// projects/{project_id}/regions/{region}/interconnectAttachments/{name}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string InterconnectAttachment {
      get { return HasInterconnectAttachment ? (string) targetResource_ : ""; }
      set {
        targetResource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        targetResourceCase_ = TargetResourceOneofCase.InterconnectAttachment;
      }
    }
    /// <summary>Gets whether the "interconnect_attachment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInterconnectAttachment {
      get { return targetResourceCase_ == TargetResourceOneofCase.InterconnectAttachment; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "interconnect_attachment" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInterconnectAttachment() {
      if (HasInterconnectAttachment) {
        ClearTargetResource();
      }
    }

    /// <summary>Field number for the "vpn_tunnel" field.</summary>
    public const int VpnTunnelFieldNumber = 103;
    /// <summary>
    /// Traffic will be logged from the VPN Tunnel.
    /// Format: projects/{project_id}/regions/{region}/vpnTunnels/{name}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VpnTunnel {
      get { return HasVpnTunnel ? (string) targetResource_ : ""; }
      set {
        targetResource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        targetResourceCase_ = TargetResourceOneofCase.VpnTunnel;
      }
    }
    /// <summary>Gets whether the "vpn_tunnel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVpnTunnel {
      get { return targetResourceCase_ == TargetResourceOneofCase.VpnTunnel; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "vpn_tunnel" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVpnTunnel() {
      if (HasVpnTunnel) {
        ClearTargetResource();
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 11;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 90);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Optional. Resource labels to represent user-provided metadata.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The time the config was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Output only. The time the config was updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    private object targetResource_;
    /// <summary>Enum of possible cases for the "target_resource" oneof.</summary>
    public enum TargetResourceOneofCase {
      None = 0,
      InterconnectAttachment = 102,
      VpnTunnel = 103,
    }
    private TargetResourceOneofCase targetResourceCase_ = TargetResourceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TargetResourceOneofCase TargetResourceCase {
      get { return targetResourceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetResource() {
      targetResourceCase_ = TargetResourceOneofCase.None;
      targetResource_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VpcFlowLogsConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VpcFlowLogsConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (State != other.State) return false;
      if (AggregationInterval != other.AggregationInterval) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlowSampling, other.FlowSampling)) return false;
      if (Metadata != other.Metadata) return false;
      if(!metadataFields_.Equals(other.metadataFields_)) return false;
      if (FilterExpr != other.FilterExpr) return false;
      if (TargetResourceState != other.TargetResourceState) return false;
      if (InterconnectAttachment != other.InterconnectAttachment) return false;
      if (VpnTunnel != other.VpnTunnel) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (TargetResourceCase != other.TargetResourceCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (HasAggregationInterval) hash ^= AggregationInterval.GetHashCode();
      if (HasFlowSampling) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlowSampling);
      if (HasMetadata) hash ^= Metadata.GetHashCode();
      hash ^= metadataFields_.GetHashCode();
      if (HasFilterExpr) hash ^= FilterExpr.GetHashCode();
      if (HasTargetResourceState) hash ^= TargetResourceState.GetHashCode();
      if (HasInterconnectAttachment) hash ^= InterconnectAttachment.GetHashCode();
      if (HasVpnTunnel) hash ^= VpnTunnel.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      hash ^= (int) targetResourceCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (HasAggregationInterval) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AggregationInterval);
      }
      if (HasFlowSampling) {
        output.WriteRawTag(45);
        output.WriteFloat(FlowSampling);
      }
      if (HasMetadata) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Metadata);
      }
      metadataFields_.WriteTo(output, _repeated_metadataFields_codec);
      if (HasFilterExpr) {
        output.WriteRawTag(66);
        output.WriteString(FilterExpr);
      }
      if (createTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateTime);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (HasTargetResourceState) {
        output.WriteRawTag(96);
        output.WriteEnum((int) TargetResourceState);
      }
      if (HasInterconnectAttachment) {
        output.WriteRawTag(178, 6);
        output.WriteString(InterconnectAttachment);
      }
      if (HasVpnTunnel) {
        output.WriteRawTag(186, 6);
        output.WriteString(VpnTunnel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (HasAggregationInterval) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AggregationInterval);
      }
      if (HasFlowSampling) {
        output.WriteRawTag(45);
        output.WriteFloat(FlowSampling);
      }
      if (HasMetadata) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Metadata);
      }
      metadataFields_.WriteTo(ref output, _repeated_metadataFields_codec);
      if (HasFilterExpr) {
        output.WriteRawTag(66);
        output.WriteString(FilterExpr);
      }
      if (createTime_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UpdateTime);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      if (HasTargetResourceState) {
        output.WriteRawTag(96);
        output.WriteEnum((int) TargetResourceState);
      }
      if (HasInterconnectAttachment) {
        output.WriteRawTag(178, 6);
        output.WriteString(InterconnectAttachment);
      }
      if (HasVpnTunnel) {
        output.WriteRawTag(186, 6);
        output.WriteString(VpnTunnel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (HasAggregationInterval) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AggregationInterval);
      }
      if (HasFlowSampling) {
        size += 1 + 4;
      }
      if (HasMetadata) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Metadata);
      }
      size += metadataFields_.CalculateSize(_repeated_metadataFields_codec);
      if (HasFilterExpr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilterExpr);
      }
      if (HasTargetResourceState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetResourceState);
      }
      if (HasInterconnectAttachment) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(InterconnectAttachment);
      }
      if (HasVpnTunnel) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VpnTunnel);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VpcFlowLogsConfig other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasState) {
        State = other.State;
      }
      if (other.HasAggregationInterval) {
        AggregationInterval = other.AggregationInterval;
      }
      if (other.HasFlowSampling) {
        FlowSampling = other.FlowSampling;
      }
      if (other.HasMetadata) {
        Metadata = other.Metadata;
      }
      metadataFields_.Add(other.metadataFields_);
      if (other.HasFilterExpr) {
        FilterExpr = other.FilterExpr;
      }
      if (other.HasTargetResourceState) {
        TargetResourceState = other.TargetResourceState;
      }
      labels_.MergeFrom(other.labels_);
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      switch (other.TargetResourceCase) {
        case TargetResourceOneofCase.InterconnectAttachment:
          InterconnectAttachment = other.InterconnectAttachment;
          break;
        case TargetResourceOneofCase.VpnTunnel:
          VpnTunnel = other.VpnTunnel;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            State = (global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.State) input.ReadEnum();
            break;
          }
          case 32: {
            AggregationInterval = (global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.AggregationInterval) input.ReadEnum();
            break;
          }
          case 45: {
            FlowSampling = input.ReadFloat();
            break;
          }
          case 48: {
            Metadata = (global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.Metadata) input.ReadEnum();
            break;
          }
          case 58: {
            metadataFields_.AddEntriesFrom(input, _repeated_metadataFields_codec);
            break;
          }
          case 66: {
            FilterExpr = input.ReadString();
            break;
          }
          case 74: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 82: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 90: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 96: {
            TargetResourceState = (global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.TargetResourceState) input.ReadEnum();
            break;
          }
          case 818: {
            InterconnectAttachment = input.ReadString();
            break;
          }
          case 826: {
            VpnTunnel = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            State = (global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.State) input.ReadEnum();
            break;
          }
          case 32: {
            AggregationInterval = (global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.AggregationInterval) input.ReadEnum();
            break;
          }
          case 45: {
            FlowSampling = input.ReadFloat();
            break;
          }
          case 48: {
            Metadata = (global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.Metadata) input.ReadEnum();
            break;
          }
          case 58: {
            metadataFields_.AddEntriesFrom(ref input, _repeated_metadataFields_codec);
            break;
          }
          case 66: {
            FilterExpr = input.ReadString();
            break;
          }
          case 74: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 82: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 90: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
          case 96: {
            TargetResourceState = (global::Google.Cloud.NetworkManagement.V1.VpcFlowLogsConfig.Types.TargetResourceState) input.ReadEnum();
            break;
          }
          case 818: {
            InterconnectAttachment = input.ReadString();
            break;
          }
          case 826: {
            VpnTunnel = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the VpcFlowLogsConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Determines whether this configuration will be generating logs.
      /// Setting state=DISABLED will pause the log generation for this config.
      /// </summary>
      public enum State {
        /// <summary>
        /// If not specified, will default to ENABLED.
        /// </summary>
        [pbr::OriginalName("STATE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// When ENABLED, this configuration will generate logs.
        /// </summary>
        [pbr::OriginalName("ENABLED")] Enabled = 1,
        /// <summary>
        /// When DISABLED, this configuration will not generate logs.
        /// </summary>
        [pbr::OriginalName("DISABLED")] Disabled = 2,
      }

      /// <summary>
      /// Toggles the aggregation interval for collecting flow logs by 5-tuple.
      /// </summary>
      public enum AggregationInterval {
        /// <summary>
        /// If not specified, will default to INTERVAL_5_SEC.
        /// </summary>
        [pbr::OriginalName("AGGREGATION_INTERVAL_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Aggregate logs in 5s intervals.
        /// </summary>
        [pbr::OriginalName("INTERVAL_5_SEC")] Interval5Sec = 1,
        /// <summary>
        /// Aggregate logs in 30s intervals.
        /// </summary>
        [pbr::OriginalName("INTERVAL_30_SEC")] Interval30Sec = 2,
        /// <summary>
        /// Aggregate logs in 1m intervals.
        /// </summary>
        [pbr::OriginalName("INTERVAL_1_MIN")] Interval1Min = 3,
        /// <summary>
        /// Aggregate logs in 5m intervals.
        /// </summary>
        [pbr::OriginalName("INTERVAL_5_MIN")] Interval5Min = 4,
        /// <summary>
        /// Aggregate logs in 10m intervals.
        /// </summary>
        [pbr::OriginalName("INTERVAL_10_MIN")] Interval10Min = 5,
        /// <summary>
        /// Aggregate logs in 15m intervals.
        /// </summary>
        [pbr::OriginalName("INTERVAL_15_MIN")] Interval15Min = 6,
      }

      /// <summary>
      /// Configures which log fields would be included.
      /// </summary>
      public enum Metadata {
        /// <summary>
        /// If not specified, will default to INCLUDE_ALL_METADATA.
        /// </summary>
        [pbr::OriginalName("METADATA_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Include all metadata fields.
        /// </summary>
        [pbr::OriginalName("INCLUDE_ALL_METADATA")] IncludeAllMetadata = 1,
        /// <summary>
        /// Exclude all metadata fields.
        /// </summary>
        [pbr::OriginalName("EXCLUDE_ALL_METADATA")] ExcludeAllMetadata = 2,
        /// <summary>
        /// Include only custom fields (specified in metadata_fields).
        /// </summary>
        [pbr::OriginalName("CUSTOM_METADATA")] CustomMetadata = 3,
      }

      /// <summary>
      /// Optional states of the target resource that are used as part of the
      /// diagnostic bit.
      /// </summary>
      public enum TargetResourceState {
        /// <summary>
        /// Unspecified target resource state.
        /// </summary>
        [pbr::OriginalName("TARGET_RESOURCE_STATE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Indicates that the target resource exists.
        /// </summary>
        [pbr::OriginalName("TARGET_RESOURCE_EXISTS")] TargetResourceExists = 1,
        /// <summary>
        /// Indicates that the target resource does not exist.
        /// </summary>
        [pbr::OriginalName("TARGET_RESOURCE_DOES_NOT_EXIST")] TargetResourceDoesNotExist = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
