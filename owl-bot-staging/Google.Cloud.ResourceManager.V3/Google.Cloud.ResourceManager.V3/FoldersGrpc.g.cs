// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/resourcemanager/v3/folders.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.ResourceManager.V3 {
  /// <summary>
  /// Manages Cloud Platform folder resources.
  /// Folders can be used to organize the resources under an
  /// organization and to control the policies applied to groups of resources.
  /// </summary>
  public static partial class Folders
  {
    static readonly string __ServiceName = "google.cloud.resourcemanager.v3.Folders";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.GetFolderRequest> __Marshaller_google_cloud_resourcemanager_v3_GetFolderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.GetFolderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.Folder> __Marshaller_google_cloud_resourcemanager_v3_Folder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.Folder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.ListFoldersRequest> __Marshaller_google_cloud_resourcemanager_v3_ListFoldersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.ListFoldersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.ListFoldersResponse> __Marshaller_google_cloud_resourcemanager_v3_ListFoldersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.ListFoldersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest> __Marshaller_google_cloud_resourcemanager_v3_SearchFoldersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse> __Marshaller_google_cloud_resourcemanager_v3_SearchFoldersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.CreateFolderRequest> __Marshaller_google_cloud_resourcemanager_v3_CreateFolderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.CreateFolderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest> __Marshaller_google_cloud_resourcemanager_v3_UpdateFolderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.MoveFolderRequest> __Marshaller_google_cloud_resourcemanager_v3_MoveFolderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.MoveFolderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest> __Marshaller_google_cloud_resourcemanager_v3_DeleteFolderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest> __Marshaller_google_cloud_resourcemanager_v3_UndeleteFolderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.GetFolderRequest, global::Google.Cloud.ResourceManager.V3.Folder> __Method_GetFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V3.GetFolderRequest, global::Google.Cloud.ResourceManager.V3.Folder>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFolder",
        __Marshaller_google_cloud_resourcemanager_v3_GetFolderRequest,
        __Marshaller_google_cloud_resourcemanager_v3_Folder);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.ListFoldersRequest, global::Google.Cloud.ResourceManager.V3.ListFoldersResponse> __Method_ListFolders = new grpc::Method<global::Google.Cloud.ResourceManager.V3.ListFoldersRequest, global::Google.Cloud.ResourceManager.V3.ListFoldersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFolders",
        __Marshaller_google_cloud_resourcemanager_v3_ListFoldersRequest,
        __Marshaller_google_cloud_resourcemanager_v3_ListFoldersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest, global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse> __Method_SearchFolders = new grpc::Method<global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest, global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchFolders",
        __Marshaller_google_cloud_resourcemanager_v3_SearchFoldersRequest,
        __Marshaller_google_cloud_resourcemanager_v3_SearchFoldersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.CreateFolderRequest, global::Google.LongRunning.Operation> __Method_CreateFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V3.CreateFolderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateFolder",
        __Marshaller_google_cloud_resourcemanager_v3_CreateFolderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest, global::Google.LongRunning.Operation> __Method_UpdateFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateFolder",
        __Marshaller_google_cloud_resourcemanager_v3_UpdateFolderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.MoveFolderRequest, global::Google.LongRunning.Operation> __Method_MoveFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V3.MoveFolderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveFolder",
        __Marshaller_google_cloud_resourcemanager_v3_MoveFolderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest, global::Google.LongRunning.Operation> __Method_DeleteFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFolder",
        __Marshaller_google_cloud_resourcemanager_v3_DeleteFolderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest, global::Google.LongRunning.Operation> __Method_UndeleteFolder = new grpc::Method<global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteFolder",
        __Marshaller_google_cloud_resourcemanager_v3_UndeleteFolderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.ResourceManager.V3.FoldersReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Folders</summary>
    [grpc::BindServiceMethod(typeof(Folders), "BindService")]
    public abstract partial class FoldersBase
    {
      /// <summary>
      /// Retrieves a folder identified by the supplied resource name.
      /// Valid folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V3.Folder> GetFolder(global::Google.Cloud.ResourceManager.V3.GetFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the folders that are direct descendants of supplied parent resource.
      /// `list()` provides a strongly consistent view of the folders underneath
      /// the specified parent resource.
      /// `list()` returns folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V3.ListFoldersResponse> ListFolders(global::Google.Cloud.ResourceManager.V3.ListFoldersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// `search()` provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse> SearchFolders(global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a folder in the resource hierarchy.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new folder must not violate
      /// the folder naming, height, or fanout constraints.
      ///
      /// + The folder's `display_name` must be distinct from all other folders that
      /// share its parent.
      /// + The addition of the folder must not cause the active folder hierarchy
      /// to exceed a height of 10. Note, the full active + deleted folder hierarchy
      /// is allowed to reach a height of 20; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the folder must not cause the total number of folders
      /// under its parent to exceed 300.
      ///
      /// If the operation fails due to a folder constraint violation, some errors
      /// may be returned by the `CreateFolder` request, with status code
      /// `FAILED_PRECONDITION` and an error description. Other folder constraint
      /// violations will be communicated in the `Operation`, with the specific
      /// `PreconditionFailure` returned in the details list in the `Operation.error`
      /// field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateFolder(global::Google.Cloud.ResourceManager.V3.CreateFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a folder, changing its `display_name`.
      /// Changes to the folder `display_name` will be rejected if they violate
      /// either the `display_name` formatting rules or the naming constraints
      /// described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation.
      ///
      /// The folder's `display_name` must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// between 3 and 30 characters. This is captured by the regular expression:
      /// `[\p{L}\p{N}][\p{L}\p{N}_- ]{1,28}[\p{L}\p{N}]`.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// `PreconditionFailure` explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateFolder(global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Moves a folder under a new resource parent.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved folder.
      /// Upon failure, a `FolderOperationError` categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// `FolderOperationError` will be returned in the `Status.details` field.
      /// If it occurs asynchronously, then the FolderOperation will be returned
      /// in the `Operation.error` field.
      /// In addition, the `Operation.metadata` field will be populated with a
      /// `FolderOperation` message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height,
      /// or fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.move`
      /// permission on the folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> MoveFolder(global::Google.Cloud.ResourceManager.V3.MoveFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Requests deletion of a folder. The folder is moved into the
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state immediately, and is deleted approximately 30 days later. This method
      /// may only be called on an empty folder, where a folder is empty if it
      /// doesn't contain any folders or projects in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. If
      /// called on a folder in
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state the operation will result in a no-op success.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteFolder(global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancels the deletion request for a folder. This method may be called on a
      /// folder in any state. If the folder is in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state the
      /// result will be a no-op success. In order to succeed, the folder's parent
      /// must be in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. In
      /// addition, reintroducing the folder into the tree must not violate folder
      /// naming, height, and fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.undelete`
      /// permission on the identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UndeleteFolder(global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the folder's resource name, for example: "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on a folder, replacing any existing policy.
      /// The `resource` field should be the folder's resource name, for example:
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified folder.
      /// The `resource` field should be the folder's resource name,
      /// for example: "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Folders</summary>
    public partial class FoldersClient : grpc::ClientBase<FoldersClient>
    {
      /// <summary>Creates a new client for Folders</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FoldersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Folders that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FoldersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FoldersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FoldersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves a folder identified by the supplied resource name.
      /// Valid folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.Folder GetFolder(global::Google.Cloud.ResourceManager.V3.GetFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a folder identified by the supplied resource name.
      /// Valid folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.Folder GetFolder(global::Google.Cloud.ResourceManager.V3.GetFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFolder, null, options, request);
      }
      /// <summary>
      /// Retrieves a folder identified by the supplied resource name.
      /// Valid folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.Folder> GetFolderAsync(global::Google.Cloud.ResourceManager.V3.GetFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a folder identified by the supplied resource name.
      /// Valid folder resource names have the format `folders/{folder_id}`
      /// (for example, `folders/1234`).
      /// The caller must have `resourcemanager.folders.get` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.Folder> GetFolderAsync(global::Google.Cloud.ResourceManager.V3.GetFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFolder, null, options, request);
      }
      /// <summary>
      /// Lists the folders that are direct descendants of supplied parent resource.
      /// `list()` provides a strongly consistent view of the folders underneath
      /// the specified parent resource.
      /// `list()` returns folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.ListFoldersResponse ListFolders(global::Google.Cloud.ResourceManager.V3.ListFoldersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFolders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the folders that are direct descendants of supplied parent resource.
      /// `list()` provides a strongly consistent view of the folders underneath
      /// the specified parent resource.
      /// `list()` returns folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.ListFoldersResponse ListFolders(global::Google.Cloud.ResourceManager.V3.ListFoldersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFolders, null, options, request);
      }
      /// <summary>
      /// Lists the folders that are direct descendants of supplied parent resource.
      /// `list()` provides a strongly consistent view of the folders underneath
      /// the specified parent resource.
      /// `list()` returns folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.ListFoldersResponse> ListFoldersAsync(global::Google.Cloud.ResourceManager.V3.ListFoldersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFoldersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the folders that are direct descendants of supplied parent resource.
      /// `list()` provides a strongly consistent view of the folders underneath
      /// the specified parent resource.
      /// `list()` returns folders sorted based upon the (ascending) lexical ordering
      /// of their display_name.
      /// The caller must have `resourcemanager.folders.list` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.ListFoldersResponse> ListFoldersAsync(global::Google.Cloud.ResourceManager.V3.ListFoldersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFolders, null, options, request);
      }
      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// `search()` provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse SearchFolders(global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchFolders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// `search()` provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse SearchFolders(global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchFolders, null, options, request);
      }
      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// `search()` provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse> SearchFoldersAsync(global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchFoldersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search for folders that match specific filter criteria.
      /// `search()` provides an eventually consistent view of the folders a user has
      /// access to which meet the specified filter criteria.
      ///
      /// This will only return folders on which the caller has the
      /// permission `resourcemanager.folders.get`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse> SearchFoldersAsync(global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchFolders, null, options, request);
      }
      /// <summary>
      /// Creates a folder in the resource hierarchy.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new folder must not violate
      /// the folder naming, height, or fanout constraints.
      ///
      /// + The folder's `display_name` must be distinct from all other folders that
      /// share its parent.
      /// + The addition of the folder must not cause the active folder hierarchy
      /// to exceed a height of 10. Note, the full active + deleted folder hierarchy
      /// is allowed to reach a height of 20; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the folder must not cause the total number of folders
      /// under its parent to exceed 300.
      ///
      /// If the operation fails due to a folder constraint violation, some errors
      /// may be returned by the `CreateFolder` request, with status code
      /// `FAILED_PRECONDITION` and an error description. Other folder constraint
      /// violations will be communicated in the `Operation`, with the specific
      /// `PreconditionFailure` returned in the details list in the `Operation.error`
      /// field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateFolder(global::Google.Cloud.ResourceManager.V3.CreateFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a folder in the resource hierarchy.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new folder must not violate
      /// the folder naming, height, or fanout constraints.
      ///
      /// + The folder's `display_name` must be distinct from all other folders that
      /// share its parent.
      /// + The addition of the folder must not cause the active folder hierarchy
      /// to exceed a height of 10. Note, the full active + deleted folder hierarchy
      /// is allowed to reach a height of 20; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the folder must not cause the total number of folders
      /// under its parent to exceed 300.
      ///
      /// If the operation fails due to a folder constraint violation, some errors
      /// may be returned by the `CreateFolder` request, with status code
      /// `FAILED_PRECONDITION` and an error description. Other folder constraint
      /// violations will be communicated in the `Operation`, with the specific
      /// `PreconditionFailure` returned in the details list in the `Operation.error`
      /// field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateFolder(global::Google.Cloud.ResourceManager.V3.CreateFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateFolder, null, options, request);
      }
      /// <summary>
      /// Creates a folder in the resource hierarchy.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new folder must not violate
      /// the folder naming, height, or fanout constraints.
      ///
      /// + The folder's `display_name` must be distinct from all other folders that
      /// share its parent.
      /// + The addition of the folder must not cause the active folder hierarchy
      /// to exceed a height of 10. Note, the full active + deleted folder hierarchy
      /// is allowed to reach a height of 20; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the folder must not cause the total number of folders
      /// under its parent to exceed 300.
      ///
      /// If the operation fails due to a folder constraint violation, some errors
      /// may be returned by the `CreateFolder` request, with status code
      /// `FAILED_PRECONDITION` and an error description. Other folder constraint
      /// violations will be communicated in the `Operation`, with the specific
      /// `PreconditionFailure` returned in the details list in the `Operation.error`
      /// field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateFolderAsync(global::Google.Cloud.ResourceManager.V3.CreateFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a folder in the resource hierarchy.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder creation workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// created Folder.
      ///
      /// In order to succeed, the addition of this new folder must not violate
      /// the folder naming, height, or fanout constraints.
      ///
      /// + The folder's `display_name` must be distinct from all other folders that
      /// share its parent.
      /// + The addition of the folder must not cause the active folder hierarchy
      /// to exceed a height of 10. Note, the full active + deleted folder hierarchy
      /// is allowed to reach a height of 20; this provides additional headroom when
      /// moving folders that contain deleted folders.
      /// + The addition of the folder must not cause the total number of folders
      /// under its parent to exceed 300.
      ///
      /// If the operation fails due to a folder constraint violation, some errors
      /// may be returned by the `CreateFolder` request, with status code
      /// `FAILED_PRECONDITION` and an error description. Other folder constraint
      /// violations will be communicated in the `Operation`, with the specific
      /// `PreconditionFailure` returned in the details list in the `Operation.error`
      /// field.
      ///
      /// The caller must have `resourcemanager.folders.create` permission on the
      /// identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateFolderAsync(global::Google.Cloud.ResourceManager.V3.CreateFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateFolder, null, options, request);
      }
      /// <summary>
      /// Updates a folder, changing its `display_name`.
      /// Changes to the folder `display_name` will be rejected if they violate
      /// either the `display_name` formatting rules or the naming constraints
      /// described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation.
      ///
      /// The folder's `display_name` must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// between 3 and 30 characters. This is captured by the regular expression:
      /// `[\p{L}\p{N}][\p{L}\p{N}_- ]{1,28}[\p{L}\p{N}]`.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// `PreconditionFailure` explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateFolder(global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a folder, changing its `display_name`.
      /// Changes to the folder `display_name` will be rejected if they violate
      /// either the `display_name` formatting rules or the naming constraints
      /// described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation.
      ///
      /// The folder's `display_name` must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// between 3 and 30 characters. This is captured by the regular expression:
      /// `[\p{L}\p{N}][\p{L}\p{N}_- ]{1,28}[\p{L}\p{N}]`.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// `PreconditionFailure` explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateFolder(global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateFolder, null, options, request);
      }
      /// <summary>
      /// Updates a folder, changing its `display_name`.
      /// Changes to the folder `display_name` will be rejected if they violate
      /// either the `display_name` formatting rules or the naming constraints
      /// described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation.
      ///
      /// The folder's `display_name` must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// between 3 and 30 characters. This is captured by the regular expression:
      /// `[\p{L}\p{N}][\p{L}\p{N}_- ]{1,28}[\p{L}\p{N}]`.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// `PreconditionFailure` explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateFolderAsync(global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a folder, changing its `display_name`.
      /// Changes to the folder `display_name` will be rejected if they violate
      /// either the `display_name` formatting rules or the naming constraints
      /// described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation.
      ///
      /// The folder's `display_name` must start and end with a letter or digit,
      /// may contain letters, digits, spaces, hyphens and underscores and can be
      /// between 3 and 30 characters. This is captured by the regular expression:
      /// `[\p{L}\p{N}][\p{L}\p{N}_- ]{1,28}[\p{L}\p{N}]`.
      /// The caller must have `resourcemanager.folders.update` permission on the
      /// identified folder.
      ///
      /// If the update fails due to the unique name constraint then a
      /// `PreconditionFailure` explaining this violation will be returned
      /// in the Status.details field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateFolderAsync(global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateFolder, null, options, request);
      }
      /// <summary>
      /// Moves a folder under a new resource parent.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved folder.
      /// Upon failure, a `FolderOperationError` categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// `FolderOperationError` will be returned in the `Status.details` field.
      /// If it occurs asynchronously, then the FolderOperation will be returned
      /// in the `Operation.error` field.
      /// In addition, the `Operation.metadata` field will be populated with a
      /// `FolderOperation` message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height,
      /// or fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.move`
      /// permission on the folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation MoveFolder(global::Google.Cloud.ResourceManager.V3.MoveFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Moves a folder under a new resource parent.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved folder.
      /// Upon failure, a `FolderOperationError` categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// `FolderOperationError` will be returned in the `Status.details` field.
      /// If it occurs asynchronously, then the FolderOperation will be returned
      /// in the `Operation.error` field.
      /// In addition, the `Operation.metadata` field will be populated with a
      /// `FolderOperation` message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height,
      /// or fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.move`
      /// permission on the folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation MoveFolder(global::Google.Cloud.ResourceManager.V3.MoveFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveFolder, null, options, request);
      }
      /// <summary>
      /// Moves a folder under a new resource parent.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved folder.
      /// Upon failure, a `FolderOperationError` categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// `FolderOperationError` will be returned in the `Status.details` field.
      /// If it occurs asynchronously, then the FolderOperation will be returned
      /// in the `Operation.error` field.
      /// In addition, the `Operation.metadata` field will be populated with a
      /// `FolderOperation` message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height,
      /// or fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.move`
      /// permission on the folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> MoveFolderAsync(global::Google.Cloud.ResourceManager.V3.MoveFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Moves a folder under a new resource parent.
      /// Returns an `Operation` which can be used to track the progress of the
      /// folder move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved folder.
      /// Upon failure, a `FolderOperationError` categorizing the failure cause will
      /// be returned - if the failure occurs synchronously then the
      /// `FolderOperationError` will be returned in the `Status.details` field.
      /// If it occurs asynchronously, then the FolderOperation will be returned
      /// in the `Operation.error` field.
      /// In addition, the `Operation.metadata` field will be populated with a
      /// `FolderOperation` message as an aid to stateless clients.
      /// Folder moves will be rejected if they violate either the naming, height,
      /// or fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.move`
      /// permission on the folder's current and proposed new parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> MoveFolderAsync(global::Google.Cloud.ResourceManager.V3.MoveFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveFolder, null, options, request);
      }
      /// <summary>
      /// Requests deletion of a folder. The folder is moved into the
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state immediately, and is deleted approximately 30 days later. This method
      /// may only be called on an empty folder, where a folder is empty if it
      /// doesn't contain any folders or projects in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. If
      /// called on a folder in
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state the operation will result in a no-op success.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteFolder(global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests deletion of a folder. The folder is moved into the
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state immediately, and is deleted approximately 30 days later. This method
      /// may only be called on an empty folder, where a folder is empty if it
      /// doesn't contain any folders or projects in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. If
      /// called on a folder in
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state the operation will result in a no-op success.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteFolder(global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFolder, null, options, request);
      }
      /// <summary>
      /// Requests deletion of a folder. The folder is moved into the
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state immediately, and is deleted approximately 30 days later. This method
      /// may only be called on an empty folder, where a folder is empty if it
      /// doesn't contain any folders or projects in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. If
      /// called on a folder in
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state the operation will result in a no-op success.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteFolderAsync(global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests deletion of a folder. The folder is moved into the
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state immediately, and is deleted approximately 30 days later. This method
      /// may only be called on an empty folder, where a folder is empty if it
      /// doesn't contain any folders or projects in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. If
      /// called on a folder in
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
      /// state the operation will result in a no-op success.
      /// The caller must have `resourcemanager.folders.delete` permission on the
      /// identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteFolderAsync(global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFolder, null, options, request);
      }
      /// <summary>
      /// Cancels the deletion request for a folder. This method may be called on a
      /// folder in any state. If the folder is in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state the
      /// result will be a no-op success. In order to succeed, the folder's parent
      /// must be in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. In
      /// addition, reintroducing the folder into the tree must not violate folder
      /// naming, height, and fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.undelete`
      /// permission on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteFolder(global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteFolder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels the deletion request for a folder. This method may be called on a
      /// folder in any state. If the folder is in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state the
      /// result will be a no-op success. In order to succeed, the folder's parent
      /// must be in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. In
      /// addition, reintroducing the folder into the tree must not violate folder
      /// naming, height, and fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.undelete`
      /// permission on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteFolder(global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteFolder, null, options, request);
      }
      /// <summary>
      /// Cancels the deletion request for a folder. This method may be called on a
      /// folder in any state. If the folder is in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state the
      /// result will be a no-op success. In order to succeed, the folder's parent
      /// must be in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. In
      /// addition, reintroducing the folder into the tree must not violate folder
      /// naming, height, and fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.undelete`
      /// permission on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteFolderAsync(global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteFolderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels the deletion request for a folder. This method may be called on a
      /// folder in any state. If the folder is in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state the
      /// result will be a no-op success. In order to succeed, the folder's parent
      /// must be in the
      /// [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. In
      /// addition, reintroducing the folder into the tree must not violate folder
      /// naming, height, and fanout constraints described in the
      /// [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
      /// documentation. The caller must have `resourcemanager.folders.undelete`
      /// permission on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteFolderAsync(global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteFolder, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the folder's resource name, for example: "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the folder's resource name, for example: "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the folder's resource name, for example: "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a folder. The returned policy may be
      /// empty if no such policy or resource exists. The `resource` field should
      /// be the folder's resource name, for example: "folders/1234".
      /// The caller must have `resourcemanager.folders.getIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on a folder, replacing any existing policy.
      /// The `resource` field should be the folder's resource name, for example:
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on a folder, replacing any existing policy.
      /// The `resource` field should be the folder's resource name, for example:
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on a folder, replacing any existing policy.
      /// The `resource` field should be the folder's resource name, for example:
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on a folder, replacing any existing policy.
      /// The `resource` field should be the folder's resource name, for example:
      /// "folders/1234".
      /// The caller must have `resourcemanager.folders.setIamPolicy` permission
      /// on the identified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified folder.
      /// The `resource` field should be the folder's resource name,
      /// for example: "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified folder.
      /// The `resource` field should be the folder's resource name,
      /// for example: "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified folder.
      /// The `resource` field should be the folder's resource name,
      /// for example: "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified folder.
      /// The `resource` field should be the folder's resource name,
      /// for example: "folders/1234".
      ///
      /// There are no permissions required for making this API call.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override FoldersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FoldersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(FoldersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetFolder, serviceImpl.GetFolder)
          .AddMethod(__Method_ListFolders, serviceImpl.ListFolders)
          .AddMethod(__Method_SearchFolders, serviceImpl.SearchFolders)
          .AddMethod(__Method_CreateFolder, serviceImpl.CreateFolder)
          .AddMethod(__Method_UpdateFolder, serviceImpl.UpdateFolder)
          .AddMethod(__Method_MoveFolder, serviceImpl.MoveFolder)
          .AddMethod(__Method_DeleteFolder, serviceImpl.DeleteFolder)
          .AddMethod(__Method_UndeleteFolder, serviceImpl.UndeleteFolder)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FoldersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetFolder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.GetFolderRequest, global::Google.Cloud.ResourceManager.V3.Folder>(serviceImpl.GetFolder));
      serviceBinder.AddMethod(__Method_ListFolders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.ListFoldersRequest, global::Google.Cloud.ResourceManager.V3.ListFoldersResponse>(serviceImpl.ListFolders));
      serviceBinder.AddMethod(__Method_SearchFolders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.SearchFoldersRequest, global::Google.Cloud.ResourceManager.V3.SearchFoldersResponse>(serviceImpl.SearchFolders));
      serviceBinder.AddMethod(__Method_CreateFolder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.CreateFolderRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateFolder));
      serviceBinder.AddMethod(__Method_UpdateFolder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.UpdateFolderRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateFolder));
      serviceBinder.AddMethod(__Method_MoveFolder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.MoveFolderRequest, global::Google.LongRunning.Operation>(serviceImpl.MoveFolder));
      serviceBinder.AddMethod(__Method_DeleteFolder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.DeleteFolderRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteFolder));
      serviceBinder.AddMethod(__Method_UndeleteFolder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.UndeleteFolderRequest, global::Google.LongRunning.Operation>(serviceImpl.UndeleteFolder));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
}
#endregion
