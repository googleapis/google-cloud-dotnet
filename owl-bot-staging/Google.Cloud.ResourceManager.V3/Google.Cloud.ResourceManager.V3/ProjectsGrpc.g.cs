// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/resourcemanager/v3/projects.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.ResourceManager.V3 {
  /// <summary>
  /// Manages Google Cloud Projects.
  /// </summary>
  public static partial class Projects
  {
    static readonly string __ServiceName = "google.cloud.resourcemanager.v3.Projects";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.GetProjectRequest> __Marshaller_google_cloud_resourcemanager_v3_GetProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.GetProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.Project> __Marshaller_google_cloud_resourcemanager_v3_Project = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.Project.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.ListProjectsRequest> __Marshaller_google_cloud_resourcemanager_v3_ListProjectsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.ListProjectsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.ListProjectsResponse> __Marshaller_google_cloud_resourcemanager_v3_ListProjectsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.ListProjectsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest> __Marshaller_google_cloud_resourcemanager_v3_SearchProjectsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse> __Marshaller_google_cloud_resourcemanager_v3_SearchProjectsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.CreateProjectRequest> __Marshaller_google_cloud_resourcemanager_v3_CreateProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.CreateProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest> __Marshaller_google_cloud_resourcemanager_v3_UpdateProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.MoveProjectRequest> __Marshaller_google_cloud_resourcemanager_v3_MoveProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.MoveProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest> __Marshaller_google_cloud_resourcemanager_v3_DeleteProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest> __Marshaller_google_cloud_resourcemanager_v3_UndeleteProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.GetProjectRequest, global::Google.Cloud.ResourceManager.V3.Project> __Method_GetProject = new grpc::Method<global::Google.Cloud.ResourceManager.V3.GetProjectRequest, global::Google.Cloud.ResourceManager.V3.Project>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProject",
        __Marshaller_google_cloud_resourcemanager_v3_GetProjectRequest,
        __Marshaller_google_cloud_resourcemanager_v3_Project);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.ListProjectsRequest, global::Google.Cloud.ResourceManager.V3.ListProjectsResponse> __Method_ListProjects = new grpc::Method<global::Google.Cloud.ResourceManager.V3.ListProjectsRequest, global::Google.Cloud.ResourceManager.V3.ListProjectsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProjects",
        __Marshaller_google_cloud_resourcemanager_v3_ListProjectsRequest,
        __Marshaller_google_cloud_resourcemanager_v3_ListProjectsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest, global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse> __Method_SearchProjects = new grpc::Method<global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest, global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchProjects",
        __Marshaller_google_cloud_resourcemanager_v3_SearchProjectsRequest,
        __Marshaller_google_cloud_resourcemanager_v3_SearchProjectsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.CreateProjectRequest, global::Google.LongRunning.Operation> __Method_CreateProject = new grpc::Method<global::Google.Cloud.ResourceManager.V3.CreateProjectRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateProject",
        __Marshaller_google_cloud_resourcemanager_v3_CreateProjectRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest, global::Google.LongRunning.Operation> __Method_UpdateProject = new grpc::Method<global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProject",
        __Marshaller_google_cloud_resourcemanager_v3_UpdateProjectRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.MoveProjectRequest, global::Google.LongRunning.Operation> __Method_MoveProject = new grpc::Method<global::Google.Cloud.ResourceManager.V3.MoveProjectRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MoveProject",
        __Marshaller_google_cloud_resourcemanager_v3_MoveProjectRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest, global::Google.LongRunning.Operation> __Method_DeleteProject = new grpc::Method<global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteProject",
        __Marshaller_google_cloud_resourcemanager_v3_DeleteProjectRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest, global::Google.LongRunning.Operation> __Method_UndeleteProject = new grpc::Method<global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteProject",
        __Marshaller_google_cloud_resourcemanager_v3_UndeleteProjectRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.ResourceManager.V3.ProjectsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Projects</summary>
    [grpc::BindServiceMethod(typeof(Projects), "BindService")]
    public abstract partial class ProjectsBase
    {
      /// <summary>
      /// Retrieves the project identified by the specified `name` (for example,
      /// `projects/415104041262`).
      ///
      /// The caller must have `resourcemanager.projects.get` permission
      /// for this project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V3.Project> GetProject(global::Google.Cloud.ResourceManager.V3.GetProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists projects that are direct children of the specified folder or
      /// organization resource. `list()` provides a strongly consistent view of the
      /// projects underneath the specified parent resource. `list()` returns
      /// projects sorted based upon the (ascending) lexical ordering of their
      /// `display_name`. The caller must have `resourcemanager.projects.list`
      /// permission on the identified parent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V3.ListProjectsResponse> ListProjects(global::Google.Cloud.ResourceManager.V3.ListProjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search for projects that the caller has both `resourcemanager.projects.get`
      /// permission on, and also satisfy the specified query.
      ///
      /// This method returns projects in an unspecified order.
      ///
      /// This method is eventually consistent with project mutations; this means
      /// that a newly created project may not appear in the results or recent
      /// updates to an existing project may not be reflected in the results. To
      /// retrieve the latest state of a project, use the
      /// [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject] method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse> SearchProjects(global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request that a new project be created. The result is an `Operation` which
      /// can be used to track the creation process. This process usually takes a few
      /// seconds, but can sometimes take much longer. The tracking `Operation` is
      /// automatically deleted after a few hours, so there is no need to call
      /// `DeleteOperation`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateProject(global::Google.Cloud.ResourceManager.V3.CreateProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the `display_name` and labels of the project identified by the
      /// specified `name` (for example, `projects/415104041262`). Deleting all
      /// labels requires an update mask for labels field.
      ///
      /// The caller must have `resourcemanager.projects.update` permission for this
      /// project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateProject(global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Move a project to another place in your resource hierarchy, under a new
      /// resource parent.
      ///
      /// Returns an operation which can be used to track the process of the project
      /// move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved project.
      ///
      /// The caller must have `resourcemanager.projects.move` permission on the
      /// project, on the project's current and proposed new parent.
      ///
      /// If project has no current parent, or it currently does not have an
      /// associated organization resource, you will also need the
      /// `resourcemanager.projects.setIamPolicy` permission in the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> MoveProject(global::Google.Cloud.ResourceManager.V3.MoveProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Marks the project identified by the specified
      /// `name` (for example, `projects/415104041262`) for deletion.
      ///
      /// This method will only affect the project if it has a lifecycle state of
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE].
      ///
      /// This method changes the Project's lifecycle state from
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE]
      /// to
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Project.State.DELETE_REQUESTED].
      /// The deletion starts at an unspecified time,
      /// at which point the Project is no longer accessible.
      ///
      /// Until the deletion completes, you can check the lifecycle state
      /// checked by retrieving the project with [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// and the project remains visible to [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects].
      /// However, you cannot update the project.
      ///
      /// After the deletion completes, the project is not retrievable by
      /// the  [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects], and
      /// [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
      /// methods.
      ///
      /// This method behaves idempotently, such that deleting a `DELETE_REQUESTED`
      /// project will not cause an error, but also won't do anything.
      ///
      /// The caller must have `resourcemanager.projects.delete` permissions for this
      /// project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteProject(global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restores the project identified by the specified
      /// `name` (for example, `projects/415104041262`).
      /// You can only use this method for a project that has a lifecycle state of
      /// [DELETE_REQUESTED]
      /// [Projects.State.DELETE_REQUESTED].
      /// After deletion starts, the project cannot be restored.
      ///
      /// The caller must have `resourcemanager.projects.undelete` permission for
      /// this project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UndeleteProject(global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      /// Permission is denied if the policy or the resource do not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      ///
      /// CAUTION: This method will replace the existing policy, and cannot be used
      /// to append additional IAM settings.
      ///
      /// Note: Removing service accounts from policies or changing their roles can
      /// render services completely inoperable. It is important to understand how
      /// the service account is being used before removing or updating its roles.
      ///
      /// The following constraints apply when using `setIamPolicy()`:
      ///
      /// + Project does not support `allUsers` and `allAuthenticatedUsers` as
      /// `members` in a `Binding` of a `Policy`.
      ///
      /// + The owner role can be granted to a `user`, `serviceAccount`, or a group
      /// that is part of an organization. For example,
      /// group@myownpersonaldomain.com could be added as an owner to a project in
      /// the myownpersonaldomain.com organization, but not the examplepetstore.com
      /// organization.
      ///
      /// + Service accounts can be made owners of a project directly
      /// without any restrictions. However, to be added as an owner, a user must be
      /// invited using the Cloud Platform console and must accept the invitation.
      ///
      /// + A user cannot be granted the owner role using `setIamPolicy()`. The user
      /// must be granted the owner role using the Cloud Platform Console and must
      /// explicitly accept the invitation.
      ///
      /// + Invitations to grant the owner role cannot be sent using
      /// `setIamPolicy()`;
      /// they must be sent only using the Cloud Platform Console.
      ///
      /// + If the project is not part of an organization, there must be at least
      /// one owner who has accepted the Terms of Service (ToS) agreement in the
      /// policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
      /// from the policy will fail. This restriction also applies to legacy
      /// projects that no longer have owners who have accepted the ToS. Edits to
      /// IAM policies will be rejected until the lack of a ToS-accepting owner is
      /// rectified. If the project is part of an organization, you can remove all
      /// owners, potentially making the organization inaccessible.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123..
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Projects</summary>
    public partial class ProjectsClient : grpc::ClientBase<ProjectsClient>
    {
      /// <summary>Creates a new client for Projects</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProjectsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Projects that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProjectsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProjectsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProjectsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves the project identified by the specified `name` (for example,
      /// `projects/415104041262`).
      ///
      /// The caller must have `resourcemanager.projects.get` permission
      /// for this project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.Project GetProject(global::Google.Cloud.ResourceManager.V3.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the project identified by the specified `name` (for example,
      /// `projects/415104041262`).
      ///
      /// The caller must have `resourcemanager.projects.get` permission
      /// for this project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.Project GetProject(global::Google.Cloud.ResourceManager.V3.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProject, null, options, request);
      }
      /// <summary>
      /// Retrieves the project identified by the specified `name` (for example,
      /// `projects/415104041262`).
      ///
      /// The caller must have `resourcemanager.projects.get` permission
      /// for this project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.Project> GetProjectAsync(global::Google.Cloud.ResourceManager.V3.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the project identified by the specified `name` (for example,
      /// `projects/415104041262`).
      ///
      /// The caller must have `resourcemanager.projects.get` permission
      /// for this project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.Project> GetProjectAsync(global::Google.Cloud.ResourceManager.V3.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProject, null, options, request);
      }
      /// <summary>
      /// Lists projects that are direct children of the specified folder or
      /// organization resource. `list()` provides a strongly consistent view of the
      /// projects underneath the specified parent resource. `list()` returns
      /// projects sorted based upon the (ascending) lexical ordering of their
      /// `display_name`. The caller must have `resourcemanager.projects.list`
      /// permission on the identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.ListProjectsResponse ListProjects(global::Google.Cloud.ResourceManager.V3.ListProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists projects that are direct children of the specified folder or
      /// organization resource. `list()` provides a strongly consistent view of the
      /// projects underneath the specified parent resource. `list()` returns
      /// projects sorted based upon the (ascending) lexical ordering of their
      /// `display_name`. The caller must have `resourcemanager.projects.list`
      /// permission on the identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.ListProjectsResponse ListProjects(global::Google.Cloud.ResourceManager.V3.ListProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProjects, null, options, request);
      }
      /// <summary>
      /// Lists projects that are direct children of the specified folder or
      /// organization resource. `list()` provides a strongly consistent view of the
      /// projects underneath the specified parent resource. `list()` returns
      /// projects sorted based upon the (ascending) lexical ordering of their
      /// `display_name`. The caller must have `resourcemanager.projects.list`
      /// permission on the identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.ListProjectsResponse> ListProjectsAsync(global::Google.Cloud.ResourceManager.V3.ListProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjectsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists projects that are direct children of the specified folder or
      /// organization resource. `list()` provides a strongly consistent view of the
      /// projects underneath the specified parent resource. `list()` returns
      /// projects sorted based upon the (ascending) lexical ordering of their
      /// `display_name`. The caller must have `resourcemanager.projects.list`
      /// permission on the identified parent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.ListProjectsResponse> ListProjectsAsync(global::Google.Cloud.ResourceManager.V3.ListProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProjects, null, options, request);
      }
      /// <summary>
      /// Search for projects that the caller has both `resourcemanager.projects.get`
      /// permission on, and also satisfy the specified query.
      ///
      /// This method returns projects in an unspecified order.
      ///
      /// This method is eventually consistent with project mutations; this means
      /// that a newly created project may not appear in the results or recent
      /// updates to an existing project may not be reflected in the results. To
      /// retrieve the latest state of a project, use the
      /// [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject] method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse SearchProjects(global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchProjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search for projects that the caller has both `resourcemanager.projects.get`
      /// permission on, and also satisfy the specified query.
      ///
      /// This method returns projects in an unspecified order.
      ///
      /// This method is eventually consistent with project mutations; this means
      /// that a newly created project may not appear in the results or recent
      /// updates to an existing project may not be reflected in the results. To
      /// retrieve the latest state of a project, use the
      /// [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject] method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse SearchProjects(global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchProjects, null, options, request);
      }
      /// <summary>
      /// Search for projects that the caller has both `resourcemanager.projects.get`
      /// permission on, and also satisfy the specified query.
      ///
      /// This method returns projects in an unspecified order.
      ///
      /// This method is eventually consistent with project mutations; this means
      /// that a newly created project may not appear in the results or recent
      /// updates to an existing project may not be reflected in the results. To
      /// retrieve the latest state of a project, use the
      /// [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject] method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse> SearchProjectsAsync(global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchProjectsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search for projects that the caller has both `resourcemanager.projects.get`
      /// permission on, and also satisfy the specified query.
      ///
      /// This method returns projects in an unspecified order.
      ///
      /// This method is eventually consistent with project mutations; this means
      /// that a newly created project may not appear in the results or recent
      /// updates to an existing project may not be reflected in the results. To
      /// retrieve the latest state of a project, use the
      /// [GetProject][google.cloud.resourcemanager.v3.Projects.GetProject] method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse> SearchProjectsAsync(global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchProjects, null, options, request);
      }
      /// <summary>
      /// Request that a new project be created. The result is an `Operation` which
      /// can be used to track the creation process. This process usually takes a few
      /// seconds, but can sometimes take much longer. The tracking `Operation` is
      /// automatically deleted after a few hours, so there is no need to call
      /// `DeleteOperation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateProject(global::Google.Cloud.ResourceManager.V3.CreateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request that a new project be created. The result is an `Operation` which
      /// can be used to track the creation process. This process usually takes a few
      /// seconds, but can sometimes take much longer. The tracking `Operation` is
      /// automatically deleted after a few hours, so there is no need to call
      /// `DeleteOperation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateProject(global::Google.Cloud.ResourceManager.V3.CreateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateProject, null, options, request);
      }
      /// <summary>
      /// Request that a new project be created. The result is an `Operation` which
      /// can be used to track the creation process. This process usually takes a few
      /// seconds, but can sometimes take much longer. The tracking `Operation` is
      /// automatically deleted after a few hours, so there is no need to call
      /// `DeleteOperation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateProjectAsync(global::Google.Cloud.ResourceManager.V3.CreateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request that a new project be created. The result is an `Operation` which
      /// can be used to track the creation process. This process usually takes a few
      /// seconds, but can sometimes take much longer. The tracking `Operation` is
      /// automatically deleted after a few hours, so there is no need to call
      /// `DeleteOperation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateProjectAsync(global::Google.Cloud.ResourceManager.V3.CreateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateProject, null, options, request);
      }
      /// <summary>
      /// Updates the `display_name` and labels of the project identified by the
      /// specified `name` (for example, `projects/415104041262`). Deleting all
      /// labels requires an update mask for labels field.
      ///
      /// The caller must have `resourcemanager.projects.update` permission for this
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateProject(global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the `display_name` and labels of the project identified by the
      /// specified `name` (for example, `projects/415104041262`). Deleting all
      /// labels requires an update mask for labels field.
      ///
      /// The caller must have `resourcemanager.projects.update` permission for this
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateProject(global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProject, null, options, request);
      }
      /// <summary>
      /// Updates the `display_name` and labels of the project identified by the
      /// specified `name` (for example, `projects/415104041262`). Deleting all
      /// labels requires an update mask for labels field.
      ///
      /// The caller must have `resourcemanager.projects.update` permission for this
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateProjectAsync(global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the `display_name` and labels of the project identified by the
      /// specified `name` (for example, `projects/415104041262`). Deleting all
      /// labels requires an update mask for labels field.
      ///
      /// The caller must have `resourcemanager.projects.update` permission for this
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateProjectAsync(global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProject, null, options, request);
      }
      /// <summary>
      /// Move a project to another place in your resource hierarchy, under a new
      /// resource parent.
      ///
      /// Returns an operation which can be used to track the process of the project
      /// move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved project.
      ///
      /// The caller must have `resourcemanager.projects.move` permission on the
      /// project, on the project's current and proposed new parent.
      ///
      /// If project has no current parent, or it currently does not have an
      /// associated organization resource, you will also need the
      /// `resourcemanager.projects.setIamPolicy` permission in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation MoveProject(global::Google.Cloud.ResourceManager.V3.MoveProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move a project to another place in your resource hierarchy, under a new
      /// resource parent.
      ///
      /// Returns an operation which can be used to track the process of the project
      /// move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved project.
      ///
      /// The caller must have `resourcemanager.projects.move` permission on the
      /// project, on the project's current and proposed new parent.
      ///
      /// If project has no current parent, or it currently does not have an
      /// associated organization resource, you will also need the
      /// `resourcemanager.projects.setIamPolicy` permission in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation MoveProject(global::Google.Cloud.ResourceManager.V3.MoveProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MoveProject, null, options, request);
      }
      /// <summary>
      /// Move a project to another place in your resource hierarchy, under a new
      /// resource parent.
      ///
      /// Returns an operation which can be used to track the process of the project
      /// move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved project.
      ///
      /// The caller must have `resourcemanager.projects.move` permission on the
      /// project, on the project's current and proposed new parent.
      ///
      /// If project has no current parent, or it currently does not have an
      /// associated organization resource, you will also need the
      /// `resourcemanager.projects.setIamPolicy` permission in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> MoveProjectAsync(global::Google.Cloud.ResourceManager.V3.MoveProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MoveProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Move a project to another place in your resource hierarchy, under a new
      /// resource parent.
      ///
      /// Returns an operation which can be used to track the process of the project
      /// move workflow.
      /// Upon success, the `Operation.response` field will be populated with the
      /// moved project.
      ///
      /// The caller must have `resourcemanager.projects.move` permission on the
      /// project, on the project's current and proposed new parent.
      ///
      /// If project has no current parent, or it currently does not have an
      /// associated organization resource, you will also need the
      /// `resourcemanager.projects.setIamPolicy` permission in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> MoveProjectAsync(global::Google.Cloud.ResourceManager.V3.MoveProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MoveProject, null, options, request);
      }
      /// <summary>
      /// Marks the project identified by the specified
      /// `name` (for example, `projects/415104041262`) for deletion.
      ///
      /// This method will only affect the project if it has a lifecycle state of
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE].
      ///
      /// This method changes the Project's lifecycle state from
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE]
      /// to
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Project.State.DELETE_REQUESTED].
      /// The deletion starts at an unspecified time,
      /// at which point the Project is no longer accessible.
      ///
      /// Until the deletion completes, you can check the lifecycle state
      /// checked by retrieving the project with [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// and the project remains visible to [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects].
      /// However, you cannot update the project.
      ///
      /// After the deletion completes, the project is not retrievable by
      /// the  [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects], and
      /// [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
      /// methods.
      ///
      /// This method behaves idempotently, such that deleting a `DELETE_REQUESTED`
      /// project will not cause an error, but also won't do anything.
      ///
      /// The caller must have `resourcemanager.projects.delete` permissions for this
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteProject(global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the project identified by the specified
      /// `name` (for example, `projects/415104041262`) for deletion.
      ///
      /// This method will only affect the project if it has a lifecycle state of
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE].
      ///
      /// This method changes the Project's lifecycle state from
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE]
      /// to
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Project.State.DELETE_REQUESTED].
      /// The deletion starts at an unspecified time,
      /// at which point the Project is no longer accessible.
      ///
      /// Until the deletion completes, you can check the lifecycle state
      /// checked by retrieving the project with [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// and the project remains visible to [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects].
      /// However, you cannot update the project.
      ///
      /// After the deletion completes, the project is not retrievable by
      /// the  [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects], and
      /// [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
      /// methods.
      ///
      /// This method behaves idempotently, such that deleting a `DELETE_REQUESTED`
      /// project will not cause an error, but also won't do anything.
      ///
      /// The caller must have `resourcemanager.projects.delete` permissions for this
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteProject(global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteProject, null, options, request);
      }
      /// <summary>
      /// Marks the project identified by the specified
      /// `name` (for example, `projects/415104041262`) for deletion.
      ///
      /// This method will only affect the project if it has a lifecycle state of
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE].
      ///
      /// This method changes the Project's lifecycle state from
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE]
      /// to
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Project.State.DELETE_REQUESTED].
      /// The deletion starts at an unspecified time,
      /// at which point the Project is no longer accessible.
      ///
      /// Until the deletion completes, you can check the lifecycle state
      /// checked by retrieving the project with [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// and the project remains visible to [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects].
      /// However, you cannot update the project.
      ///
      /// After the deletion completes, the project is not retrievable by
      /// the  [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects], and
      /// [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
      /// methods.
      ///
      /// This method behaves idempotently, such that deleting a `DELETE_REQUESTED`
      /// project will not cause an error, but also won't do anything.
      ///
      /// The caller must have `resourcemanager.projects.delete` permissions for this
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteProjectAsync(global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the project identified by the specified
      /// `name` (for example, `projects/415104041262`) for deletion.
      ///
      /// This method will only affect the project if it has a lifecycle state of
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE].
      ///
      /// This method changes the Project's lifecycle state from
      /// [ACTIVE][google.cloud.resourcemanager.v3.Project.State.ACTIVE]
      /// to
      /// [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Project.State.DELETE_REQUESTED].
      /// The deletion starts at an unspecified time,
      /// at which point the Project is no longer accessible.
      ///
      /// Until the deletion completes, you can check the lifecycle state
      /// checked by retrieving the project with [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// and the project remains visible to [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects].
      /// However, you cannot update the project.
      ///
      /// After the deletion completes, the project is not retrievable by
      /// the  [GetProject]
      /// [google.cloud.resourcemanager.v3.Projects.GetProject],
      /// [ListProjects]
      /// [google.cloud.resourcemanager.v3.Projects.ListProjects], and
      /// [SearchProjects][google.cloud.resourcemanager.v3.Projects.SearchProjects]
      /// methods.
      ///
      /// This method behaves idempotently, such that deleting a `DELETE_REQUESTED`
      /// project will not cause an error, but also won't do anything.
      ///
      /// The caller must have `resourcemanager.projects.delete` permissions for this
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteProjectAsync(global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteProject, null, options, request);
      }
      /// <summary>
      /// Restores the project identified by the specified
      /// `name` (for example, `projects/415104041262`).
      /// You can only use this method for a project that has a lifecycle state of
      /// [DELETE_REQUESTED]
      /// [Projects.State.DELETE_REQUESTED].
      /// After deletion starts, the project cannot be restored.
      ///
      /// The caller must have `resourcemanager.projects.undelete` permission for
      /// this project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteProject(global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restores the project identified by the specified
      /// `name` (for example, `projects/415104041262`).
      /// You can only use this method for a project that has a lifecycle state of
      /// [DELETE_REQUESTED]
      /// [Projects.State.DELETE_REQUESTED].
      /// After deletion starts, the project cannot be restored.
      ///
      /// The caller must have `resourcemanager.projects.undelete` permission for
      /// this project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteProject(global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteProject, null, options, request);
      }
      /// <summary>
      /// Restores the project identified by the specified
      /// `name` (for example, `projects/415104041262`).
      /// You can only use this method for a project that has a lifecycle state of
      /// [DELETE_REQUESTED]
      /// [Projects.State.DELETE_REQUESTED].
      /// After deletion starts, the project cannot be restored.
      ///
      /// The caller must have `resourcemanager.projects.undelete` permission for
      /// this project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteProjectAsync(global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restores the project identified by the specified
      /// `name` (for example, `projects/415104041262`).
      /// You can only use this method for a project that has a lifecycle state of
      /// [DELETE_REQUESTED]
      /// [Projects.State.DELETE_REQUESTED].
      /// After deletion starts, the project cannot be restored.
      ///
      /// The caller must have `resourcemanager.projects.undelete` permission for
      /// this project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteProjectAsync(global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteProject, null, options, request);
      }
      /// <summary>
      /// Returns the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      /// Permission is denied if the policy or the resource do not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      /// Permission is denied if the policy or the resource do not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      /// Permission is denied if the policy or the resource do not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      /// Permission is denied if the policy or the resource do not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      ///
      /// CAUTION: This method will replace the existing policy, and cannot be used
      /// to append additional IAM settings.
      ///
      /// Note: Removing service accounts from policies or changing their roles can
      /// render services completely inoperable. It is important to understand how
      /// the service account is being used before removing or updating its roles.
      ///
      /// The following constraints apply when using `setIamPolicy()`:
      ///
      /// + Project does not support `allUsers` and `allAuthenticatedUsers` as
      /// `members` in a `Binding` of a `Policy`.
      ///
      /// + The owner role can be granted to a `user`, `serviceAccount`, or a group
      /// that is part of an organization. For example,
      /// group@myownpersonaldomain.com could be added as an owner to a project in
      /// the myownpersonaldomain.com organization, but not the examplepetstore.com
      /// organization.
      ///
      /// + Service accounts can be made owners of a project directly
      /// without any restrictions. However, to be added as an owner, a user must be
      /// invited using the Cloud Platform console and must accept the invitation.
      ///
      /// + A user cannot be granted the owner role using `setIamPolicy()`. The user
      /// must be granted the owner role using the Cloud Platform Console and must
      /// explicitly accept the invitation.
      ///
      /// + Invitations to grant the owner role cannot be sent using
      /// `setIamPolicy()`;
      /// they must be sent only using the Cloud Platform Console.
      ///
      /// + If the project is not part of an organization, there must be at least
      /// one owner who has accepted the Terms of Service (ToS) agreement in the
      /// policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
      /// from the policy will fail. This restriction also applies to legacy
      /// projects that no longer have owners who have accepted the ToS. Edits to
      /// IAM policies will be rejected until the lack of a ToS-accepting owner is
      /// rectified. If the project is part of an organization, you can remove all
      /// owners, potentially making the organization inaccessible.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      ///
      /// CAUTION: This method will replace the existing policy, and cannot be used
      /// to append additional IAM settings.
      ///
      /// Note: Removing service accounts from policies or changing their roles can
      /// render services completely inoperable. It is important to understand how
      /// the service account is being used before removing or updating its roles.
      ///
      /// The following constraints apply when using `setIamPolicy()`:
      ///
      /// + Project does not support `allUsers` and `allAuthenticatedUsers` as
      /// `members` in a `Binding` of a `Policy`.
      ///
      /// + The owner role can be granted to a `user`, `serviceAccount`, or a group
      /// that is part of an organization. For example,
      /// group@myownpersonaldomain.com could be added as an owner to a project in
      /// the myownpersonaldomain.com organization, but not the examplepetstore.com
      /// organization.
      ///
      /// + Service accounts can be made owners of a project directly
      /// without any restrictions. However, to be added as an owner, a user must be
      /// invited using the Cloud Platform console and must accept the invitation.
      ///
      /// + A user cannot be granted the owner role using `setIamPolicy()`. The user
      /// must be granted the owner role using the Cloud Platform Console and must
      /// explicitly accept the invitation.
      ///
      /// + Invitations to grant the owner role cannot be sent using
      /// `setIamPolicy()`;
      /// they must be sent only using the Cloud Platform Console.
      ///
      /// + If the project is not part of an organization, there must be at least
      /// one owner who has accepted the Terms of Service (ToS) agreement in the
      /// policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
      /// from the policy will fail. This restriction also applies to legacy
      /// projects that no longer have owners who have accepted the ToS. Edits to
      /// IAM policies will be rejected until the lack of a ToS-accepting owner is
      /// rectified. If the project is part of an organization, you can remove all
      /// owners, potentially making the organization inaccessible.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      ///
      /// CAUTION: This method will replace the existing policy, and cannot be used
      /// to append additional IAM settings.
      ///
      /// Note: Removing service accounts from policies or changing their roles can
      /// render services completely inoperable. It is important to understand how
      /// the service account is being used before removing or updating its roles.
      ///
      /// The following constraints apply when using `setIamPolicy()`:
      ///
      /// + Project does not support `allUsers` and `allAuthenticatedUsers` as
      /// `members` in a `Binding` of a `Policy`.
      ///
      /// + The owner role can be granted to a `user`, `serviceAccount`, or a group
      /// that is part of an organization. For example,
      /// group@myownpersonaldomain.com could be added as an owner to a project in
      /// the myownpersonaldomain.com organization, but not the examplepetstore.com
      /// organization.
      ///
      /// + Service accounts can be made owners of a project directly
      /// without any restrictions. However, to be added as an owner, a user must be
      /// invited using the Cloud Platform console and must accept the invitation.
      ///
      /// + A user cannot be granted the owner role using `setIamPolicy()`. The user
      /// must be granted the owner role using the Cloud Platform Console and must
      /// explicitly accept the invitation.
      ///
      /// + Invitations to grant the owner role cannot be sent using
      /// `setIamPolicy()`;
      /// they must be sent only using the Cloud Platform Console.
      ///
      /// + If the project is not part of an organization, there must be at least
      /// one owner who has accepted the Terms of Service (ToS) agreement in the
      /// policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
      /// from the policy will fail. This restriction also applies to legacy
      /// projects that no longer have owners who have accepted the ToS. Edits to
      /// IAM policies will be rejected until the lack of a ToS-accepting owner is
      /// rectified. If the project is part of an organization, you can remove all
      /// owners, potentially making the organization inaccessible.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the IAM access control policy for the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123.
      ///
      /// CAUTION: This method will replace the existing policy, and cannot be used
      /// to append additional IAM settings.
      ///
      /// Note: Removing service accounts from policies or changing their roles can
      /// render services completely inoperable. It is important to understand how
      /// the service account is being used before removing or updating its roles.
      ///
      /// The following constraints apply when using `setIamPolicy()`:
      ///
      /// + Project does not support `allUsers` and `allAuthenticatedUsers` as
      /// `members` in a `Binding` of a `Policy`.
      ///
      /// + The owner role can be granted to a `user`, `serviceAccount`, or a group
      /// that is part of an organization. For example,
      /// group@myownpersonaldomain.com could be added as an owner to a project in
      /// the myownpersonaldomain.com organization, but not the examplepetstore.com
      /// organization.
      ///
      /// + Service accounts can be made owners of a project directly
      /// without any restrictions. However, to be added as an owner, a user must be
      /// invited using the Cloud Platform console and must accept the invitation.
      ///
      /// + A user cannot be granted the owner role using `setIamPolicy()`. The user
      /// must be granted the owner role using the Cloud Platform Console and must
      /// explicitly accept the invitation.
      ///
      /// + Invitations to grant the owner role cannot be sent using
      /// `setIamPolicy()`;
      /// they must be sent only using the Cloud Platform Console.
      ///
      /// + If the project is not part of an organization, there must be at least
      /// one owner who has accepted the Terms of Service (ToS) agreement in the
      /// policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner
      /// from the policy will fail. This restriction also applies to legacy
      /// projects that no longer have owners who have accepted the ToS. Edits to
      /// IAM policies will be rejected until the lack of a ToS-accepting owner is
      /// rectified. If the project is part of an organization, you can remove all
      /// owners, potentially making the organization inaccessible.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on the specified project, in the
      /// format `projects/{ProjectIdOrNumber}` e.g. projects/123..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ProjectsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProjectsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ProjectsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetProject, serviceImpl.GetProject)
          .AddMethod(__Method_ListProjects, serviceImpl.ListProjects)
          .AddMethod(__Method_SearchProjects, serviceImpl.SearchProjects)
          .AddMethod(__Method_CreateProject, serviceImpl.CreateProject)
          .AddMethod(__Method_UpdateProject, serviceImpl.UpdateProject)
          .AddMethod(__Method_MoveProject, serviceImpl.MoveProject)
          .AddMethod(__Method_DeleteProject, serviceImpl.DeleteProject)
          .AddMethod(__Method_UndeleteProject, serviceImpl.UndeleteProject)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProjectsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.GetProjectRequest, global::Google.Cloud.ResourceManager.V3.Project>(serviceImpl.GetProject));
      serviceBinder.AddMethod(__Method_ListProjects, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.ListProjectsRequest, global::Google.Cloud.ResourceManager.V3.ListProjectsResponse>(serviceImpl.ListProjects));
      serviceBinder.AddMethod(__Method_SearchProjects, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.SearchProjectsRequest, global::Google.Cloud.ResourceManager.V3.SearchProjectsResponse>(serviceImpl.SearchProjects));
      serviceBinder.AddMethod(__Method_CreateProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.CreateProjectRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateProject));
      serviceBinder.AddMethod(__Method_UpdateProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.UpdateProjectRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateProject));
      serviceBinder.AddMethod(__Method_MoveProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.MoveProjectRequest, global::Google.LongRunning.Operation>(serviceImpl.MoveProject));
      serviceBinder.AddMethod(__Method_DeleteProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.DeleteProjectRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteProject));
      serviceBinder.AddMethod(__Method_UndeleteProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ResourceManager.V3.UndeleteProjectRequest, global::Google.LongRunning.Operation>(serviceImpl.UndeleteProject));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
}
#endregion
