// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/firestore/admin/v1/firestore_admin.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Firestore.Admin.V1 {
  /// <summary>
  /// The Cloud Firestore Admin API.
  ///
  /// This API provides several administrative services for Cloud Firestore.
  ///
  /// Project, Database, Namespace, Collection, Collection Group, and Document are
  /// used as defined in the Google Cloud Firestore API.
  ///
  /// Operation: An Operation represents work being performed in the background.
  ///
  /// The index service manages Cloud Firestore indexes.
  ///
  /// Index creation is performed asynchronously.
  /// An Operation resource is created for each such asynchronous operation.
  /// The state of the operation (including any errors encountered)
  /// may be queried via the Operation resource.
  ///
  /// The Operations collection provides a record of actions performed for the
  /// specified Project (including any Operations in progress). Operations are not
  /// created directly but through calls on other collections or resources.
  ///
  /// An Operation that is done may be deleted so that it is no longer listed as
  /// part of the Operation collection. Operations are garbage collected after
  /// 30 days. By default, ListOperations will only return in progress and failed
  /// operations. To list completed operation, issue a ListOperations request with
  /// the filter `done: true`.
  ///
  /// Operations are created by service `FirestoreAdmin`, but are accessed via
  /// service `google.longrunning.Operations`.
  /// </summary>
  public static partial class FirestoreAdmin
  {
    static readonly string __ServiceName = "google.firestore.admin.v1.FirestoreAdmin";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest> __Marshaller_google_firestore_admin_v1_CreateIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest> __Marshaller_google_firestore_admin_v1_ListIndexesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse> __Marshaller_google_firestore_admin_v1_ListIndexesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest> __Marshaller_google_firestore_admin_v1_GetIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.Index> __Marshaller_google_firestore_admin_v1_Index = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.Index.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest> __Marshaller_google_firestore_admin_v1_DeleteIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest> __Marshaller_google_firestore_admin_v1_GetFieldRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.Field> __Marshaller_google_firestore_admin_v1_Field = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.Field.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest> __Marshaller_google_firestore_admin_v1_UpdateFieldRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest> __Marshaller_google_firestore_admin_v1_ListFieldsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse> __Marshaller_google_firestore_admin_v1_ListFieldsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest> __Marshaller_google_firestore_admin_v1_ExportDocumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest> __Marshaller_google_firestore_admin_v1_ImportDocumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest> __Marshaller_google_firestore_admin_v1_BulkDeleteDocumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest> __Marshaller_google_firestore_admin_v1_CreateDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest> __Marshaller_google_firestore_admin_v1_GetDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.Database> __Marshaller_google_firestore_admin_v1_Database = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.Database.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest> __Marshaller_google_firestore_admin_v1_ListDatabasesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse> __Marshaller_google_firestore_admin_v1_ListDatabasesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest> __Marshaller_google_firestore_admin_v1_UpdateDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest> __Marshaller_google_firestore_admin_v1_DeleteDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest> __Marshaller_google_firestore_admin_v1_GetBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.Backup> __Marshaller_google_firestore_admin_v1_Backup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.Backup.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest> __Marshaller_google_firestore_admin_v1_ListBackupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse> __Marshaller_google_firestore_admin_v1_ListBackupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest> __Marshaller_google_firestore_admin_v1_DeleteBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest> __Marshaller_google_firestore_admin_v1_RestoreDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest> __Marshaller_google_firestore_admin_v1_CreateBackupScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> __Marshaller_google_firestore_admin_v1_BackupSchedule = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest> __Marshaller_google_firestore_admin_v1_GetBackupScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest> __Marshaller_google_firestore_admin_v1_ListBackupSchedulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse> __Marshaller_google_firestore_admin_v1_ListBackupSchedulesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest> __Marshaller_google_firestore_admin_v1_UpdateBackupScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest> __Marshaller_google_firestore_admin_v1_DeleteBackupScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest, global::Google.LongRunning.Operation> __Method_CreateIndex = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateIndex",
        __Marshaller_google_firestore_admin_v1_CreateIndexRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest, global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse> __Method_ListIndexes = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest, global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListIndexes",
        __Marshaller_google_firestore_admin_v1_ListIndexesRequest,
        __Marshaller_google_firestore_admin_v1_ListIndexesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest, global::Google.Cloud.Firestore.Admin.V1.Index> __Method_GetIndex = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest, global::Google.Cloud.Firestore.Admin.V1.Index>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIndex",
        __Marshaller_google_firestore_admin_v1_GetIndexRequest,
        __Marshaller_google_firestore_admin_v1_Index);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteIndex = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteIndex",
        __Marshaller_google_firestore_admin_v1_DeleteIndexRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest, global::Google.Cloud.Firestore.Admin.V1.Field> __Method_GetField = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest, global::Google.Cloud.Firestore.Admin.V1.Field>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetField",
        __Marshaller_google_firestore_admin_v1_GetFieldRequest,
        __Marshaller_google_firestore_admin_v1_Field);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest, global::Google.LongRunning.Operation> __Method_UpdateField = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateField",
        __Marshaller_google_firestore_admin_v1_UpdateFieldRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest, global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse> __Method_ListFields = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest, global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFields",
        __Marshaller_google_firestore_admin_v1_ListFieldsRequest,
        __Marshaller_google_firestore_admin_v1_ListFieldsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest, global::Google.LongRunning.Operation> __Method_ExportDocuments = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExportDocuments",
        __Marshaller_google_firestore_admin_v1_ExportDocumentsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest, global::Google.LongRunning.Operation> __Method_ImportDocuments = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportDocuments",
        __Marshaller_google_firestore_admin_v1_ImportDocumentsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest, global::Google.LongRunning.Operation> __Method_BulkDeleteDocuments = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BulkDeleteDocuments",
        __Marshaller_google_firestore_admin_v1_BulkDeleteDocumentsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest, global::Google.LongRunning.Operation> __Method_CreateDatabase = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDatabase",
        __Marshaller_google_firestore_admin_v1_CreateDatabaseRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest, global::Google.Cloud.Firestore.Admin.V1.Database> __Method_GetDatabase = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest, global::Google.Cloud.Firestore.Admin.V1.Database>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatabase",
        __Marshaller_google_firestore_admin_v1_GetDatabaseRequest,
        __Marshaller_google_firestore_admin_v1_Database);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest, global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse> __Method_ListDatabases = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest, global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatabases",
        __Marshaller_google_firestore_admin_v1_ListDatabasesRequest,
        __Marshaller_google_firestore_admin_v1_ListDatabasesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest, global::Google.LongRunning.Operation> __Method_UpdateDatabase = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDatabase",
        __Marshaller_google_firestore_admin_v1_UpdateDatabaseRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest, global::Google.LongRunning.Operation> __Method_DeleteDatabase = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDatabase",
        __Marshaller_google_firestore_admin_v1_DeleteDatabaseRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest, global::Google.Cloud.Firestore.Admin.V1.Backup> __Method_GetBackup = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest, global::Google.Cloud.Firestore.Admin.V1.Backup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBackup",
        __Marshaller_google_firestore_admin_v1_GetBackupRequest,
        __Marshaller_google_firestore_admin_v1_Backup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest, global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse> __Method_ListBackups = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest, global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBackups",
        __Marshaller_google_firestore_admin_v1_ListBackupsRequest,
        __Marshaller_google_firestore_admin_v1_ListBackupsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteBackup = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBackup",
        __Marshaller_google_firestore_admin_v1_DeleteBackupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest, global::Google.LongRunning.Operation> __Method_RestoreDatabase = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestoreDatabase",
        __Marshaller_google_firestore_admin_v1_RestoreDatabaseRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> __Method_CreateBackupSchedule = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBackupSchedule",
        __Marshaller_google_firestore_admin_v1_CreateBackupScheduleRequest,
        __Marshaller_google_firestore_admin_v1_BackupSchedule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> __Method_GetBackupSchedule = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBackupSchedule",
        __Marshaller_google_firestore_admin_v1_GetBackupScheduleRequest,
        __Marshaller_google_firestore_admin_v1_BackupSchedule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest, global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse> __Method_ListBackupSchedules = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest, global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBackupSchedules",
        __Marshaller_google_firestore_admin_v1_ListBackupSchedulesRequest,
        __Marshaller_google_firestore_admin_v1_ListBackupSchedulesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> __Method_UpdateBackupSchedule = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBackupSchedule",
        __Marshaller_google_firestore_admin_v1_UpdateBackupScheduleRequest,
        __Marshaller_google_firestore_admin_v1_BackupSchedule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteBackupSchedule = new grpc::Method<global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBackupSchedule",
        __Marshaller_google_firestore_admin_v1_DeleteBackupScheduleRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Firestore.Admin.V1.FirestoreAdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FirestoreAdmin</summary>
    [grpc::BindServiceMethod(typeof(FirestoreAdmin), "BindService")]
    public abstract partial class FirestoreAdminBase
    {
      /// <summary>
      /// Creates a composite index. This returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the creation. The metadata for the operation
      /// will be the type
      /// [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateIndex(global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists composite indexes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse> ListIndexes(global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a composite index.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.Index> GetIndex(global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a composite index.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteIndex(global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the metadata and configuration for a Field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.Field> GetField(global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a field configuration. Currently, field updates apply only to
      /// single field index configuration. However, calls to
      /// [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField]
      /// should provide a field mask to avoid changing any configuration that the
      /// caller isn't aware of. The field mask should be specified as: `{ paths:
      /// "index_config" }`.
      ///
      /// This call returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the field update. The metadata for the
      /// operation will be the type
      /// [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
      ///
      /// To configure the default field settings for the database, use
      /// the special `Field` with resource name:
      /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateField(global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the field configuration and metadata for this database.
      ///
      /// Currently,
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// only supports listing fields that have been explicitly overridden. To issue
      /// this query, call
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// with the filter set to `indexConfig.usesAncestorConfig:false` or
      /// `ttlConfig:*`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse> ListFields(global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Exports a copy of all or a subset of documents from Google Cloud Firestore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// documents may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      ///
      /// For more details on export behavior and output format, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/export-import
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ExportDocuments(global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Imports documents into Google Cloud Firestore. Existing documents with the
      /// same name are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportDocuments operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Firestore.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ImportDocuments(global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Bulk deletes a subset of documents from Google Cloud Firestore.
      /// Documents created or updated after the underlying system starts to process
      /// the request will not be deleted. The bulk delete occurs in the background
      /// and its progress can be monitored and managed via the Operation resource
      /// that is created.
      ///
      /// For more details on bulk delete behavior, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/bulk-delete
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> BulkDeleteDocuments(global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateDatabase(global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets information about a database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.Database> GetDatabase(global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all the databases in the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse> ListDatabases(global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateDatabase(global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteDatabase(global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets information about a backup.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.Backup> GetBackup(global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all the backups.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse> ListBackups(global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a backup.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackup(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new database by restoring from an existing backup.
      ///
      /// The new database must be in the same cloud region or multi-region location
      /// as the existing backup. This behaves similar to
      /// [FirestoreAdmin.CreateDatabase][google.firestore.admin.v1.FirestoreAdmin.CreateDatabase]
      /// except instead of creating a new empty database, a new database is created
      /// with the database type, index configuration, and documents from an existing
      /// backup.
      ///
      /// The [long-running operation][google.longrunning.Operation] can be used to
      /// track the progress of the restore, with the Operation's
      /// [metadata][google.longrunning.Operation.metadata] field type being the
      /// [RestoreDatabaseMetadata][google.firestore.admin.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type is the
      /// [Database][google.firestore.admin.v1.Database] if the restore was
      /// successful. The new database is not readable or writeable until the LRO has
      /// completed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RestoreDatabase(global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a backup schedule on a database.
      /// At most two backup schedules can be configured on a database, one daily
      /// backup schedule and one weekly backup schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> CreateBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets information about a backup schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> GetBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List backup schedules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse> ListBackupSchedules(global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> UpdateBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FirestoreAdmin</summary>
    public partial class FirestoreAdminClient : grpc::ClientBase<FirestoreAdminClient>
    {
      /// <summary>Creates a new client for FirestoreAdmin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FirestoreAdminClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FirestoreAdmin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FirestoreAdminClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FirestoreAdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FirestoreAdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a composite index. This returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the creation. The metadata for the operation
      /// will be the type
      /// [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateIndex(global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a composite index. This returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the creation. The metadata for the operation
      /// will be the type
      /// [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateIndex(global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateIndex, null, options, request);
      }
      /// <summary>
      /// Creates a composite index. This returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the creation. The metadata for the operation
      /// will be the type
      /// [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateIndexAsync(global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a composite index. This returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the creation. The metadata for the operation
      /// will be the type
      /// [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateIndexAsync(global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateIndex, null, options, request);
      }
      /// <summary>
      /// Lists composite indexes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse ListIndexes(global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIndexes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists composite indexes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse ListIndexes(global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListIndexes, null, options, request);
      }
      /// <summary>
      /// Lists composite indexes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse> ListIndexesAsync(global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIndexesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists composite indexes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse> ListIndexesAsync(global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListIndexes, null, options, request);
      }
      /// <summary>
      /// Gets a composite index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.Index GetIndex(global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a composite index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.Index GetIndex(global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIndex, null, options, request);
      }
      /// <summary>
      /// Gets a composite index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.Index> GetIndexAsync(global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a composite index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.Index> GetIndexAsync(global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIndex, null, options, request);
      }
      /// <summary>
      /// Deletes a composite index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteIndex(global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a composite index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteIndex(global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteIndex, null, options, request);
      }
      /// <summary>
      /// Deletes a composite index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteIndexAsync(global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a composite index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteIndexAsync(global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteIndex, null, options, request);
      }
      /// <summary>
      /// Gets the metadata and configuration for a Field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.Field GetField(global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetField(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the metadata and configuration for a Field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.Field GetField(global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetField, null, options, request);
      }
      /// <summary>
      /// Gets the metadata and configuration for a Field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.Field> GetFieldAsync(global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFieldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the metadata and configuration for a Field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.Field> GetFieldAsync(global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetField, null, options, request);
      }
      /// <summary>
      /// Updates a field configuration. Currently, field updates apply only to
      /// single field index configuration. However, calls to
      /// [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField]
      /// should provide a field mask to avoid changing any configuration that the
      /// caller isn't aware of. The field mask should be specified as: `{ paths:
      /// "index_config" }`.
      ///
      /// This call returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the field update. The metadata for the
      /// operation will be the type
      /// [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
      ///
      /// To configure the default field settings for the database, use
      /// the special `Field` with resource name:
      /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateField(global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateField(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a field configuration. Currently, field updates apply only to
      /// single field index configuration. However, calls to
      /// [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField]
      /// should provide a field mask to avoid changing any configuration that the
      /// caller isn't aware of. The field mask should be specified as: `{ paths:
      /// "index_config" }`.
      ///
      /// This call returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the field update. The metadata for the
      /// operation will be the type
      /// [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
      ///
      /// To configure the default field settings for the database, use
      /// the special `Field` with resource name:
      /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateField(global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateField, null, options, request);
      }
      /// <summary>
      /// Updates a field configuration. Currently, field updates apply only to
      /// single field index configuration. However, calls to
      /// [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField]
      /// should provide a field mask to avoid changing any configuration that the
      /// caller isn't aware of. The field mask should be specified as: `{ paths:
      /// "index_config" }`.
      ///
      /// This call returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the field update. The metadata for the
      /// operation will be the type
      /// [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
      ///
      /// To configure the default field settings for the database, use
      /// the special `Field` with resource name:
      /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateFieldAsync(global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFieldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a field configuration. Currently, field updates apply only to
      /// single field index configuration. However, calls to
      /// [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField]
      /// should provide a field mask to avoid changing any configuration that the
      /// caller isn't aware of. The field mask should be specified as: `{ paths:
      /// "index_config" }`.
      ///
      /// This call returns a
      /// [google.longrunning.Operation][google.longrunning.Operation] which may be
      /// used to track the status of the field update. The metadata for the
      /// operation will be the type
      /// [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
      ///
      /// To configure the default field settings for the database, use
      /// the special `Field` with resource name:
      /// `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateFieldAsync(global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateField, null, options, request);
      }
      /// <summary>
      /// Lists the field configuration and metadata for this database.
      ///
      /// Currently,
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// only supports listing fields that have been explicitly overridden. To issue
      /// this query, call
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// with the filter set to `indexConfig.usesAncestorConfig:false` or
      /// `ttlConfig:*`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse ListFields(global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFields(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the field configuration and metadata for this database.
      ///
      /// Currently,
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// only supports listing fields that have been explicitly overridden. To issue
      /// this query, call
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// with the filter set to `indexConfig.usesAncestorConfig:false` or
      /// `ttlConfig:*`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse ListFields(global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFields, null, options, request);
      }
      /// <summary>
      /// Lists the field configuration and metadata for this database.
      ///
      /// Currently,
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// only supports listing fields that have been explicitly overridden. To issue
      /// this query, call
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// with the filter set to `indexConfig.usesAncestorConfig:false` or
      /// `ttlConfig:*`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse> ListFieldsAsync(global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFieldsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the field configuration and metadata for this database.
      ///
      /// Currently,
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// only supports listing fields that have been explicitly overridden. To issue
      /// this query, call
      /// [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
      /// with the filter set to `indexConfig.usesAncestorConfig:false` or
      /// `ttlConfig:*`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse> ListFieldsAsync(global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFields, null, options, request);
      }
      /// <summary>
      /// Exports a copy of all or a subset of documents from Google Cloud Firestore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// documents may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      ///
      /// For more details on export behavior and output format, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/export-import
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ExportDocuments(global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportDocuments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports a copy of all or a subset of documents from Google Cloud Firestore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// documents may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      ///
      /// For more details on export behavior and output format, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/export-import
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ExportDocuments(global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExportDocuments, null, options, request);
      }
      /// <summary>
      /// Exports a copy of all or a subset of documents from Google Cloud Firestore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// documents may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      ///
      /// For more details on export behavior and output format, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/export-import
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ExportDocumentsAsync(global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportDocumentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports a copy of all or a subset of documents from Google Cloud Firestore
      /// to another storage system, such as Google Cloud Storage. Recent updates to
      /// documents may not be reflected in the export. The export occurs in the
      /// background and its progress can be monitored and managed via the
      /// Operation resource that is created. The output of an export may only be
      /// used once the associated operation is done. If an export operation is
      /// cancelled before completion it may leave partial data behind in Google
      /// Cloud Storage.
      ///
      /// For more details on export behavior and output format, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/export-import
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ExportDocumentsAsync(global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExportDocuments, null, options, request);
      }
      /// <summary>
      /// Imports documents into Google Cloud Firestore. Existing documents with the
      /// same name are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportDocuments operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Firestore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ImportDocuments(global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportDocuments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports documents into Google Cloud Firestore. Existing documents with the
      /// same name are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportDocuments operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Firestore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ImportDocuments(global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportDocuments, null, options, request);
      }
      /// <summary>
      /// Imports documents into Google Cloud Firestore. Existing documents with the
      /// same name are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportDocuments operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Firestore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportDocumentsAsync(global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportDocumentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports documents into Google Cloud Firestore. Existing documents with the
      /// same name are overwritten. The import occurs in the background and its
      /// progress can be monitored and managed via the Operation resource that is
      /// created. If an ImportDocuments operation is cancelled, it is possible
      /// that a subset of the data has already been imported to Cloud Firestore.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportDocumentsAsync(global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportDocuments, null, options, request);
      }
      /// <summary>
      /// Bulk deletes a subset of documents from Google Cloud Firestore.
      /// Documents created or updated after the underlying system starts to process
      /// the request will not be deleted. The bulk delete occurs in the background
      /// and its progress can be monitored and managed via the Operation resource
      /// that is created.
      ///
      /// For more details on bulk delete behavior, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/bulk-delete
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BulkDeleteDocuments(global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkDeleteDocuments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bulk deletes a subset of documents from Google Cloud Firestore.
      /// Documents created or updated after the underlying system starts to process
      /// the request will not be deleted. The bulk delete occurs in the background
      /// and its progress can be monitored and managed via the Operation resource
      /// that is created.
      ///
      /// For more details on bulk delete behavior, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/bulk-delete
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BulkDeleteDocuments(global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BulkDeleteDocuments, null, options, request);
      }
      /// <summary>
      /// Bulk deletes a subset of documents from Google Cloud Firestore.
      /// Documents created or updated after the underlying system starts to process
      /// the request will not be deleted. The bulk delete occurs in the background
      /// and its progress can be monitored and managed via the Operation resource
      /// that is created.
      ///
      /// For more details on bulk delete behavior, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/bulk-delete
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BulkDeleteDocumentsAsync(global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkDeleteDocumentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bulk deletes a subset of documents from Google Cloud Firestore.
      /// Documents created or updated after the underlying system starts to process
      /// the request will not be deleted. The bulk delete occurs in the background
      /// and its progress can be monitored and managed via the Operation resource
      /// that is created.
      ///
      /// For more details on bulk delete behavior, refer to:
      /// https://cloud.google.com/firestore/docs/manage-data/bulk-delete
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BulkDeleteDocumentsAsync(global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BulkDeleteDocuments, null, options, request);
      }
      /// <summary>
      /// Create a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateDatabase(global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateDatabase(global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      /// Create a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      /// Gets information about a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.Database GetDatabase(global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets information about a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.Database GetDatabase(global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatabase, null, options, request);
      }
      /// <summary>
      /// Gets information about a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.Database> GetDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets information about a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.Database> GetDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatabase, null, options, request);
      }
      /// <summary>
      /// List all the databases in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse ListDatabases(global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the databases in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse ListDatabases(global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatabases, null, options, request);
      }
      /// <summary>
      /// List all the databases in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse> ListDatabasesAsync(global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all the databases in the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse> ListDatabasesAsync(global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatabases, null, options, request);
      }
      /// <summary>
      /// Updates a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDatabase(global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDatabase(global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDatabase, null, options, request);
      }
      /// <summary>
      /// Updates a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDatabase, null, options, request);
      }
      /// <summary>
      /// Deletes a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteDatabase(global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteDatabase(global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDatabase, null, options, request);
      }
      /// <summary>
      /// Deletes a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDatabase, null, options, request);
      }
      /// <summary>
      /// Gets information about a backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.Backup GetBackup(global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets information about a backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.Backup GetBackup(global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBackup, null, options, request);
      }
      /// <summary>
      /// Gets information about a backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.Backup> GetBackupAsync(global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets information about a backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.Backup> GetBackupAsync(global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBackup, null, options, request);
      }
      /// <summary>
      /// Lists all the backups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse ListBackups(global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the backups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse ListBackups(global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBackups, null, options, request);
      }
      /// <summary>
      /// Lists all the backups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse> ListBackupsAsync(global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the backups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse> ListBackupsAsync(global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBackups, null, options, request);
      }
      /// <summary>
      /// Deletes a backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackup(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackup(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBackup, null, options, request);
      }
      /// <summary>
      /// Deletes a backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupAsync(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupAsync(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBackup, null, options, request);
      }
      /// <summary>
      /// Creates a new database by restoring from an existing backup.
      ///
      /// The new database must be in the same cloud region or multi-region location
      /// as the existing backup. This behaves similar to
      /// [FirestoreAdmin.CreateDatabase][google.firestore.admin.v1.FirestoreAdmin.CreateDatabase]
      /// except instead of creating a new empty database, a new database is created
      /// with the database type, index configuration, and documents from an existing
      /// backup.
      ///
      /// The [long-running operation][google.longrunning.Operation] can be used to
      /// track the progress of the restore, with the Operation's
      /// [metadata][google.longrunning.Operation.metadata] field type being the
      /// [RestoreDatabaseMetadata][google.firestore.admin.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type is the
      /// [Database][google.firestore.admin.v1.Database] if the restore was
      /// successful. The new database is not readable or writeable until the LRO has
      /// completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreDatabase(global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new database by restoring from an existing backup.
      ///
      /// The new database must be in the same cloud region or multi-region location
      /// as the existing backup. This behaves similar to
      /// [FirestoreAdmin.CreateDatabase][google.firestore.admin.v1.FirestoreAdmin.CreateDatabase]
      /// except instead of creating a new empty database, a new database is created
      /// with the database type, index configuration, and documents from an existing
      /// backup.
      ///
      /// The [long-running operation][google.longrunning.Operation] can be used to
      /// track the progress of the restore, with the Operation's
      /// [metadata][google.longrunning.Operation.metadata] field type being the
      /// [RestoreDatabaseMetadata][google.firestore.admin.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type is the
      /// [Database][google.firestore.admin.v1.Database] if the restore was
      /// successful. The new database is not readable or writeable until the LRO has
      /// completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreDatabase(global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestoreDatabase, null, options, request);
      }
      /// <summary>
      /// Creates a new database by restoring from an existing backup.
      ///
      /// The new database must be in the same cloud region or multi-region location
      /// as the existing backup. This behaves similar to
      /// [FirestoreAdmin.CreateDatabase][google.firestore.admin.v1.FirestoreAdmin.CreateDatabase]
      /// except instead of creating a new empty database, a new database is created
      /// with the database type, index configuration, and documents from an existing
      /// backup.
      ///
      /// The [long-running operation][google.longrunning.Operation] can be used to
      /// track the progress of the restore, with the Operation's
      /// [metadata][google.longrunning.Operation.metadata] field type being the
      /// [RestoreDatabaseMetadata][google.firestore.admin.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type is the
      /// [Database][google.firestore.admin.v1.Database] if the restore was
      /// successful. The new database is not readable or writeable until the LRO has
      /// completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new database by restoring from an existing backup.
      ///
      /// The new database must be in the same cloud region or multi-region location
      /// as the existing backup. This behaves similar to
      /// [FirestoreAdmin.CreateDatabase][google.firestore.admin.v1.FirestoreAdmin.CreateDatabase]
      /// except instead of creating a new empty database, a new database is created
      /// with the database type, index configuration, and documents from an existing
      /// backup.
      ///
      /// The [long-running operation][google.longrunning.Operation] can be used to
      /// track the progress of the restore, with the Operation's
      /// [metadata][google.longrunning.Operation.metadata] field type being the
      /// [RestoreDatabaseMetadata][google.firestore.admin.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type is the
      /// [Database][google.firestore.admin.v1.Database] if the restore was
      /// successful. The new database is not readable or writeable until the LRO has
      /// completed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreDatabaseAsync(global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestoreDatabase, null, options, request);
      }
      /// <summary>
      /// Creates a backup schedule on a database.
      /// At most two backup schedules can be configured on a database, one daily
      /// backup schedule and one weekly backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.BackupSchedule CreateBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackupSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a backup schedule on a database.
      /// At most two backup schedules can be configured on a database, one daily
      /// backup schedule and one weekly backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.BackupSchedule CreateBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Creates a backup schedule on a database.
      /// At most two backup schedules can be configured on a database, one daily
      /// backup schedule and one weekly backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> CreateBackupScheduleAsync(global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackupScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a backup schedule on a database.
      /// At most two backup schedules can be configured on a database, one daily
      /// backup schedule and one weekly backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> CreateBackupScheduleAsync(global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Gets information about a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.BackupSchedule GetBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackupSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets information about a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.BackupSchedule GetBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Gets information about a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> GetBackupScheduleAsync(global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackupScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets information about a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> GetBackupScheduleAsync(global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBackupSchedule, null, options, request);
      }
      /// <summary>
      /// List backup schedules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse ListBackupSchedules(global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupSchedules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List backup schedules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse ListBackupSchedules(global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBackupSchedules, null, options, request);
      }
      /// <summary>
      /// List backup schedules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse> ListBackupSchedulesAsync(global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupSchedulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List backup schedules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse> ListBackupSchedulesAsync(global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBackupSchedules, null, options, request);
      }
      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.BackupSchedule UpdateBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackupSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.Admin.V1.BackupSchedule UpdateBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> UpdateBackupScheduleAsync(global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackupScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.Admin.V1.BackupSchedule> UpdateBackupScheduleAsync(global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackupSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackupSchedule(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupScheduleAsync(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackupScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupScheduleAsync(global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBackupSchedule, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override FirestoreAdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FirestoreAdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(FirestoreAdminBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateIndex, serviceImpl.CreateIndex)
          .AddMethod(__Method_ListIndexes, serviceImpl.ListIndexes)
          .AddMethod(__Method_GetIndex, serviceImpl.GetIndex)
          .AddMethod(__Method_DeleteIndex, serviceImpl.DeleteIndex)
          .AddMethod(__Method_GetField, serviceImpl.GetField)
          .AddMethod(__Method_UpdateField, serviceImpl.UpdateField)
          .AddMethod(__Method_ListFields, serviceImpl.ListFields)
          .AddMethod(__Method_ExportDocuments, serviceImpl.ExportDocuments)
          .AddMethod(__Method_ImportDocuments, serviceImpl.ImportDocuments)
          .AddMethod(__Method_BulkDeleteDocuments, serviceImpl.BulkDeleteDocuments)
          .AddMethod(__Method_CreateDatabase, serviceImpl.CreateDatabase)
          .AddMethod(__Method_GetDatabase, serviceImpl.GetDatabase)
          .AddMethod(__Method_ListDatabases, serviceImpl.ListDatabases)
          .AddMethod(__Method_UpdateDatabase, serviceImpl.UpdateDatabase)
          .AddMethod(__Method_DeleteDatabase, serviceImpl.DeleteDatabase)
          .AddMethod(__Method_GetBackup, serviceImpl.GetBackup)
          .AddMethod(__Method_ListBackups, serviceImpl.ListBackups)
          .AddMethod(__Method_DeleteBackup, serviceImpl.DeleteBackup)
          .AddMethod(__Method_RestoreDatabase, serviceImpl.RestoreDatabase)
          .AddMethod(__Method_CreateBackupSchedule, serviceImpl.CreateBackupSchedule)
          .AddMethod(__Method_GetBackupSchedule, serviceImpl.GetBackupSchedule)
          .AddMethod(__Method_ListBackupSchedules, serviceImpl.ListBackupSchedules)
          .AddMethod(__Method_UpdateBackupSchedule, serviceImpl.UpdateBackupSchedule)
          .AddMethod(__Method_DeleteBackupSchedule, serviceImpl.DeleteBackupSchedule).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FirestoreAdminBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.CreateIndexRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateIndex));
      serviceBinder.AddMethod(__Method_ListIndexes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.ListIndexesRequest, global::Google.Cloud.Firestore.Admin.V1.ListIndexesResponse>(serviceImpl.ListIndexes));
      serviceBinder.AddMethod(__Method_GetIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.GetIndexRequest, global::Google.Cloud.Firestore.Admin.V1.Index>(serviceImpl.GetIndex));
      serviceBinder.AddMethod(__Method_DeleteIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.DeleteIndexRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteIndex));
      serviceBinder.AddMethod(__Method_GetField, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.GetFieldRequest, global::Google.Cloud.Firestore.Admin.V1.Field>(serviceImpl.GetField));
      serviceBinder.AddMethod(__Method_UpdateField, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.UpdateFieldRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateField));
      serviceBinder.AddMethod(__Method_ListFields, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.ListFieldsRequest, global::Google.Cloud.Firestore.Admin.V1.ListFieldsResponse>(serviceImpl.ListFields));
      serviceBinder.AddMethod(__Method_ExportDocuments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.ExportDocumentsRequest, global::Google.LongRunning.Operation>(serviceImpl.ExportDocuments));
      serviceBinder.AddMethod(__Method_ImportDocuments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.ImportDocumentsRequest, global::Google.LongRunning.Operation>(serviceImpl.ImportDocuments));
      serviceBinder.AddMethod(__Method_BulkDeleteDocuments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.BulkDeleteDocumentsRequest, global::Google.LongRunning.Operation>(serviceImpl.BulkDeleteDocuments));
      serviceBinder.AddMethod(__Method_CreateDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.CreateDatabaseRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateDatabase));
      serviceBinder.AddMethod(__Method_GetDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.GetDatabaseRequest, global::Google.Cloud.Firestore.Admin.V1.Database>(serviceImpl.GetDatabase));
      serviceBinder.AddMethod(__Method_ListDatabases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.ListDatabasesRequest, global::Google.Cloud.Firestore.Admin.V1.ListDatabasesResponse>(serviceImpl.ListDatabases));
      serviceBinder.AddMethod(__Method_UpdateDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.UpdateDatabaseRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateDatabase));
      serviceBinder.AddMethod(__Method_DeleteDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.DeleteDatabaseRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteDatabase));
      serviceBinder.AddMethod(__Method_GetBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.GetBackupRequest, global::Google.Cloud.Firestore.Admin.V1.Backup>(serviceImpl.GetBackup));
      serviceBinder.AddMethod(__Method_ListBackups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.ListBackupsRequest, global::Google.Cloud.Firestore.Admin.V1.ListBackupsResponse>(serviceImpl.ListBackups));
      serviceBinder.AddMethod(__Method_DeleteBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteBackup));
      serviceBinder.AddMethod(__Method_RestoreDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.RestoreDatabaseRequest, global::Google.LongRunning.Operation>(serviceImpl.RestoreDatabase));
      serviceBinder.AddMethod(__Method_CreateBackupSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.CreateBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule>(serviceImpl.CreateBackupSchedule));
      serviceBinder.AddMethod(__Method_GetBackupSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.GetBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule>(serviceImpl.GetBackupSchedule));
      serviceBinder.AddMethod(__Method_ListBackupSchedules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesRequest, global::Google.Cloud.Firestore.Admin.V1.ListBackupSchedulesResponse>(serviceImpl.ListBackupSchedules));
      serviceBinder.AddMethod(__Method_UpdateBackupSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.UpdateBackupScheduleRequest, global::Google.Cloud.Firestore.Admin.V1.BackupSchedule>(serviceImpl.UpdateBackupSchedule));
      serviceBinder.AddMethod(__Method_DeleteBackupSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.Admin.V1.DeleteBackupScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteBackupSchedule));
    }

  }
}
#endregion
