// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/visionai/v1/streaming_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.VisionAI.V1 {
  /// <summary>
  /// Streaming service for receiving and sending packets.
  /// </summary>
  public static partial class StreamingService
  {
    static readonly string __ServiceName = "google.cloud.visionai.v1.StreamingService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.SendPacketsRequest> __Marshaller_google_cloud_visionai_v1_SendPacketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.SendPacketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.SendPacketsResponse> __Marshaller_google_cloud_visionai_v1_SendPacketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.SendPacketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ReceivePacketsRequest> __Marshaller_google_cloud_visionai_v1_ReceivePacketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ReceivePacketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ReceivePacketsResponse> __Marshaller_google_cloud_visionai_v1_ReceivePacketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ReceivePacketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ReceiveEventsRequest> __Marshaller_google_cloud_visionai_v1_ReceiveEventsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ReceiveEventsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ReceiveEventsResponse> __Marshaller_google_cloud_visionai_v1_ReceiveEventsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ReceiveEventsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest> __Marshaller_google_cloud_visionai_v1_AcquireLeaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.Lease> __Marshaller_google_cloud_visionai_v1_Lease = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.Lease.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.RenewLeaseRequest> __Marshaller_google_cloud_visionai_v1_RenewLeaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.RenewLeaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest> __Marshaller_google_cloud_visionai_v1_ReleaseLeaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse> __Marshaller_google_cloud_visionai_v1_ReleaseLeaseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.SendPacketsRequest, global::Google.Cloud.VisionAI.V1.SendPacketsResponse> __Method_SendPackets = new grpc::Method<global::Google.Cloud.VisionAI.V1.SendPacketsRequest, global::Google.Cloud.VisionAI.V1.SendPacketsResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "SendPackets",
        __Marshaller_google_cloud_visionai_v1_SendPacketsRequest,
        __Marshaller_google_cloud_visionai_v1_SendPacketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ReceivePacketsRequest, global::Google.Cloud.VisionAI.V1.ReceivePacketsResponse> __Method_ReceivePackets = new grpc::Method<global::Google.Cloud.VisionAI.V1.ReceivePacketsRequest, global::Google.Cloud.VisionAI.V1.ReceivePacketsResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ReceivePackets",
        __Marshaller_google_cloud_visionai_v1_ReceivePacketsRequest,
        __Marshaller_google_cloud_visionai_v1_ReceivePacketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ReceiveEventsRequest, global::Google.Cloud.VisionAI.V1.ReceiveEventsResponse> __Method_ReceiveEvents = new grpc::Method<global::Google.Cloud.VisionAI.V1.ReceiveEventsRequest, global::Google.Cloud.VisionAI.V1.ReceiveEventsResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "ReceiveEvents",
        __Marshaller_google_cloud_visionai_v1_ReceiveEventsRequest,
        __Marshaller_google_cloud_visionai_v1_ReceiveEventsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest, global::Google.Cloud.VisionAI.V1.Lease> __Method_AcquireLease = new grpc::Method<global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest, global::Google.Cloud.VisionAI.V1.Lease>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcquireLease",
        __Marshaller_google_cloud_visionai_v1_AcquireLeaseRequest,
        __Marshaller_google_cloud_visionai_v1_Lease);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.RenewLeaseRequest, global::Google.Cloud.VisionAI.V1.Lease> __Method_RenewLease = new grpc::Method<global::Google.Cloud.VisionAI.V1.RenewLeaseRequest, global::Google.Cloud.VisionAI.V1.Lease>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RenewLease",
        __Marshaller_google_cloud_visionai_v1_RenewLeaseRequest,
        __Marshaller_google_cloud_visionai_v1_Lease);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest, global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse> __Method_ReleaseLease = new grpc::Method<global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest, global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReleaseLease",
        __Marshaller_google_cloud_visionai_v1_ReleaseLeaseRequest,
        __Marshaller_google_cloud_visionai_v1_ReleaseLeaseResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.VisionAI.V1.StreamingServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StreamingService</summary>
    [grpc::BindServiceMethod(typeof(StreamingService), "BindService")]
    public abstract partial class StreamingServiceBase
    {
      /// <summary>
      /// Send packets to the series.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SendPackets(grpc::IAsyncStreamReader<global::Google.Cloud.VisionAI.V1.SendPacketsRequest> requestStream, grpc::IServerStreamWriter<global::Google.Cloud.VisionAI.V1.SendPacketsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Receive packets from the series.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ReceivePackets(grpc::IAsyncStreamReader<global::Google.Cloud.VisionAI.V1.ReceivePacketsRequest> requestStream, grpc::IServerStreamWriter<global::Google.Cloud.VisionAI.V1.ReceivePacketsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Receive events given the stream name.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ReceiveEvents(grpc::IAsyncStreamReader<global::Google.Cloud.VisionAI.V1.ReceiveEventsRequest> requestStream, grpc::IServerStreamWriter<global::Google.Cloud.VisionAI.V1.ReceiveEventsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AcquireLease acquires a lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Lease> AcquireLease(global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RenewLease renews a lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Lease> RenewLease(global::Google.Cloud.VisionAI.V1.RenewLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RleaseLease releases a lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse> ReleaseLease(global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StreamingService</summary>
    public partial class StreamingServiceClient : grpc::ClientBase<StreamingServiceClient>
    {
      /// <summary>Creates a new client for StreamingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public StreamingServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StreamingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public StreamingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected StreamingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected StreamingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Send packets to the series.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.VisionAI.V1.SendPacketsRequest, global::Google.Cloud.VisionAI.V1.SendPacketsResponse> SendPackets(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendPackets(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send packets to the series.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.VisionAI.V1.SendPacketsRequest, global::Google.Cloud.VisionAI.V1.SendPacketsResponse> SendPackets(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_SendPackets, null, options);
      }
      /// <summary>
      /// Receive packets from the series.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.VisionAI.V1.ReceivePacketsRequest, global::Google.Cloud.VisionAI.V1.ReceivePacketsResponse> ReceivePackets(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReceivePackets(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Receive packets from the series.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.VisionAI.V1.ReceivePacketsRequest, global::Google.Cloud.VisionAI.V1.ReceivePacketsResponse> ReceivePackets(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ReceivePackets, null, options);
      }
      /// <summary>
      /// Receive events given the stream name.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.VisionAI.V1.ReceiveEventsRequest, global::Google.Cloud.VisionAI.V1.ReceiveEventsResponse> ReceiveEvents(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReceiveEvents(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Receive events given the stream name.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.VisionAI.V1.ReceiveEventsRequest, global::Google.Cloud.VisionAI.V1.ReceiveEventsResponse> ReceiveEvents(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_ReceiveEvents, null, options);
      }
      /// <summary>
      /// AcquireLease acquires a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Lease AcquireLease(global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquireLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AcquireLease acquires a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Lease AcquireLease(global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcquireLease, null, options, request);
      }
      /// <summary>
      /// AcquireLease acquires a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Lease> AcquireLeaseAsync(global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquireLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AcquireLease acquires a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Lease> AcquireLeaseAsync(global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcquireLease, null, options, request);
      }
      /// <summary>
      /// RenewLease renews a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Lease RenewLease(global::Google.Cloud.VisionAI.V1.RenewLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenewLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RenewLease renews a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Lease RenewLease(global::Google.Cloud.VisionAI.V1.RenewLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenewLease, null, options, request);
      }
      /// <summary>
      /// RenewLease renews a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Lease> RenewLeaseAsync(global::Google.Cloud.VisionAI.V1.RenewLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RenewLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RenewLease renews a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Lease> RenewLeaseAsync(global::Google.Cloud.VisionAI.V1.RenewLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenewLease, null, options, request);
      }
      /// <summary>
      /// RleaseLease releases a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse ReleaseLease(global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReleaseLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RleaseLease releases a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse ReleaseLease(global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReleaseLease, null, options, request);
      }
      /// <summary>
      /// RleaseLease releases a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse> ReleaseLeaseAsync(global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReleaseLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RleaseLease releases a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse> ReleaseLeaseAsync(global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReleaseLease, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override StreamingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StreamingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(StreamingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SendPackets, serviceImpl.SendPackets)
          .AddMethod(__Method_ReceivePackets, serviceImpl.ReceivePackets)
          .AddMethod(__Method_ReceiveEvents, serviceImpl.ReceiveEvents)
          .AddMethod(__Method_AcquireLease, serviceImpl.AcquireLease)
          .AddMethod(__Method_RenewLease, serviceImpl.RenewLease)
          .AddMethod(__Method_ReleaseLease, serviceImpl.ReleaseLease).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StreamingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SendPackets, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Cloud.VisionAI.V1.SendPacketsRequest, global::Google.Cloud.VisionAI.V1.SendPacketsResponse>(serviceImpl.SendPackets));
      serviceBinder.AddMethod(__Method_ReceivePackets, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Cloud.VisionAI.V1.ReceivePacketsRequest, global::Google.Cloud.VisionAI.V1.ReceivePacketsResponse>(serviceImpl.ReceivePackets));
      serviceBinder.AddMethod(__Method_ReceiveEvents, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Cloud.VisionAI.V1.ReceiveEventsRequest, global::Google.Cloud.VisionAI.V1.ReceiveEventsResponse>(serviceImpl.ReceiveEvents));
      serviceBinder.AddMethod(__Method_AcquireLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.AcquireLeaseRequest, global::Google.Cloud.VisionAI.V1.Lease>(serviceImpl.AcquireLease));
      serviceBinder.AddMethod(__Method_RenewLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.RenewLeaseRequest, global::Google.Cloud.VisionAI.V1.Lease>(serviceImpl.RenewLease));
      serviceBinder.AddMethod(__Method_ReleaseLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ReleaseLeaseRequest, global::Google.Cloud.VisionAI.V1.ReleaseLeaseResponse>(serviceImpl.ReleaseLease));
    }

  }
}
#endregion
