// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/visionai/v1/warehouse.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.VisionAI.V1 {
  /// <summary>
  /// Service that manages media content + metadata for streaming.
  /// </summary>
  public static partial class Warehouse
  {
    static readonly string __ServiceName = "google.cloud.visionai.v1.Warehouse";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateAssetRequest> __Marshaller_google_cloud_visionai_v1_CreateAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.Asset> __Marshaller_google_cloud_visionai_v1_Asset = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.Asset.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateAssetRequest> __Marshaller_google_cloud_visionai_v1_UpdateAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetAssetRequest> __Marshaller_google_cloud_visionai_v1_GetAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListAssetsRequest> __Marshaller_google_cloud_visionai_v1_ListAssetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListAssetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListAssetsResponse> __Marshaller_google_cloud_visionai_v1_ListAssetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListAssetsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteAssetRequest> __Marshaller_google_cloud_visionai_v1_DeleteAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UploadAssetRequest> __Marshaller_google_cloud_visionai_v1_UploadAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UploadAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest> __Marshaller_google_cloud_visionai_v1_GenerateRetrievalUrlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse> __Marshaller_google_cloud_visionai_v1_GenerateRetrievalUrlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest> __Marshaller_google_cloud_visionai_v1_AnalyzeAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.IndexAssetRequest> __Marshaller_google_cloud_visionai_v1_IndexAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.IndexAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest> __Marshaller_google_cloud_visionai_v1_RemoveIndexAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest> __Marshaller_google_cloud_visionai_v1_ViewIndexedAssetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse> __Marshaller_google_cloud_visionai_v1_ViewIndexedAssetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateIndexRequest> __Marshaller_google_cloud_visionai_v1_CreateIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateIndexRequest> __Marshaller_google_cloud_visionai_v1_UpdateIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetIndexRequest> __Marshaller_google_cloud_visionai_v1_GetIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.Index> __Marshaller_google_cloud_visionai_v1_Index = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.Index.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListIndexesRequest> __Marshaller_google_cloud_visionai_v1_ListIndexesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListIndexesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListIndexesResponse> __Marshaller_google_cloud_visionai_v1_ListIndexesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListIndexesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteIndexRequest> __Marshaller_google_cloud_visionai_v1_DeleteIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateCorpusRequest> __Marshaller_google_cloud_visionai_v1_CreateCorpusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateCorpusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetCorpusRequest> __Marshaller_google_cloud_visionai_v1_GetCorpusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetCorpusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.Corpus> __Marshaller_google_cloud_visionai_v1_Corpus = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.Corpus.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest> __Marshaller_google_cloud_visionai_v1_UpdateCorpusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListCorporaRequest> __Marshaller_google_cloud_visionai_v1_ListCorporaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListCorporaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListCorporaResponse> __Marshaller_google_cloud_visionai_v1_ListCorporaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListCorporaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest> __Marshaller_google_cloud_visionai_v1_DeleteCorpusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest> __Marshaller_google_cloud_visionai_v1_AnalyzeCorpusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest> __Marshaller_google_cloud_visionai_v1_CreateDataSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DataSchema> __Marshaller_google_cloud_visionai_v1_DataSchema = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DataSchema.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest> __Marshaller_google_cloud_visionai_v1_UpdateDataSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest> __Marshaller_google_cloud_visionai_v1_GetDataSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest> __Marshaller_google_cloud_visionai_v1_DeleteDataSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest> __Marshaller_google_cloud_visionai_v1_ListDataSchemasRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse> __Marshaller_google_cloud_visionai_v1_ListDataSchemasResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest> __Marshaller_google_cloud_visionai_v1_CreateAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.Annotation> __Marshaller_google_cloud_visionai_v1_Annotation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.Annotation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetAnnotationRequest> __Marshaller_google_cloud_visionai_v1_GetAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetAnnotationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest> __Marshaller_google_cloud_visionai_v1_ListAnnotationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse> __Marshaller_google_cloud_visionai_v1_ListAnnotationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest> __Marshaller_google_cloud_visionai_v1_UpdateAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest> __Marshaller_google_cloud_visionai_v1_DeleteAnnotationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.IngestAssetRequest> __Marshaller_google_cloud_visionai_v1_IngestAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.IngestAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.IngestAssetResponse> __Marshaller_google_cloud_visionai_v1_IngestAssetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.IngestAssetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ClipAssetRequest> __Marshaller_google_cloud_visionai_v1_ClipAssetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ClipAssetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ClipAssetResponse> __Marshaller_google_cloud_visionai_v1_ClipAssetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ClipAssetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest> __Marshaller_google_cloud_visionai_v1_GenerateHlsUriRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse> __Marshaller_google_cloud_visionai_v1_GenerateHlsUriResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ImportAssetsRequest> __Marshaller_google_cloud_visionai_v1_ImportAssetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ImportAssetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest> __Marshaller_google_cloud_visionai_v1_CreateSearchConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.SearchConfig> __Marshaller_google_cloud_visionai_v1_SearchConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.SearchConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest> __Marshaller_google_cloud_visionai_v1_UpdateSearchConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest> __Marshaller_google_cloud_visionai_v1_GetSearchConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest> __Marshaller_google_cloud_visionai_v1_DeleteSearchConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest> __Marshaller_google_cloud_visionai_v1_ListSearchConfigsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse> __Marshaller_google_cloud_visionai_v1_ListSearchConfigsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest> __Marshaller_google_cloud_visionai_v1_CreateSearchHypernymRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.SearchHypernym> __Marshaller_google_cloud_visionai_v1_SearchHypernym = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.SearchHypernym.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest> __Marshaller_google_cloud_visionai_v1_UpdateSearchHypernymRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest> __Marshaller_google_cloud_visionai_v1_GetSearchHypernymRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest> __Marshaller_google_cloud_visionai_v1_DeleteSearchHypernymRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest> __Marshaller_google_cloud_visionai_v1_ListSearchHypernymsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse> __Marshaller_google_cloud_visionai_v1_ListSearchHypernymsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.SearchAssetsRequest> __Marshaller_google_cloud_visionai_v1_SearchAssetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.SearchAssetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.SearchAssetsResponse> __Marshaller_google_cloud_visionai_v1_SearchAssetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.SearchAssetsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest> __Marshaller_google_cloud_visionai_v1_SearchIndexEndpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse> __Marshaller_google_cloud_visionai_v1_SearchIndexEndpointResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest> __Marshaller_google_cloud_visionai_v1_CreateIndexEndpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest> __Marshaller_google_cloud_visionai_v1_GetIndexEndpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.IndexEndpoint> __Marshaller_google_cloud_visionai_v1_IndexEndpoint = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.IndexEndpoint.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest> __Marshaller_google_cloud_visionai_v1_ListIndexEndpointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse> __Marshaller_google_cloud_visionai_v1_ListIndexEndpointsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest> __Marshaller_google_cloud_visionai_v1_UpdateIndexEndpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest> __Marshaller_google_cloud_visionai_v1_DeleteIndexEndpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeployIndexRequest> __Marshaller_google_cloud_visionai_v1_DeployIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeployIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UndeployIndexRequest> __Marshaller_google_cloud_visionai_v1_UndeployIndexRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UndeployIndexRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.CreateCollectionRequest> __Marshaller_google_cloud_visionai_v1_CreateCollectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.CreateCollectionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest> __Marshaller_google_cloud_visionai_v1_DeleteCollectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.GetCollectionRequest> __Marshaller_google_cloud_visionai_v1_GetCollectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.GetCollectionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.Collection> __Marshaller_google_cloud_visionai_v1_Collection = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.Collection.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest> __Marshaller_google_cloud_visionai_v1_UpdateCollectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListCollectionsRequest> __Marshaller_google_cloud_visionai_v1_ListCollectionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListCollectionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ListCollectionsResponse> __Marshaller_google_cloud_visionai_v1_ListCollectionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ListCollectionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest> __Marshaller_google_cloud_visionai_v1_AddCollectionItemRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse> __Marshaller_google_cloud_visionai_v1_AddCollectionItemResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest> __Marshaller_google_cloud_visionai_v1_RemoveCollectionItemRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse> __Marshaller_google_cloud_visionai_v1_RemoveCollectionItemResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest> __Marshaller_google_cloud_visionai_v1_ViewCollectionItemsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse> __Marshaller_google_cloud_visionai_v1_ViewCollectionItemsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateAssetRequest, global::Google.Cloud.VisionAI.V1.Asset> __Method_CreateAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateAssetRequest, global::Google.Cloud.VisionAI.V1.Asset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAsset",
        __Marshaller_google_cloud_visionai_v1_CreateAssetRequest,
        __Marshaller_google_cloud_visionai_v1_Asset);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateAssetRequest, global::Google.Cloud.VisionAI.V1.Asset> __Method_UpdateAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateAssetRequest, global::Google.Cloud.VisionAI.V1.Asset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAsset",
        __Marshaller_google_cloud_visionai_v1_UpdateAssetRequest,
        __Marshaller_google_cloud_visionai_v1_Asset);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetAssetRequest, global::Google.Cloud.VisionAI.V1.Asset> __Method_GetAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetAssetRequest, global::Google.Cloud.VisionAI.V1.Asset>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAsset",
        __Marshaller_google_cloud_visionai_v1_GetAssetRequest,
        __Marshaller_google_cloud_visionai_v1_Asset);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListAssetsRequest, global::Google.Cloud.VisionAI.V1.ListAssetsResponse> __Method_ListAssets = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListAssetsRequest, global::Google.Cloud.VisionAI.V1.ListAssetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAssets",
        __Marshaller_google_cloud_visionai_v1_ListAssetsRequest,
        __Marshaller_google_cloud_visionai_v1_ListAssetsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteAssetRequest, global::Google.LongRunning.Operation> __Method_DeleteAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteAssetRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAsset",
        __Marshaller_google_cloud_visionai_v1_DeleteAssetRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UploadAssetRequest, global::Google.LongRunning.Operation> __Method_UploadAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.UploadAssetRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UploadAsset",
        __Marshaller_google_cloud_visionai_v1_UploadAssetRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest, global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse> __Method_GenerateRetrievalUrl = new grpc::Method<global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest, global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateRetrievalUrl",
        __Marshaller_google_cloud_visionai_v1_GenerateRetrievalUrlRequest,
        __Marshaller_google_cloud_visionai_v1_GenerateRetrievalUrlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest, global::Google.LongRunning.Operation> __Method_AnalyzeAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnalyzeAsset",
        __Marshaller_google_cloud_visionai_v1_AnalyzeAssetRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.IndexAssetRequest, global::Google.LongRunning.Operation> __Method_IndexAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.IndexAssetRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IndexAsset",
        __Marshaller_google_cloud_visionai_v1_IndexAssetRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest, global::Google.LongRunning.Operation> __Method_RemoveIndexAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveIndexAsset",
        __Marshaller_google_cloud_visionai_v1_RemoveIndexAssetRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest, global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse> __Method_ViewIndexedAssets = new grpc::Method<global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest, global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ViewIndexedAssets",
        __Marshaller_google_cloud_visionai_v1_ViewIndexedAssetsRequest,
        __Marshaller_google_cloud_visionai_v1_ViewIndexedAssetsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateIndexRequest, global::Google.LongRunning.Operation> __Method_CreateIndex = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateIndexRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateIndex",
        __Marshaller_google_cloud_visionai_v1_CreateIndexRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateIndexRequest, global::Google.LongRunning.Operation> __Method_UpdateIndex = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateIndexRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateIndex",
        __Marshaller_google_cloud_visionai_v1_UpdateIndexRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetIndexRequest, global::Google.Cloud.VisionAI.V1.Index> __Method_GetIndex = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetIndexRequest, global::Google.Cloud.VisionAI.V1.Index>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIndex",
        __Marshaller_google_cloud_visionai_v1_GetIndexRequest,
        __Marshaller_google_cloud_visionai_v1_Index);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListIndexesRequest, global::Google.Cloud.VisionAI.V1.ListIndexesResponse> __Method_ListIndexes = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListIndexesRequest, global::Google.Cloud.VisionAI.V1.ListIndexesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListIndexes",
        __Marshaller_google_cloud_visionai_v1_ListIndexesRequest,
        __Marshaller_google_cloud_visionai_v1_ListIndexesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteIndexRequest, global::Google.LongRunning.Operation> __Method_DeleteIndex = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteIndexRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteIndex",
        __Marshaller_google_cloud_visionai_v1_DeleteIndexRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateCorpusRequest, global::Google.LongRunning.Operation> __Method_CreateCorpus = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateCorpusRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCorpus",
        __Marshaller_google_cloud_visionai_v1_CreateCorpusRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetCorpusRequest, global::Google.Cloud.VisionAI.V1.Corpus> __Method_GetCorpus = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetCorpusRequest, global::Google.Cloud.VisionAI.V1.Corpus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCorpus",
        __Marshaller_google_cloud_visionai_v1_GetCorpusRequest,
        __Marshaller_google_cloud_visionai_v1_Corpus);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest, global::Google.Cloud.VisionAI.V1.Corpus> __Method_UpdateCorpus = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest, global::Google.Cloud.VisionAI.V1.Corpus>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCorpus",
        __Marshaller_google_cloud_visionai_v1_UpdateCorpusRequest,
        __Marshaller_google_cloud_visionai_v1_Corpus);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListCorporaRequest, global::Google.Cloud.VisionAI.V1.ListCorporaResponse> __Method_ListCorpora = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListCorporaRequest, global::Google.Cloud.VisionAI.V1.ListCorporaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCorpora",
        __Marshaller_google_cloud_visionai_v1_ListCorporaRequest,
        __Marshaller_google_cloud_visionai_v1_ListCorporaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteCorpus = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCorpus",
        __Marshaller_google_cloud_visionai_v1_DeleteCorpusRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest, global::Google.LongRunning.Operation> __Method_AnalyzeCorpus = new grpc::Method<global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnalyzeCorpus",
        __Marshaller_google_cloud_visionai_v1_AnalyzeCorpusRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema> __Method_CreateDataSchema = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDataSchema",
        __Marshaller_google_cloud_visionai_v1_CreateDataSchemaRequest,
        __Marshaller_google_cloud_visionai_v1_DataSchema);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema> __Method_UpdateDataSchema = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDataSchema",
        __Marshaller_google_cloud_visionai_v1_UpdateDataSchemaRequest,
        __Marshaller_google_cloud_visionai_v1_DataSchema);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema> __Method_GetDataSchema = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataSchema",
        __Marshaller_google_cloud_visionai_v1_GetDataSchemaRequest,
        __Marshaller_google_cloud_visionai_v1_DataSchema);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDataSchema = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDataSchema",
        __Marshaller_google_cloud_visionai_v1_DeleteDataSchemaRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest, global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse> __Method_ListDataSchemas = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest, global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDataSchemas",
        __Marshaller_google_cloud_visionai_v1_ListDataSchemasRequest,
        __Marshaller_google_cloud_visionai_v1_ListDataSchemasResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation> __Method_CreateAnnotation = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAnnotation",
        __Marshaller_google_cloud_visionai_v1_CreateAnnotationRequest,
        __Marshaller_google_cloud_visionai_v1_Annotation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation> __Method_GetAnnotation = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAnnotation",
        __Marshaller_google_cloud_visionai_v1_GetAnnotationRequest,
        __Marshaller_google_cloud_visionai_v1_Annotation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest, global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse> __Method_ListAnnotations = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest, global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAnnotations",
        __Marshaller_google_cloud_visionai_v1_ListAnnotationsRequest,
        __Marshaller_google_cloud_visionai_v1_ListAnnotationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation> __Method_UpdateAnnotation = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAnnotation",
        __Marshaller_google_cloud_visionai_v1_UpdateAnnotationRequest,
        __Marshaller_google_cloud_visionai_v1_Annotation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAnnotation = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAnnotation",
        __Marshaller_google_cloud_visionai_v1_DeleteAnnotationRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.IngestAssetRequest, global::Google.Cloud.VisionAI.V1.IngestAssetResponse> __Method_IngestAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.IngestAssetRequest, global::Google.Cloud.VisionAI.V1.IngestAssetResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "IngestAsset",
        __Marshaller_google_cloud_visionai_v1_IngestAssetRequest,
        __Marshaller_google_cloud_visionai_v1_IngestAssetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ClipAssetRequest, global::Google.Cloud.VisionAI.V1.ClipAssetResponse> __Method_ClipAsset = new grpc::Method<global::Google.Cloud.VisionAI.V1.ClipAssetRequest, global::Google.Cloud.VisionAI.V1.ClipAssetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClipAsset",
        __Marshaller_google_cloud_visionai_v1_ClipAssetRequest,
        __Marshaller_google_cloud_visionai_v1_ClipAssetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest, global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse> __Method_GenerateHlsUri = new grpc::Method<global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest, global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateHlsUri",
        __Marshaller_google_cloud_visionai_v1_GenerateHlsUriRequest,
        __Marshaller_google_cloud_visionai_v1_GenerateHlsUriResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ImportAssetsRequest, global::Google.LongRunning.Operation> __Method_ImportAssets = new grpc::Method<global::Google.Cloud.VisionAI.V1.ImportAssetsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportAssets",
        __Marshaller_google_cloud_visionai_v1_ImportAssetsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig> __Method_CreateSearchConfig = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSearchConfig",
        __Marshaller_google_cloud_visionai_v1_CreateSearchConfigRequest,
        __Marshaller_google_cloud_visionai_v1_SearchConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig> __Method_UpdateSearchConfig = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSearchConfig",
        __Marshaller_google_cloud_visionai_v1_UpdateSearchConfigRequest,
        __Marshaller_google_cloud_visionai_v1_SearchConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig> __Method_GetSearchConfig = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSearchConfig",
        __Marshaller_google_cloud_visionai_v1_GetSearchConfigRequest,
        __Marshaller_google_cloud_visionai_v1_SearchConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSearchConfig = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSearchConfig",
        __Marshaller_google_cloud_visionai_v1_DeleteSearchConfigRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest, global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse> __Method_ListSearchConfigs = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest, global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSearchConfigs",
        __Marshaller_google_cloud_visionai_v1_ListSearchConfigsRequest,
        __Marshaller_google_cloud_visionai_v1_ListSearchConfigsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym> __Method_CreateSearchHypernym = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSearchHypernym",
        __Marshaller_google_cloud_visionai_v1_CreateSearchHypernymRequest,
        __Marshaller_google_cloud_visionai_v1_SearchHypernym);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym> __Method_UpdateSearchHypernym = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSearchHypernym",
        __Marshaller_google_cloud_visionai_v1_UpdateSearchHypernymRequest,
        __Marshaller_google_cloud_visionai_v1_SearchHypernym);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym> __Method_GetSearchHypernym = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSearchHypernym",
        __Marshaller_google_cloud_visionai_v1_GetSearchHypernymRequest,
        __Marshaller_google_cloud_visionai_v1_SearchHypernym);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSearchHypernym = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSearchHypernym",
        __Marshaller_google_cloud_visionai_v1_DeleteSearchHypernymRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest, global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse> __Method_ListSearchHypernyms = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest, global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSearchHypernyms",
        __Marshaller_google_cloud_visionai_v1_ListSearchHypernymsRequest,
        __Marshaller_google_cloud_visionai_v1_ListSearchHypernymsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.SearchAssetsRequest, global::Google.Cloud.VisionAI.V1.SearchAssetsResponse> __Method_SearchAssets = new grpc::Method<global::Google.Cloud.VisionAI.V1.SearchAssetsRequest, global::Google.Cloud.VisionAI.V1.SearchAssetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchAssets",
        __Marshaller_google_cloud_visionai_v1_SearchAssetsRequest,
        __Marshaller_google_cloud_visionai_v1_SearchAssetsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest, global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse> __Method_SearchIndexEndpoint = new grpc::Method<global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest, global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchIndexEndpoint",
        __Marshaller_google_cloud_visionai_v1_SearchIndexEndpointRequest,
        __Marshaller_google_cloud_visionai_v1_SearchIndexEndpointResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest, global::Google.LongRunning.Operation> __Method_CreateIndexEndpoint = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateIndexEndpoint",
        __Marshaller_google_cloud_visionai_v1_CreateIndexEndpointRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest, global::Google.Cloud.VisionAI.V1.IndexEndpoint> __Method_GetIndexEndpoint = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest, global::Google.Cloud.VisionAI.V1.IndexEndpoint>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIndexEndpoint",
        __Marshaller_google_cloud_visionai_v1_GetIndexEndpointRequest,
        __Marshaller_google_cloud_visionai_v1_IndexEndpoint);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest, global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse> __Method_ListIndexEndpoints = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest, global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListIndexEndpoints",
        __Marshaller_google_cloud_visionai_v1_ListIndexEndpointsRequest,
        __Marshaller_google_cloud_visionai_v1_ListIndexEndpointsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest, global::Google.LongRunning.Operation> __Method_UpdateIndexEndpoint = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateIndexEndpoint",
        __Marshaller_google_cloud_visionai_v1_UpdateIndexEndpointRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest, global::Google.LongRunning.Operation> __Method_DeleteIndexEndpoint = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteIndexEndpoint",
        __Marshaller_google_cloud_visionai_v1_DeleteIndexEndpointRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeployIndexRequest, global::Google.LongRunning.Operation> __Method_DeployIndex = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeployIndexRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeployIndex",
        __Marshaller_google_cloud_visionai_v1_DeployIndexRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UndeployIndexRequest, global::Google.LongRunning.Operation> __Method_UndeployIndex = new grpc::Method<global::Google.Cloud.VisionAI.V1.UndeployIndexRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeployIndex",
        __Marshaller_google_cloud_visionai_v1_UndeployIndexRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.CreateCollectionRequest, global::Google.LongRunning.Operation> __Method_CreateCollection = new grpc::Method<global::Google.Cloud.VisionAI.V1.CreateCollectionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCollection",
        __Marshaller_google_cloud_visionai_v1_CreateCollectionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest, global::Google.LongRunning.Operation> __Method_DeleteCollection = new grpc::Method<global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCollection",
        __Marshaller_google_cloud_visionai_v1_DeleteCollectionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.GetCollectionRequest, global::Google.Cloud.VisionAI.V1.Collection> __Method_GetCollection = new grpc::Method<global::Google.Cloud.VisionAI.V1.GetCollectionRequest, global::Google.Cloud.VisionAI.V1.Collection>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCollection",
        __Marshaller_google_cloud_visionai_v1_GetCollectionRequest,
        __Marshaller_google_cloud_visionai_v1_Collection);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest, global::Google.Cloud.VisionAI.V1.Collection> __Method_UpdateCollection = new grpc::Method<global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest, global::Google.Cloud.VisionAI.V1.Collection>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCollection",
        __Marshaller_google_cloud_visionai_v1_UpdateCollectionRequest,
        __Marshaller_google_cloud_visionai_v1_Collection);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ListCollectionsRequest, global::Google.Cloud.VisionAI.V1.ListCollectionsResponse> __Method_ListCollections = new grpc::Method<global::Google.Cloud.VisionAI.V1.ListCollectionsRequest, global::Google.Cloud.VisionAI.V1.ListCollectionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollections",
        __Marshaller_google_cloud_visionai_v1_ListCollectionsRequest,
        __Marshaller_google_cloud_visionai_v1_ListCollectionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest, global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse> __Method_AddCollectionItem = new grpc::Method<global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest, global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddCollectionItem",
        __Marshaller_google_cloud_visionai_v1_AddCollectionItemRequest,
        __Marshaller_google_cloud_visionai_v1_AddCollectionItemResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest, global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse> __Method_RemoveCollectionItem = new grpc::Method<global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest, global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveCollectionItem",
        __Marshaller_google_cloud_visionai_v1_RemoveCollectionItemRequest,
        __Marshaller_google_cloud_visionai_v1_RemoveCollectionItemResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest, global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse> __Method_ViewCollectionItems = new grpc::Method<global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest, global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ViewCollectionItems",
        __Marshaller_google_cloud_visionai_v1_ViewCollectionItemsRequest,
        __Marshaller_google_cloud_visionai_v1_ViewCollectionItemsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.VisionAI.V1.WarehouseReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Warehouse</summary>
    [grpc::BindServiceMethod(typeof(Warehouse), "BindService")]
    public abstract partial class WarehouseBase
    {
      /// <summary>
      /// Creates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Asset> CreateAsset(global::Google.Cloud.VisionAI.V1.CreateAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Asset> UpdateAsset(global::Google.Cloud.VisionAI.V1.UpdateAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reads an asset inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Asset> GetAsset(global::Google.Cloud.VisionAI.V1.GetAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists an list of assets inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListAssetsResponse> ListAssets(global::Google.Cloud.VisionAI.V1.ListAssetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes asset inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAsset(global::Google.Cloud.VisionAI.V1.DeleteAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Upload asset by specifing the asset Cloud Storage uri.
      /// For video warehouse, it requires users who call this API have read access
      /// to the cloud storage file. Once it is uploaded, it can be retrieved by
      /// GenerateRetrievalUrl API which by default, only can retrieve cloud storage
      /// files from the same project of the warehouse. To allow retrieval cloud
      /// storage files that are in a separate project, it requires to find the
      /// vision ai service account (Go to IAM, check checkbox to show "Include
      /// Google-provided role grants", search for "Cloud Vision AI Service Agent")
      /// and grant the read access of the cloud storage files to that service
      /// account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UploadAsset(global::Google.Cloud.VisionAI.V1.UploadAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates a signed url for downloading the asset.
      /// For video warehouse, please see comment of UploadAsset about how to allow
      /// retrieval of cloud storage files in a different project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse> GenerateRetrievalUrl(global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Analyze asset to power search capability.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> AnalyzeAsset(global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Index one asset for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> IndexAsset(global::Google.Cloud.VisionAI.V1.IndexAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove one asset's index data for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RemoveIndexAsset(global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists assets inside an index.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse> ViewIndexedAssets(global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an Index under the corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateIndex(global::Google.Cloud.VisionAI.V1.CreateIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an Index under the corpus.
      /// Users can perform a metadata-only update or trigger a full index rebuild
      /// with different update_mask values.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateIndex(global::Google.Cloud.VisionAI.V1.UpdateIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the details of a single Index under a Corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Index> GetIndex(global::Google.Cloud.VisionAI.V1.GetIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all Indexes in a given Corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListIndexesResponse> ListIndexes(global::Google.Cloud.VisionAI.V1.ListIndexesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a single Index. In order to delete an index, the caller must
      /// make sure that it is not deployed to any index endpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteIndex(global::Google.Cloud.VisionAI.V1.DeleteIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a corpus inside a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCorpus(global::Google.Cloud.VisionAI.V1.CreateCorpusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets corpus details inside a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Corpus> GetCorpus(global::Google.Cloud.VisionAI.V1.GetCorpusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a corpus in a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Corpus> UpdateCorpus(global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all corpora in a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListCorporaResponse> ListCorpora(global::Google.Cloud.VisionAI.V1.ListCorporaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a corpus only if its empty.
      /// Returns empty response.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCorpus(global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Analyzes a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> AnalyzeCorpus(global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.DataSchema> CreateDataSchema(global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.DataSchema> UpdateDataSchema(global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets data schema inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.DataSchema> GetDataSchema(global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes data schema inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSchema(global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists a list of data schemas inside corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse> ListDataSchemas(global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates annotation inside asset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Annotation> CreateAnnotation(global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reads annotation inside asset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Annotation> GetAnnotation(global::Google.Cloud.VisionAI.V1.GetAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists a list of annotations inside asset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse> ListAnnotations(global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates annotation inside asset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Annotation> UpdateAnnotation(global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes annotation inside asset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAnnotation(global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ingests data for the asset. It is not allowed to ingest a data chunk which
      /// is already expired according to TTL.
      /// This method is only available via the gRPC API (not HTTP since
      /// bi-directional streaming is not supported via HTTP).
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task IngestAsset(grpc::IAsyncStreamReader<global::Google.Cloud.VisionAI.V1.IngestAssetRequest> requestStream, grpc::IServerStreamWriter<global::Google.Cloud.VisionAI.V1.IngestAssetResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Supported by STREAM_VIDEO corpus type.
      /// Generates clips for downloading. The api takes in a time range, and
      /// generates a clip of the first content available after start_time and
      /// before end_time, which may overflow beyond these bounds.
      /// Returned clips are truncated if the total size of the clips are larger
      /// than 100MB.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ClipAssetResponse> ClipAsset(global::Google.Cloud.VisionAI.V1.ClipAssetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates a uri for an HLS manifest. The api takes in a collection of time
      /// ranges, and generates a URI for an HLS manifest that covers all the
      /// requested time ranges.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse> GenerateHlsUri(global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Imports assets (images plus annotations) from a meta file on cloud storage.
      /// Each row in the meta file is corresponding to an image (specified by a
      /// cloud storage uri) and its annotations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ImportAssets(global::Google.Cloud.VisionAI.V1.ImportAssetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid CreateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_config_id must not be associated with an existing
      ///    SearchConfig.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      ///    facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.SearchConfig> CreateSearchConfig(global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid UpdateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_configuration.name must already exist.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      /// facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.SearchConfig> UpdateSearchConfig(global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a search configuration inside a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.SearchConfig> GetSearchConfig(global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a search configuration inside a corpus.
      ///
      /// For a DeleteSearchConfigRequest to be valid,
      /// Request.search_configuration.name must already exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSearchConfig(global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all search configurations inside a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse> ListSearchConfigs(global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.SearchHypernym> CreateSearchHypernym(global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.SearchHypernym> UpdateSearchHypernym(global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.SearchHypernym> GetSearchHypernym(global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSearchHypernym(global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists SearchHypernyms inside a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse> ListSearchHypernyms(global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search media asset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.SearchAssetsResponse> SearchAssets(global::Google.Cloud.VisionAI.V1.SearchAssetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search a deployed index endpoint (IMAGE corpus type only).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse> SearchIndexEndpoint(global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateIndexEndpoint(global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.IndexEndpoint> GetIndexEndpoint(global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all IndexEndpoints in a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse> ListIndexEndpoints(global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateIndexEndpoint(global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteIndexEndpoint(global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deploys an Index to IndexEndpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeployIndex(global::Google.Cloud.VisionAI.V1.DeployIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Undeploys an Index from IndexEndpoint.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UndeployIndex(global::Google.Cloud.VisionAI.V1.UndeployIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a collection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCollection(global::Google.Cloud.VisionAI.V1.CreateCollectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a collection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCollection(global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a collection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Collection> GetCollection(global::Google.Cloud.VisionAI.V1.GetCollectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a collection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.Collection> UpdateCollection(global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists collections inside a corpus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ListCollectionsResponse> ListCollections(global::Google.Cloud.VisionAI.V1.ListCollectionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds an item into a Collection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse> AddCollectionItem(global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes an item from a collection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse> RemoveCollectionItem(global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// View items inside a collection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse> ViewCollectionItems(global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Warehouse</summary>
    public partial class WarehouseClient : grpc::ClientBase<WarehouseClient>
    {
      /// <summary>Creates a new client for Warehouse</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WarehouseClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Warehouse that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WarehouseClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WarehouseClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WarehouseClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Asset CreateAsset(global::Google.Cloud.VisionAI.V1.CreateAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Asset CreateAsset(global::Google.Cloud.VisionAI.V1.CreateAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAsset, null, options, request);
      }
      /// <summary>
      /// Creates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Asset> CreateAssetAsync(global::Google.Cloud.VisionAI.V1.CreateAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Asset> CreateAssetAsync(global::Google.Cloud.VisionAI.V1.CreateAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAsset, null, options, request);
      }
      /// <summary>
      /// Updates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Asset UpdateAsset(global::Google.Cloud.VisionAI.V1.UpdateAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Asset UpdateAsset(global::Google.Cloud.VisionAI.V1.UpdateAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAsset, null, options, request);
      }
      /// <summary>
      /// Updates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Asset> UpdateAssetAsync(global::Google.Cloud.VisionAI.V1.UpdateAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Asset> UpdateAssetAsync(global::Google.Cloud.VisionAI.V1.UpdateAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAsset, null, options, request);
      }
      /// <summary>
      /// Reads an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Asset GetAsset(global::Google.Cloud.VisionAI.V1.GetAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Asset GetAsset(global::Google.Cloud.VisionAI.V1.GetAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAsset, null, options, request);
      }
      /// <summary>
      /// Reads an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Asset> GetAssetAsync(global::Google.Cloud.VisionAI.V1.GetAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads an asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Asset> GetAssetAsync(global::Google.Cloud.VisionAI.V1.GetAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAsset, null, options, request);
      }
      /// <summary>
      /// Lists an list of assets inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListAssetsResponse ListAssets(global::Google.Cloud.VisionAI.V1.ListAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAssets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists an list of assets inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListAssetsResponse ListAssets(global::Google.Cloud.VisionAI.V1.ListAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAssets, null, options, request);
      }
      /// <summary>
      /// Lists an list of assets inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListAssetsResponse> ListAssetsAsync(global::Google.Cloud.VisionAI.V1.ListAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAssetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists an list of assets inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListAssetsResponse> ListAssetsAsync(global::Google.Cloud.VisionAI.V1.ListAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAssets, null, options, request);
      }
      /// <summary>
      /// Deletes asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAsset(global::Google.Cloud.VisionAI.V1.DeleteAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAsset(global::Google.Cloud.VisionAI.V1.DeleteAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAsset, null, options, request);
      }
      /// <summary>
      /// Deletes asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAssetAsync(global::Google.Cloud.VisionAI.V1.DeleteAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes asset inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAssetAsync(global::Google.Cloud.VisionAI.V1.DeleteAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAsset, null, options, request);
      }
      /// <summary>
      /// Upload asset by specifing the asset Cloud Storage uri.
      /// For video warehouse, it requires users who call this API have read access
      /// to the cloud storage file. Once it is uploaded, it can be retrieved by
      /// GenerateRetrievalUrl API which by default, only can retrieve cloud storage
      /// files from the same project of the warehouse. To allow retrieval cloud
      /// storage files that are in a separate project, it requires to find the
      /// vision ai service account (Go to IAM, check checkbox to show "Include
      /// Google-provided role grants", search for "Cloud Vision AI Service Agent")
      /// and grant the read access of the cloud storage files to that service
      /// account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UploadAsset(global::Google.Cloud.VisionAI.V1.UploadAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upload asset by specifing the asset Cloud Storage uri.
      /// For video warehouse, it requires users who call this API have read access
      /// to the cloud storage file. Once it is uploaded, it can be retrieved by
      /// GenerateRetrievalUrl API which by default, only can retrieve cloud storage
      /// files from the same project of the warehouse. To allow retrieval cloud
      /// storage files that are in a separate project, it requires to find the
      /// vision ai service account (Go to IAM, check checkbox to show "Include
      /// Google-provided role grants", search for "Cloud Vision AI Service Agent")
      /// and grant the read access of the cloud storage files to that service
      /// account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UploadAsset(global::Google.Cloud.VisionAI.V1.UploadAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UploadAsset, null, options, request);
      }
      /// <summary>
      /// Upload asset by specifing the asset Cloud Storage uri.
      /// For video warehouse, it requires users who call this API have read access
      /// to the cloud storage file. Once it is uploaded, it can be retrieved by
      /// GenerateRetrievalUrl API which by default, only can retrieve cloud storage
      /// files from the same project of the warehouse. To allow retrieval cloud
      /// storage files that are in a separate project, it requires to find the
      /// vision ai service account (Go to IAM, check checkbox to show "Include
      /// Google-provided role grants", search for "Cloud Vision AI Service Agent")
      /// and grant the read access of the cloud storage files to that service
      /// account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UploadAssetAsync(global::Google.Cloud.VisionAI.V1.UploadAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Upload asset by specifing the asset Cloud Storage uri.
      /// For video warehouse, it requires users who call this API have read access
      /// to the cloud storage file. Once it is uploaded, it can be retrieved by
      /// GenerateRetrievalUrl API which by default, only can retrieve cloud storage
      /// files from the same project of the warehouse. To allow retrieval cloud
      /// storage files that are in a separate project, it requires to find the
      /// vision ai service account (Go to IAM, check checkbox to show "Include
      /// Google-provided role grants", search for "Cloud Vision AI Service Agent")
      /// and grant the read access of the cloud storage files to that service
      /// account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UploadAssetAsync(global::Google.Cloud.VisionAI.V1.UploadAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UploadAsset, null, options, request);
      }
      /// <summary>
      /// Generates a signed url for downloading the asset.
      /// For video warehouse, please see comment of UploadAsset about how to allow
      /// retrieval of cloud storage files in a different project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse GenerateRetrievalUrl(global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateRetrievalUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a signed url for downloading the asset.
      /// For video warehouse, please see comment of UploadAsset about how to allow
      /// retrieval of cloud storage files in a different project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse GenerateRetrievalUrl(global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateRetrievalUrl, null, options, request);
      }
      /// <summary>
      /// Generates a signed url for downloading the asset.
      /// For video warehouse, please see comment of UploadAsset about how to allow
      /// retrieval of cloud storage files in a different project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse> GenerateRetrievalUrlAsync(global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateRetrievalUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a signed url for downloading the asset.
      /// For video warehouse, please see comment of UploadAsset about how to allow
      /// retrieval of cloud storage files in a different project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse> GenerateRetrievalUrlAsync(global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateRetrievalUrl, null, options, request);
      }
      /// <summary>
      /// Analyze asset to power search capability.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AnalyzeAsset(global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyze asset to power search capability.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AnalyzeAsset(global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnalyzeAsset, null, options, request);
      }
      /// <summary>
      /// Analyze asset to power search capability.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AnalyzeAssetAsync(global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyze asset to power search capability.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AnalyzeAssetAsync(global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnalyzeAsset, null, options, request);
      }
      /// <summary>
      /// Index one asset for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation IndexAsset(global::Google.Cloud.VisionAI.V1.IndexAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IndexAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Index one asset for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation IndexAsset(global::Google.Cloud.VisionAI.V1.IndexAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IndexAsset, null, options, request);
      }
      /// <summary>
      /// Index one asset for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> IndexAssetAsync(global::Google.Cloud.VisionAI.V1.IndexAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IndexAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Index one asset for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> IndexAssetAsync(global::Google.Cloud.VisionAI.V1.IndexAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IndexAsset, null, options, request);
      }
      /// <summary>
      /// Remove one asset's index data for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RemoveIndexAsset(global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveIndexAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove one asset's index data for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RemoveIndexAsset(global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveIndexAsset, null, options, request);
      }
      /// <summary>
      /// Remove one asset's index data for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RemoveIndexAssetAsync(global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveIndexAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove one asset's index data for search.
      /// Supported corpus type: Corpus.Type.VIDEO_ON_DEMAND
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RemoveIndexAssetAsync(global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveIndexAsset, null, options, request);
      }
      /// <summary>
      /// Lists assets inside an index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse ViewIndexedAssets(global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewIndexedAssets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists assets inside an index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse ViewIndexedAssets(global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ViewIndexedAssets, null, options, request);
      }
      /// <summary>
      /// Lists assets inside an index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse> ViewIndexedAssetsAsync(global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewIndexedAssetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists assets inside an index.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse> ViewIndexedAssetsAsync(global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ViewIndexedAssets, null, options, request);
      }
      /// <summary>
      /// Creates an Index under the corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateIndex(global::Google.Cloud.VisionAI.V1.CreateIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an Index under the corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateIndex(global::Google.Cloud.VisionAI.V1.CreateIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateIndex, null, options, request);
      }
      /// <summary>
      /// Creates an Index under the corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateIndexAsync(global::Google.Cloud.VisionAI.V1.CreateIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an Index under the corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateIndexAsync(global::Google.Cloud.VisionAI.V1.CreateIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateIndex, null, options, request);
      }
      /// <summary>
      /// Updates an Index under the corpus.
      /// Users can perform a metadata-only update or trigger a full index rebuild
      /// with different update_mask values.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateIndex(global::Google.Cloud.VisionAI.V1.UpdateIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an Index under the corpus.
      /// Users can perform a metadata-only update or trigger a full index rebuild
      /// with different update_mask values.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateIndex(global::Google.Cloud.VisionAI.V1.UpdateIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateIndex, null, options, request);
      }
      /// <summary>
      /// Updates an Index under the corpus.
      /// Users can perform a metadata-only update or trigger a full index rebuild
      /// with different update_mask values.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateIndexAsync(global::Google.Cloud.VisionAI.V1.UpdateIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an Index under the corpus.
      /// Users can perform a metadata-only update or trigger a full index rebuild
      /// with different update_mask values.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateIndexAsync(global::Google.Cloud.VisionAI.V1.UpdateIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateIndex, null, options, request);
      }
      /// <summary>
      /// Gets the details of a single Index under a Corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Index GetIndex(global::Google.Cloud.VisionAI.V1.GetIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a single Index under a Corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Index GetIndex(global::Google.Cloud.VisionAI.V1.GetIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIndex, null, options, request);
      }
      /// <summary>
      /// Gets the details of a single Index under a Corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Index> GetIndexAsync(global::Google.Cloud.VisionAI.V1.GetIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a single Index under a Corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Index> GetIndexAsync(global::Google.Cloud.VisionAI.V1.GetIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIndex, null, options, request);
      }
      /// <summary>
      /// List all Indexes in a given Corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListIndexesResponse ListIndexes(global::Google.Cloud.VisionAI.V1.ListIndexesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIndexes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all Indexes in a given Corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListIndexesResponse ListIndexes(global::Google.Cloud.VisionAI.V1.ListIndexesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListIndexes, null, options, request);
      }
      /// <summary>
      /// List all Indexes in a given Corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListIndexesResponse> ListIndexesAsync(global::Google.Cloud.VisionAI.V1.ListIndexesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIndexesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all Indexes in a given Corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListIndexesResponse> ListIndexesAsync(global::Google.Cloud.VisionAI.V1.ListIndexesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListIndexes, null, options, request);
      }
      /// <summary>
      /// Delete a single Index. In order to delete an index, the caller must
      /// make sure that it is not deployed to any index endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteIndex(global::Google.Cloud.VisionAI.V1.DeleteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single Index. In order to delete an index, the caller must
      /// make sure that it is not deployed to any index endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteIndex(global::Google.Cloud.VisionAI.V1.DeleteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteIndex, null, options, request);
      }
      /// <summary>
      /// Delete a single Index. In order to delete an index, the caller must
      /// make sure that it is not deployed to any index endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteIndexAsync(global::Google.Cloud.VisionAI.V1.DeleteIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a single Index. In order to delete an index, the caller must
      /// make sure that it is not deployed to any index endpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteIndexAsync(global::Google.Cloud.VisionAI.V1.DeleteIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteIndex, null, options, request);
      }
      /// <summary>
      /// Creates a corpus inside a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCorpus(global::Google.Cloud.VisionAI.V1.CreateCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCorpus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a corpus inside a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCorpus(global::Google.Cloud.VisionAI.V1.CreateCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCorpus, null, options, request);
      }
      /// <summary>
      /// Creates a corpus inside a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCorpusAsync(global::Google.Cloud.VisionAI.V1.CreateCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCorpusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a corpus inside a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCorpusAsync(global::Google.Cloud.VisionAI.V1.CreateCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCorpus, null, options, request);
      }
      /// <summary>
      /// Gets corpus details inside a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Corpus GetCorpus(global::Google.Cloud.VisionAI.V1.GetCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCorpus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets corpus details inside a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Corpus GetCorpus(global::Google.Cloud.VisionAI.V1.GetCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCorpus, null, options, request);
      }
      /// <summary>
      /// Gets corpus details inside a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Corpus> GetCorpusAsync(global::Google.Cloud.VisionAI.V1.GetCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCorpusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets corpus details inside a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Corpus> GetCorpusAsync(global::Google.Cloud.VisionAI.V1.GetCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCorpus, null, options, request);
      }
      /// <summary>
      /// Updates a corpus in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Corpus UpdateCorpus(global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCorpus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a corpus in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Corpus UpdateCorpus(global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCorpus, null, options, request);
      }
      /// <summary>
      /// Updates a corpus in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Corpus> UpdateCorpusAsync(global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCorpusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a corpus in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Corpus> UpdateCorpusAsync(global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCorpus, null, options, request);
      }
      /// <summary>
      /// Lists all corpora in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListCorporaResponse ListCorpora(global::Google.Cloud.VisionAI.V1.ListCorporaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCorpora(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all corpora in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListCorporaResponse ListCorpora(global::Google.Cloud.VisionAI.V1.ListCorporaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCorpora, null, options, request);
      }
      /// <summary>
      /// Lists all corpora in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListCorporaResponse> ListCorporaAsync(global::Google.Cloud.VisionAI.V1.ListCorporaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCorporaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all corpora in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListCorporaResponse> ListCorporaAsync(global::Google.Cloud.VisionAI.V1.ListCorporaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCorpora, null, options, request);
      }
      /// <summary>
      /// Deletes a corpus only if its empty.
      /// Returns empty response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteCorpus(global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCorpus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a corpus only if its empty.
      /// Returns empty response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteCorpus(global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCorpus, null, options, request);
      }
      /// <summary>
      /// Deletes a corpus only if its empty.
      /// Returns empty response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCorpusAsync(global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCorpusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a corpus only if its empty.
      /// Returns empty response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCorpusAsync(global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCorpus, null, options, request);
      }
      /// <summary>
      /// Analyzes a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AnalyzeCorpus(global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeCorpus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyzes a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AnalyzeCorpus(global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnalyzeCorpus, null, options, request);
      }
      /// <summary>
      /// Analyzes a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AnalyzeCorpusAsync(global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeCorpusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Analyzes a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AnalyzeCorpusAsync(global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnalyzeCorpus, null, options, request);
      }
      /// <summary>
      /// Creates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.DataSchema CreateDataSchema(global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.DataSchema CreateDataSchema(global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDataSchema, null, options, request);
      }
      /// <summary>
      /// Creates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.DataSchema> CreateDataSchemaAsync(global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.DataSchema> CreateDataSchemaAsync(global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDataSchema, null, options, request);
      }
      /// <summary>
      /// Updates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.DataSchema UpdateDataSchema(global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.DataSchema UpdateDataSchema(global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDataSchema, null, options, request);
      }
      /// <summary>
      /// Updates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.DataSchema> UpdateDataSchemaAsync(global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.DataSchema> UpdateDataSchemaAsync(global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDataSchema, null, options, request);
      }
      /// <summary>
      /// Gets data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.DataSchema GetDataSchema(global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.DataSchema GetDataSchema(global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataSchema, null, options, request);
      }
      /// <summary>
      /// Gets data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.DataSchema> GetDataSchemaAsync(global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.DataSchema> GetDataSchemaAsync(global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataSchema, null, options, request);
      }
      /// <summary>
      /// Deletes data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataSchema(global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataSchema(global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDataSchema, null, options, request);
      }
      /// <summary>
      /// Deletes data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSchemaAsync(global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes data schema inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSchemaAsync(global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDataSchema, null, options, request);
      }
      /// <summary>
      /// Lists a list of data schemas inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse ListDataSchemas(global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataSchemas(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists a list of data schemas inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse ListDataSchemas(global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDataSchemas, null, options, request);
      }
      /// <summary>
      /// Lists a list of data schemas inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse> ListDataSchemasAsync(global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataSchemasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists a list of data schemas inside corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse> ListDataSchemasAsync(global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDataSchemas, null, options, request);
      }
      /// <summary>
      /// Creates annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Annotation CreateAnnotation(global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Annotation CreateAnnotation(global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAnnotation, null, options, request);
      }
      /// <summary>
      /// Creates annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Annotation> CreateAnnotationAsync(global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Annotation> CreateAnnotationAsync(global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAnnotation, null, options, request);
      }
      /// <summary>
      /// Reads annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Annotation GetAnnotation(global::Google.Cloud.VisionAI.V1.GetAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Annotation GetAnnotation(global::Google.Cloud.VisionAI.V1.GetAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAnnotation, null, options, request);
      }
      /// <summary>
      /// Reads annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Annotation> GetAnnotationAsync(global::Google.Cloud.VisionAI.V1.GetAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Annotation> GetAnnotationAsync(global::Google.Cloud.VisionAI.V1.GetAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAnnotation, null, options, request);
      }
      /// <summary>
      /// Lists a list of annotations inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse ListAnnotations(global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists a list of annotations inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse ListAnnotations(global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// Lists a list of annotations inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse> ListAnnotationsAsync(global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAnnotationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists a list of annotations inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse> ListAnnotationsAsync(global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAnnotations, null, options, request);
      }
      /// <summary>
      /// Updates annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Annotation UpdateAnnotation(global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Annotation UpdateAnnotation(global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAnnotation, null, options, request);
      }
      /// <summary>
      /// Updates annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Annotation> UpdateAnnotationAsync(global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Annotation> UpdateAnnotationAsync(global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAnnotation, null, options, request);
      }
      /// <summary>
      /// Deletes annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAnnotation(global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAnnotation(global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAnnotation, null, options, request);
      }
      /// <summary>
      /// Deletes annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAnnotationAsync(global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAnnotationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes annotation inside asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAnnotationAsync(global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAnnotation, null, options, request);
      }
      /// <summary>
      /// Ingests data for the asset. It is not allowed to ingest a data chunk which
      /// is already expired according to TTL.
      /// This method is only available via the gRPC API (not HTTP since
      /// bi-directional streaming is not supported via HTTP).
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.VisionAI.V1.IngestAssetRequest, global::Google.Cloud.VisionAI.V1.IngestAssetResponse> IngestAsset(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IngestAsset(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ingests data for the asset. It is not allowed to ingest a data chunk which
      /// is already expired according to TTL.
      /// This method is only available via the gRPC API (not HTTP since
      /// bi-directional streaming is not supported via HTTP).
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.VisionAI.V1.IngestAssetRequest, global::Google.Cloud.VisionAI.V1.IngestAssetResponse> IngestAsset(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_IngestAsset, null, options);
      }
      /// <summary>
      /// Supported by STREAM_VIDEO corpus type.
      /// Generates clips for downloading. The api takes in a time range, and
      /// generates a clip of the first content available after start_time and
      /// before end_time, which may overflow beyond these bounds.
      /// Returned clips are truncated if the total size of the clips are larger
      /// than 100MB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ClipAssetResponse ClipAsset(global::Google.Cloud.VisionAI.V1.ClipAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClipAsset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Supported by STREAM_VIDEO corpus type.
      /// Generates clips for downloading. The api takes in a time range, and
      /// generates a clip of the first content available after start_time and
      /// before end_time, which may overflow beyond these bounds.
      /// Returned clips are truncated if the total size of the clips are larger
      /// than 100MB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ClipAssetResponse ClipAsset(global::Google.Cloud.VisionAI.V1.ClipAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClipAsset, null, options, request);
      }
      /// <summary>
      /// Supported by STREAM_VIDEO corpus type.
      /// Generates clips for downloading. The api takes in a time range, and
      /// generates a clip of the first content available after start_time and
      /// before end_time, which may overflow beyond these bounds.
      /// Returned clips are truncated if the total size of the clips are larger
      /// than 100MB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ClipAssetResponse> ClipAssetAsync(global::Google.Cloud.VisionAI.V1.ClipAssetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClipAssetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Supported by STREAM_VIDEO corpus type.
      /// Generates clips for downloading. The api takes in a time range, and
      /// generates a clip of the first content available after start_time and
      /// before end_time, which may overflow beyond these bounds.
      /// Returned clips are truncated if the total size of the clips are larger
      /// than 100MB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ClipAssetResponse> ClipAssetAsync(global::Google.Cloud.VisionAI.V1.ClipAssetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClipAsset, null, options, request);
      }
      /// <summary>
      /// Generates a uri for an HLS manifest. The api takes in a collection of time
      /// ranges, and generates a URI for an HLS manifest that covers all the
      /// requested time ranges.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse GenerateHlsUri(global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateHlsUri(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a uri for an HLS manifest. The api takes in a collection of time
      /// ranges, and generates a URI for an HLS manifest that covers all the
      /// requested time ranges.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse GenerateHlsUri(global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateHlsUri, null, options, request);
      }
      /// <summary>
      /// Generates a uri for an HLS manifest. The api takes in a collection of time
      /// ranges, and generates a URI for an HLS manifest that covers all the
      /// requested time ranges.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse> GenerateHlsUriAsync(global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateHlsUriAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a uri for an HLS manifest. The api takes in a collection of time
      /// ranges, and generates a URI for an HLS manifest that covers all the
      /// requested time ranges.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse> GenerateHlsUriAsync(global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateHlsUri, null, options, request);
      }
      /// <summary>
      /// Imports assets (images plus annotations) from a meta file on cloud storage.
      /// Each row in the meta file is corresponding to an image (specified by a
      /// cloud storage uri) and its annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ImportAssets(global::Google.Cloud.VisionAI.V1.ImportAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportAssets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports assets (images plus annotations) from a meta file on cloud storage.
      /// Each row in the meta file is corresponding to an image (specified by a
      /// cloud storage uri) and its annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ImportAssets(global::Google.Cloud.VisionAI.V1.ImportAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportAssets, null, options, request);
      }
      /// <summary>
      /// Imports assets (images plus annotations) from a meta file on cloud storage.
      /// Each row in the meta file is corresponding to an image (specified by a
      /// cloud storage uri) and its annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportAssetsAsync(global::Google.Cloud.VisionAI.V1.ImportAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportAssetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports assets (images plus annotations) from a meta file on cloud storage.
      /// Each row in the meta file is corresponding to an image (specified by a
      /// cloud storage uri) and its annotations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportAssetsAsync(global::Google.Cloud.VisionAI.V1.ImportAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportAssets, null, options, request);
      }
      /// <summary>
      /// Creates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid CreateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_config_id must not be associated with an existing
      ///    SearchConfig.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      ///    facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchConfig CreateSearchConfig(global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSearchConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid CreateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_config_id must not be associated with an existing
      ///    SearchConfig.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      ///    facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchConfig CreateSearchConfig(global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSearchConfig, null, options, request);
      }
      /// <summary>
      /// Creates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid CreateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_config_id must not be associated with an existing
      ///    SearchConfig.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      ///    facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchConfig> CreateSearchConfigAsync(global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSearchConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid CreateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_config_id must not be associated with an existing
      ///    SearchConfig.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      ///    facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchConfig> CreateSearchConfigAsync(global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSearchConfig, null, options, request);
      }
      /// <summary>
      /// Updates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid UpdateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_configuration.name must already exist.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      /// facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchConfig UpdateSearchConfig(global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSearchConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid UpdateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_configuration.name must already exist.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      /// facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchConfig UpdateSearchConfig(global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSearchConfig, null, options, request);
      }
      /// <summary>
      /// Updates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid UpdateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_configuration.name must already exist.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      /// facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchConfig> UpdateSearchConfigAsync(global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSearchConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a search configuration inside a corpus.
      ///
      /// Please follow the rules below to create a valid UpdateSearchConfigRequest.
      /// --- General Rules ---
      /// 1. Request.search_configuration.name must already exist.
      /// 2. Request must contain at least one non-empty search_criteria_property or
      /// facet_property.
      /// 3. mapped_fields must not be empty, and must map to existing UGA keys.
      /// 4. All mapped_fields must be of the same type.
      /// 5. All mapped_fields must share the same granularity.
      /// 6. All mapped_fields must share the same semantic SearchConfig match
      ///    options.
      /// For property-specific rules, please reference the comments for
      /// FacetProperty and SearchCriteriaProperty.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchConfig> UpdateSearchConfigAsync(global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSearchConfig, null, options, request);
      }
      /// <summary>
      /// Gets a search configuration inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchConfig GetSearchConfig(global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a search configuration inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchConfig GetSearchConfig(global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSearchConfig, null, options, request);
      }
      /// <summary>
      /// Gets a search configuration inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchConfig> GetSearchConfigAsync(global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a search configuration inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchConfig> GetSearchConfigAsync(global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSearchConfig, null, options, request);
      }
      /// <summary>
      /// Deletes a search configuration inside a corpus.
      ///
      /// For a DeleteSearchConfigRequest to be valid,
      /// Request.search_configuration.name must already exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSearchConfig(global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearchConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a search configuration inside a corpus.
      ///
      /// For a DeleteSearchConfigRequest to be valid,
      /// Request.search_configuration.name must already exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSearchConfig(global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSearchConfig, null, options, request);
      }
      /// <summary>
      /// Deletes a search configuration inside a corpus.
      ///
      /// For a DeleteSearchConfigRequest to be valid,
      /// Request.search_configuration.name must already exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSearchConfigAsync(global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearchConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a search configuration inside a corpus.
      ///
      /// For a DeleteSearchConfigRequest to be valid,
      /// Request.search_configuration.name must already exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSearchConfigAsync(global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSearchConfig, null, options, request);
      }
      /// <summary>
      /// Lists all search configurations inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse ListSearchConfigs(global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearchConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all search configurations inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse ListSearchConfigs(global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSearchConfigs, null, options, request);
      }
      /// <summary>
      /// Lists all search configurations inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse> ListSearchConfigsAsync(global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearchConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all search configurations inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse> ListSearchConfigsAsync(global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSearchConfigs, null, options, request);
      }
      /// <summary>
      /// Creates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchHypernym CreateSearchHypernym(global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSearchHypernym(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchHypernym CreateSearchHypernym(global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSearchHypernym, null, options, request);
      }
      /// <summary>
      /// Creates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchHypernym> CreateSearchHypernymAsync(global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSearchHypernymAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchHypernym> CreateSearchHypernymAsync(global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSearchHypernym, null, options, request);
      }
      /// <summary>
      /// Updates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchHypernym UpdateSearchHypernym(global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSearchHypernym(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchHypernym UpdateSearchHypernym(global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSearchHypernym, null, options, request);
      }
      /// <summary>
      /// Updates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchHypernym> UpdateSearchHypernymAsync(global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSearchHypernymAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchHypernym> UpdateSearchHypernymAsync(global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSearchHypernym, null, options, request);
      }
      /// <summary>
      /// Gets a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchHypernym GetSearchHypernym(global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchHypernym(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchHypernym GetSearchHypernym(global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSearchHypernym, null, options, request);
      }
      /// <summary>
      /// Gets a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchHypernym> GetSearchHypernymAsync(global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchHypernymAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchHypernym> GetSearchHypernymAsync(global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSearchHypernym, null, options, request);
      }
      /// <summary>
      /// Deletes a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSearchHypernym(global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearchHypernym(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSearchHypernym(global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSearchHypernym, null, options, request);
      }
      /// <summary>
      /// Deletes a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSearchHypernymAsync(global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSearchHypernymAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a SearchHypernym inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSearchHypernymAsync(global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSearchHypernym, null, options, request);
      }
      /// <summary>
      /// Lists SearchHypernyms inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse ListSearchHypernyms(global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearchHypernyms(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists SearchHypernyms inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse ListSearchHypernyms(global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSearchHypernyms, null, options, request);
      }
      /// <summary>
      /// Lists SearchHypernyms inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse> ListSearchHypernymsAsync(global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSearchHypernymsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists SearchHypernyms inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse> ListSearchHypernymsAsync(global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSearchHypernyms, null, options, request);
      }
      /// <summary>
      /// Search media asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchAssetsResponse SearchAssets(global::Google.Cloud.VisionAI.V1.SearchAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchAssets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search media asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchAssetsResponse SearchAssets(global::Google.Cloud.VisionAI.V1.SearchAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchAssets, null, options, request);
      }
      /// <summary>
      /// Search media asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchAssetsResponse> SearchAssetsAsync(global::Google.Cloud.VisionAI.V1.SearchAssetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchAssetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search media asset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchAssetsResponse> SearchAssetsAsync(global::Google.Cloud.VisionAI.V1.SearchAssetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchAssets, null, options, request);
      }
      /// <summary>
      /// Search a deployed index endpoint (IMAGE corpus type only).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse SearchIndexEndpoint(global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchIndexEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search a deployed index endpoint (IMAGE corpus type only).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse SearchIndexEndpoint(global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Search a deployed index endpoint (IMAGE corpus type only).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse> SearchIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchIndexEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search a deployed index endpoint (IMAGE corpus type only).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse> SearchIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Creates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateIndexEndpoint(global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIndexEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateIndexEndpoint(global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Creates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateIndexEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Gets an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.IndexEndpoint GetIndexEndpoint(global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndexEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.IndexEndpoint GetIndexEndpoint(global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Gets an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.IndexEndpoint> GetIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIndexEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.IndexEndpoint> GetIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Lists all IndexEndpoints in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse ListIndexEndpoints(global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIndexEndpoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all IndexEndpoints in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse ListIndexEndpoints(global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListIndexEndpoints, null, options, request);
      }
      /// <summary>
      /// Lists all IndexEndpoints in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse> ListIndexEndpointsAsync(global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIndexEndpointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all IndexEndpoints in a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse> ListIndexEndpointsAsync(global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListIndexEndpoints, null, options, request);
      }
      /// <summary>
      /// Updates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateIndexEndpoint(global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIndexEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateIndexEndpoint(global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Updates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateIndexEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Deletes an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteIndexEndpoint(global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIndexEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteIndexEndpoint(global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Deletes an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteIndexEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteIndexEndpointAsync(global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteIndexEndpoint, null, options, request);
      }
      /// <summary>
      /// Deploys an Index to IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeployIndex(global::Google.Cloud.VisionAI.V1.DeployIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deploys an Index to IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeployIndex(global::Google.Cloud.VisionAI.V1.DeployIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeployIndex, null, options, request);
      }
      /// <summary>
      /// Deploys an Index to IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeployIndexAsync(global::Google.Cloud.VisionAI.V1.DeployIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeployIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deploys an Index to IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeployIndexAsync(global::Google.Cloud.VisionAI.V1.DeployIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeployIndex, null, options, request);
      }
      /// <summary>
      /// Undeploys an Index from IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeployIndex(global::Google.Cloud.VisionAI.V1.UndeployIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeployIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeploys an Index from IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeployIndex(global::Google.Cloud.VisionAI.V1.UndeployIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeployIndex, null, options, request);
      }
      /// <summary>
      /// Undeploys an Index from IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeployIndexAsync(global::Google.Cloud.VisionAI.V1.UndeployIndexRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeployIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeploys an Index from IndexEndpoint.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeployIndexAsync(global::Google.Cloud.VisionAI.V1.UndeployIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeployIndex, null, options, request);
      }
      /// <summary>
      /// Creates a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCollection(global::Google.Cloud.VisionAI.V1.CreateCollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCollection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCollection(global::Google.Cloud.VisionAI.V1.CreateCollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCollection, null, options, request);
      }
      /// <summary>
      /// Creates a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCollectionAsync(global::Google.Cloud.VisionAI.V1.CreateCollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCollectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCollectionAsync(global::Google.Cloud.VisionAI.V1.CreateCollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCollection, null, options, request);
      }
      /// <summary>
      /// Deletes a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCollection(global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCollection(global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCollection, null, options, request);
      }
      /// <summary>
      /// Deletes a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCollectionAsync(global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCollectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCollectionAsync(global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCollection, null, options, request);
      }
      /// <summary>
      /// Gets a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Collection GetCollection(global::Google.Cloud.VisionAI.V1.GetCollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCollection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Collection GetCollection(global::Google.Cloud.VisionAI.V1.GetCollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCollection, null, options, request);
      }
      /// <summary>
      /// Gets a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Collection> GetCollectionAsync(global::Google.Cloud.VisionAI.V1.GetCollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCollectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Collection> GetCollectionAsync(global::Google.Cloud.VisionAI.V1.GetCollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCollection, null, options, request);
      }
      /// <summary>
      /// Updates a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Collection UpdateCollection(global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCollection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.Collection UpdateCollection(global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCollection, null, options, request);
      }
      /// <summary>
      /// Updates a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Collection> UpdateCollectionAsync(global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCollectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.Collection> UpdateCollectionAsync(global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCollection, null, options, request);
      }
      /// <summary>
      /// Lists collections inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListCollectionsResponse ListCollections(global::Google.Cloud.VisionAI.V1.ListCollectionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollections(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists collections inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ListCollectionsResponse ListCollections(global::Google.Cloud.VisionAI.V1.ListCollectionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollections, null, options, request);
      }
      /// <summary>
      /// Lists collections inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListCollectionsResponse> ListCollectionsAsync(global::Google.Cloud.VisionAI.V1.ListCollectionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists collections inside a corpus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ListCollectionsResponse> ListCollectionsAsync(global::Google.Cloud.VisionAI.V1.ListCollectionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollections, null, options, request);
      }
      /// <summary>
      /// Adds an item into a Collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse AddCollectionItem(global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCollectionItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds an item into a Collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse AddCollectionItem(global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddCollectionItem, null, options, request);
      }
      /// <summary>
      /// Adds an item into a Collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse> AddCollectionItemAsync(global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddCollectionItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds an item into a Collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse> AddCollectionItemAsync(global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddCollectionItem, null, options, request);
      }
      /// <summary>
      /// Removes an item from a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse RemoveCollectionItem(global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveCollectionItem(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes an item from a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse RemoveCollectionItem(global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveCollectionItem, null, options, request);
      }
      /// <summary>
      /// Removes an item from a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse> RemoveCollectionItemAsync(global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveCollectionItemAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes an item from a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse> RemoveCollectionItemAsync(global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveCollectionItem, null, options, request);
      }
      /// <summary>
      /// View items inside a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse ViewCollectionItems(global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewCollectionItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// View items inside a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse ViewCollectionItems(global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ViewCollectionItems, null, options, request);
      }
      /// <summary>
      /// View items inside a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse> ViewCollectionItemsAsync(global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ViewCollectionItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// View items inside a collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse> ViewCollectionItemsAsync(global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ViewCollectionItems, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WarehouseClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WarehouseClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WarehouseBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateAsset, serviceImpl.CreateAsset)
          .AddMethod(__Method_UpdateAsset, serviceImpl.UpdateAsset)
          .AddMethod(__Method_GetAsset, serviceImpl.GetAsset)
          .AddMethod(__Method_ListAssets, serviceImpl.ListAssets)
          .AddMethod(__Method_DeleteAsset, serviceImpl.DeleteAsset)
          .AddMethod(__Method_UploadAsset, serviceImpl.UploadAsset)
          .AddMethod(__Method_GenerateRetrievalUrl, serviceImpl.GenerateRetrievalUrl)
          .AddMethod(__Method_AnalyzeAsset, serviceImpl.AnalyzeAsset)
          .AddMethod(__Method_IndexAsset, serviceImpl.IndexAsset)
          .AddMethod(__Method_RemoveIndexAsset, serviceImpl.RemoveIndexAsset)
          .AddMethod(__Method_ViewIndexedAssets, serviceImpl.ViewIndexedAssets)
          .AddMethod(__Method_CreateIndex, serviceImpl.CreateIndex)
          .AddMethod(__Method_UpdateIndex, serviceImpl.UpdateIndex)
          .AddMethod(__Method_GetIndex, serviceImpl.GetIndex)
          .AddMethod(__Method_ListIndexes, serviceImpl.ListIndexes)
          .AddMethod(__Method_DeleteIndex, serviceImpl.DeleteIndex)
          .AddMethod(__Method_CreateCorpus, serviceImpl.CreateCorpus)
          .AddMethod(__Method_GetCorpus, serviceImpl.GetCorpus)
          .AddMethod(__Method_UpdateCorpus, serviceImpl.UpdateCorpus)
          .AddMethod(__Method_ListCorpora, serviceImpl.ListCorpora)
          .AddMethod(__Method_DeleteCorpus, serviceImpl.DeleteCorpus)
          .AddMethod(__Method_AnalyzeCorpus, serviceImpl.AnalyzeCorpus)
          .AddMethod(__Method_CreateDataSchema, serviceImpl.CreateDataSchema)
          .AddMethod(__Method_UpdateDataSchema, serviceImpl.UpdateDataSchema)
          .AddMethod(__Method_GetDataSchema, serviceImpl.GetDataSchema)
          .AddMethod(__Method_DeleteDataSchema, serviceImpl.DeleteDataSchema)
          .AddMethod(__Method_ListDataSchemas, serviceImpl.ListDataSchemas)
          .AddMethod(__Method_CreateAnnotation, serviceImpl.CreateAnnotation)
          .AddMethod(__Method_GetAnnotation, serviceImpl.GetAnnotation)
          .AddMethod(__Method_ListAnnotations, serviceImpl.ListAnnotations)
          .AddMethod(__Method_UpdateAnnotation, serviceImpl.UpdateAnnotation)
          .AddMethod(__Method_DeleteAnnotation, serviceImpl.DeleteAnnotation)
          .AddMethod(__Method_IngestAsset, serviceImpl.IngestAsset)
          .AddMethod(__Method_ClipAsset, serviceImpl.ClipAsset)
          .AddMethod(__Method_GenerateHlsUri, serviceImpl.GenerateHlsUri)
          .AddMethod(__Method_ImportAssets, serviceImpl.ImportAssets)
          .AddMethod(__Method_CreateSearchConfig, serviceImpl.CreateSearchConfig)
          .AddMethod(__Method_UpdateSearchConfig, serviceImpl.UpdateSearchConfig)
          .AddMethod(__Method_GetSearchConfig, serviceImpl.GetSearchConfig)
          .AddMethod(__Method_DeleteSearchConfig, serviceImpl.DeleteSearchConfig)
          .AddMethod(__Method_ListSearchConfigs, serviceImpl.ListSearchConfigs)
          .AddMethod(__Method_CreateSearchHypernym, serviceImpl.CreateSearchHypernym)
          .AddMethod(__Method_UpdateSearchHypernym, serviceImpl.UpdateSearchHypernym)
          .AddMethod(__Method_GetSearchHypernym, serviceImpl.GetSearchHypernym)
          .AddMethod(__Method_DeleteSearchHypernym, serviceImpl.DeleteSearchHypernym)
          .AddMethod(__Method_ListSearchHypernyms, serviceImpl.ListSearchHypernyms)
          .AddMethod(__Method_SearchAssets, serviceImpl.SearchAssets)
          .AddMethod(__Method_SearchIndexEndpoint, serviceImpl.SearchIndexEndpoint)
          .AddMethod(__Method_CreateIndexEndpoint, serviceImpl.CreateIndexEndpoint)
          .AddMethod(__Method_GetIndexEndpoint, serviceImpl.GetIndexEndpoint)
          .AddMethod(__Method_ListIndexEndpoints, serviceImpl.ListIndexEndpoints)
          .AddMethod(__Method_UpdateIndexEndpoint, serviceImpl.UpdateIndexEndpoint)
          .AddMethod(__Method_DeleteIndexEndpoint, serviceImpl.DeleteIndexEndpoint)
          .AddMethod(__Method_DeployIndex, serviceImpl.DeployIndex)
          .AddMethod(__Method_UndeployIndex, serviceImpl.UndeployIndex)
          .AddMethod(__Method_CreateCollection, serviceImpl.CreateCollection)
          .AddMethod(__Method_DeleteCollection, serviceImpl.DeleteCollection)
          .AddMethod(__Method_GetCollection, serviceImpl.GetCollection)
          .AddMethod(__Method_UpdateCollection, serviceImpl.UpdateCollection)
          .AddMethod(__Method_ListCollections, serviceImpl.ListCollections)
          .AddMethod(__Method_AddCollectionItem, serviceImpl.AddCollectionItem)
          .AddMethod(__Method_RemoveCollectionItem, serviceImpl.RemoveCollectionItem)
          .AddMethod(__Method_ViewCollectionItems, serviceImpl.ViewCollectionItems).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WarehouseBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateAssetRequest, global::Google.Cloud.VisionAI.V1.Asset>(serviceImpl.CreateAsset));
      serviceBinder.AddMethod(__Method_UpdateAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateAssetRequest, global::Google.Cloud.VisionAI.V1.Asset>(serviceImpl.UpdateAsset));
      serviceBinder.AddMethod(__Method_GetAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetAssetRequest, global::Google.Cloud.VisionAI.V1.Asset>(serviceImpl.GetAsset));
      serviceBinder.AddMethod(__Method_ListAssets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListAssetsRequest, global::Google.Cloud.VisionAI.V1.ListAssetsResponse>(serviceImpl.ListAssets));
      serviceBinder.AddMethod(__Method_DeleteAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteAssetRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAsset));
      serviceBinder.AddMethod(__Method_UploadAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UploadAssetRequest, global::Google.LongRunning.Operation>(serviceImpl.UploadAsset));
      serviceBinder.AddMethod(__Method_GenerateRetrievalUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlRequest, global::Google.Cloud.VisionAI.V1.GenerateRetrievalUrlResponse>(serviceImpl.GenerateRetrievalUrl));
      serviceBinder.AddMethod(__Method_AnalyzeAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.AnalyzeAssetRequest, global::Google.LongRunning.Operation>(serviceImpl.AnalyzeAsset));
      serviceBinder.AddMethod(__Method_IndexAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.IndexAssetRequest, global::Google.LongRunning.Operation>(serviceImpl.IndexAsset));
      serviceBinder.AddMethod(__Method_RemoveIndexAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.RemoveIndexAssetRequest, global::Google.LongRunning.Operation>(serviceImpl.RemoveIndexAsset));
      serviceBinder.AddMethod(__Method_ViewIndexedAssets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsRequest, global::Google.Cloud.VisionAI.V1.ViewIndexedAssetsResponse>(serviceImpl.ViewIndexedAssets));
      serviceBinder.AddMethod(__Method_CreateIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateIndexRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateIndex));
      serviceBinder.AddMethod(__Method_UpdateIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateIndexRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateIndex));
      serviceBinder.AddMethod(__Method_GetIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetIndexRequest, global::Google.Cloud.VisionAI.V1.Index>(serviceImpl.GetIndex));
      serviceBinder.AddMethod(__Method_ListIndexes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListIndexesRequest, global::Google.Cloud.VisionAI.V1.ListIndexesResponse>(serviceImpl.ListIndexes));
      serviceBinder.AddMethod(__Method_DeleteIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteIndexRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteIndex));
      serviceBinder.AddMethod(__Method_CreateCorpus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateCorpusRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCorpus));
      serviceBinder.AddMethod(__Method_GetCorpus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetCorpusRequest, global::Google.Cloud.VisionAI.V1.Corpus>(serviceImpl.GetCorpus));
      serviceBinder.AddMethod(__Method_UpdateCorpus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateCorpusRequest, global::Google.Cloud.VisionAI.V1.Corpus>(serviceImpl.UpdateCorpus));
      serviceBinder.AddMethod(__Method_ListCorpora, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListCorporaRequest, global::Google.Cloud.VisionAI.V1.ListCorporaResponse>(serviceImpl.ListCorpora));
      serviceBinder.AddMethod(__Method_DeleteCorpus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteCorpusRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteCorpus));
      serviceBinder.AddMethod(__Method_AnalyzeCorpus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.AnalyzeCorpusRequest, global::Google.LongRunning.Operation>(serviceImpl.AnalyzeCorpus));
      serviceBinder.AddMethod(__Method_CreateDataSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema>(serviceImpl.CreateDataSchema));
      serviceBinder.AddMethod(__Method_UpdateDataSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema>(serviceImpl.UpdateDataSchema));
      serviceBinder.AddMethod(__Method_GetDataSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetDataSchemaRequest, global::Google.Cloud.VisionAI.V1.DataSchema>(serviceImpl.GetDataSchema));
      serviceBinder.AddMethod(__Method_DeleteDataSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteDataSchemaRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDataSchema));
      serviceBinder.AddMethod(__Method_ListDataSchemas, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListDataSchemasRequest, global::Google.Cloud.VisionAI.V1.ListDataSchemasResponse>(serviceImpl.ListDataSchemas));
      serviceBinder.AddMethod(__Method_CreateAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation>(serviceImpl.CreateAnnotation));
      serviceBinder.AddMethod(__Method_GetAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation>(serviceImpl.GetAnnotation));
      serviceBinder.AddMethod(__Method_ListAnnotations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListAnnotationsRequest, global::Google.Cloud.VisionAI.V1.ListAnnotationsResponse>(serviceImpl.ListAnnotations));
      serviceBinder.AddMethod(__Method_UpdateAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateAnnotationRequest, global::Google.Cloud.VisionAI.V1.Annotation>(serviceImpl.UpdateAnnotation));
      serviceBinder.AddMethod(__Method_DeleteAnnotation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteAnnotationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteAnnotation));
      serviceBinder.AddMethod(__Method_IngestAsset, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Cloud.VisionAI.V1.IngestAssetRequest, global::Google.Cloud.VisionAI.V1.IngestAssetResponse>(serviceImpl.IngestAsset));
      serviceBinder.AddMethod(__Method_ClipAsset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ClipAssetRequest, global::Google.Cloud.VisionAI.V1.ClipAssetResponse>(serviceImpl.ClipAsset));
      serviceBinder.AddMethod(__Method_GenerateHlsUri, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GenerateHlsUriRequest, global::Google.Cloud.VisionAI.V1.GenerateHlsUriResponse>(serviceImpl.GenerateHlsUri));
      serviceBinder.AddMethod(__Method_ImportAssets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ImportAssetsRequest, global::Google.LongRunning.Operation>(serviceImpl.ImportAssets));
      serviceBinder.AddMethod(__Method_CreateSearchConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig>(serviceImpl.CreateSearchConfig));
      serviceBinder.AddMethod(__Method_UpdateSearchConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig>(serviceImpl.UpdateSearchConfig));
      serviceBinder.AddMethod(__Method_GetSearchConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetSearchConfigRequest, global::Google.Cloud.VisionAI.V1.SearchConfig>(serviceImpl.GetSearchConfig));
      serviceBinder.AddMethod(__Method_DeleteSearchConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteSearchConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteSearchConfig));
      serviceBinder.AddMethod(__Method_ListSearchConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListSearchConfigsRequest, global::Google.Cloud.VisionAI.V1.ListSearchConfigsResponse>(serviceImpl.ListSearchConfigs));
      serviceBinder.AddMethod(__Method_CreateSearchHypernym, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym>(serviceImpl.CreateSearchHypernym));
      serviceBinder.AddMethod(__Method_UpdateSearchHypernym, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym>(serviceImpl.UpdateSearchHypernym));
      serviceBinder.AddMethod(__Method_GetSearchHypernym, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetSearchHypernymRequest, global::Google.Cloud.VisionAI.V1.SearchHypernym>(serviceImpl.GetSearchHypernym));
      serviceBinder.AddMethod(__Method_DeleteSearchHypernym, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteSearchHypernymRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteSearchHypernym));
      serviceBinder.AddMethod(__Method_ListSearchHypernyms, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListSearchHypernymsRequest, global::Google.Cloud.VisionAI.V1.ListSearchHypernymsResponse>(serviceImpl.ListSearchHypernyms));
      serviceBinder.AddMethod(__Method_SearchAssets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.SearchAssetsRequest, global::Google.Cloud.VisionAI.V1.SearchAssetsResponse>(serviceImpl.SearchAssets));
      serviceBinder.AddMethod(__Method_SearchIndexEndpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.SearchIndexEndpointRequest, global::Google.Cloud.VisionAI.V1.SearchIndexEndpointResponse>(serviceImpl.SearchIndexEndpoint));
      serviceBinder.AddMethod(__Method_CreateIndexEndpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateIndexEndpointRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateIndexEndpoint));
      serviceBinder.AddMethod(__Method_GetIndexEndpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetIndexEndpointRequest, global::Google.Cloud.VisionAI.V1.IndexEndpoint>(serviceImpl.GetIndexEndpoint));
      serviceBinder.AddMethod(__Method_ListIndexEndpoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListIndexEndpointsRequest, global::Google.Cloud.VisionAI.V1.ListIndexEndpointsResponse>(serviceImpl.ListIndexEndpoints));
      serviceBinder.AddMethod(__Method_UpdateIndexEndpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateIndexEndpointRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateIndexEndpoint));
      serviceBinder.AddMethod(__Method_DeleteIndexEndpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteIndexEndpointRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteIndexEndpoint));
      serviceBinder.AddMethod(__Method_DeployIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeployIndexRequest, global::Google.LongRunning.Operation>(serviceImpl.DeployIndex));
      serviceBinder.AddMethod(__Method_UndeployIndex, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UndeployIndexRequest, global::Google.LongRunning.Operation>(serviceImpl.UndeployIndex));
      serviceBinder.AddMethod(__Method_CreateCollection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.CreateCollectionRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCollection));
      serviceBinder.AddMethod(__Method_DeleteCollection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.DeleteCollectionRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCollection));
      serviceBinder.AddMethod(__Method_GetCollection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.GetCollectionRequest, global::Google.Cloud.VisionAI.V1.Collection>(serviceImpl.GetCollection));
      serviceBinder.AddMethod(__Method_UpdateCollection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.UpdateCollectionRequest, global::Google.Cloud.VisionAI.V1.Collection>(serviceImpl.UpdateCollection));
      serviceBinder.AddMethod(__Method_ListCollections, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ListCollectionsRequest, global::Google.Cloud.VisionAI.V1.ListCollectionsResponse>(serviceImpl.ListCollections));
      serviceBinder.AddMethod(__Method_AddCollectionItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.AddCollectionItemRequest, global::Google.Cloud.VisionAI.V1.AddCollectionItemResponse>(serviceImpl.AddCollectionItem));
      serviceBinder.AddMethod(__Method_RemoveCollectionItem, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.RemoveCollectionItemRequest, global::Google.Cloud.VisionAI.V1.RemoveCollectionItemResponse>(serviceImpl.RemoveCollectionItem));
      serviceBinder.AddMethod(__Method_ViewCollectionItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.VisionAI.V1.ViewCollectionItemsRequest, global::Google.Cloud.VisionAI.V1.ViewCollectionItemsResponse>(serviceImpl.ViewCollectionItems));
    }

  }
}
#endregion
