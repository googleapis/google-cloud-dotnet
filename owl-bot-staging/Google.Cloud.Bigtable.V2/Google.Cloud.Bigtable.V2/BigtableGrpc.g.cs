// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/bigtable/v2/bigtable.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Bigtable.V2 {
  /// <summary>
  /// Service for reading from and writing to existing Bigtable tables.
  /// </summary>
  public static partial class Bigtable
  {
    static readonly string __ServiceName = "google.bigtable.v2.Bigtable";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ReadRowsRequest> __Marshaller_google_bigtable_v2_ReadRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ReadRowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ReadRowsResponse> __Marshaller_google_bigtable_v2_ReadRowsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ReadRowsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.SampleRowKeysRequest> __Marshaller_google_bigtable_v2_SampleRowKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.SampleRowKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.SampleRowKeysResponse> __Marshaller_google_bigtable_v2_SampleRowKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.SampleRowKeysResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.MutateRowRequest> __Marshaller_google_bigtable_v2_MutateRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.MutateRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.MutateRowResponse> __Marshaller_google_bigtable_v2_MutateRowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.MutateRowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.MutateRowsRequest> __Marshaller_google_bigtable_v2_MutateRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.MutateRowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.MutateRowsResponse> __Marshaller_google_bigtable_v2_MutateRowsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.MutateRowsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest> __Marshaller_google_bigtable_v2_CheckAndMutateRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse> __Marshaller_google_bigtable_v2_CheckAndMutateRowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.PingAndWarmRequest> __Marshaller_google_bigtable_v2_PingAndWarmRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.PingAndWarmRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.PingAndWarmResponse> __Marshaller_google_bigtable_v2_PingAndWarmResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.PingAndWarmResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest> __Marshaller_google_bigtable_v2_ReadModifyWriteRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse> __Marshaller_google_bigtable_v2_ReadModifyWriteRowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsRequest> __Marshaller_google_bigtable_v2_GenerateInitialChangeStreamPartitionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsResponse> __Marshaller_google_bigtable_v2_GenerateInitialChangeStreamPartitionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ReadChangeStreamRequest> __Marshaller_google_bigtable_v2_ReadChangeStreamRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ReadChangeStreamRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ReadChangeStreamResponse> __Marshaller_google_bigtable_v2_ReadChangeStreamResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ReadChangeStreamResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ExecuteQueryRequest> __Marshaller_google_bigtable_v2_ExecuteQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ExecuteQueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ExecuteQueryResponse> __Marshaller_google_bigtable_v2_ExecuteQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ExecuteQueryResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ReadRowsRequest, global::Google.Cloud.Bigtable.V2.ReadRowsResponse> __Method_ReadRows = new grpc::Method<global::Google.Cloud.Bigtable.V2.ReadRowsRequest, global::Google.Cloud.Bigtable.V2.ReadRowsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ReadRows",
        __Marshaller_google_bigtable_v2_ReadRowsRequest,
        __Marshaller_google_bigtable_v2_ReadRowsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.SampleRowKeysRequest, global::Google.Cloud.Bigtable.V2.SampleRowKeysResponse> __Method_SampleRowKeys = new grpc::Method<global::Google.Cloud.Bigtable.V2.SampleRowKeysRequest, global::Google.Cloud.Bigtable.V2.SampleRowKeysResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SampleRowKeys",
        __Marshaller_google_bigtable_v2_SampleRowKeysRequest,
        __Marshaller_google_bigtable_v2_SampleRowKeysResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.MutateRowRequest, global::Google.Cloud.Bigtable.V2.MutateRowResponse> __Method_MutateRow = new grpc::Method<global::Google.Cloud.Bigtable.V2.MutateRowRequest, global::Google.Cloud.Bigtable.V2.MutateRowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MutateRow",
        __Marshaller_google_bigtable_v2_MutateRowRequest,
        __Marshaller_google_bigtable_v2_MutateRowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.MutateRowsRequest, global::Google.Cloud.Bigtable.V2.MutateRowsResponse> __Method_MutateRows = new grpc::Method<global::Google.Cloud.Bigtable.V2.MutateRowsRequest, global::Google.Cloud.Bigtable.V2.MutateRowsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "MutateRows",
        __Marshaller_google_bigtable_v2_MutateRowsRequest,
        __Marshaller_google_bigtable_v2_MutateRowsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest, global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse> __Method_CheckAndMutateRow = new grpc::Method<global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest, global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckAndMutateRow",
        __Marshaller_google_bigtable_v2_CheckAndMutateRowRequest,
        __Marshaller_google_bigtable_v2_CheckAndMutateRowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.PingAndWarmRequest, global::Google.Cloud.Bigtable.V2.PingAndWarmResponse> __Method_PingAndWarm = new grpc::Method<global::Google.Cloud.Bigtable.V2.PingAndWarmRequest, global::Google.Cloud.Bigtable.V2.PingAndWarmResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PingAndWarm",
        __Marshaller_google_bigtable_v2_PingAndWarmRequest,
        __Marshaller_google_bigtable_v2_PingAndWarmResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest, global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse> __Method_ReadModifyWriteRow = new grpc::Method<global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest, global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadModifyWriteRow",
        __Marshaller_google_bigtable_v2_ReadModifyWriteRowRequest,
        __Marshaller_google_bigtable_v2_ReadModifyWriteRowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsRequest, global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsResponse> __Method_GenerateInitialChangeStreamPartitions = new grpc::Method<global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsRequest, global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GenerateInitialChangeStreamPartitions",
        __Marshaller_google_bigtable_v2_GenerateInitialChangeStreamPartitionsRequest,
        __Marshaller_google_bigtable_v2_GenerateInitialChangeStreamPartitionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ReadChangeStreamRequest, global::Google.Cloud.Bigtable.V2.ReadChangeStreamResponse> __Method_ReadChangeStream = new grpc::Method<global::Google.Cloud.Bigtable.V2.ReadChangeStreamRequest, global::Google.Cloud.Bigtable.V2.ReadChangeStreamResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ReadChangeStream",
        __Marshaller_google_bigtable_v2_ReadChangeStreamRequest,
        __Marshaller_google_bigtable_v2_ReadChangeStreamResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ExecuteQueryRequest, global::Google.Cloud.Bigtable.V2.ExecuteQueryResponse> __Method_ExecuteQuery = new grpc::Method<global::Google.Cloud.Bigtable.V2.ExecuteQueryRequest, global::Google.Cloud.Bigtable.V2.ExecuteQueryResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ExecuteQuery",
        __Marshaller_google_bigtable_v2_ExecuteQueryRequest,
        __Marshaller_google_bigtable_v2_ExecuteQueryResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Bigtable.V2.BigtableReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Bigtable</summary>
    [grpc::BindServiceMethod(typeof(Bigtable), "BindService")]
    public abstract partial class BigtableBase
    {
      /// <summary>
      /// Streams back the contents of all requested rows in key order, optionally
      /// applying the same Reader filter to each. Depending on their size,
      /// rows and cells may be broken up across multiple responses, but
      /// atomicity of each row will still be preserved. See the
      /// ReadRowsResponse documentation for details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ReadRows(global::Google.Cloud.Bigtable.V2.ReadRowsRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Bigtable.V2.ReadRowsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a sample of row keys in the table. The returned row keys will
      /// delimit contiguous sections of the table of approximately equal size,
      /// which can be used to break up the data for distributed tasks like
      /// mapreduces.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task SampleRowKeys(global::Google.Cloud.Bigtable.V2.SampleRowKeysRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Bigtable.V2.SampleRowKeysResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Mutates a row atomically. Cells already present in the row are left
      /// unchanged unless explicitly changed by `mutation`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.MutateRowResponse> MutateRow(global::Google.Cloud.Bigtable.V2.MutateRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Mutates multiple rows in a batch. Each individual row is mutated
      /// atomically as in MutateRow, but the entire batch is not executed
      /// atomically.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task MutateRows(global::Google.Cloud.Bigtable.V2.MutateRowsRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Bigtable.V2.MutateRowsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse> CheckAndMutateRow(global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Warm up associated instance metadata for this connection.
      /// This call is not required but may be useful for connection keep-alive.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.PingAndWarmResponse> PingAndWarm(global::Google.Cloud.Bigtable.V2.PingAndWarmRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Modifies a row atomically on the server. The method reads the latest
      /// existing timestamp and value from the specified columns and writes a new
      /// entry based on pre-defined read/modify/write rules. The new value for the
      /// timestamp is the greater of the existing timestamp or the current server
      /// time. The method returns the new contents of all modified cells.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse> ReadModifyWriteRow(global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// NOTE: This API is intended to be used by Apache Beam BigtableIO.
      /// Returns the current list of partitions that make up the table's
      /// change stream. The union of partitions will cover the entire keyspace.
      /// Partitions can be read with `ReadChangeStream`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task GenerateInitialChangeStreamPartitions(global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// NOTE: This API is intended to be used by Apache Beam BigtableIO.
      /// Reads changes from a table's change stream. Changes will
      /// reflect both user-initiated mutations and mutations that are caused by
      /// garbage collection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ReadChangeStream(global::Google.Cloud.Bigtable.V2.ReadChangeStreamRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Bigtable.V2.ReadChangeStreamResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes a BTQL query against a particular Cloud Bigtable instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ExecuteQuery(global::Google.Cloud.Bigtable.V2.ExecuteQueryRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Bigtable.V2.ExecuteQueryResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Bigtable</summary>
    public partial class BigtableClient : grpc::ClientBase<BigtableClient>
    {
      /// <summary>Creates a new client for Bigtable</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BigtableClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Bigtable that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BigtableClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BigtableClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BigtableClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Streams back the contents of all requested rows in key order, optionally
      /// applying the same Reader filter to each. Depending on their size,
      /// rows and cells may be broken up across multiple responses, but
      /// atomicity of each row will still be preserved. See the
      /// ReadRowsResponse documentation for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.ReadRowsResponse> ReadRows(global::Google.Cloud.Bigtable.V2.ReadRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streams back the contents of all requested rows in key order, optionally
      /// applying the same Reader filter to each. Depending on their size,
      /// rows and cells may be broken up across multiple responses, but
      /// atomicity of each row will still be preserved. See the
      /// ReadRowsResponse documentation for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.ReadRowsResponse> ReadRows(global::Google.Cloud.Bigtable.V2.ReadRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReadRows, null, options, request);
      }
      /// <summary>
      /// Returns a sample of row keys in the table. The returned row keys will
      /// delimit contiguous sections of the table of approximately equal size,
      /// which can be used to break up the data for distributed tasks like
      /// mapreduces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.SampleRowKeysResponse> SampleRowKeys(global::Google.Cloud.Bigtable.V2.SampleRowKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SampleRowKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a sample of row keys in the table. The returned row keys will
      /// delimit contiguous sections of the table of approximately equal size,
      /// which can be used to break up the data for distributed tasks like
      /// mapreduces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.SampleRowKeysResponse> SampleRowKeys(global::Google.Cloud.Bigtable.V2.SampleRowKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SampleRowKeys, null, options, request);
      }
      /// <summary>
      /// Mutates a row atomically. Cells already present in the row are left
      /// unchanged unless explicitly changed by `mutation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.MutateRowResponse MutateRow(global::Google.Cloud.Bigtable.V2.MutateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mutates a row atomically. Cells already present in the row are left
      /// unchanged unless explicitly changed by `mutation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.MutateRowResponse MutateRow(global::Google.Cloud.Bigtable.V2.MutateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MutateRow, null, options, request);
      }
      /// <summary>
      /// Mutates a row atomically. Cells already present in the row are left
      /// unchanged unless explicitly changed by `mutation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.MutateRowResponse> MutateRowAsync(global::Google.Cloud.Bigtable.V2.MutateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mutates a row atomically. Cells already present in the row are left
      /// unchanged unless explicitly changed by `mutation`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.MutateRowResponse> MutateRowAsync(global::Google.Cloud.Bigtable.V2.MutateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MutateRow, null, options, request);
      }
      /// <summary>
      /// Mutates multiple rows in a batch. Each individual row is mutated
      /// atomically as in MutateRow, but the entire batch is not executed
      /// atomically.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.MutateRowsResponse> MutateRows(global::Google.Cloud.Bigtable.V2.MutateRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mutates multiple rows in a batch. Each individual row is mutated
      /// atomically as in MutateRow, but the entire batch is not executed
      /// atomically.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.MutateRowsResponse> MutateRows(global::Google.Cloud.Bigtable.V2.MutateRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_MutateRows, null, options, request);
      }
      /// <summary>
      /// Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse CheckAndMutateRow(global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckAndMutateRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse CheckAndMutateRow(global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckAndMutateRow, null, options, request);
      }
      /// <summary>
      /// Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse> CheckAndMutateRowAsync(global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckAndMutateRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mutates a row atomically based on the output of a predicate Reader filter.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse> CheckAndMutateRowAsync(global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckAndMutateRow, null, options, request);
      }
      /// <summary>
      /// Warm up associated instance metadata for this connection.
      /// This call is not required but may be useful for connection keep-alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.PingAndWarmResponse PingAndWarm(global::Google.Cloud.Bigtable.V2.PingAndWarmRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAndWarm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Warm up associated instance metadata for this connection.
      /// This call is not required but may be useful for connection keep-alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.PingAndWarmResponse PingAndWarm(global::Google.Cloud.Bigtable.V2.PingAndWarmRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PingAndWarm, null, options, request);
      }
      /// <summary>
      /// Warm up associated instance metadata for this connection.
      /// This call is not required but may be useful for connection keep-alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.PingAndWarmResponse> PingAndWarmAsync(global::Google.Cloud.Bigtable.V2.PingAndWarmRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAndWarmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Warm up associated instance metadata for this connection.
      /// This call is not required but may be useful for connection keep-alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.PingAndWarmResponse> PingAndWarmAsync(global::Google.Cloud.Bigtable.V2.PingAndWarmRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PingAndWarm, null, options, request);
      }
      /// <summary>
      /// Modifies a row atomically on the server. The method reads the latest
      /// existing timestamp and value from the specified columns and writes a new
      /// entry based on pre-defined read/modify/write rules. The new value for the
      /// timestamp is the greater of the existing timestamp or the current server
      /// time. The method returns the new contents of all modified cells.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse ReadModifyWriteRow(global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadModifyWriteRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a row atomically on the server. The method reads the latest
      /// existing timestamp and value from the specified columns and writes a new
      /// entry based on pre-defined read/modify/write rules. The new value for the
      /// timestamp is the greater of the existing timestamp or the current server
      /// time. The method returns the new contents of all modified cells.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse ReadModifyWriteRow(global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadModifyWriteRow, null, options, request);
      }
      /// <summary>
      /// Modifies a row atomically on the server. The method reads the latest
      /// existing timestamp and value from the specified columns and writes a new
      /// entry based on pre-defined read/modify/write rules. The new value for the
      /// timestamp is the greater of the existing timestamp or the current server
      /// time. The method returns the new contents of all modified cells.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse> ReadModifyWriteRowAsync(global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadModifyWriteRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Modifies a row atomically on the server. The method reads the latest
      /// existing timestamp and value from the specified columns and writes a new
      /// entry based on pre-defined read/modify/write rules. The new value for the
      /// timestamp is the greater of the existing timestamp or the current server
      /// time. The method returns the new contents of all modified cells.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse> ReadModifyWriteRowAsync(global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadModifyWriteRow, null, options, request);
      }
      /// <summary>
      /// NOTE: This API is intended to be used by Apache Beam BigtableIO.
      /// Returns the current list of partitions that make up the table's
      /// change stream. The union of partitions will cover the entire keyspace.
      /// Partitions can be read with `ReadChangeStream`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsResponse> GenerateInitialChangeStreamPartitions(global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateInitialChangeStreamPartitions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NOTE: This API is intended to be used by Apache Beam BigtableIO.
      /// Returns the current list of partitions that make up the table's
      /// change stream. The union of partitions will cover the entire keyspace.
      /// Partitions can be read with `ReadChangeStream`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsResponse> GenerateInitialChangeStreamPartitions(global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GenerateInitialChangeStreamPartitions, null, options, request);
      }
      /// <summary>
      /// NOTE: This API is intended to be used by Apache Beam BigtableIO.
      /// Reads changes from a table's change stream. Changes will
      /// reflect both user-initiated mutations and mutations that are caused by
      /// garbage collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.ReadChangeStreamResponse> ReadChangeStream(global::Google.Cloud.Bigtable.V2.ReadChangeStreamRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadChangeStream(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NOTE: This API is intended to be used by Apache Beam BigtableIO.
      /// Reads changes from a table's change stream. Changes will
      /// reflect both user-initiated mutations and mutations that are caused by
      /// garbage collection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.ReadChangeStreamResponse> ReadChangeStream(global::Google.Cloud.Bigtable.V2.ReadChangeStreamRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReadChangeStream, null, options, request);
      }
      /// <summary>
      /// Executes a BTQL query against a particular Cloud Bigtable instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.ExecuteQueryResponse> ExecuteQuery(global::Google.Cloud.Bigtable.V2.ExecuteQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes a BTQL query against a particular Cloud Bigtable instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Bigtable.V2.ExecuteQueryResponse> ExecuteQuery(global::Google.Cloud.Bigtable.V2.ExecuteQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ExecuteQuery, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override BigtableClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BigtableClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(BigtableBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReadRows, serviceImpl.ReadRows)
          .AddMethod(__Method_SampleRowKeys, serviceImpl.SampleRowKeys)
          .AddMethod(__Method_MutateRow, serviceImpl.MutateRow)
          .AddMethod(__Method_MutateRows, serviceImpl.MutateRows)
          .AddMethod(__Method_CheckAndMutateRow, serviceImpl.CheckAndMutateRow)
          .AddMethod(__Method_PingAndWarm, serviceImpl.PingAndWarm)
          .AddMethod(__Method_ReadModifyWriteRow, serviceImpl.ReadModifyWriteRow)
          .AddMethod(__Method_GenerateInitialChangeStreamPartitions, serviceImpl.GenerateInitialChangeStreamPartitions)
          .AddMethod(__Method_ReadChangeStream, serviceImpl.ReadChangeStream)
          .AddMethod(__Method_ExecuteQuery, serviceImpl.ExecuteQuery).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BigtableBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ReadRows, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Bigtable.V2.ReadRowsRequest, global::Google.Cloud.Bigtable.V2.ReadRowsResponse>(serviceImpl.ReadRows));
      serviceBinder.AddMethod(__Method_SampleRowKeys, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Bigtable.V2.SampleRowKeysRequest, global::Google.Cloud.Bigtable.V2.SampleRowKeysResponse>(serviceImpl.SampleRowKeys));
      serviceBinder.AddMethod(__Method_MutateRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.MutateRowRequest, global::Google.Cloud.Bigtable.V2.MutateRowResponse>(serviceImpl.MutateRow));
      serviceBinder.AddMethod(__Method_MutateRows, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Bigtable.V2.MutateRowsRequest, global::Google.Cloud.Bigtable.V2.MutateRowsResponse>(serviceImpl.MutateRows));
      serviceBinder.AddMethod(__Method_CheckAndMutateRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.CheckAndMutateRowRequest, global::Google.Cloud.Bigtable.V2.CheckAndMutateRowResponse>(serviceImpl.CheckAndMutateRow));
      serviceBinder.AddMethod(__Method_PingAndWarm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.PingAndWarmRequest, global::Google.Cloud.Bigtable.V2.PingAndWarmResponse>(serviceImpl.PingAndWarm));
      serviceBinder.AddMethod(__Method_ReadModifyWriteRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowRequest, global::Google.Cloud.Bigtable.V2.ReadModifyWriteRowResponse>(serviceImpl.ReadModifyWriteRow));
      serviceBinder.AddMethod(__Method_GenerateInitialChangeStreamPartitions, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsRequest, global::Google.Cloud.Bigtable.V2.GenerateInitialChangeStreamPartitionsResponse>(serviceImpl.GenerateInitialChangeStreamPartitions));
      serviceBinder.AddMethod(__Method_ReadChangeStream, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Bigtable.V2.ReadChangeStreamRequest, global::Google.Cloud.Bigtable.V2.ReadChangeStreamResponse>(serviceImpl.ReadChangeStream));
      serviceBinder.AddMethod(__Method_ExecuteQuery, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Bigtable.V2.ExecuteQueryRequest, global::Google.Cloud.Bigtable.V2.ExecuteQueryResponse>(serviceImpl.ExecuteQuery));
    }

  }
}
#endregion
