// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/recommender/v1/recommender_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Recommender.V1 {
  /// <summary>
  /// Provides insights and recommendations for cloud customers for various
  /// categories like performance optimization, cost savings, reliability, feature
  /// discovery, etc. Insights and recommendations are generated automatically
  /// based on analysis of user resources, configuration and monitoring metrics.
  /// </summary>
  public static partial class Recommender
  {
    static readonly string __ServiceName = "google.cloud.recommender.v1.Recommender";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.ListInsightsRequest> __Marshaller_google_cloud_recommender_v1_ListInsightsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.ListInsightsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.ListInsightsResponse> __Marshaller_google_cloud_recommender_v1_ListInsightsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.ListInsightsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.GetInsightRequest> __Marshaller_google_cloud_recommender_v1_GetInsightRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.GetInsightRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.Insight> __Marshaller_google_cloud_recommender_v1_Insight = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.Insight.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest> __Marshaller_google_cloud_recommender_v1_MarkInsightAcceptedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.ListRecommendationsRequest> __Marshaller_google_cloud_recommender_v1_ListRecommendationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.ListRecommendationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.ListRecommendationsResponse> __Marshaller_google_cloud_recommender_v1_ListRecommendationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.ListRecommendationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.GetRecommendationRequest> __Marshaller_google_cloud_recommender_v1_GetRecommendationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.GetRecommendationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.Recommendation> __Marshaller_google_cloud_recommender_v1_Recommendation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.Recommendation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest> __Marshaller_google_cloud_recommender_v1_MarkRecommendationDismissedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest> __Marshaller_google_cloud_recommender_v1_MarkRecommendationClaimedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest> __Marshaller_google_cloud_recommender_v1_MarkRecommendationSucceededRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest> __Marshaller_google_cloud_recommender_v1_MarkRecommendationFailedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest> __Marshaller_google_cloud_recommender_v1_GetRecommenderConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.RecommenderConfig> __Marshaller_google_cloud_recommender_v1_RecommenderConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.RecommenderConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest> __Marshaller_google_cloud_recommender_v1_UpdateRecommenderConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest> __Marshaller_google_cloud_recommender_v1_GetInsightTypeConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.InsightTypeConfig> __Marshaller_google_cloud_recommender_v1_InsightTypeConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.InsightTypeConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest> __Marshaller_google_cloud_recommender_v1_UpdateInsightTypeConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.ListInsightsRequest, global::Google.Cloud.Recommender.V1.ListInsightsResponse> __Method_ListInsights = new grpc::Method<global::Google.Cloud.Recommender.V1.ListInsightsRequest, global::Google.Cloud.Recommender.V1.ListInsightsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInsights",
        __Marshaller_google_cloud_recommender_v1_ListInsightsRequest,
        __Marshaller_google_cloud_recommender_v1_ListInsightsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.GetInsightRequest, global::Google.Cloud.Recommender.V1.Insight> __Method_GetInsight = new grpc::Method<global::Google.Cloud.Recommender.V1.GetInsightRequest, global::Google.Cloud.Recommender.V1.Insight>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInsight",
        __Marshaller_google_cloud_recommender_v1_GetInsightRequest,
        __Marshaller_google_cloud_recommender_v1_Insight);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest, global::Google.Cloud.Recommender.V1.Insight> __Method_MarkInsightAccepted = new grpc::Method<global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest, global::Google.Cloud.Recommender.V1.Insight>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarkInsightAccepted",
        __Marshaller_google_cloud_recommender_v1_MarkInsightAcceptedRequest,
        __Marshaller_google_cloud_recommender_v1_Insight);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.ListRecommendationsRequest, global::Google.Cloud.Recommender.V1.ListRecommendationsResponse> __Method_ListRecommendations = new grpc::Method<global::Google.Cloud.Recommender.V1.ListRecommendationsRequest, global::Google.Cloud.Recommender.V1.ListRecommendationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRecommendations",
        __Marshaller_google_cloud_recommender_v1_ListRecommendationsRequest,
        __Marshaller_google_cloud_recommender_v1_ListRecommendationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.GetRecommendationRequest, global::Google.Cloud.Recommender.V1.Recommendation> __Method_GetRecommendation = new grpc::Method<global::Google.Cloud.Recommender.V1.GetRecommendationRequest, global::Google.Cloud.Recommender.V1.Recommendation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRecommendation",
        __Marshaller_google_cloud_recommender_v1_GetRecommendationRequest,
        __Marshaller_google_cloud_recommender_v1_Recommendation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest, global::Google.Cloud.Recommender.V1.Recommendation> __Method_MarkRecommendationDismissed = new grpc::Method<global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest, global::Google.Cloud.Recommender.V1.Recommendation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarkRecommendationDismissed",
        __Marshaller_google_cloud_recommender_v1_MarkRecommendationDismissedRequest,
        __Marshaller_google_cloud_recommender_v1_Recommendation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest, global::Google.Cloud.Recommender.V1.Recommendation> __Method_MarkRecommendationClaimed = new grpc::Method<global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest, global::Google.Cloud.Recommender.V1.Recommendation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarkRecommendationClaimed",
        __Marshaller_google_cloud_recommender_v1_MarkRecommendationClaimedRequest,
        __Marshaller_google_cloud_recommender_v1_Recommendation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest, global::Google.Cloud.Recommender.V1.Recommendation> __Method_MarkRecommendationSucceeded = new grpc::Method<global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest, global::Google.Cloud.Recommender.V1.Recommendation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarkRecommendationSucceeded",
        __Marshaller_google_cloud_recommender_v1_MarkRecommendationSucceededRequest,
        __Marshaller_google_cloud_recommender_v1_Recommendation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest, global::Google.Cloud.Recommender.V1.Recommendation> __Method_MarkRecommendationFailed = new grpc::Method<global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest, global::Google.Cloud.Recommender.V1.Recommendation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarkRecommendationFailed",
        __Marshaller_google_cloud_recommender_v1_MarkRecommendationFailedRequest,
        __Marshaller_google_cloud_recommender_v1_Recommendation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest, global::Google.Cloud.Recommender.V1.RecommenderConfig> __Method_GetRecommenderConfig = new grpc::Method<global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest, global::Google.Cloud.Recommender.V1.RecommenderConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRecommenderConfig",
        __Marshaller_google_cloud_recommender_v1_GetRecommenderConfigRequest,
        __Marshaller_google_cloud_recommender_v1_RecommenderConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest, global::Google.Cloud.Recommender.V1.RecommenderConfig> __Method_UpdateRecommenderConfig = new grpc::Method<global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest, global::Google.Cloud.Recommender.V1.RecommenderConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRecommenderConfig",
        __Marshaller_google_cloud_recommender_v1_UpdateRecommenderConfigRequest,
        __Marshaller_google_cloud_recommender_v1_RecommenderConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest, global::Google.Cloud.Recommender.V1.InsightTypeConfig> __Method_GetInsightTypeConfig = new grpc::Method<global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest, global::Google.Cloud.Recommender.V1.InsightTypeConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInsightTypeConfig",
        __Marshaller_google_cloud_recommender_v1_GetInsightTypeConfigRequest,
        __Marshaller_google_cloud_recommender_v1_InsightTypeConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest, global::Google.Cloud.Recommender.V1.InsightTypeConfig> __Method_UpdateInsightTypeConfig = new grpc::Method<global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest, global::Google.Cloud.Recommender.V1.InsightTypeConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateInsightTypeConfig",
        __Marshaller_google_cloud_recommender_v1_UpdateInsightTypeConfigRequest,
        __Marshaller_google_cloud_recommender_v1_InsightTypeConfig);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Recommender.V1.RecommenderServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Recommender</summary>
    [grpc::BindServiceMethod(typeof(Recommender), "BindService")]
    public abstract partial class RecommenderBase
    {
      /// <summary>
      /// Lists insights for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified insight type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.ListInsightsResponse> ListInsights(global::Google.Cloud.Recommender.V1.ListInsightsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the requested insight. Requires the recommender.*.get IAM permission
      /// for the specified insight type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.Insight> GetInsight(global::Google.Cloud.Recommender.V1.GetInsightRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Marks the Insight State as Accepted. Users can use this method to
      /// indicate to the Recommender API that they have applied some action based
      /// on the insight. This stops the insight content from being updated.
      ///
      /// MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
      /// the recommender.*.update IAM permission for the specified insight.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.Insight> MarkInsightAccepted(global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists recommendations for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.ListRecommendationsResponse> ListRecommendations(global::Google.Cloud.Recommender.V1.ListRecommendationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the requested recommendation. Requires the recommender.*.get
      /// IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.Recommendation> GetRecommendation(global::Google.Cloud.Recommender.V1.GetRecommendationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Mark the Recommendation State as Dismissed. Users can use this method to
      /// indicate to the Recommender API that an ACTIVE recommendation has to
      /// be marked back as DISMISSED.
      ///
      /// MarkRecommendationDismissed can be applied to recommendations in ACTIVE
      /// state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationDismissed(global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Marks the Recommendation State as Claimed. Users can use this method to
      /// indicate to the Recommender API that they are starting to apply the
      /// recommendation themselves. This stops the recommendation content from being
      /// updated. Associated insights are frozen and placed in the ACCEPTED state.
      ///
      /// MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
      /// SUCCEEDED, FAILED, or ACTIVE state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationClaimed(global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Marks the Recommendation State as Succeeded. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation was successful. This stops the recommendation
      /// content from being updated. Associated insights are frozen and placed in
      /// the ACCEPTED state.
      ///
      /// MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationSucceeded(global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Marks the Recommendation State as Failed. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation failed. This stops the recommendation content
      /// from being updated. Associated insights are frozen and placed in the
      /// ACCEPTED state.
      ///
      /// MarkRecommendationFailed can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationFailed(global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the requested Recommender Config. There is only one instance of the
      /// config for each Recommender.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.RecommenderConfig> GetRecommenderConfig(global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a Recommender Config. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.RecommenderConfig> UpdateRecommenderConfig(global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the requested InsightTypeConfig. There is only one instance of the
      /// config for each InsightType.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.InsightTypeConfig> GetInsightTypeConfig(global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an InsightTypeConfig change. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Recommender.V1.InsightTypeConfig> UpdateInsightTypeConfig(global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Recommender</summary>
    public partial class RecommenderClient : grpc::ClientBase<RecommenderClient>
    {
      /// <summary>Creates a new client for Recommender</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RecommenderClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Recommender that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RecommenderClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RecommenderClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RecommenderClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists insights for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified insight type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.ListInsightsResponse ListInsights(global::Google.Cloud.Recommender.V1.ListInsightsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInsights(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists insights for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified insight type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.ListInsightsResponse ListInsights(global::Google.Cloud.Recommender.V1.ListInsightsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInsights, null, options, request);
      }
      /// <summary>
      /// Lists insights for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified insight type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.ListInsightsResponse> ListInsightsAsync(global::Google.Cloud.Recommender.V1.ListInsightsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInsightsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists insights for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified insight type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.ListInsightsResponse> ListInsightsAsync(global::Google.Cloud.Recommender.V1.ListInsightsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInsights, null, options, request);
      }
      /// <summary>
      /// Gets the requested insight. Requires the recommender.*.get IAM permission
      /// for the specified insight type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Insight GetInsight(global::Google.Cloud.Recommender.V1.GetInsightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInsight(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the requested insight. Requires the recommender.*.get IAM permission
      /// for the specified insight type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Insight GetInsight(global::Google.Cloud.Recommender.V1.GetInsightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInsight, null, options, request);
      }
      /// <summary>
      /// Gets the requested insight. Requires the recommender.*.get IAM permission
      /// for the specified insight type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Insight> GetInsightAsync(global::Google.Cloud.Recommender.V1.GetInsightRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInsightAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the requested insight. Requires the recommender.*.get IAM permission
      /// for the specified insight type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Insight> GetInsightAsync(global::Google.Cloud.Recommender.V1.GetInsightRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInsight, null, options, request);
      }
      /// <summary>
      /// Marks the Insight State as Accepted. Users can use this method to
      /// indicate to the Recommender API that they have applied some action based
      /// on the insight. This stops the insight content from being updated.
      ///
      /// MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
      /// the recommender.*.update IAM permission for the specified insight.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Insight MarkInsightAccepted(global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkInsightAccepted(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the Insight State as Accepted. Users can use this method to
      /// indicate to the Recommender API that they have applied some action based
      /// on the insight. This stops the insight content from being updated.
      ///
      /// MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
      /// the recommender.*.update IAM permission for the specified insight.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Insight MarkInsightAccepted(global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarkInsightAccepted, null, options, request);
      }
      /// <summary>
      /// Marks the Insight State as Accepted. Users can use this method to
      /// indicate to the Recommender API that they have applied some action based
      /// on the insight. This stops the insight content from being updated.
      ///
      /// MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
      /// the recommender.*.update IAM permission for the specified insight.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Insight> MarkInsightAcceptedAsync(global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkInsightAcceptedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the Insight State as Accepted. Users can use this method to
      /// indicate to the Recommender API that they have applied some action based
      /// on the insight. This stops the insight content from being updated.
      ///
      /// MarkInsightAccepted can be applied to insights in ACTIVE state. Requires
      /// the recommender.*.update IAM permission for the specified insight.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Insight> MarkInsightAcceptedAsync(global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarkInsightAccepted, null, options, request);
      }
      /// <summary>
      /// Lists recommendations for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.ListRecommendationsResponse ListRecommendations(global::Google.Cloud.Recommender.V1.ListRecommendationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRecommendations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists recommendations for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.ListRecommendationsResponse ListRecommendations(global::Google.Cloud.Recommender.V1.ListRecommendationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRecommendations, null, options, request);
      }
      /// <summary>
      /// Lists recommendations for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.ListRecommendationsResponse> ListRecommendationsAsync(global::Google.Cloud.Recommender.V1.ListRecommendationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRecommendationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists recommendations for the specified Cloud Resource. Requires the
      /// recommender.*.list IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.ListRecommendationsResponse> ListRecommendationsAsync(global::Google.Cloud.Recommender.V1.ListRecommendationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRecommendations, null, options, request);
      }
      /// <summary>
      /// Gets the requested recommendation. Requires the recommender.*.get
      /// IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation GetRecommendation(global::Google.Cloud.Recommender.V1.GetRecommendationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecommendation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the requested recommendation. Requires the recommender.*.get
      /// IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation GetRecommendation(global::Google.Cloud.Recommender.V1.GetRecommendationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRecommendation, null, options, request);
      }
      /// <summary>
      /// Gets the requested recommendation. Requires the recommender.*.get
      /// IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> GetRecommendationAsync(global::Google.Cloud.Recommender.V1.GetRecommendationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecommendationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the requested recommendation. Requires the recommender.*.get
      /// IAM permission for the specified recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> GetRecommendationAsync(global::Google.Cloud.Recommender.V1.GetRecommendationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRecommendation, null, options, request);
      }
      /// <summary>
      /// Mark the Recommendation State as Dismissed. Users can use this method to
      /// indicate to the Recommender API that an ACTIVE recommendation has to
      /// be marked back as DISMISSED.
      ///
      /// MarkRecommendationDismissed can be applied to recommendations in ACTIVE
      /// state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation MarkRecommendationDismissed(global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkRecommendationDismissed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mark the Recommendation State as Dismissed. Users can use this method to
      /// indicate to the Recommender API that an ACTIVE recommendation has to
      /// be marked back as DISMISSED.
      ///
      /// MarkRecommendationDismissed can be applied to recommendations in ACTIVE
      /// state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation MarkRecommendationDismissed(global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarkRecommendationDismissed, null, options, request);
      }
      /// <summary>
      /// Mark the Recommendation State as Dismissed. Users can use this method to
      /// indicate to the Recommender API that an ACTIVE recommendation has to
      /// be marked back as DISMISSED.
      ///
      /// MarkRecommendationDismissed can be applied to recommendations in ACTIVE
      /// state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationDismissedAsync(global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkRecommendationDismissedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Mark the Recommendation State as Dismissed. Users can use this method to
      /// indicate to the Recommender API that an ACTIVE recommendation has to
      /// be marked back as DISMISSED.
      ///
      /// MarkRecommendationDismissed can be applied to recommendations in ACTIVE
      /// state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationDismissedAsync(global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarkRecommendationDismissed, null, options, request);
      }
      /// <summary>
      /// Marks the Recommendation State as Claimed. Users can use this method to
      /// indicate to the Recommender API that they are starting to apply the
      /// recommendation themselves. This stops the recommendation content from being
      /// updated. Associated insights are frozen and placed in the ACCEPTED state.
      ///
      /// MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
      /// SUCCEEDED, FAILED, or ACTIVE state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation MarkRecommendationClaimed(global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkRecommendationClaimed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the Recommendation State as Claimed. Users can use this method to
      /// indicate to the Recommender API that they are starting to apply the
      /// recommendation themselves. This stops the recommendation content from being
      /// updated. Associated insights are frozen and placed in the ACCEPTED state.
      ///
      /// MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
      /// SUCCEEDED, FAILED, or ACTIVE state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation MarkRecommendationClaimed(global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarkRecommendationClaimed, null, options, request);
      }
      /// <summary>
      /// Marks the Recommendation State as Claimed. Users can use this method to
      /// indicate to the Recommender API that they are starting to apply the
      /// recommendation themselves. This stops the recommendation content from being
      /// updated. Associated insights are frozen and placed in the ACCEPTED state.
      ///
      /// MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
      /// SUCCEEDED, FAILED, or ACTIVE state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationClaimedAsync(global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkRecommendationClaimedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the Recommendation State as Claimed. Users can use this method to
      /// indicate to the Recommender API that they are starting to apply the
      /// recommendation themselves. This stops the recommendation content from being
      /// updated. Associated insights are frozen and placed in the ACCEPTED state.
      ///
      /// MarkRecommendationClaimed can be applied to recommendations in CLAIMED,
      /// SUCCEEDED, FAILED, or ACTIVE state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationClaimedAsync(global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarkRecommendationClaimed, null, options, request);
      }
      /// <summary>
      /// Marks the Recommendation State as Succeeded. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation was successful. This stops the recommendation
      /// content from being updated. Associated insights are frozen and placed in
      /// the ACCEPTED state.
      ///
      /// MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation MarkRecommendationSucceeded(global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkRecommendationSucceeded(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the Recommendation State as Succeeded. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation was successful. This stops the recommendation
      /// content from being updated. Associated insights are frozen and placed in
      /// the ACCEPTED state.
      ///
      /// MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation MarkRecommendationSucceeded(global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarkRecommendationSucceeded, null, options, request);
      }
      /// <summary>
      /// Marks the Recommendation State as Succeeded. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation was successful. This stops the recommendation
      /// content from being updated. Associated insights are frozen and placed in
      /// the ACCEPTED state.
      ///
      /// MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationSucceededAsync(global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkRecommendationSucceededAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the Recommendation State as Succeeded. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation was successful. This stops the recommendation
      /// content from being updated. Associated insights are frozen and placed in
      /// the ACCEPTED state.
      ///
      /// MarkRecommendationSucceeded can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationSucceededAsync(global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarkRecommendationSucceeded, null, options, request);
      }
      /// <summary>
      /// Marks the Recommendation State as Failed. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation failed. This stops the recommendation content
      /// from being updated. Associated insights are frozen and placed in the
      /// ACCEPTED state.
      ///
      /// MarkRecommendationFailed can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation MarkRecommendationFailed(global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkRecommendationFailed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the Recommendation State as Failed. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation failed. This stops the recommendation content
      /// from being updated. Associated insights are frozen and placed in the
      /// ACCEPTED state.
      ///
      /// MarkRecommendationFailed can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.Recommendation MarkRecommendationFailed(global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarkRecommendationFailed, null, options, request);
      }
      /// <summary>
      /// Marks the Recommendation State as Failed. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation failed. This stops the recommendation content
      /// from being updated. Associated insights are frozen and placed in the
      /// ACCEPTED state.
      ///
      /// MarkRecommendationFailed can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationFailedAsync(global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarkRecommendationFailedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks the Recommendation State as Failed. Users can use this method to
      /// indicate to the Recommender API that they have applied the recommendation
      /// themselves, and the operation failed. This stops the recommendation content
      /// from being updated. Associated insights are frozen and placed in the
      /// ACCEPTED state.
      ///
      /// MarkRecommendationFailed can be applied to recommendations in ACTIVE,
      /// CLAIMED, SUCCEEDED, or FAILED state.
      ///
      /// Requires the recommender.*.update IAM permission for the specified
      /// recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.Recommendation> MarkRecommendationFailedAsync(global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarkRecommendationFailed, null, options, request);
      }
      /// <summary>
      /// Gets the requested Recommender Config. There is only one instance of the
      /// config for each Recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.RecommenderConfig GetRecommenderConfig(global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecommenderConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the requested Recommender Config. There is only one instance of the
      /// config for each Recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.RecommenderConfig GetRecommenderConfig(global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRecommenderConfig, null, options, request);
      }
      /// <summary>
      /// Gets the requested Recommender Config. There is only one instance of the
      /// config for each Recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.RecommenderConfig> GetRecommenderConfigAsync(global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRecommenderConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the requested Recommender Config. There is only one instance of the
      /// config for each Recommender.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.RecommenderConfig> GetRecommenderConfigAsync(global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRecommenderConfig, null, options, request);
      }
      /// <summary>
      /// Updates a Recommender Config. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.RecommenderConfig UpdateRecommenderConfig(global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRecommenderConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Recommender Config. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.RecommenderConfig UpdateRecommenderConfig(global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRecommenderConfig, null, options, request);
      }
      /// <summary>
      /// Updates a Recommender Config. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.RecommenderConfig> UpdateRecommenderConfigAsync(global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRecommenderConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Recommender Config. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.RecommenderConfig> UpdateRecommenderConfigAsync(global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRecommenderConfig, null, options, request);
      }
      /// <summary>
      /// Gets the requested InsightTypeConfig. There is only one instance of the
      /// config for each InsightType.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.InsightTypeConfig GetInsightTypeConfig(global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInsightTypeConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the requested InsightTypeConfig. There is only one instance of the
      /// config for each InsightType.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.InsightTypeConfig GetInsightTypeConfig(global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInsightTypeConfig, null, options, request);
      }
      /// <summary>
      /// Gets the requested InsightTypeConfig. There is only one instance of the
      /// config for each InsightType.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.InsightTypeConfig> GetInsightTypeConfigAsync(global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInsightTypeConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the requested InsightTypeConfig. There is only one instance of the
      /// config for each InsightType.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.InsightTypeConfig> GetInsightTypeConfigAsync(global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInsightTypeConfig, null, options, request);
      }
      /// <summary>
      /// Updates an InsightTypeConfig change. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.InsightTypeConfig UpdateInsightTypeConfig(global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInsightTypeConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an InsightTypeConfig change. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Recommender.V1.InsightTypeConfig UpdateInsightTypeConfig(global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateInsightTypeConfig, null, options, request);
      }
      /// <summary>
      /// Updates an InsightTypeConfig change. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.InsightTypeConfig> UpdateInsightTypeConfigAsync(global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInsightTypeConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an InsightTypeConfig change. This will create a new revision of the
      /// config.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Recommender.V1.InsightTypeConfig> UpdateInsightTypeConfigAsync(global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateInsightTypeConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override RecommenderClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RecommenderClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(RecommenderBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListInsights, serviceImpl.ListInsights)
          .AddMethod(__Method_GetInsight, serviceImpl.GetInsight)
          .AddMethod(__Method_MarkInsightAccepted, serviceImpl.MarkInsightAccepted)
          .AddMethod(__Method_ListRecommendations, serviceImpl.ListRecommendations)
          .AddMethod(__Method_GetRecommendation, serviceImpl.GetRecommendation)
          .AddMethod(__Method_MarkRecommendationDismissed, serviceImpl.MarkRecommendationDismissed)
          .AddMethod(__Method_MarkRecommendationClaimed, serviceImpl.MarkRecommendationClaimed)
          .AddMethod(__Method_MarkRecommendationSucceeded, serviceImpl.MarkRecommendationSucceeded)
          .AddMethod(__Method_MarkRecommendationFailed, serviceImpl.MarkRecommendationFailed)
          .AddMethod(__Method_GetRecommenderConfig, serviceImpl.GetRecommenderConfig)
          .AddMethod(__Method_UpdateRecommenderConfig, serviceImpl.UpdateRecommenderConfig)
          .AddMethod(__Method_GetInsightTypeConfig, serviceImpl.GetInsightTypeConfig)
          .AddMethod(__Method_UpdateInsightTypeConfig, serviceImpl.UpdateInsightTypeConfig).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RecommenderBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListInsights, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.ListInsightsRequest, global::Google.Cloud.Recommender.V1.ListInsightsResponse>(serviceImpl.ListInsights));
      serviceBinder.AddMethod(__Method_GetInsight, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.GetInsightRequest, global::Google.Cloud.Recommender.V1.Insight>(serviceImpl.GetInsight));
      serviceBinder.AddMethod(__Method_MarkInsightAccepted, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.MarkInsightAcceptedRequest, global::Google.Cloud.Recommender.V1.Insight>(serviceImpl.MarkInsightAccepted));
      serviceBinder.AddMethod(__Method_ListRecommendations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.ListRecommendationsRequest, global::Google.Cloud.Recommender.V1.ListRecommendationsResponse>(serviceImpl.ListRecommendations));
      serviceBinder.AddMethod(__Method_GetRecommendation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.GetRecommendationRequest, global::Google.Cloud.Recommender.V1.Recommendation>(serviceImpl.GetRecommendation));
      serviceBinder.AddMethod(__Method_MarkRecommendationDismissed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.MarkRecommendationDismissedRequest, global::Google.Cloud.Recommender.V1.Recommendation>(serviceImpl.MarkRecommendationDismissed));
      serviceBinder.AddMethod(__Method_MarkRecommendationClaimed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.MarkRecommendationClaimedRequest, global::Google.Cloud.Recommender.V1.Recommendation>(serviceImpl.MarkRecommendationClaimed));
      serviceBinder.AddMethod(__Method_MarkRecommendationSucceeded, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.MarkRecommendationSucceededRequest, global::Google.Cloud.Recommender.V1.Recommendation>(serviceImpl.MarkRecommendationSucceeded));
      serviceBinder.AddMethod(__Method_MarkRecommendationFailed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.MarkRecommendationFailedRequest, global::Google.Cloud.Recommender.V1.Recommendation>(serviceImpl.MarkRecommendationFailed));
      serviceBinder.AddMethod(__Method_GetRecommenderConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.GetRecommenderConfigRequest, global::Google.Cloud.Recommender.V1.RecommenderConfig>(serviceImpl.GetRecommenderConfig));
      serviceBinder.AddMethod(__Method_UpdateRecommenderConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.UpdateRecommenderConfigRequest, global::Google.Cloud.Recommender.V1.RecommenderConfig>(serviceImpl.UpdateRecommenderConfig));
      serviceBinder.AddMethod(__Method_GetInsightTypeConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.GetInsightTypeConfigRequest, global::Google.Cloud.Recommender.V1.InsightTypeConfig>(serviceImpl.GetInsightTypeConfig));
      serviceBinder.AddMethod(__Method_UpdateInsightTypeConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Recommender.V1.UpdateInsightTypeConfigRequest, global::Google.Cloud.Recommender.V1.InsightTypeConfig>(serviceImpl.UpdateInsightTypeConfig));
    }

  }
}
#endregion
