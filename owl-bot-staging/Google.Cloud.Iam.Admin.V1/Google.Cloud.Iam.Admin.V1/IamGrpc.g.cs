// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/iam/admin/v1/iam.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Iam.Admin.V1 {
  /// <summary>
  /// Creates and manages Identity and Access Management (IAM) resources.
  ///
  /// You can use this service to work with all of the following resources:
  ///
  /// * **Service accounts**, which identify an application or a virtual machine
  ///   (VM) instance rather than a person
  /// * **Service account keys**, which service accounts use to authenticate with
  ///   Google APIs
  /// * **IAM policies for service accounts**, which specify the roles that a
  ///   principal has for the service account
  /// * **IAM custom roles**, which help you limit the number of permissions that
  ///   you grant to principals
  ///
  /// In addition, you can use this service to complete the following tasks, among
  /// others:
  ///
  /// * Test whether a service account can use specific permissions
  /// * Check which roles you can grant for a specific resource
  /// * Lint, or validate, condition expressions in an IAM policy
  ///
  /// When you read data from the IAM API, each read is eventually consistent. In
  /// other words, if you write data with the IAM API, then immediately read that
  /// data, the read operation might return an older version of the data. To deal
  /// with this behavior, your application can retry the request with truncated
  /// exponential backoff.
  ///
  /// In contrast, writing data to the IAM API is sequentially consistent. In other
  /// words, write operations are always processed in the order in which they were
  /// received.
  /// </summary>
  public static partial class IAM
  {
    static readonly string __ServiceName = "google.iam.admin.v1.IAM";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest> __Marshaller_google_iam_admin_v1_ListServiceAccountsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse> __Marshaller_google_iam_admin_v1_ListServiceAccountsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest> __Marshaller_google_iam_admin_v1_GetServiceAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> __Marshaller_google_iam_admin_v1_ServiceAccount = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.ServiceAccount.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest> __Marshaller_google_iam_admin_v1_CreateServiceAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest> __Marshaller_google_iam_admin_v1_PatchServiceAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest> __Marshaller_google_iam_admin_v1_DeleteServiceAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest> __Marshaller_google_iam_admin_v1_UndeleteServiceAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse> __Marshaller_google_iam_admin_v1_UndeleteServiceAccountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest> __Marshaller_google_iam_admin_v1_EnableServiceAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest> __Marshaller_google_iam_admin_v1_DisableServiceAccountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest> __Marshaller_google_iam_admin_v1_ListServiceAccountKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse> __Marshaller_google_iam_admin_v1_ListServiceAccountKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest> __Marshaller_google_iam_admin_v1_GetServiceAccountKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> __Marshaller_google_iam_admin_v1_ServiceAccountKey = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest> __Marshaller_google_iam_admin_v1_CreateServiceAccountKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest> __Marshaller_google_iam_admin_v1_UploadServiceAccountKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest> __Marshaller_google_iam_admin_v1_DeleteServiceAccountKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest> __Marshaller_google_iam_admin_v1_DisableServiceAccountKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest> __Marshaller_google_iam_admin_v1_EnableServiceAccountKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.SignBlobRequest> __Marshaller_google_iam_admin_v1_SignBlobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.SignBlobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.SignBlobResponse> __Marshaller_google_iam_admin_v1_SignBlobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.SignBlobResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.SignJwtRequest> __Marshaller_google_iam_admin_v1_SignJwtRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.SignJwtRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.SignJwtResponse> __Marshaller_google_iam_admin_v1_SignJwtResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.SignJwtResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest> __Marshaller_google_iam_admin_v1_QueryGrantableRolesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse> __Marshaller_google_iam_admin_v1_QueryGrantableRolesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.ListRolesRequest> __Marshaller_google_iam_admin_v1_ListRolesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.ListRolesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.ListRolesResponse> __Marshaller_google_iam_admin_v1_ListRolesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.ListRolesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.GetRoleRequest> __Marshaller_google_iam_admin_v1_GetRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.GetRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.Role> __Marshaller_google_iam_admin_v1_Role = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.Role.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest> __Marshaller_google_iam_admin_v1_CreateRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest> __Marshaller_google_iam_admin_v1_UpdateRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest> __Marshaller_google_iam_admin_v1_DeleteRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest> __Marshaller_google_iam_admin_v1_UndeleteRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest> __Marshaller_google_iam_admin_v1_QueryTestablePermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse> __Marshaller_google_iam_admin_v1_QueryTestablePermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest> __Marshaller_google_iam_admin_v1_QueryAuditableServicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse> __Marshaller_google_iam_admin_v1_QueryAuditableServicesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest> __Marshaller_google_iam_admin_v1_LintPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse> __Marshaller_google_iam_admin_v1_LintPolicyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse> __Method_ListServiceAccounts = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListServiceAccounts",
        __Marshaller_google_iam_admin_v1_ListServiceAccountsRequest,
        __Marshaller_google_iam_admin_v1_ListServiceAccountsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount> __Method_GetServiceAccount = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceAccount",
        __Marshaller_google_iam_admin_v1_GetServiceAccountRequest,
        __Marshaller_google_iam_admin_v1_ServiceAccount);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount> __Method_CreateServiceAccount = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServiceAccount",
        __Marshaller_google_iam_admin_v1_CreateServiceAccountRequest,
        __Marshaller_google_iam_admin_v1_ServiceAccount);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.ServiceAccount, global::Google.Cloud.Iam.Admin.V1.ServiceAccount> __Method_UpdateServiceAccount = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.ServiceAccount, global::Google.Cloud.Iam.Admin.V1.ServiceAccount>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateServiceAccount",
        __Marshaller_google_iam_admin_v1_ServiceAccount,
        __Marshaller_google_iam_admin_v1_ServiceAccount);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount> __Method_PatchServiceAccount = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchServiceAccount",
        __Marshaller_google_iam_admin_v1_PatchServiceAccountRequest,
        __Marshaller_google_iam_admin_v1_ServiceAccount);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteServiceAccount = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServiceAccount",
        __Marshaller_google_iam_admin_v1_DeleteServiceAccountRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse> __Method_UndeleteServiceAccount = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteServiceAccount",
        __Marshaller_google_iam_admin_v1_UndeleteServiceAccountRequest,
        __Marshaller_google_iam_admin_v1_UndeleteServiceAccountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_EnableServiceAccount = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableServiceAccount",
        __Marshaller_google_iam_admin_v1_EnableServiceAccountRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DisableServiceAccount = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisableServiceAccount",
        __Marshaller_google_iam_admin_v1_DisableServiceAccountRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse> __Method_ListServiceAccountKeys = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListServiceAccountKeys",
        __Marshaller_google_iam_admin_v1_ListServiceAccountKeysRequest,
        __Marshaller_google_iam_admin_v1_ListServiceAccountKeysResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> __Method_GetServiceAccountKey = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceAccountKey",
        __Marshaller_google_iam_admin_v1_GetServiceAccountKeyRequest,
        __Marshaller_google_iam_admin_v1_ServiceAccountKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> __Method_CreateServiceAccountKey = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServiceAccountKey",
        __Marshaller_google_iam_admin_v1_CreateServiceAccountKeyRequest,
        __Marshaller_google_iam_admin_v1_ServiceAccountKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> __Method_UploadServiceAccountKey = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UploadServiceAccountKey",
        __Marshaller_google_iam_admin_v1_UploadServiceAccountKeyRequest,
        __Marshaller_google_iam_admin_v1_ServiceAccountKey);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteServiceAccountKey = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServiceAccountKey",
        __Marshaller_google_iam_admin_v1_DeleteServiceAccountKeyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DisableServiceAccountKey = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisableServiceAccountKey",
        __Marshaller_google_iam_admin_v1_DisableServiceAccountKeyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_EnableServiceAccountKey = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableServiceAccountKey",
        __Marshaller_google_iam_admin_v1_EnableServiceAccountKeyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.SignBlobRequest, global::Google.Cloud.Iam.Admin.V1.SignBlobResponse> __Method_SignBlob = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.SignBlobRequest, global::Google.Cloud.Iam.Admin.V1.SignBlobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignBlob",
        __Marshaller_google_iam_admin_v1_SignBlobRequest,
        __Marshaller_google_iam_admin_v1_SignBlobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.SignJwtRequest, global::Google.Cloud.Iam.Admin.V1.SignJwtResponse> __Method_SignJwt = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.SignJwtRequest, global::Google.Cloud.Iam.Admin.V1.SignJwtResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignJwt",
        __Marshaller_google_iam_admin_v1_SignJwtRequest,
        __Marshaller_google_iam_admin_v1_SignJwtResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest, global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse> __Method_QueryGrantableRoles = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest, global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryGrantableRoles",
        __Marshaller_google_iam_admin_v1_QueryGrantableRolesRequest,
        __Marshaller_google_iam_admin_v1_QueryGrantableRolesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.ListRolesRequest, global::Google.Cloud.Iam.Admin.V1.ListRolesResponse> __Method_ListRoles = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.ListRolesRequest, global::Google.Cloud.Iam.Admin.V1.ListRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRoles",
        __Marshaller_google_iam_admin_v1_ListRolesRequest,
        __Marshaller_google_iam_admin_v1_ListRolesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.GetRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role> __Method_GetRole = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.GetRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRole",
        __Marshaller_google_iam_admin_v1_GetRoleRequest,
        __Marshaller_google_iam_admin_v1_Role);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role> __Method_CreateRole = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRole",
        __Marshaller_google_iam_admin_v1_CreateRoleRequest,
        __Marshaller_google_iam_admin_v1_Role);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role> __Method_UpdateRole = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRole",
        __Marshaller_google_iam_admin_v1_UpdateRoleRequest,
        __Marshaller_google_iam_admin_v1_Role);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role> __Method_DeleteRole = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRole",
        __Marshaller_google_iam_admin_v1_DeleteRoleRequest,
        __Marshaller_google_iam_admin_v1_Role);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role> __Method_UndeleteRole = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteRole",
        __Marshaller_google_iam_admin_v1_UndeleteRoleRequest,
        __Marshaller_google_iam_admin_v1_Role);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest, global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse> __Method_QueryTestablePermissions = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest, global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryTestablePermissions",
        __Marshaller_google_iam_admin_v1_QueryTestablePermissionsRequest,
        __Marshaller_google_iam_admin_v1_QueryTestablePermissionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest, global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse> __Method_QueryAuditableServices = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest, global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryAuditableServices",
        __Marshaller_google_iam_admin_v1_QueryAuditableServicesRequest,
        __Marshaller_google_iam_admin_v1_QueryAuditableServicesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest, global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse> __Method_LintPolicy = new grpc::Method<global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest, global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LintPolicy",
        __Marshaller_google_iam_admin_v1_LintPolicyRequest,
        __Marshaller_google_iam_admin_v1_LintPolicyResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Iam.Admin.V1.IamReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IAM</summary>
    [grpc::BindServiceMethod(typeof(IAM), "BindService")]
    public abstract partial class IAMBase
    {
      /// <summary>
      /// Lists every [ServiceAccount][google.iam.admin.v1.ServiceAccount] that belongs to a specific project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse> ListServiceAccounts(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> GetServiceAccount(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> CreateServiceAccount(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// **Note:** We are in the process of deprecating this method. Use
      /// [PatchServiceAccount][google.iam.admin.v1.IAM.PatchServiceAccount] instead.
      ///
      /// Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// You can update only the `display_name` field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> UpdateServiceAccount(global::Google.Cloud.Iam.Admin.V1.ServiceAccount request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patches a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> PatchServiceAccount(global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Warning:** After you delete a service account, you might not be able to
      /// undelete it. If you know that you need to re-enable the service account in
      /// the future, use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] instead.
      ///
      /// If you delete a service account, IAM permanently removes the service
      /// account 30 days later. Google Cloud cannot recover the service account
      /// after it is permanently removed, even if you file a support request.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] to disable the
      /// service account, then wait at least 24 hours and watch for unintended
      /// consequences. If there are no unintended consequences, you can delete the
      /// service account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccount(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restores a deleted [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Important:** It is not always possible to restore a deleted service
      /// account. Use this method only as a last resort.
      ///
      /// After you delete a service account, IAM permanently removes the service
      /// account 30 days later. There is no way to restore a deleted service account
      /// that has been permanently removed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse> UndeleteServiceAccount(global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] that was disabled by
      /// [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount].
      ///
      /// If the service account is already enabled, then this method has no effect.
      ///
      /// If the service account was disabled by other means—for example, if Google
      /// disabled the service account because it was compromised—you cannot use this
      /// method to enable the service account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> EnableServiceAccount(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Disables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] immediately.
      ///
      /// If an application uses the service account to authenticate, that
      /// application can no longer call Google APIs or access Google Cloud
      /// resources. Existing access tokens for the service account are rejected, and
      /// requests for new access tokens will fail.
      ///
      /// To re-enable the service account, use [EnableServiceAccount][google.iam.admin.v1.IAM.EnableServiceAccount]. After you
      /// re-enable the service account, its existing access tokens will be accepted,
      /// and you can request new access tokens.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use this method to disable the service
      /// account, then wait at least 24 hours and watch for unintended consequences.
      /// If there are no unintended consequences, you can delete the service account
      /// with [DeleteServiceAccount][google.iam.admin.v1.IAM.DeleteServiceAccount].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DisableServiceAccount(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists every [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey] for a service account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse> ListServiceAccountKeys(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> GetServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> CreateServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Uploads the public key portion of a key pair that you manage, and
      /// associates the public key with a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// After you upload the public key, you can use the private key from the key
      /// pair as a service account key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> UploadServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. Deleting a service account key does not
      /// revoke short-lived credentials that have been issued based on the service
      /// account key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Disable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. A disabled service account key can be
      /// re-enabled with [EnableServiceAccountKey][google.iam.admin.v1.IAM.EnableServiceAccountKey].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DisableServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> EnableServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a blob using the system-managed private key for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.SignBlobResponse> SignBlob(global::Google.Cloud.Iam.Admin.V1.SignBlobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a JSON Web Token (JWT) using the system-managed private key for a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.SignJwtResponse> SignJwt(global::Google.Cloud.Iam.Admin.V1.SignJwtRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount]. This IAM
      /// policy specifies which principals have access to the service account.
      ///
      /// This method does not tell you whether the service account has been granted
      /// any roles on other resources. To check whether a service account has role
      /// grants on a resource, use the `getIamPolicy` method for that resource. For
      /// example, to view the role grants for a project, call the Resource Manager
      /// API's
      /// [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
      /// method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// Use this method to grant or revoke access to the service account. For
      /// example, you could grant a principal the ability to impersonate the service
      /// account.
      ///
      /// This method does not enable the service account to access other resources.
      /// To grant roles to a service account on a resource, follow these steps:
      ///
      /// 1. Call the resource's `getIamPolicy` method to get its current IAM policy.
      /// 2. Edit the policy so that it binds the service account to an IAM role for
      /// the resource.
      /// 3. Call the resource's `setIamPolicy` method to update its IAM policy.
      ///
      /// For detailed instructions, see
      /// [Manage access to project, folders, and
      /// organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts)
      /// or [Manage access to other
      /// resources](https://cloud.google.com/iam/help/access/manage-other-resources).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Tests whether the caller has the specified permissions on a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists roles that can be granted on a Google Cloud resource. A role is
      /// grantable if the IAM policy for the resource can contain bindings to the
      /// role.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse> QueryGrantableRoles(global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists every predefined [Role][google.iam.admin.v1.Role] that IAM supports, or every custom role
      /// that is defined for an organization or project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.ListRolesResponse> ListRoles(global::Google.Cloud.Iam.Admin.V1.ListRolesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the definition of a [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.Role> GetRole(global::Google.Cloud.Iam.Admin.V1.GetRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.Role> CreateRole(global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the definition of a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.Role> UpdateRole(global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a custom [Role][google.iam.admin.v1.Role].
      ///
      /// When you delete a custom role, the following changes occur immediately:
      ///
      /// * You cannot bind a principal to the custom role in an IAM
      /// [Policy][google.iam.v1.Policy].
      /// * Existing bindings to the custom role are not changed, but they have no
      /// effect.
      /// * By default, the response from [ListRoles][google.iam.admin.v1.IAM.ListRoles] does not include the custom
      /// role.
      ///
      /// You have 7 days to undelete the custom role. After 7 days, the following
      /// changes occur:
      ///
      /// * The custom role is permanently deleted and cannot be recovered.
      /// * If an IAM policy contains a binding to the custom role, the binding is
      /// permanently removed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.Role> DeleteRole(global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Undeletes a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.Role> UndeleteRole(global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists every permission that you can test on a resource. A permission is
      /// testable if you can check whether a principal has that permission on the
      /// resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse> QueryTestablePermissions(global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of services that allow you to opt into audit logs that are
      /// not generated by default.
      ///
      /// To learn more about audit logs, see the [Logging
      /// documentation](https://cloud.google.com/logging/docs/audit).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse> QueryAuditableServices(global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lints, or validates, an IAM policy. Currently checks the
      /// [google.iam.v1.Binding.condition][google.iam.v1.Binding.condition] field, which contains a condition
      /// expression for a role binding.
      ///
      /// Successful calls to this method always return an HTTP `200 OK` status code,
      /// even if the linter detects an issue in the IAM policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse> LintPolicy(global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IAM</summary>
    public partial class IAMClient : grpc::ClientBase<IAMClient>
    {
      /// <summary>Creates a new client for IAM</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IAMClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IAM that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IAMClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IAMClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IAMClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists every [ServiceAccount][google.iam.admin.v1.ServiceAccount] that belongs to a specific project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse ListServiceAccounts(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServiceAccounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists every [ServiceAccount][google.iam.admin.v1.ServiceAccount] that belongs to a specific project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse ListServiceAccounts(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListServiceAccounts, null, options, request);
      }
      /// <summary>
      /// Lists every [ServiceAccount][google.iam.admin.v1.ServiceAccount] that belongs to a specific project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse> ListServiceAccountsAsync(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServiceAccountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists every [ServiceAccount][google.iam.admin.v1.ServiceAccount] that belongs to a specific project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse> ListServiceAccountsAsync(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListServiceAccounts, null, options, request);
      }
      /// <summary>
      /// Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccount GetServiceAccount(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccount GetServiceAccount(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceAccount, null, options, request);
      }
      /// <summary>
      /// Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> GetServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> GetServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceAccount, null, options, request);
      }
      /// <summary>
      /// Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccount CreateServiceAccount(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccount CreateServiceAccount(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServiceAccount, null, options, request);
      }
      /// <summary>
      /// Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> CreateServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> CreateServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServiceAccount, null, options, request);
      }
      /// <summary>
      /// **Note:** We are in the process of deprecating this method. Use
      /// [PatchServiceAccount][google.iam.admin.v1.IAM.PatchServiceAccount] instead.
      ///
      /// Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// You can update only the `display_name` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccount UpdateServiceAccount(global::Google.Cloud.Iam.Admin.V1.ServiceAccount request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// **Note:** We are in the process of deprecating this method. Use
      /// [PatchServiceAccount][google.iam.admin.v1.IAM.PatchServiceAccount] instead.
      ///
      /// Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// You can update only the `display_name` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccount UpdateServiceAccount(global::Google.Cloud.Iam.Admin.V1.ServiceAccount request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateServiceAccount, null, options, request);
      }
      /// <summary>
      /// **Note:** We are in the process of deprecating this method. Use
      /// [PatchServiceAccount][google.iam.admin.v1.IAM.PatchServiceAccount] instead.
      ///
      /// Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// You can update only the `display_name` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> UpdateServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.ServiceAccount request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// **Note:** We are in the process of deprecating this method. Use
      /// [PatchServiceAccount][google.iam.admin.v1.IAM.PatchServiceAccount] instead.
      ///
      /// Updates a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// You can update only the `display_name` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> UpdateServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.ServiceAccount request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateServiceAccount, null, options, request);
      }
      /// <summary>
      /// Patches a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccount PatchServiceAccount(global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccount PatchServiceAccount(global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchServiceAccount, null, options, request);
      }
      /// <summary>
      /// Patches a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> PatchServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patches a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccount> PatchServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchServiceAccount, null, options, request);
      }
      /// <summary>
      /// Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Warning:** After you delete a service account, you might not be able to
      /// undelete it. If you know that you need to re-enable the service account in
      /// the future, use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] instead.
      ///
      /// If you delete a service account, IAM permanently removes the service
      /// account 30 days later. Google Cloud cannot recover the service account
      /// after it is permanently removed, even if you file a support request.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] to disable the
      /// service account, then wait at least 24 hours and watch for unintended
      /// consequences. If there are no unintended consequences, you can delete the
      /// service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccount(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Warning:** After you delete a service account, you might not be able to
      /// undelete it. If you know that you need to re-enable the service account in
      /// the future, use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] instead.
      ///
      /// If you delete a service account, IAM permanently removes the service
      /// account 30 days later. Google Cloud cannot recover the service account
      /// after it is permanently removed, even if you file a support request.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] to disable the
      /// service account, then wait at least 24 hours and watch for unintended
      /// consequences. If there are no unintended consequences, you can delete the
      /// service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccount(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServiceAccount, null, options, request);
      }
      /// <summary>
      /// Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Warning:** After you delete a service account, you might not be able to
      /// undelete it. If you know that you need to re-enable the service account in
      /// the future, use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] instead.
      ///
      /// If you delete a service account, IAM permanently removes the service
      /// account 30 days later. Google Cloud cannot recover the service account
      /// after it is permanently removed, even if you file a support request.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] to disable the
      /// service account, then wait at least 24 hours and watch for unintended
      /// consequences. If there are no unintended consequences, you can delete the
      /// service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Warning:** After you delete a service account, you might not be able to
      /// undelete it. If you know that you need to re-enable the service account in
      /// the future, use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] instead.
      ///
      /// If you delete a service account, IAM permanently removes the service
      /// account 30 days later. Google Cloud cannot recover the service account
      /// after it is permanently removed, even if you file a support request.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount] to disable the
      /// service account, then wait at least 24 hours and watch for unintended
      /// consequences. If there are no unintended consequences, you can delete the
      /// service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServiceAccount, null, options, request);
      }
      /// <summary>
      /// Restores a deleted [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Important:** It is not always possible to restore a deleted service
      /// account. Use this method only as a last resort.
      ///
      /// After you delete a service account, IAM permanently removes the service
      /// account 30 days later. There is no way to restore a deleted service account
      /// that has been permanently removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse UndeleteServiceAccount(global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restores a deleted [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Important:** It is not always possible to restore a deleted service
      /// account. Use this method only as a last resort.
      ///
      /// After you delete a service account, IAM permanently removes the service
      /// account 30 days later. There is no way to restore a deleted service account
      /// that has been permanently removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse UndeleteServiceAccount(global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteServiceAccount, null, options, request);
      }
      /// <summary>
      /// Restores a deleted [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Important:** It is not always possible to restore a deleted service
      /// account. Use this method only as a last resort.
      ///
      /// After you delete a service account, IAM permanently removes the service
      /// account 30 days later. There is no way to restore a deleted service account
      /// that has been permanently removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse> UndeleteServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restores a deleted [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// **Important:** It is not always possible to restore a deleted service
      /// account. Use this method only as a last resort.
      ///
      /// After you delete a service account, IAM permanently removes the service
      /// account 30 days later. There is no way to restore a deleted service account
      /// that has been permanently removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse> UndeleteServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteServiceAccount, null, options, request);
      }
      /// <summary>
      /// Enables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] that was disabled by
      /// [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount].
      ///
      /// If the service account is already enabled, then this method has no effect.
      ///
      /// If the service account was disabled by other means—for example, if Google
      /// disabled the service account because it was compromised—you cannot use this
      /// method to enable the service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EnableServiceAccount(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] that was disabled by
      /// [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount].
      ///
      /// If the service account is already enabled, then this method has no effect.
      ///
      /// If the service account was disabled by other means—for example, if Google
      /// disabled the service account because it was compromised—you cannot use this
      /// method to enable the service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EnableServiceAccount(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableServiceAccount, null, options, request);
      }
      /// <summary>
      /// Enables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] that was disabled by
      /// [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount].
      ///
      /// If the service account is already enabled, then this method has no effect.
      ///
      /// If the service account was disabled by other means—for example, if Google
      /// disabled the service account because it was compromised—you cannot use this
      /// method to enable the service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EnableServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] that was disabled by
      /// [DisableServiceAccount][google.iam.admin.v1.IAM.DisableServiceAccount].
      ///
      /// If the service account is already enabled, then this method has no effect.
      ///
      /// If the service account was disabled by other means—for example, if Google
      /// disabled the service account because it was compromised—you cannot use this
      /// method to enable the service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EnableServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableServiceAccount, null, options, request);
      }
      /// <summary>
      /// Disables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] immediately.
      ///
      /// If an application uses the service account to authenticate, that
      /// application can no longer call Google APIs or access Google Cloud
      /// resources. Existing access tokens for the service account are rejected, and
      /// requests for new access tokens will fail.
      ///
      /// To re-enable the service account, use [EnableServiceAccount][google.iam.admin.v1.IAM.EnableServiceAccount]. After you
      /// re-enable the service account, its existing access tokens will be accepted,
      /// and you can request new access tokens.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use this method to disable the service
      /// account, then wait at least 24 hours and watch for unintended consequences.
      /// If there are no unintended consequences, you can delete the service account
      /// with [DeleteServiceAccount][google.iam.admin.v1.IAM.DeleteServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DisableServiceAccount(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableServiceAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] immediately.
      ///
      /// If an application uses the service account to authenticate, that
      /// application can no longer call Google APIs or access Google Cloud
      /// resources. Existing access tokens for the service account are rejected, and
      /// requests for new access tokens will fail.
      ///
      /// To re-enable the service account, use [EnableServiceAccount][google.iam.admin.v1.IAM.EnableServiceAccount]. After you
      /// re-enable the service account, its existing access tokens will be accepted,
      /// and you can request new access tokens.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use this method to disable the service
      /// account, then wait at least 24 hours and watch for unintended consequences.
      /// If there are no unintended consequences, you can delete the service account
      /// with [DeleteServiceAccount][google.iam.admin.v1.IAM.DeleteServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DisableServiceAccount(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisableServiceAccount, null, options, request);
      }
      /// <summary>
      /// Disables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] immediately.
      ///
      /// If an application uses the service account to authenticate, that
      /// application can no longer call Google APIs or access Google Cloud
      /// resources. Existing access tokens for the service account are rejected, and
      /// requests for new access tokens will fail.
      ///
      /// To re-enable the service account, use [EnableServiceAccount][google.iam.admin.v1.IAM.EnableServiceAccount]. After you
      /// re-enable the service account, its existing access tokens will be accepted,
      /// and you can request new access tokens.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use this method to disable the service
      /// account, then wait at least 24 hours and watch for unintended consequences.
      /// If there are no unintended consequences, you can delete the service account
      /// with [DeleteServiceAccount][google.iam.admin.v1.IAM.DeleteServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DisableServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableServiceAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disables a [ServiceAccount][google.iam.admin.v1.ServiceAccount] immediately.
      ///
      /// If an application uses the service account to authenticate, that
      /// application can no longer call Google APIs or access Google Cloud
      /// resources. Existing access tokens for the service account are rejected, and
      /// requests for new access tokens will fail.
      ///
      /// To re-enable the service account, use [EnableServiceAccount][google.iam.admin.v1.IAM.EnableServiceAccount]. After you
      /// re-enable the service account, its existing access tokens will be accepted,
      /// and you can request new access tokens.
      ///
      /// To help avoid unplanned outages, we recommend that you disable the service
      /// account before you delete it. Use this method to disable the service
      /// account, then wait at least 24 hours and watch for unintended consequences.
      /// If there are no unintended consequences, you can delete the service account
      /// with [DeleteServiceAccount][google.iam.admin.v1.IAM.DeleteServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DisableServiceAccountAsync(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisableServiceAccount, null, options, request);
      }
      /// <summary>
      /// Lists every [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey] for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse ListServiceAccountKeys(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServiceAccountKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists every [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey] for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse ListServiceAccountKeys(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListServiceAccountKeys, null, options, request);
      }
      /// <summary>
      /// Lists every [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey] for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse> ListServiceAccountKeysAsync(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServiceAccountKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists every [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey] for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse> ListServiceAccountKeysAsync(global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListServiceAccountKeys, null, options, request);
      }
      /// <summary>
      /// Gets a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey GetServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceAccountKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey GetServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Gets a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> GetServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceAccountKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> GetServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey CreateServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceAccountKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey CreateServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> CreateServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceAccountKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> CreateServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Uploads the public key portion of a key pair that you manage, and
      /// associates the public key with a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// After you upload the public key, you can use the private key from the key
      /// pair as a service account key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey UploadServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadServiceAccountKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Uploads the public key portion of a key pair that you manage, and
      /// associates the public key with a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// After you upload the public key, you can use the private key from the key
      /// pair as a service account key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey UploadServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UploadServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Uploads the public key portion of a key pair that you manage, and
      /// associates the public key with a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// After you upload the public key, you can use the private key from the key
      /// pair as a service account key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> UploadServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UploadServiceAccountKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Uploads the public key portion of a key pair that you manage, and
      /// associates the public key with a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// After you upload the public key, you can use the private key from the key
      /// pair as a service account key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey> UploadServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UploadServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. Deleting a service account key does not
      /// revoke short-lived credentials that have been issued based on the service
      /// account key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceAccountKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. Deleting a service account key does not
      /// revoke short-lived credentials that have been issued based on the service
      /// account key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. Deleting a service account key does not
      /// revoke short-lived credentials that have been issued based on the service
      /// account key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceAccountKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. Deleting a service account key does not
      /// revoke short-lived credentials that have been issued based on the service
      /// account key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Disable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. A disabled service account key can be
      /// re-enabled with [EnableServiceAccountKey][google.iam.admin.v1.IAM.EnableServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DisableServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableServiceAccountKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. A disabled service account key can be
      /// re-enabled with [EnableServiceAccountKey][google.iam.admin.v1.IAM.EnableServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DisableServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisableServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Disable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. A disabled service account key can be
      /// re-enabled with [EnableServiceAccountKey][google.iam.admin.v1.IAM.EnableServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DisableServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableServiceAccountKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey]. A disabled service account key can be
      /// re-enabled with [EnableServiceAccountKey][google.iam.admin.v1.IAM.EnableServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DisableServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisableServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Enable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EnableServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableServiceAccountKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty EnableServiceAccountKey(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// Enable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EnableServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableServiceAccountKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable a [ServiceAccountKey][google.iam.admin.v1.ServiceAccountKey].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> EnableServiceAccountKeyAsync(global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableServiceAccountKey, null, options, request);
      }
      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a blob using the system-managed private key for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.SignBlobResponse SignBlob(global::Google.Cloud.Iam.Admin.V1.SignBlobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignBlob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a blob using the system-managed private key for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.SignBlobResponse SignBlob(global::Google.Cloud.Iam.Admin.V1.SignBlobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignBlob, null, options, request);
      }
      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a blob using the system-managed private key for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.SignBlobResponse> SignBlobAsync(global::Google.Cloud.Iam.Admin.V1.SignBlobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignBlobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a blob using the system-managed private key for a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.SignBlobResponse> SignBlobAsync(global::Google.Cloud.Iam.Admin.V1.SignBlobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignBlob, null, options, request);
      }
      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a JSON Web Token (JWT) using the system-managed private key for a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.SignJwtResponse SignJwt(global::Google.Cloud.Iam.Admin.V1.SignJwtRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignJwt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a JSON Web Token (JWT) using the system-managed private key for a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.SignJwtResponse SignJwt(global::Google.Cloud.Iam.Admin.V1.SignJwtRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignJwt, null, options, request);
      }
      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a JSON Web Token (JWT) using the system-managed private key for a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.SignJwtResponse> SignJwtAsync(global::Google.Cloud.Iam.Admin.V1.SignJwtRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignJwtAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// **Note:** This method is deprecated. Use the
      /// [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt)
      /// method in the IAM Service Account Credentials API instead. If you currently
      /// use this method, see the [migration
      /// guide](https://cloud.google.com/iam/help/credentials/migrate-api) for
      /// instructions.
      ///
      /// Signs a JSON Web Token (JWT) using the system-managed private key for a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.ObsoleteAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.SignJwtResponse> SignJwtAsync(global::Google.Cloud.Iam.Admin.V1.SignJwtRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignJwt, null, options, request);
      }
      /// <summary>
      /// Gets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount]. This IAM
      /// policy specifies which principals have access to the service account.
      ///
      /// This method does not tell you whether the service account has been granted
      /// any roles on other resources. To check whether a service account has role
      /// grants on a resource, use the `getIamPolicy` method for that resource. For
      /// example, to view the role grants for a project, call the Resource Manager
      /// API's
      /// [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
      /// method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount]. This IAM
      /// policy specifies which principals have access to the service account.
      ///
      /// This method does not tell you whether the service account has been granted
      /// any roles on other resources. To check whether a service account has role
      /// grants on a resource, use the `getIamPolicy` method for that resource. For
      /// example, to view the role grants for a project, call the Resource Manager
      /// API's
      /// [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
      /// method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount]. This IAM
      /// policy specifies which principals have access to the service account.
      ///
      /// This method does not tell you whether the service account has been granted
      /// any roles on other resources. To check whether a service account has role
      /// grants on a resource, use the `getIamPolicy` method for that resource. For
      /// example, to view the role grants for a project, call the Resource Manager
      /// API's
      /// [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
      /// method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount]. This IAM
      /// policy specifies which principals have access to the service account.
      ///
      /// This method does not tell you whether the service account has been granted
      /// any roles on other resources. To check whether a service account has role
      /// grants on a resource, use the `getIamPolicy` method for that resource. For
      /// example, to view the role grants for a project, call the Resource Manager
      /// API's
      /// [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy)
      /// method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// Use this method to grant or revoke access to the service account. For
      /// example, you could grant a principal the ability to impersonate the service
      /// account.
      ///
      /// This method does not enable the service account to access other resources.
      /// To grant roles to a service account on a resource, follow these steps:
      ///
      /// 1. Call the resource's `getIamPolicy` method to get its current IAM policy.
      /// 2. Edit the policy so that it binds the service account to an IAM role for
      /// the resource.
      /// 3. Call the resource's `setIamPolicy` method to update its IAM policy.
      ///
      /// For detailed instructions, see
      /// [Manage access to project, folders, and
      /// organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts)
      /// or [Manage access to other
      /// resources](https://cloud.google.com/iam/help/access/manage-other-resources).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// Use this method to grant or revoke access to the service account. For
      /// example, you could grant a principal the ability to impersonate the service
      /// account.
      ///
      /// This method does not enable the service account to access other resources.
      /// To grant roles to a service account on a resource, follow these steps:
      ///
      /// 1. Call the resource's `getIamPolicy` method to get its current IAM policy.
      /// 2. Edit the policy so that it binds the service account to an IAM role for
      /// the resource.
      /// 3. Call the resource's `setIamPolicy` method to update its IAM policy.
      ///
      /// For detailed instructions, see
      /// [Manage access to project, folders, and
      /// organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts)
      /// or [Manage access to other
      /// resources](https://cloud.google.com/iam/help/access/manage-other-resources).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// Use this method to grant or revoke access to the service account. For
      /// example, you could grant a principal the ability to impersonate the service
      /// account.
      ///
      /// This method does not enable the service account to access other resources.
      /// To grant roles to a service account on a resource, follow these steps:
      ///
      /// 1. Call the resource's `getIamPolicy` method to get its current IAM policy.
      /// 2. Edit the policy so that it binds the service account to an IAM role for
      /// the resource.
      /// 3. Call the resource's `setIamPolicy` method to update its IAM policy.
      ///
      /// For detailed instructions, see
      /// [Manage access to project, folders, and
      /// organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts)
      /// or [Manage access to other
      /// resources](https://cloud.google.com/iam/help/access/manage-other-resources).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the IAM policy that is attached to a [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      ///
      /// Use this method to grant or revoke access to the service account. For
      /// example, you could grant a principal the ability to impersonate the service
      /// account.
      ///
      /// This method does not enable the service account to access other resources.
      /// To grant roles to a service account on a resource, follow these steps:
      ///
      /// 1. Call the resource's `getIamPolicy` method to get its current IAM policy.
      /// 2. Edit the policy so that it binds the service account to an IAM role for
      /// the resource.
      /// 3. Call the resource's `setIamPolicy` method to update its IAM policy.
      ///
      /// For detailed instructions, see
      /// [Manage access to project, folders, and
      /// organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts)
      /// or [Manage access to other
      /// resources](https://cloud.google.com/iam/help/access/manage-other-resources).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Tests whether the caller has the specified permissions on a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tests whether the caller has the specified permissions on a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Tests whether the caller has the specified permissions on a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tests whether the caller has the specified permissions on a
      /// [ServiceAccount][google.iam.admin.v1.ServiceAccount].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Lists roles that can be granted on a Google Cloud resource. A role is
      /// grantable if the IAM policy for the resource can contain bindings to the
      /// role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse QueryGrantableRoles(global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryGrantableRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists roles that can be granted on a Google Cloud resource. A role is
      /// grantable if the IAM policy for the resource can contain bindings to the
      /// role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse QueryGrantableRoles(global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryGrantableRoles, null, options, request);
      }
      /// <summary>
      /// Lists roles that can be granted on a Google Cloud resource. A role is
      /// grantable if the IAM policy for the resource can contain bindings to the
      /// role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse> QueryGrantableRolesAsync(global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryGrantableRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists roles that can be granted on a Google Cloud resource. A role is
      /// grantable if the IAM policy for the resource can contain bindings to the
      /// role.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse> QueryGrantableRolesAsync(global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryGrantableRoles, null, options, request);
      }
      /// <summary>
      /// Lists every predefined [Role][google.iam.admin.v1.Role] that IAM supports, or every custom role
      /// that is defined for an organization or project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ListRolesResponse ListRoles(global::Google.Cloud.Iam.Admin.V1.ListRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists every predefined [Role][google.iam.admin.v1.Role] that IAM supports, or every custom role
      /// that is defined for an organization or project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.ListRolesResponse ListRoles(global::Google.Cloud.Iam.Admin.V1.ListRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRoles, null, options, request);
      }
      /// <summary>
      /// Lists every predefined [Role][google.iam.admin.v1.Role] that IAM supports, or every custom role
      /// that is defined for an organization or project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ListRolesResponse> ListRolesAsync(global::Google.Cloud.Iam.Admin.V1.ListRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists every predefined [Role][google.iam.admin.v1.Role] that IAM supports, or every custom role
      /// that is defined for an organization or project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.ListRolesResponse> ListRolesAsync(global::Google.Cloud.Iam.Admin.V1.ListRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRoles, null, options, request);
      }
      /// <summary>
      /// Gets the definition of a [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role GetRole(global::Google.Cloud.Iam.Admin.V1.GetRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the definition of a [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role GetRole(global::Google.Cloud.Iam.Admin.V1.GetRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRole, null, options, request);
      }
      /// <summary>
      /// Gets the definition of a [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> GetRoleAsync(global::Google.Cloud.Iam.Admin.V1.GetRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the definition of a [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> GetRoleAsync(global::Google.Cloud.Iam.Admin.V1.GetRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRole, null, options, request);
      }
      /// <summary>
      /// Creates a new custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role CreateRole(global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role CreateRole(global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRole, null, options, request);
      }
      /// <summary>
      /// Creates a new custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> CreateRoleAsync(global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> CreateRoleAsync(global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRole, null, options, request);
      }
      /// <summary>
      /// Updates the definition of a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role UpdateRole(global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the definition of a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role UpdateRole(global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRole, null, options, request);
      }
      /// <summary>
      /// Updates the definition of a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> UpdateRoleAsync(global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the definition of a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> UpdateRoleAsync(global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRole, null, options, request);
      }
      /// <summary>
      /// Deletes a custom [Role][google.iam.admin.v1.Role].
      ///
      /// When you delete a custom role, the following changes occur immediately:
      ///
      /// * You cannot bind a principal to the custom role in an IAM
      /// [Policy][google.iam.v1.Policy].
      /// * Existing bindings to the custom role are not changed, but they have no
      /// effect.
      /// * By default, the response from [ListRoles][google.iam.admin.v1.IAM.ListRoles] does not include the custom
      /// role.
      ///
      /// You have 7 days to undelete the custom role. After 7 days, the following
      /// changes occur:
      ///
      /// * The custom role is permanently deleted and cannot be recovered.
      /// * If an IAM policy contains a binding to the custom role, the binding is
      /// permanently removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role DeleteRole(global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a custom [Role][google.iam.admin.v1.Role].
      ///
      /// When you delete a custom role, the following changes occur immediately:
      ///
      /// * You cannot bind a principal to the custom role in an IAM
      /// [Policy][google.iam.v1.Policy].
      /// * Existing bindings to the custom role are not changed, but they have no
      /// effect.
      /// * By default, the response from [ListRoles][google.iam.admin.v1.IAM.ListRoles] does not include the custom
      /// role.
      ///
      /// You have 7 days to undelete the custom role. After 7 days, the following
      /// changes occur:
      ///
      /// * The custom role is permanently deleted and cannot be recovered.
      /// * If an IAM policy contains a binding to the custom role, the binding is
      /// permanently removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role DeleteRole(global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRole, null, options, request);
      }
      /// <summary>
      /// Deletes a custom [Role][google.iam.admin.v1.Role].
      ///
      /// When you delete a custom role, the following changes occur immediately:
      ///
      /// * You cannot bind a principal to the custom role in an IAM
      /// [Policy][google.iam.v1.Policy].
      /// * Existing bindings to the custom role are not changed, but they have no
      /// effect.
      /// * By default, the response from [ListRoles][google.iam.admin.v1.IAM.ListRoles] does not include the custom
      /// role.
      ///
      /// You have 7 days to undelete the custom role. After 7 days, the following
      /// changes occur:
      ///
      /// * The custom role is permanently deleted and cannot be recovered.
      /// * If an IAM policy contains a binding to the custom role, the binding is
      /// permanently removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> DeleteRoleAsync(global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a custom [Role][google.iam.admin.v1.Role].
      ///
      /// When you delete a custom role, the following changes occur immediately:
      ///
      /// * You cannot bind a principal to the custom role in an IAM
      /// [Policy][google.iam.v1.Policy].
      /// * Existing bindings to the custom role are not changed, but they have no
      /// effect.
      /// * By default, the response from [ListRoles][google.iam.admin.v1.IAM.ListRoles] does not include the custom
      /// role.
      ///
      /// You have 7 days to undelete the custom role. After 7 days, the following
      /// changes occur:
      ///
      /// * The custom role is permanently deleted and cannot be recovered.
      /// * If an IAM policy contains a binding to the custom role, the binding is
      /// permanently removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> DeleteRoleAsync(global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRole, null, options, request);
      }
      /// <summary>
      /// Undeletes a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role UndeleteRole(global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeletes a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.Role UndeleteRole(global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteRole, null, options, request);
      }
      /// <summary>
      /// Undeletes a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> UndeleteRoleAsync(global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeletes a custom [Role][google.iam.admin.v1.Role].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.Role> UndeleteRoleAsync(global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteRole, null, options, request);
      }
      /// <summary>
      /// Lists every permission that you can test on a resource. A permission is
      /// testable if you can check whether a principal has that permission on the
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse QueryTestablePermissions(global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryTestablePermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists every permission that you can test on a resource. A permission is
      /// testable if you can check whether a principal has that permission on the
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse QueryTestablePermissions(global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryTestablePermissions, null, options, request);
      }
      /// <summary>
      /// Lists every permission that you can test on a resource. A permission is
      /// testable if you can check whether a principal has that permission on the
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse> QueryTestablePermissionsAsync(global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryTestablePermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists every permission that you can test on a resource. A permission is
      /// testable if you can check whether a principal has that permission on the
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse> QueryTestablePermissionsAsync(global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryTestablePermissions, null, options, request);
      }
      /// <summary>
      /// Returns a list of services that allow you to opt into audit logs that are
      /// not generated by default.
      ///
      /// To learn more about audit logs, see the [Logging
      /// documentation](https://cloud.google.com/logging/docs/audit).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse QueryAuditableServices(global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryAuditableServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of services that allow you to opt into audit logs that are
      /// not generated by default.
      ///
      /// To learn more about audit logs, see the [Logging
      /// documentation](https://cloud.google.com/logging/docs/audit).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse QueryAuditableServices(global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryAuditableServices, null, options, request);
      }
      /// <summary>
      /// Returns a list of services that allow you to opt into audit logs that are
      /// not generated by default.
      ///
      /// To learn more about audit logs, see the [Logging
      /// documentation](https://cloud.google.com/logging/docs/audit).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse> QueryAuditableServicesAsync(global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryAuditableServicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of services that allow you to opt into audit logs that are
      /// not generated by default.
      ///
      /// To learn more about audit logs, see the [Logging
      /// documentation](https://cloud.google.com/logging/docs/audit).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse> QueryAuditableServicesAsync(global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryAuditableServices, null, options, request);
      }
      /// <summary>
      /// Lints, or validates, an IAM policy. Currently checks the
      /// [google.iam.v1.Binding.condition][google.iam.v1.Binding.condition] field, which contains a condition
      /// expression for a role binding.
      ///
      /// Successful calls to this method always return an HTTP `200 OK` status code,
      /// even if the linter detects an issue in the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse LintPolicy(global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LintPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lints, or validates, an IAM policy. Currently checks the
      /// [google.iam.v1.Binding.condition][google.iam.v1.Binding.condition] field, which contains a condition
      /// expression for a role binding.
      ///
      /// Successful calls to this method always return an HTTP `200 OK` status code,
      /// even if the linter detects an issue in the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse LintPolicy(global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LintPolicy, null, options, request);
      }
      /// <summary>
      /// Lints, or validates, an IAM policy. Currently checks the
      /// [google.iam.v1.Binding.condition][google.iam.v1.Binding.condition] field, which contains a condition
      /// expression for a role binding.
      ///
      /// Successful calls to this method always return an HTTP `200 OK` status code,
      /// even if the linter detects an issue in the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse> LintPolicyAsync(global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LintPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lints, or validates, an IAM policy. Currently checks the
      /// [google.iam.v1.Binding.condition][google.iam.v1.Binding.condition] field, which contains a condition
      /// expression for a role binding.
      ///
      /// Successful calls to this method always return an HTTP `200 OK` status code,
      /// even if the linter detects an issue in the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse> LintPolicyAsync(global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LintPolicy, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override IAMClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IAMClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(IAMBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListServiceAccounts, serviceImpl.ListServiceAccounts)
          .AddMethod(__Method_GetServiceAccount, serviceImpl.GetServiceAccount)
          .AddMethod(__Method_CreateServiceAccount, serviceImpl.CreateServiceAccount)
          .AddMethod(__Method_UpdateServiceAccount, serviceImpl.UpdateServiceAccount)
          .AddMethod(__Method_PatchServiceAccount, serviceImpl.PatchServiceAccount)
          .AddMethod(__Method_DeleteServiceAccount, serviceImpl.DeleteServiceAccount)
          .AddMethod(__Method_UndeleteServiceAccount, serviceImpl.UndeleteServiceAccount)
          .AddMethod(__Method_EnableServiceAccount, serviceImpl.EnableServiceAccount)
          .AddMethod(__Method_DisableServiceAccount, serviceImpl.DisableServiceAccount)
          .AddMethod(__Method_ListServiceAccountKeys, serviceImpl.ListServiceAccountKeys)
          .AddMethod(__Method_GetServiceAccountKey, serviceImpl.GetServiceAccountKey)
          .AddMethod(__Method_CreateServiceAccountKey, serviceImpl.CreateServiceAccountKey)
          .AddMethod(__Method_UploadServiceAccountKey, serviceImpl.UploadServiceAccountKey)
          .AddMethod(__Method_DeleteServiceAccountKey, serviceImpl.DeleteServiceAccountKey)
          .AddMethod(__Method_DisableServiceAccountKey, serviceImpl.DisableServiceAccountKey)
          .AddMethod(__Method_EnableServiceAccountKey, serviceImpl.EnableServiceAccountKey)
          .AddMethod(__Method_SignBlob, serviceImpl.SignBlob)
          .AddMethod(__Method_SignJwt, serviceImpl.SignJwt)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions)
          .AddMethod(__Method_QueryGrantableRoles, serviceImpl.QueryGrantableRoles)
          .AddMethod(__Method_ListRoles, serviceImpl.ListRoles)
          .AddMethod(__Method_GetRole, serviceImpl.GetRole)
          .AddMethod(__Method_CreateRole, serviceImpl.CreateRole)
          .AddMethod(__Method_UpdateRole, serviceImpl.UpdateRole)
          .AddMethod(__Method_DeleteRole, serviceImpl.DeleteRole)
          .AddMethod(__Method_UndeleteRole, serviceImpl.UndeleteRole)
          .AddMethod(__Method_QueryTestablePermissions, serviceImpl.QueryTestablePermissions)
          .AddMethod(__Method_QueryAuditableServices, serviceImpl.QueryAuditableServices)
          .AddMethod(__Method_LintPolicy, serviceImpl.LintPolicy).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, IAMBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListServiceAccounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsRequest, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountsResponse>(serviceImpl.ListServiceAccounts));
      serviceBinder.AddMethod(__Method_GetServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.GetServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount>(serviceImpl.GetServiceAccount));
      serviceBinder.AddMethod(__Method_CreateServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount>(serviceImpl.CreateServiceAccount));
      serviceBinder.AddMethod(__Method_UpdateServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.ServiceAccount, global::Google.Cloud.Iam.Admin.V1.ServiceAccount>(serviceImpl.UpdateServiceAccount));
      serviceBinder.AddMethod(__Method_PatchServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.PatchServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccount>(serviceImpl.PatchServiceAccount));
      serviceBinder.AddMethod(__Method_DeleteServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteServiceAccount));
      serviceBinder.AddMethod(__Method_UndeleteServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountRequest, global::Google.Cloud.Iam.Admin.V1.UndeleteServiceAccountResponse>(serviceImpl.UndeleteServiceAccount));
      serviceBinder.AddMethod(__Method_EnableServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.EnableServiceAccount));
      serviceBinder.AddMethod(__Method_DisableServiceAccount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DisableServiceAccount));
      serviceBinder.AddMethod(__Method_ListServiceAccountKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysRequest, global::Google.Cloud.Iam.Admin.V1.ListServiceAccountKeysResponse>(serviceImpl.ListServiceAccountKeys));
      serviceBinder.AddMethod(__Method_GetServiceAccountKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.GetServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey>(serviceImpl.GetServiceAccountKey));
      serviceBinder.AddMethod(__Method_CreateServiceAccountKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.CreateServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey>(serviceImpl.CreateServiceAccountKey));
      serviceBinder.AddMethod(__Method_UploadServiceAccountKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.UploadServiceAccountKeyRequest, global::Google.Cloud.Iam.Admin.V1.ServiceAccountKey>(serviceImpl.UploadServiceAccountKey));
      serviceBinder.AddMethod(__Method_DeleteServiceAccountKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.DeleteServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteServiceAccountKey));
      serviceBinder.AddMethod(__Method_DisableServiceAccountKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.DisableServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DisableServiceAccountKey));
      serviceBinder.AddMethod(__Method_EnableServiceAccountKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.EnableServiceAccountKeyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.EnableServiceAccountKey));
      serviceBinder.AddMethod(__Method_SignBlob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.SignBlobRequest, global::Google.Cloud.Iam.Admin.V1.SignBlobResponse>(serviceImpl.SignBlob));
      serviceBinder.AddMethod(__Method_SignJwt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.SignJwtRequest, global::Google.Cloud.Iam.Admin.V1.SignJwtResponse>(serviceImpl.SignJwt));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(serviceImpl.TestIamPermissions));
      serviceBinder.AddMethod(__Method_QueryGrantableRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesRequest, global::Google.Cloud.Iam.Admin.V1.QueryGrantableRolesResponse>(serviceImpl.QueryGrantableRoles));
      serviceBinder.AddMethod(__Method_ListRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.ListRolesRequest, global::Google.Cloud.Iam.Admin.V1.ListRolesResponse>(serviceImpl.ListRoles));
      serviceBinder.AddMethod(__Method_GetRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.GetRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(serviceImpl.GetRole));
      serviceBinder.AddMethod(__Method_CreateRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.CreateRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(serviceImpl.CreateRole));
      serviceBinder.AddMethod(__Method_UpdateRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.UpdateRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(serviceImpl.UpdateRole));
      serviceBinder.AddMethod(__Method_DeleteRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.DeleteRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(serviceImpl.DeleteRole));
      serviceBinder.AddMethod(__Method_UndeleteRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.UndeleteRoleRequest, global::Google.Cloud.Iam.Admin.V1.Role>(serviceImpl.UndeleteRole));
      serviceBinder.AddMethod(__Method_QueryTestablePermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsRequest, global::Google.Cloud.Iam.Admin.V1.QueryTestablePermissionsResponse>(serviceImpl.QueryTestablePermissions));
      serviceBinder.AddMethod(__Method_QueryAuditableServices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesRequest, global::Google.Cloud.Iam.Admin.V1.QueryAuditableServicesResponse>(serviceImpl.QueryAuditableServices));
      serviceBinder.AddMethod(__Method_LintPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Admin.V1.LintPolicyRequest, global::Google.Cloud.Iam.Admin.V1.LintPolicyResponse>(serviceImpl.LintPolicy));
    }

  }
}
#endregion
