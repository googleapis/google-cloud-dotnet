// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/area120/tables/v1alpha1/tables.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Area120.Tables.V1Alpha1 {
  /// <summary>
  /// The Tables Service provides an API for reading and updating tables.
  /// It defines the following resource model:
  ///
  /// - The API has a collection of [Table][google.area120.tables.v1alpha1.Table]
  ///   resources, named `tables/*`
  ///
  /// - Each Table has a collection of [Row][google.area120.tables.v1alpha1.Row]
  ///   resources, named `tables/*/rows/*`
  ///
  /// - The API has a collection of
  ///   [Workspace][google.area120.tables.v1alpha1.Workspace]
  ///   resources, named `workspaces/*`.
  /// </summary>
  public static partial class TablesService
  {
    static readonly string __ServiceName = "google.area120.tables.v1alpha1.TablesService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.GetTableRequest> __Marshaller_google_area120_tables_v1alpha1_GetTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.GetTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.Table> __Marshaller_google_area120_tables_v1alpha1_Table = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.Table.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.ListTablesRequest> __Marshaller_google_area120_tables_v1alpha1_ListTablesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.ListTablesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.ListTablesResponse> __Marshaller_google_area120_tables_v1alpha1_ListTablesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.ListTablesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest> __Marshaller_google_area120_tables_v1alpha1_GetWorkspaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.Workspace> __Marshaller_google_area120_tables_v1alpha1_Workspace = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.Workspace.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest> __Marshaller_google_area120_tables_v1alpha1_ListWorkspacesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse> __Marshaller_google_area120_tables_v1alpha1_ListWorkspacesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.GetRowRequest> __Marshaller_google_area120_tables_v1alpha1_GetRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.GetRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.Row> __Marshaller_google_area120_tables_v1alpha1_Row = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.Row.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.ListRowsRequest> __Marshaller_google_area120_tables_v1alpha1_ListRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.ListRowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.ListRowsResponse> __Marshaller_google_area120_tables_v1alpha1_ListRowsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.ListRowsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.CreateRowRequest> __Marshaller_google_area120_tables_v1alpha1_CreateRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.CreateRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest> __Marshaller_google_area120_tables_v1alpha1_BatchCreateRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse> __Marshaller_google_area120_tables_v1alpha1_BatchCreateRowsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest> __Marshaller_google_area120_tables_v1alpha1_UpdateRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest> __Marshaller_google_area120_tables_v1alpha1_BatchUpdateRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse> __Marshaller_google_area120_tables_v1alpha1_BatchUpdateRowsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest> __Marshaller_google_area120_tables_v1alpha1_DeleteRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest> __Marshaller_google_area120_tables_v1alpha1_BatchDeleteRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.GetTableRequest, global::Google.Area120.Tables.V1Alpha1.Table> __Method_GetTable = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.GetTableRequest, global::Google.Area120.Tables.V1Alpha1.Table>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTable",
        __Marshaller_google_area120_tables_v1alpha1_GetTableRequest,
        __Marshaller_google_area120_tables_v1alpha1_Table);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.ListTablesRequest, global::Google.Area120.Tables.V1Alpha1.ListTablesResponse> __Method_ListTables = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.ListTablesRequest, global::Google.Area120.Tables.V1Alpha1.ListTablesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTables",
        __Marshaller_google_area120_tables_v1alpha1_ListTablesRequest,
        __Marshaller_google_area120_tables_v1alpha1_ListTablesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest, global::Google.Area120.Tables.V1Alpha1.Workspace> __Method_GetWorkspace = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest, global::Google.Area120.Tables.V1Alpha1.Workspace>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkspace",
        __Marshaller_google_area120_tables_v1alpha1_GetWorkspaceRequest,
        __Marshaller_google_area120_tables_v1alpha1_Workspace);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest, global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse> __Method_ListWorkspaces = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest, global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkspaces",
        __Marshaller_google_area120_tables_v1alpha1_ListWorkspacesRequest,
        __Marshaller_google_area120_tables_v1alpha1_ListWorkspacesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.GetRowRequest, global::Google.Area120.Tables.V1Alpha1.Row> __Method_GetRow = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.GetRowRequest, global::Google.Area120.Tables.V1Alpha1.Row>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRow",
        __Marshaller_google_area120_tables_v1alpha1_GetRowRequest,
        __Marshaller_google_area120_tables_v1alpha1_Row);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.ListRowsRequest, global::Google.Area120.Tables.V1Alpha1.ListRowsResponse> __Method_ListRows = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.ListRowsRequest, global::Google.Area120.Tables.V1Alpha1.ListRowsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRows",
        __Marshaller_google_area120_tables_v1alpha1_ListRowsRequest,
        __Marshaller_google_area120_tables_v1alpha1_ListRowsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.CreateRowRequest, global::Google.Area120.Tables.V1Alpha1.Row> __Method_CreateRow = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.CreateRowRequest, global::Google.Area120.Tables.V1Alpha1.Row>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRow",
        __Marshaller_google_area120_tables_v1alpha1_CreateRowRequest,
        __Marshaller_google_area120_tables_v1alpha1_Row);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest, global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse> __Method_BatchCreateRows = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest, global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateRows",
        __Marshaller_google_area120_tables_v1alpha1_BatchCreateRowsRequest,
        __Marshaller_google_area120_tables_v1alpha1_BatchCreateRowsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest, global::Google.Area120.Tables.V1Alpha1.Row> __Method_UpdateRow = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest, global::Google.Area120.Tables.V1Alpha1.Row>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRow",
        __Marshaller_google_area120_tables_v1alpha1_UpdateRowRequest,
        __Marshaller_google_area120_tables_v1alpha1_Row);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest, global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse> __Method_BatchUpdateRows = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest, global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchUpdateRows",
        __Marshaller_google_area120_tables_v1alpha1_BatchUpdateRowsRequest,
        __Marshaller_google_area120_tables_v1alpha1_BatchUpdateRowsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteRow = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRow",
        __Marshaller_google_area120_tables_v1alpha1_DeleteRowRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_BatchDeleteRows = new grpc::Method<global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchDeleteRows",
        __Marshaller_google_area120_tables_v1alpha1_BatchDeleteRowsRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Area120.Tables.V1Alpha1.TablesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TablesService</summary>
    [grpc::BindServiceMethod(typeof(TablesService), "BindService")]
    public abstract partial class TablesServiceBase
    {
      /// <summary>
      /// Gets a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.Table> GetTable(global::Google.Area120.Tables.V1Alpha1.GetTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists tables for the user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.ListTablesResponse> ListTables(global::Google.Area120.Tables.V1Alpha1.ListTablesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.Workspace> GetWorkspace(global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists workspaces for the user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse> ListWorkspaces(global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a row. Returns NOT_FOUND if the row does not exist in the table.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.Row> GetRow(global::Google.Area120.Tables.V1Alpha1.GetRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists rows in a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.ListRowsResponse> ListRows(global::Google.Area120.Tables.V1Alpha1.ListRowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a row.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.Row> CreateRow(global::Google.Area120.Tables.V1Alpha1.CreateRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates multiple rows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse> BatchCreateRows(global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a row.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.Row> UpdateRow(global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates multiple rows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse> BatchUpdateRows(global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a row.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRow(global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes multiple rows.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> BatchDeleteRows(global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TablesService</summary>
    public partial class TablesServiceClient : grpc::ClientBase<TablesServiceClient>
    {
      /// <summary>Creates a new client for TablesService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TablesServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TablesService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TablesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TablesServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TablesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Table GetTable(global::Google.Area120.Tables.V1Alpha1.GetTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Table GetTable(global::Google.Area120.Tables.V1Alpha1.GetTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTable, null, options, request);
      }
      /// <summary>
      /// Gets a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Table> GetTableAsync(global::Google.Area120.Tables.V1Alpha1.GetTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Table> GetTableAsync(global::Google.Area120.Tables.V1Alpha1.GetTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTable, null, options, request);
      }
      /// <summary>
      /// Lists tables for the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.ListTablesResponse ListTables(global::Google.Area120.Tables.V1Alpha1.ListTablesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTables(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists tables for the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.ListTablesResponse ListTables(global::Google.Area120.Tables.V1Alpha1.ListTablesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTables, null, options, request);
      }
      /// <summary>
      /// Lists tables for the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.ListTablesResponse> ListTablesAsync(global::Google.Area120.Tables.V1Alpha1.ListTablesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTablesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists tables for the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.ListTablesResponse> ListTablesAsync(global::Google.Area120.Tables.V1Alpha1.ListTablesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTables, null, options, request);
      }
      /// <summary>
      /// Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Workspace GetWorkspace(global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Workspace GetWorkspace(global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkspace, null, options, request);
      }
      /// <summary>
      /// Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Workspace> GetWorkspaceAsync(global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkspaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Workspace> GetWorkspaceAsync(global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkspace, null, options, request);
      }
      /// <summary>
      /// Lists workspaces for the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse ListWorkspaces(global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkspaces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists workspaces for the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse ListWorkspaces(global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkspaces, null, options, request);
      }
      /// <summary>
      /// Lists workspaces for the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse> ListWorkspacesAsync(global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkspacesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists workspaces for the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse> ListWorkspacesAsync(global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkspaces, null, options, request);
      }
      /// <summary>
      /// Gets a row. Returns NOT_FOUND if the row does not exist in the table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Row GetRow(global::Google.Area120.Tables.V1Alpha1.GetRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a row. Returns NOT_FOUND if the row does not exist in the table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Row GetRow(global::Google.Area120.Tables.V1Alpha1.GetRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRow, null, options, request);
      }
      /// <summary>
      /// Gets a row. Returns NOT_FOUND if the row does not exist in the table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Row> GetRowAsync(global::Google.Area120.Tables.V1Alpha1.GetRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a row. Returns NOT_FOUND if the row does not exist in the table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Row> GetRowAsync(global::Google.Area120.Tables.V1Alpha1.GetRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRow, null, options, request);
      }
      /// <summary>
      /// Lists rows in a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.ListRowsResponse ListRows(global::Google.Area120.Tables.V1Alpha1.ListRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists rows in a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.ListRowsResponse ListRows(global::Google.Area120.Tables.V1Alpha1.ListRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRows, null, options, request);
      }
      /// <summary>
      /// Lists rows in a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.ListRowsResponse> ListRowsAsync(global::Google.Area120.Tables.V1Alpha1.ListRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists rows in a table. Returns NOT_FOUND if the table does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.ListRowsResponse> ListRowsAsync(global::Google.Area120.Tables.V1Alpha1.ListRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRows, null, options, request);
      }
      /// <summary>
      /// Creates a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Row CreateRow(global::Google.Area120.Tables.V1Alpha1.CreateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Row CreateRow(global::Google.Area120.Tables.V1Alpha1.CreateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRow, null, options, request);
      }
      /// <summary>
      /// Creates a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Row> CreateRowAsync(global::Google.Area120.Tables.V1Alpha1.CreateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Row> CreateRowAsync(global::Google.Area120.Tables.V1Alpha1.CreateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRow, null, options, request);
      }
      /// <summary>
      /// Creates multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse BatchCreateRows(global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse BatchCreateRows(global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateRows, null, options, request);
      }
      /// <summary>
      /// Creates multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse> BatchCreateRowsAsync(global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateRowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse> BatchCreateRowsAsync(global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateRows, null, options, request);
      }
      /// <summary>
      /// Updates a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Row UpdateRow(global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.Row UpdateRow(global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRow, null, options, request);
      }
      /// <summary>
      /// Updates a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Row> UpdateRowAsync(global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.Row> UpdateRowAsync(global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRow, null, options, request);
      }
      /// <summary>
      /// Updates multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse BatchUpdateRows(global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchUpdateRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse BatchUpdateRows(global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchUpdateRows, null, options, request);
      }
      /// <summary>
      /// Updates multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse> BatchUpdateRowsAsync(global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchUpdateRowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse> BatchUpdateRowsAsync(global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchUpdateRows, null, options, request);
      }
      /// <summary>
      /// Deletes a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteRow(global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteRow(global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRow, null, options, request);
      }
      /// <summary>
      /// Deletes a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRowAsync(global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a row.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRowAsync(global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRow, null, options, request);
      }
      /// <summary>
      /// Deletes multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty BatchDeleteRows(global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeleteRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty BatchDeleteRows(global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchDeleteRows, null, options, request);
      }
      /// <summary>
      /// Deletes multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> BatchDeleteRowsAsync(global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeleteRowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes multiple rows.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> BatchDeleteRowsAsync(global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchDeleteRows, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TablesServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TablesServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TablesServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetTable, serviceImpl.GetTable)
          .AddMethod(__Method_ListTables, serviceImpl.ListTables)
          .AddMethod(__Method_GetWorkspace, serviceImpl.GetWorkspace)
          .AddMethod(__Method_ListWorkspaces, serviceImpl.ListWorkspaces)
          .AddMethod(__Method_GetRow, serviceImpl.GetRow)
          .AddMethod(__Method_ListRows, serviceImpl.ListRows)
          .AddMethod(__Method_CreateRow, serviceImpl.CreateRow)
          .AddMethod(__Method_BatchCreateRows, serviceImpl.BatchCreateRows)
          .AddMethod(__Method_UpdateRow, serviceImpl.UpdateRow)
          .AddMethod(__Method_BatchUpdateRows, serviceImpl.BatchUpdateRows)
          .AddMethod(__Method_DeleteRow, serviceImpl.DeleteRow)
          .AddMethod(__Method_BatchDeleteRows, serviceImpl.BatchDeleteRows).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TablesServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.GetTableRequest, global::Google.Area120.Tables.V1Alpha1.Table>(serviceImpl.GetTable));
      serviceBinder.AddMethod(__Method_ListTables, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.ListTablesRequest, global::Google.Area120.Tables.V1Alpha1.ListTablesResponse>(serviceImpl.ListTables));
      serviceBinder.AddMethod(__Method_GetWorkspace, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.GetWorkspaceRequest, global::Google.Area120.Tables.V1Alpha1.Workspace>(serviceImpl.GetWorkspace));
      serviceBinder.AddMethod(__Method_ListWorkspaces, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.ListWorkspacesRequest, global::Google.Area120.Tables.V1Alpha1.ListWorkspacesResponse>(serviceImpl.ListWorkspaces));
      serviceBinder.AddMethod(__Method_GetRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.GetRowRequest, global::Google.Area120.Tables.V1Alpha1.Row>(serviceImpl.GetRow));
      serviceBinder.AddMethod(__Method_ListRows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.ListRowsRequest, global::Google.Area120.Tables.V1Alpha1.ListRowsResponse>(serviceImpl.ListRows));
      serviceBinder.AddMethod(__Method_CreateRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.CreateRowRequest, global::Google.Area120.Tables.V1Alpha1.Row>(serviceImpl.CreateRow));
      serviceBinder.AddMethod(__Method_BatchCreateRows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsRequest, global::Google.Area120.Tables.V1Alpha1.BatchCreateRowsResponse>(serviceImpl.BatchCreateRows));
      serviceBinder.AddMethod(__Method_UpdateRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.UpdateRowRequest, global::Google.Area120.Tables.V1Alpha1.Row>(serviceImpl.UpdateRow));
      serviceBinder.AddMethod(__Method_BatchUpdateRows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsRequest, global::Google.Area120.Tables.V1Alpha1.BatchUpdateRowsResponse>(serviceImpl.BatchUpdateRows));
      serviceBinder.AddMethod(__Method_DeleteRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.DeleteRowRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteRow));
      serviceBinder.AddMethod(__Method_BatchDeleteRows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Area120.Tables.V1Alpha1.BatchDeleteRowsRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.BatchDeleteRows));
    }

  }
}
#endregion
