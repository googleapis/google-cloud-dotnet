// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/spanner/admin/database/v1/spanner_database_admin.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Spanner.Admin.Database.V1 {
  /// <summary>
  /// Cloud Spanner Database Admin API
  ///
  /// The Cloud Spanner Database Admin API can be used to:
  ///   * create, drop, and list databases
  ///   * update the schema of pre-existing databases
  ///   * create, delete, copy and list backups for a database
  ///   * restore a database from an existing backup
  /// </summary>
  public static partial class DatabaseAdmin
  {
    static readonly string __ServiceName = "google.spanner.admin.database.v1.DatabaseAdmin";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest> __Marshaller_google_spanner_admin_database_v1_ListDatabasesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> __Marshaller_google_spanner_admin_database_v1_ListDatabasesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest> __Marshaller_google_spanner_admin_database_v1_CreateDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest> __Marshaller_google_spanner_admin_database_v1_GetDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.Database> __Marshaller_google_spanner_admin_database_v1_Database = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.Database.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest> __Marshaller_google_spanner_admin_database_v1_UpdateDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest> __Marshaller_google_spanner_admin_database_v1_UpdateDatabaseDdlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest> __Marshaller_google_spanner_admin_database_v1_DropDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest> __Marshaller_google_spanner_admin_database_v1_GetDatabaseDdlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> __Marshaller_google_spanner_admin_database_v1_GetDatabaseDdlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest> __Marshaller_google_spanner_admin_database_v1_CreateBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest> __Marshaller_google_spanner_admin_database_v1_CopyBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest> __Marshaller_google_spanner_admin_database_v1_GetBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.Backup> __Marshaller_google_spanner_admin_database_v1_Backup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.Backup.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest> __Marshaller_google_spanner_admin_database_v1_UpdateBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest> __Marshaller_google_spanner_admin_database_v1_DeleteBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest> __Marshaller_google_spanner_admin_database_v1_ListBackupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse> __Marshaller_google_spanner_admin_database_v1_ListBackupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest> __Marshaller_google_spanner_admin_database_v1_RestoreDatabaseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest> __Marshaller_google_spanner_admin_database_v1_ListDatabaseOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse> __Marshaller_google_spanner_admin_database_v1_ListDatabaseOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest> __Marshaller_google_spanner_admin_database_v1_ListBackupOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse> __Marshaller_google_spanner_admin_database_v1_ListBackupOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest> __Marshaller_google_spanner_admin_database_v1_ListDatabaseRolesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse> __Marshaller_google_spanner_admin_database_v1_ListDatabaseRolesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest> __Marshaller_google_spanner_admin_database_v1_AddSplitPointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse> __Marshaller_google_spanner_admin_database_v1_AddSplitPointsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest> __Marshaller_google_spanner_admin_database_v1_CreateBackupScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> __Marshaller_google_spanner_admin_database_v1_BackupSchedule = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest> __Marshaller_google_spanner_admin_database_v1_GetBackupScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest> __Marshaller_google_spanner_admin_database_v1_UpdateBackupScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest> __Marshaller_google_spanner_admin_database_v1_DeleteBackupScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest> __Marshaller_google_spanner_admin_database_v1_ListBackupSchedulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse> __Marshaller_google_spanner_admin_database_v1_ListBackupSchedulesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> __Method_ListDatabases = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatabases",
        __Marshaller_google_spanner_admin_database_v1_ListDatabasesRequest,
        __Marshaller_google_spanner_admin_database_v1_ListDatabasesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest, global::Google.LongRunning.Operation> __Method_CreateDatabase = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDatabase",
        __Marshaller_google_spanner_admin_database_v1_CreateDatabaseRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Database> __Method_GetDatabase = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Database>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatabase",
        __Marshaller_google_spanner_admin_database_v1_GetDatabaseRequest,
        __Marshaller_google_spanner_admin_database_v1_Database);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest, global::Google.LongRunning.Operation> __Method_UpdateDatabase = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDatabase",
        __Marshaller_google_spanner_admin_database_v1_UpdateDatabaseRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest, global::Google.LongRunning.Operation> __Method_UpdateDatabaseDdl = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDatabaseDdl",
        __Marshaller_google_spanner_admin_database_v1_UpdateDatabaseDdlRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DropDatabase = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DropDatabase",
        __Marshaller_google_spanner_admin_database_v1_DropDatabaseRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest, global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> __Method_GetDatabaseDdl = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest, global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatabaseDdl",
        __Marshaller_google_spanner_admin_database_v1_GetDatabaseDdlRequest,
        __Marshaller_google_spanner_admin_database_v1_GetDatabaseDdlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest, global::Google.LongRunning.Operation> __Method_CreateBackup = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBackup",
        __Marshaller_google_spanner_admin_database_v1_CreateBackupRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest, global::Google.LongRunning.Operation> __Method_CopyBackup = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyBackup",
        __Marshaller_google_spanner_admin_database_v1_CopyBackupRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Backup> __Method_GetBackup = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Backup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBackup",
        __Marshaller_google_spanner_admin_database_v1_GetBackupRequest,
        __Marshaller_google_spanner_admin_database_v1_Backup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Backup> __Method_UpdateBackup = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Backup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBackup",
        __Marshaller_google_spanner_admin_database_v1_UpdateBackupRequest,
        __Marshaller_google_spanner_admin_database_v1_Backup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteBackup = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBackup",
        __Marshaller_google_spanner_admin_database_v1_DeleteBackupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse> __Method_ListBackups = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBackups",
        __Marshaller_google_spanner_admin_database_v1_ListBackupsRequest,
        __Marshaller_google_spanner_admin_database_v1_ListBackupsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest, global::Google.LongRunning.Operation> __Method_RestoreDatabase = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestoreDatabase",
        __Marshaller_google_spanner_admin_database_v1_RestoreDatabaseRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse> __Method_ListDatabaseOperations = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatabaseOperations",
        __Marshaller_google_spanner_admin_database_v1_ListDatabaseOperationsRequest,
        __Marshaller_google_spanner_admin_database_v1_ListDatabaseOperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse> __Method_ListBackupOperations = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBackupOperations",
        __Marshaller_google_spanner_admin_database_v1_ListBackupOperationsRequest,
        __Marshaller_google_spanner_admin_database_v1_ListBackupOperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse> __Method_ListDatabaseRoles = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDatabaseRoles",
        __Marshaller_google_spanner_admin_database_v1_ListDatabaseRolesRequest,
        __Marshaller_google_spanner_admin_database_v1_ListDatabaseRolesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse> __Method_AddSplitPoints = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSplitPoints",
        __Marshaller_google_spanner_admin_database_v1_AddSplitPointsRequest,
        __Marshaller_google_spanner_admin_database_v1_AddSplitPointsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> __Method_CreateBackupSchedule = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBackupSchedule",
        __Marshaller_google_spanner_admin_database_v1_CreateBackupScheduleRequest,
        __Marshaller_google_spanner_admin_database_v1_BackupSchedule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> __Method_GetBackupSchedule = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBackupSchedule",
        __Marshaller_google_spanner_admin_database_v1_GetBackupScheduleRequest,
        __Marshaller_google_spanner_admin_database_v1_BackupSchedule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> __Method_UpdateBackupSchedule = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBackupSchedule",
        __Marshaller_google_spanner_admin_database_v1_UpdateBackupScheduleRequest,
        __Marshaller_google_spanner_admin_database_v1_BackupSchedule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteBackupSchedule = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBackupSchedule",
        __Marshaller_google_spanner_admin_database_v1_DeleteBackupScheduleRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse> __Method_ListBackupSchedules = new grpc::Method<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBackupSchedules",
        __Marshaller_google_spanner_admin_database_v1_ListBackupSchedulesRequest,
        __Marshaller_google_spanner_admin_database_v1_ListBackupSchedulesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Spanner.Admin.Database.V1.SpannerDatabaseAdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DatabaseAdmin</summary>
    [grpc::BindServiceMethod(typeof(DatabaseAdmin), "BindService")]
    public abstract partial class DatabaseAdminBase
    {
      /// <summary>
      /// Lists Cloud Spanner databases.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> ListDatabases(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new Cloud Spanner database and starts to prepare it for serving.
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      /// can be used to track preparation of the database. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the state of a Cloud Spanner database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.Database> GetDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a Cloud Spanner database. The returned
      /// [long-running operation][google.longrunning.Operation] can be used to track
      /// the progress of updating the database. If the named database does not
      /// exist, returns `NOT_FOUND`.
      ///
      /// While the operation is pending:
      ///
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field is set to true.
      ///   * Cancelling the operation is best-effort. If the cancellation succeeds,
      ///     the operation metadata's
      ///     [cancel_time][google.spanner.admin.database.v1.UpdateDatabaseMetadata.cancel_time]
      ///     is set, the updates are reverted, and the operation terminates with a
      ///     `CANCELLED` status.
      ///   * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error
      ///     until the pending operation is done (returns successfully or with
      ///     error).
      ///   * Reading the database via the API continues to give the pre-request
      ///     values.
      ///
      /// Upon completion of the returned operation:
      ///
      ///   * The new values are in effect and readable via the API.
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field becomes false.
      ///
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`
      /// and can be used to track the database modification. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseMetadata][google.spanner.admin.database.v1.UpdateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the schema of a Cloud Spanner database by
      /// creating/altering/dropping tables, columns, indexes, etc. The returned
      /// [long-running operation][google.longrunning.Operation] will have a name of
      /// the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      /// track execution of the schema change(s). The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].
      /// The operation has no response.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Drops (aka deletes) a Cloud Spanner database.
      /// Completed backups for the database will be retained according to their
      /// `expire_time`.
      /// Note: Cloud Spanner might continue to accept requests for a few seconds
      /// after the database has been deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DropDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the schema of a Cloud Spanner database as a list of formatted
      /// DDL statements. This method does not show pending schema updates, those may
      /// be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> GetDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on a database or backup resource.
      /// Replaces any existing policy.
      ///
      /// Authorization requires `spanner.databases.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a database or backup resource.
      /// Returns an empty policy if a database or backup exists but does not have a
      /// policy set.
      ///
      /// Authorization requires `spanner.databases.getIamPolicy` permission on
      /// [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.getIamPolicy`
      /// permission on [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that the caller has on the specified database or backup
      /// resource.
      ///
      /// Attempting this RPC on a non-existent Cloud Spanner database will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.databases.list` permission on the containing Cloud
      /// Spanner instance. Otherwise returns an empty set of permissions.
      /// Calling this method on a backup that does not exist will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.backups.list` permission on the containing instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts creating a new Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.spanner.admin.database.v1.CreateBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the creation and delete the
      /// backup. There can be only one pending backup creation per database. Backup
      /// creation of different databases can run concurrently.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateBackup(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts copying a Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track copying of the backup. The operation is associated
      /// with the destination backup.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [CopyBackupMetadata][google.spanner.admin.database.v1.CopyBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the copying and delete the
      /// destination backup. Concurrent CopyBackup requests can run on the same
      /// source backup.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CopyBackup(global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets metadata on a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.Backup> GetBackup(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.Backup> UpdateBackup(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackup(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists completed and pending backups.
      /// Backups returned are ordered by `create_time` in descending order,
      /// starting from the most recent `create_time`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse> ListBackups(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new database by restoring from a completed backup. The new
      /// database must be in the same project and in an instance with the same
      /// instance configuration as the instance containing
      /// the backup. The returned database [long-running
      /// operation][google.longrunning.Operation] has a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`,
      /// and can be used to track the progress of the operation, and to cancel it.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type
      /// is [Database][google.spanner.admin.database.v1.Database], if
      /// successful. Cancelling the returned operation will stop the restore and
      /// delete the database.
      /// There can be only one database being restored into an instance at a time.
      /// Once the restore operation completes, a new restore operation can be
      /// initiated, without waiting for the optimize operation associated with the
      /// first restore to complete.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RestoreDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists database [longrunning-operations][google.longrunning.Operation].
      /// A database operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse> ListDatabaseOperations(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the backup [long-running operations][google.longrunning.Operation] in
      /// the given instance. A backup operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations. Operations returned are ordered by
      /// `operation.metadata.value.progress.start_time` in descending order starting
      /// from the most recently started operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse> ListBackupOperations(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists Cloud Spanner database roles.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse> ListDatabaseRoles(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds split points to specified tables, indexes of a database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse> AddSplitPoints(global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new backup schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> CreateBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets backup schedule for the input schedule name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> GetBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> UpdateBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all the backup schedules for the database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse> ListBackupSchedules(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DatabaseAdmin</summary>
    public partial class DatabaseAdminClient : grpc::ClientBase<DatabaseAdminClient>
    {
      /// <summary>Creates a new client for DatabaseAdmin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DatabaseAdminClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DatabaseAdmin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DatabaseAdminClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DatabaseAdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DatabaseAdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists Cloud Spanner databases.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse ListDatabases(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Cloud Spanner databases.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse ListDatabases(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatabases, null, options, request);
      }
      /// <summary>
      /// Lists Cloud Spanner databases.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> ListDatabasesAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Cloud Spanner databases.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse> ListDatabasesAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatabases, null, options, request);
      }
      /// <summary>
      /// Creates a new Cloud Spanner database and starts to prepare it for serving.
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      /// can be used to track preparation of the database. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Cloud Spanner database and starts to prepare it for serving.
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      /// can be used to track preparation of the database. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      /// Creates a new Cloud Spanner database and starts to prepare it for serving.
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      /// can be used to track preparation of the database. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Cloud Spanner database and starts to prepare it for serving.
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format `&lt;database_name>/operations/&lt;operation_id>` and
      /// can be used to track preparation of the database. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDatabase, null, options, request);
      }
      /// <summary>
      /// Gets the state of a Cloud Spanner database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.Database GetDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the state of a Cloud Spanner database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.Database GetDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatabase, null, options, request);
      }
      /// <summary>
      /// Gets the state of a Cloud Spanner database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.Database> GetDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the state of a Cloud Spanner database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.Database> GetDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatabase, null, options, request);
      }
      /// <summary>
      /// Updates a Cloud Spanner database. The returned
      /// [long-running operation][google.longrunning.Operation] can be used to track
      /// the progress of updating the database. If the named database does not
      /// exist, returns `NOT_FOUND`.
      ///
      /// While the operation is pending:
      ///
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field is set to true.
      ///   * Cancelling the operation is best-effort. If the cancellation succeeds,
      ///     the operation metadata's
      ///     [cancel_time][google.spanner.admin.database.v1.UpdateDatabaseMetadata.cancel_time]
      ///     is set, the updates are reverted, and the operation terminates with a
      ///     `CANCELLED` status.
      ///   * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error
      ///     until the pending operation is done (returns successfully or with
      ///     error).
      ///   * Reading the database via the API continues to give the pre-request
      ///     values.
      ///
      /// Upon completion of the returned operation:
      ///
      ///   * The new values are in effect and readable via the API.
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field becomes false.
      ///
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`
      /// and can be used to track the database modification. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseMetadata][google.spanner.admin.database.v1.UpdateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Cloud Spanner database. The returned
      /// [long-running operation][google.longrunning.Operation] can be used to track
      /// the progress of updating the database. If the named database does not
      /// exist, returns `NOT_FOUND`.
      ///
      /// While the operation is pending:
      ///
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field is set to true.
      ///   * Cancelling the operation is best-effort. If the cancellation succeeds,
      ///     the operation metadata's
      ///     [cancel_time][google.spanner.admin.database.v1.UpdateDatabaseMetadata.cancel_time]
      ///     is set, the updates are reverted, and the operation terminates with a
      ///     `CANCELLED` status.
      ///   * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error
      ///     until the pending operation is done (returns successfully or with
      ///     error).
      ///   * Reading the database via the API continues to give the pre-request
      ///     values.
      ///
      /// Upon completion of the returned operation:
      ///
      ///   * The new values are in effect and readable via the API.
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field becomes false.
      ///
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`
      /// and can be used to track the database modification. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseMetadata][google.spanner.admin.database.v1.UpdateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDatabase, null, options, request);
      }
      /// <summary>
      /// Updates a Cloud Spanner database. The returned
      /// [long-running operation][google.longrunning.Operation] can be used to track
      /// the progress of updating the database. If the named database does not
      /// exist, returns `NOT_FOUND`.
      ///
      /// While the operation is pending:
      ///
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field is set to true.
      ///   * Cancelling the operation is best-effort. If the cancellation succeeds,
      ///     the operation metadata's
      ///     [cancel_time][google.spanner.admin.database.v1.UpdateDatabaseMetadata.cancel_time]
      ///     is set, the updates are reverted, and the operation terminates with a
      ///     `CANCELLED` status.
      ///   * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error
      ///     until the pending operation is done (returns successfully or with
      ///     error).
      ///   * Reading the database via the API continues to give the pre-request
      ///     values.
      ///
      /// Upon completion of the returned operation:
      ///
      ///   * The new values are in effect and readable via the API.
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field becomes false.
      ///
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`
      /// and can be used to track the database modification. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseMetadata][google.spanner.admin.database.v1.UpdateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Cloud Spanner database. The returned
      /// [long-running operation][google.longrunning.Operation] can be used to track
      /// the progress of updating the database. If the named database does not
      /// exist, returns `NOT_FOUND`.
      ///
      /// While the operation is pending:
      ///
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field is set to true.
      ///   * Cancelling the operation is best-effort. If the cancellation succeeds,
      ///     the operation metadata's
      ///     [cancel_time][google.spanner.admin.database.v1.UpdateDatabaseMetadata.cancel_time]
      ///     is set, the updates are reverted, and the operation terminates with a
      ///     `CANCELLED` status.
      ///   * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error
      ///     until the pending operation is done (returns successfully or with
      ///     error).
      ///   * Reading the database via the API continues to give the pre-request
      ///     values.
      ///
      /// Upon completion of the returned operation:
      ///
      ///   * The new values are in effect and readable via the API.
      ///   * The database's
      ///     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
      ///     field becomes false.
      ///
      /// The returned [long-running operation][google.longrunning.Operation] will
      /// have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`
      /// and can be used to track the database modification. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseMetadata][google.spanner.admin.database.v1.UpdateDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Database][google.spanner.admin.database.v1.Database], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDatabase, null, options, request);
      }
      /// <summary>
      /// Updates the schema of a Cloud Spanner database by
      /// creating/altering/dropping tables, columns, indexes, etc. The returned
      /// [long-running operation][google.longrunning.Operation] will have a name of
      /// the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      /// track execution of the schema change(s). The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].
      /// The operation has no response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatabaseDdl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the schema of a Cloud Spanner database by
      /// creating/altering/dropping tables, columns, indexes, etc. The returned
      /// [long-running operation][google.longrunning.Operation] will have a name of
      /// the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      /// track execution of the schema change(s). The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].
      /// The operation has no response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDatabaseDdl, null, options, request);
      }
      /// <summary>
      /// Updates the schema of a Cloud Spanner database by
      /// creating/altering/dropping tables, columns, indexes, etc. The returned
      /// [long-running operation][google.longrunning.Operation] will have a name of
      /// the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      /// track execution of the schema change(s). The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].
      /// The operation has no response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatabaseDdlAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatabaseDdlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the schema of a Cloud Spanner database by
      /// creating/altering/dropping tables, columns, indexes, etc. The returned
      /// [long-running operation][google.longrunning.Operation] will have a name of
      /// the format `&lt;database_name>/operations/&lt;operation_id>` and can be used to
      /// track execution of the schema change(s). The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].
      /// The operation has no response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatabaseDdlAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDatabaseDdl, null, options, request);
      }
      /// <summary>
      /// Drops (aka deletes) a Cloud Spanner database.
      /// Completed backups for the database will be retained according to their
      /// `expire_time`.
      /// Note: Cloud Spanner might continue to accept requests for a few seconds
      /// after the database has been deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DropDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DropDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Drops (aka deletes) a Cloud Spanner database.
      /// Completed backups for the database will be retained according to their
      /// `expire_time`.
      /// Note: Cloud Spanner might continue to accept requests for a few seconds
      /// after the database has been deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DropDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DropDatabase, null, options, request);
      }
      /// <summary>
      /// Drops (aka deletes) a Cloud Spanner database.
      /// Completed backups for the database will be retained according to their
      /// `expire_time`.
      /// Note: Cloud Spanner might continue to accept requests for a few seconds
      /// after the database has been deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DropDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DropDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Drops (aka deletes) a Cloud Spanner database.
      /// Completed backups for the database will be retained according to their
      /// `expire_time`.
      /// Note: Cloud Spanner might continue to accept requests for a few seconds
      /// after the database has been deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DropDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DropDatabase, null, options, request);
      }
      /// <summary>
      /// Returns the schema of a Cloud Spanner database as a list of formatted
      /// DDL statements. This method does not show pending schema updates, those may
      /// be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse GetDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabaseDdl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the schema of a Cloud Spanner database as a list of formatted
      /// DDL statements. This method does not show pending schema updates, those may
      /// be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse GetDatabaseDdl(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatabaseDdl, null, options, request);
      }
      /// <summary>
      /// Returns the schema of a Cloud Spanner database as a list of formatted
      /// DDL statements. This method does not show pending schema updates, those may
      /// be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> GetDatabaseDdlAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatabaseDdlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the schema of a Cloud Spanner database as a list of formatted
      /// DDL statements. This method does not show pending schema updates, those may
      /// be queried using the [Operations][google.longrunning.Operations] API.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse> GetDatabaseDdlAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatabaseDdl, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on a database or backup resource.
      /// Replaces any existing policy.
      ///
      /// Authorization requires `spanner.databases.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on a database or backup resource.
      /// Replaces any existing policy.
      ///
      /// Authorization requires `spanner.databases.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on a database or backup resource.
      /// Replaces any existing policy.
      ///
      /// Authorization requires `spanner.databases.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on a database or backup resource.
      /// Replaces any existing policy.
      ///
      /// Authorization requires `spanner.databases.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.setIamPolicy`
      /// permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a database or backup resource.
      /// Returns an empty policy if a database or backup exists but does not have a
      /// policy set.
      ///
      /// Authorization requires `spanner.databases.getIamPolicy` permission on
      /// [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.getIamPolicy`
      /// permission on [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a database or backup resource.
      /// Returns an empty policy if a database or backup exists but does not have a
      /// policy set.
      ///
      /// Authorization requires `spanner.databases.getIamPolicy` permission on
      /// [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.getIamPolicy`
      /// permission on [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a database or backup resource.
      /// Returns an empty policy if a database or backup exists but does not have a
      /// policy set.
      ///
      /// Authorization requires `spanner.databases.getIamPolicy` permission on
      /// [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.getIamPolicy`
      /// permission on [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a database or backup resource.
      /// Returns an empty policy if a database or backup exists but does not have a
      /// policy set.
      ///
      /// Authorization requires `spanner.databases.getIamPolicy` permission on
      /// [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// For backups, authorization requires `spanner.backups.getIamPolicy`
      /// permission on [resource][google.iam.v1.GetIamPolicyRequest.resource].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that the caller has on the specified database or backup
      /// resource.
      ///
      /// Attempting this RPC on a non-existent Cloud Spanner database will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.databases.list` permission on the containing Cloud
      /// Spanner instance. Otherwise returns an empty set of permissions.
      /// Calling this method on a backup that does not exist will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.backups.list` permission on the containing instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that the caller has on the specified database or backup
      /// resource.
      ///
      /// Attempting this RPC on a non-existent Cloud Spanner database will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.databases.list` permission on the containing Cloud
      /// Spanner instance. Otherwise returns an empty set of permissions.
      /// Calling this method on a backup that does not exist will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.backups.list` permission on the containing instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that the caller has on the specified database or backup
      /// resource.
      ///
      /// Attempting this RPC on a non-existent Cloud Spanner database will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.databases.list` permission on the containing Cloud
      /// Spanner instance. Otherwise returns an empty set of permissions.
      /// Calling this method on a backup that does not exist will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.backups.list` permission on the containing instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that the caller has on the specified database or backup
      /// resource.
      ///
      /// Attempting this RPC on a non-existent Cloud Spanner database will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.databases.list` permission on the containing Cloud
      /// Spanner instance. Otherwise returns an empty set of permissions.
      /// Calling this method on a backup that does not exist will
      /// result in a NOT_FOUND error if the user has
      /// `spanner.backups.list` permission on the containing instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Starts creating a new Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.spanner.admin.database.v1.CreateBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the creation and delete the
      /// backup. There can be only one pending backup creation per database. Backup
      /// creation of different databases can run concurrently.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateBackup(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts creating a new Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.spanner.admin.database.v1.CreateBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the creation and delete the
      /// backup. There can be only one pending backup creation per database. Backup
      /// creation of different databases can run concurrently.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateBackup(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBackup, null, options, request);
      }
      /// <summary>
      /// Starts creating a new Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.spanner.admin.database.v1.CreateBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the creation and delete the
      /// backup. There can be only one pending backup creation per database. Backup
      /// creation of different databases can run concurrently.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts creating a new Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.spanner.admin.database.v1.CreateBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the creation and delete the
      /// backup. There can be only one pending backup creation per database. Backup
      /// creation of different databases can run concurrently.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBackup, null, options, request);
      }
      /// <summary>
      /// Starts copying a Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track copying of the backup. The operation is associated
      /// with the destination backup.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [CopyBackupMetadata][google.spanner.admin.database.v1.CopyBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the copying and delete the
      /// destination backup. Concurrent CopyBackup requests can run on the same
      /// source backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CopyBackup(global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts copying a Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track copying of the backup. The operation is associated
      /// with the destination backup.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [CopyBackupMetadata][google.spanner.admin.database.v1.CopyBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the copying and delete the
      /// destination backup. Concurrent CopyBackup requests can run on the same
      /// source backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CopyBackup(global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyBackup, null, options, request);
      }
      /// <summary>
      /// Starts copying a Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track copying of the backup. The operation is associated
      /// with the destination backup.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [CopyBackupMetadata][google.spanner.admin.database.v1.CopyBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the copying and delete the
      /// destination backup. Concurrent CopyBackup requests can run on the same
      /// source backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CopyBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts copying a Cloud Spanner Backup.
      /// The returned backup [long-running operation][google.longrunning.Operation]
      /// will have a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation_id>`
      /// and can be used to track copying of the backup. The operation is associated
      /// with the destination backup.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [CopyBackupMetadata][google.spanner.admin.database.v1.CopyBackupMetadata].
      /// The [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.spanner.admin.database.v1.Backup], if successful.
      /// Cancelling the returned operation will stop the copying and delete the
      /// destination backup. Concurrent CopyBackup requests can run on the same
      /// source backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CopyBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyBackup, null, options, request);
      }
      /// <summary>
      /// Gets metadata on a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.Backup GetBackup(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata on a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.Backup GetBackup(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBackup, null, options, request);
      }
      /// <summary>
      /// Gets metadata on a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.Backup> GetBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata on a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.Backup> GetBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBackup, null, options, request);
      }
      /// <summary>
      /// Updates a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.Backup UpdateBackup(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.Backup UpdateBackup(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBackup, null, options, request);
      }
      /// <summary>
      /// Updates a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.Backup> UpdateBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.Backup> UpdateBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBackup, null, options, request);
      }
      /// <summary>
      /// Deletes a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackup(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackup(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBackup, null, options, request);
      }
      /// <summary>
      /// Deletes a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a pending or completed
      /// [Backup][google.spanner.admin.database.v1.Backup].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupAsync(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBackup, null, options, request);
      }
      /// <summary>
      /// Lists completed and pending backups.
      /// Backups returned are ordered by `create_time` in descending order,
      /// starting from the most recent `create_time`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse ListBackups(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists completed and pending backups.
      /// Backups returned are ordered by `create_time` in descending order,
      /// starting from the most recent `create_time`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse ListBackups(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBackups, null, options, request);
      }
      /// <summary>
      /// Lists completed and pending backups.
      /// Backups returned are ordered by `create_time` in descending order,
      /// starting from the most recent `create_time`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse> ListBackupsAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists completed and pending backups.
      /// Backups returned are ordered by `create_time` in descending order,
      /// starting from the most recent `create_time`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse> ListBackupsAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBackups, null, options, request);
      }
      /// <summary>
      /// Create a new database by restoring from a completed backup. The new
      /// database must be in the same project and in an instance with the same
      /// instance configuration as the instance containing
      /// the backup. The returned database [long-running
      /// operation][google.longrunning.Operation] has a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`,
      /// and can be used to track the progress of the operation, and to cancel it.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type
      /// is [Database][google.spanner.admin.database.v1.Database], if
      /// successful. Cancelling the returned operation will stop the restore and
      /// delete the database.
      /// There can be only one database being restored into an instance at a time.
      /// Once the restore operation completes, a new restore operation can be
      /// initiated, without waiting for the optimize operation associated with the
      /// first restore to complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreDatabase(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new database by restoring from a completed backup. The new
      /// database must be in the same project and in an instance with the same
      /// instance configuration as the instance containing
      /// the backup. The returned database [long-running
      /// operation][google.longrunning.Operation] has a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`,
      /// and can be used to track the progress of the operation, and to cancel it.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type
      /// is [Database][google.spanner.admin.database.v1.Database], if
      /// successful. Cancelling the returned operation will stop the restore and
      /// delete the database.
      /// There can be only one database being restored into an instance at a time.
      /// Once the restore operation completes, a new restore operation can be
      /// initiated, without waiting for the optimize operation associated with the
      /// first restore to complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreDatabase(global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestoreDatabase, null, options, request);
      }
      /// <summary>
      /// Create a new database by restoring from a completed backup. The new
      /// database must be in the same project and in an instance with the same
      /// instance configuration as the instance containing
      /// the backup. The returned database [long-running
      /// operation][google.longrunning.Operation] has a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`,
      /// and can be used to track the progress of the operation, and to cancel it.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type
      /// is [Database][google.spanner.admin.database.v1.Database], if
      /// successful. Cancelling the returned operation will stop the restore and
      /// delete the database.
      /// There can be only one database being restored into an instance at a time.
      /// Once the restore operation completes, a new restore operation can be
      /// initiated, without waiting for the optimize operation associated with the
      /// first restore to complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreDatabaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new database by restoring from a completed backup. The new
      /// database must be in the same project and in an instance with the same
      /// instance configuration as the instance containing
      /// the backup. The returned database [long-running
      /// operation][google.longrunning.Operation] has a name of the format
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation_id>`,
      /// and can be used to track the progress of the operation, and to cancel it.
      /// The [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata].
      /// The [response][google.longrunning.Operation.response] type
      /// is [Database][google.spanner.admin.database.v1.Database], if
      /// successful. Cancelling the returned operation will stop the restore and
      /// delete the database.
      /// There can be only one database being restored into an instance at a time.
      /// Once the restore operation completes, a new restore operation can be
      /// initiated, without waiting for the optimize operation associated with the
      /// first restore to complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreDatabaseAsync(global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestoreDatabase, null, options, request);
      }
      /// <summary>
      /// Lists database [longrunning-operations][google.longrunning.Operation].
      /// A database operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse ListDatabaseOperations(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabaseOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists database [longrunning-operations][google.longrunning.Operation].
      /// A database operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse ListDatabaseOperations(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatabaseOperations, null, options, request);
      }
      /// <summary>
      /// Lists database [longrunning-operations][google.longrunning.Operation].
      /// A database operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse> ListDatabaseOperationsAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabaseOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists database [longrunning-operations][google.longrunning.Operation].
      /// A database operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/databases/&lt;database>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse> ListDatabaseOperationsAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatabaseOperations, null, options, request);
      }
      /// <summary>
      /// Lists the backup [long-running operations][google.longrunning.Operation] in
      /// the given instance. A backup operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations. Operations returned are ordered by
      /// `operation.metadata.value.progress.start_time` in descending order starting
      /// from the most recently started operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse ListBackupOperations(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the backup [long-running operations][google.longrunning.Operation] in
      /// the given instance. A backup operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations. Operations returned are ordered by
      /// `operation.metadata.value.progress.start_time` in descending order starting
      /// from the most recently started operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse ListBackupOperations(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBackupOperations, null, options, request);
      }
      /// <summary>
      /// Lists the backup [long-running operations][google.longrunning.Operation] in
      /// the given instance. A backup operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations. Operations returned are ordered by
      /// `operation.metadata.value.progress.start_time` in descending order starting
      /// from the most recently started operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse> ListBackupOperationsAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the backup [long-running operations][google.longrunning.Operation] in
      /// the given instance. A backup operation has a name of the form
      /// `projects/&lt;project>/instances/&lt;instance>/backups/&lt;backup>/operations/&lt;operation>`.
      /// The long-running operation
      /// [metadata][google.longrunning.Operation.metadata] field type
      /// `metadata.type_url` describes the type of the metadata. Operations returned
      /// include those that have completed/failed/canceled within the last 7 days,
      /// and pending operations. Operations returned are ordered by
      /// `operation.metadata.value.progress.start_time` in descending order starting
      /// from the most recently started operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse> ListBackupOperationsAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBackupOperations, null, options, request);
      }
      /// <summary>
      /// Lists Cloud Spanner database roles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse ListDatabaseRoles(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabaseRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Cloud Spanner database roles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse ListDatabaseRoles(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDatabaseRoles, null, options, request);
      }
      /// <summary>
      /// Lists Cloud Spanner database roles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse> ListDatabaseRolesAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDatabaseRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Cloud Spanner database roles.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse> ListDatabaseRolesAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDatabaseRoles, null, options, request);
      }
      /// <summary>
      /// Adds split points to specified tables, indexes of a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse AddSplitPoints(global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSplitPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds split points to specified tables, indexes of a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse AddSplitPoints(global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSplitPoints, null, options, request);
      }
      /// <summary>
      /// Adds split points to specified tables, indexes of a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse> AddSplitPointsAsync(global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSplitPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds split points to specified tables, indexes of a database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse> AddSplitPointsAsync(global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSplitPoints, null, options, request);
      }
      /// <summary>
      /// Creates a new backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule CreateBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackupSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule CreateBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Creates a new backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> CreateBackupScheduleAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackupScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> CreateBackupScheduleAsync(global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Gets backup schedule for the input schedule name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule GetBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackupSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets backup schedule for the input schedule name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule GetBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Gets backup schedule for the input schedule name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> GetBackupScheduleAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackupScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets backup schedule for the input schedule name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> GetBackupScheduleAsync(global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule UpdateBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackupSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule UpdateBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> UpdateBackupScheduleAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackupScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule> UpdateBackupScheduleAsync(global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackupSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackupSchedule(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupScheduleAsync(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackupScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a backup schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupScheduleAsync(global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBackupSchedule, null, options, request);
      }
      /// <summary>
      /// Lists all the backup schedules for the database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse ListBackupSchedules(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupSchedules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the backup schedules for the database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse ListBackupSchedules(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBackupSchedules, null, options, request);
      }
      /// <summary>
      /// Lists all the backup schedules for the database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse> ListBackupSchedulesAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupSchedulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the backup schedules for the database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse> ListBackupSchedulesAsync(global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBackupSchedules, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DatabaseAdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DatabaseAdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DatabaseAdminBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListDatabases, serviceImpl.ListDatabases)
          .AddMethod(__Method_CreateDatabase, serviceImpl.CreateDatabase)
          .AddMethod(__Method_GetDatabase, serviceImpl.GetDatabase)
          .AddMethod(__Method_UpdateDatabase, serviceImpl.UpdateDatabase)
          .AddMethod(__Method_UpdateDatabaseDdl, serviceImpl.UpdateDatabaseDdl)
          .AddMethod(__Method_DropDatabase, serviceImpl.DropDatabase)
          .AddMethod(__Method_GetDatabaseDdl, serviceImpl.GetDatabaseDdl)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions)
          .AddMethod(__Method_CreateBackup, serviceImpl.CreateBackup)
          .AddMethod(__Method_CopyBackup, serviceImpl.CopyBackup)
          .AddMethod(__Method_GetBackup, serviceImpl.GetBackup)
          .AddMethod(__Method_UpdateBackup, serviceImpl.UpdateBackup)
          .AddMethod(__Method_DeleteBackup, serviceImpl.DeleteBackup)
          .AddMethod(__Method_ListBackups, serviceImpl.ListBackups)
          .AddMethod(__Method_RestoreDatabase, serviceImpl.RestoreDatabase)
          .AddMethod(__Method_ListDatabaseOperations, serviceImpl.ListDatabaseOperations)
          .AddMethod(__Method_ListBackupOperations, serviceImpl.ListBackupOperations)
          .AddMethod(__Method_ListDatabaseRoles, serviceImpl.ListDatabaseRoles)
          .AddMethod(__Method_AddSplitPoints, serviceImpl.AddSplitPoints)
          .AddMethod(__Method_CreateBackupSchedule, serviceImpl.CreateBackupSchedule)
          .AddMethod(__Method_GetBackupSchedule, serviceImpl.GetBackupSchedule)
          .AddMethod(__Method_UpdateBackupSchedule, serviceImpl.UpdateBackupSchedule)
          .AddMethod(__Method_DeleteBackupSchedule, serviceImpl.DeleteBackupSchedule)
          .AddMethod(__Method_ListBackupSchedules, serviceImpl.ListBackupSchedules).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DatabaseAdminBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListDatabases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabasesResponse>(serviceImpl.ListDatabases));
      serviceBinder.AddMethod(__Method_CreateDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.CreateDatabaseRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateDatabase));
      serviceBinder.AddMethod(__Method_GetDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Database>(serviceImpl.GetDatabase));
      serviceBinder.AddMethod(__Method_UpdateDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateDatabase));
      serviceBinder.AddMethod(__Method_UpdateDatabaseDdl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateDatabaseDdlRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateDatabaseDdl));
      serviceBinder.AddMethod(__Method_DropDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.DropDatabaseRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DropDatabase));
      serviceBinder.AddMethod(__Method_GetDatabaseDdl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlRequest, global::Google.Cloud.Spanner.Admin.Database.V1.GetDatabaseDdlResponse>(serviceImpl.GetDatabaseDdl));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(serviceImpl.TestIamPermissions));
      serviceBinder.AddMethod(__Method_CreateBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateBackup));
      serviceBinder.AddMethod(__Method_CopyBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.CopyBackupRequest, global::Google.LongRunning.Operation>(serviceImpl.CopyBackup));
      serviceBinder.AddMethod(__Method_GetBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Backup>(serviceImpl.GetBackup));
      serviceBinder.AddMethod(__Method_UpdateBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupRequest, global::Google.Cloud.Spanner.Admin.Database.V1.Backup>(serviceImpl.UpdateBackup));
      serviceBinder.AddMethod(__Method_DeleteBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteBackup));
      serviceBinder.AddMethod(__Method_ListBackups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupsResponse>(serviceImpl.ListBackups));
      serviceBinder.AddMethod(__Method_RestoreDatabase, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.RestoreDatabaseRequest, global::Google.LongRunning.Operation>(serviceImpl.RestoreDatabase));
      serviceBinder.AddMethod(__Method_ListDatabaseOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseOperationsResponse>(serviceImpl.ListDatabaseOperations));
      serviceBinder.AddMethod(__Method_ListBackupOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupOperationsResponse>(serviceImpl.ListBackupOperations));
      serviceBinder.AddMethod(__Method_ListDatabaseRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListDatabaseRolesResponse>(serviceImpl.ListDatabaseRoles));
      serviceBinder.AddMethod(__Method_AddSplitPoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsRequest, global::Google.Cloud.Spanner.Admin.Database.V1.AddSplitPointsResponse>(serviceImpl.AddSplitPoints));
      serviceBinder.AddMethod(__Method_CreateBackupSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.CreateBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule>(serviceImpl.CreateBackupSchedule));
      serviceBinder.AddMethod(__Method_GetBackupSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.GetBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule>(serviceImpl.GetBackupSchedule));
      serviceBinder.AddMethod(__Method_UpdateBackupSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.UpdateBackupScheduleRequest, global::Google.Cloud.Spanner.Admin.Database.V1.BackupSchedule>(serviceImpl.UpdateBackupSchedule));
      serviceBinder.AddMethod(__Method_DeleteBackupSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.DeleteBackupScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteBackupSchedule));
      serviceBinder.AddMethod(__Method_ListBackupSchedules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesRequest, global::Google.Cloud.Spanner.Admin.Database.V1.ListBackupSchedulesResponse>(serviceImpl.ListBackupSchedules));
    }

  }
}
#endregion
