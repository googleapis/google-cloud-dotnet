// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/monitoring/v3/uptime_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Monitoring.V3 {
  /// <summary>
  /// The UptimeCheckService API is used to manage (list, create, delete, edit)
  /// Uptime check configurations in the Cloud Monitoring product. An Uptime
  /// check is a piece of configuration that determines which resources and
  /// services to monitor for availability. These configurations can also be
  /// configured interactively by navigating to the [Cloud console]
  /// (https://console.cloud.google.com), selecting the appropriate project,
  /// clicking on "Monitoring" on the left-hand side to navigate to Cloud
  /// Monitoring, and then clicking on "Uptime".
  /// </summary>
  public static partial class UptimeCheckService
  {
    static readonly string __ServiceName = "google.monitoring.v3.UptimeCheckService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest> __Marshaller_google_monitoring_v3_ListUptimeCheckConfigsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse> __Marshaller_google_monitoring_v3_ListUptimeCheckConfigsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest> __Marshaller_google_monitoring_v3_GetUptimeCheckConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> __Marshaller_google_monitoring_v3_UptimeCheckConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest> __Marshaller_google_monitoring_v3_CreateUptimeCheckConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest> __Marshaller_google_monitoring_v3_UpdateUptimeCheckConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest> __Marshaller_google_monitoring_v3_DeleteUptimeCheckConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest> __Marshaller_google_monitoring_v3_ListUptimeCheckIpsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse> __Marshaller_google_monitoring_v3_ListUptimeCheckIpsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest, global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse> __Method_ListUptimeCheckConfigs = new grpc::Method<global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest, global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUptimeCheckConfigs",
        __Marshaller_google_monitoring_v3_ListUptimeCheckConfigsRequest,
        __Marshaller_google_monitoring_v3_ListUptimeCheckConfigsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> __Method_GetUptimeCheckConfig = new grpc::Method<global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUptimeCheckConfig",
        __Marshaller_google_monitoring_v3_GetUptimeCheckConfigRequest,
        __Marshaller_google_monitoring_v3_UptimeCheckConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> __Method_CreateUptimeCheckConfig = new grpc::Method<global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateUptimeCheckConfig",
        __Marshaller_google_monitoring_v3_CreateUptimeCheckConfigRequest,
        __Marshaller_google_monitoring_v3_UptimeCheckConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> __Method_UpdateUptimeCheckConfig = new grpc::Method<global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUptimeCheckConfig",
        __Marshaller_google_monitoring_v3_UpdateUptimeCheckConfigRequest,
        __Marshaller_google_monitoring_v3_UptimeCheckConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteUptimeCheckConfig = new grpc::Method<global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUptimeCheckConfig",
        __Marshaller_google_monitoring_v3_DeleteUptimeCheckConfigRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest, global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse> __Method_ListUptimeCheckIps = new grpc::Method<global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest, global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUptimeCheckIps",
        __Marshaller_google_monitoring_v3_ListUptimeCheckIpsRequest,
        __Marshaller_google_monitoring_v3_ListUptimeCheckIpsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Monitoring.V3.UptimeServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of UptimeCheckService</summary>
    [grpc::BindServiceMethod(typeof(UptimeCheckService), "BindService")]
    public abstract partial class UptimeCheckServiceBase
    {
      /// <summary>
      /// Lists the existing valid Uptime check configurations for the project
      /// (leaving out any invalid configurations).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse> ListUptimeCheckConfigs(global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a single Uptime check configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> GetUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new Uptime check configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> CreateUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an Uptime check configuration. You can either replace the entire
      /// configuration with a new one or replace only certain fields in the current
      /// configuration by specifying the fields to be updated via `updateMask`.
      /// Returns the updated configuration.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> UpdateUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an Uptime check configuration. Note that this method will fail
      /// if the Uptime check configuration is referenced by an alert policy or
      /// other dependent configs that would be rendered invalid by the deletion.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the list of IP addresses that checkers run from.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse> ListUptimeCheckIps(global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UptimeCheckService</summary>
    public partial class UptimeCheckServiceClient : grpc::ClientBase<UptimeCheckServiceClient>
    {
      /// <summary>Creates a new client for UptimeCheckService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public UptimeCheckServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UptimeCheckService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public UptimeCheckServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected UptimeCheckServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected UptimeCheckServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists the existing valid Uptime check configurations for the project
      /// (leaving out any invalid configurations).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse ListUptimeCheckConfigs(global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUptimeCheckConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the existing valid Uptime check configurations for the project
      /// (leaving out any invalid configurations).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse ListUptimeCheckConfigs(global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUptimeCheckConfigs, null, options, request);
      }
      /// <summary>
      /// Lists the existing valid Uptime check configurations for the project
      /// (leaving out any invalid configurations).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse> ListUptimeCheckConfigsAsync(global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUptimeCheckConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the existing valid Uptime check configurations for the project
      /// (leaving out any invalid configurations).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse> ListUptimeCheckConfigsAsync(global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUptimeCheckConfigs, null, options, request);
      }
      /// <summary>
      /// Gets a single Uptime check configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.UptimeCheckConfig GetUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUptimeCheckConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single Uptime check configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.UptimeCheckConfig GetUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUptimeCheckConfig, null, options, request);
      }
      /// <summary>
      /// Gets a single Uptime check configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> GetUptimeCheckConfigAsync(global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUptimeCheckConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single Uptime check configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> GetUptimeCheckConfigAsync(global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUptimeCheckConfig, null, options, request);
      }
      /// <summary>
      /// Creates a new Uptime check configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.UptimeCheckConfig CreateUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUptimeCheckConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Uptime check configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.UptimeCheckConfig CreateUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateUptimeCheckConfig, null, options, request);
      }
      /// <summary>
      /// Creates a new Uptime check configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> CreateUptimeCheckConfigAsync(global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUptimeCheckConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Uptime check configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> CreateUptimeCheckConfigAsync(global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateUptimeCheckConfig, null, options, request);
      }
      /// <summary>
      /// Updates an Uptime check configuration. You can either replace the entire
      /// configuration with a new one or replace only certain fields in the current
      /// configuration by specifying the fields to be updated via `updateMask`.
      /// Returns the updated configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.UptimeCheckConfig UpdateUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUptimeCheckConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an Uptime check configuration. You can either replace the entire
      /// configuration with a new one or replace only certain fields in the current
      /// configuration by specifying the fields to be updated via `updateMask`.
      /// Returns the updated configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.UptimeCheckConfig UpdateUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUptimeCheckConfig, null, options, request);
      }
      /// <summary>
      /// Updates an Uptime check configuration. You can either replace the entire
      /// configuration with a new one or replace only certain fields in the current
      /// configuration by specifying the fields to be updated via `updateMask`.
      /// Returns the updated configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> UpdateUptimeCheckConfigAsync(global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUptimeCheckConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an Uptime check configuration. You can either replace the entire
      /// configuration with a new one or replace only certain fields in the current
      /// configuration by specifying the fields to be updated via `updateMask`.
      /// Returns the updated configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.UptimeCheckConfig> UpdateUptimeCheckConfigAsync(global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUptimeCheckConfig, null, options, request);
      }
      /// <summary>
      /// Deletes an Uptime check configuration. Note that this method will fail
      /// if the Uptime check configuration is referenced by an alert policy or
      /// other dependent configs that would be rendered invalid by the deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUptimeCheckConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an Uptime check configuration. Note that this method will fail
      /// if the Uptime check configuration is referenced by an alert policy or
      /// other dependent configs that would be rendered invalid by the deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteUptimeCheckConfig(global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUptimeCheckConfig, null, options, request);
      }
      /// <summary>
      /// Deletes an Uptime check configuration. Note that this method will fail
      /// if the Uptime check configuration is referenced by an alert policy or
      /// other dependent configs that would be rendered invalid by the deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteUptimeCheckConfigAsync(global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUptimeCheckConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an Uptime check configuration. Note that this method will fail
      /// if the Uptime check configuration is referenced by an alert policy or
      /// other dependent configs that would be rendered invalid by the deletion.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteUptimeCheckConfigAsync(global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUptimeCheckConfig, null, options, request);
      }
      /// <summary>
      /// Returns the list of IP addresses that checkers run from.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse ListUptimeCheckIps(global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUptimeCheckIps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the list of IP addresses that checkers run from.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse ListUptimeCheckIps(global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUptimeCheckIps, null, options, request);
      }
      /// <summary>
      /// Returns the list of IP addresses that checkers run from.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse> ListUptimeCheckIpsAsync(global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUptimeCheckIpsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the list of IP addresses that checkers run from.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse> ListUptimeCheckIpsAsync(global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUptimeCheckIps, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override UptimeCheckServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UptimeCheckServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(UptimeCheckServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListUptimeCheckConfigs, serviceImpl.ListUptimeCheckConfigs)
          .AddMethod(__Method_GetUptimeCheckConfig, serviceImpl.GetUptimeCheckConfig)
          .AddMethod(__Method_CreateUptimeCheckConfig, serviceImpl.CreateUptimeCheckConfig)
          .AddMethod(__Method_UpdateUptimeCheckConfig, serviceImpl.UpdateUptimeCheckConfig)
          .AddMethod(__Method_DeleteUptimeCheckConfig, serviceImpl.DeleteUptimeCheckConfig)
          .AddMethod(__Method_ListUptimeCheckIps, serviceImpl.ListUptimeCheckIps).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UptimeCheckServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListUptimeCheckConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsRequest, global::Google.Cloud.Monitoring.V3.ListUptimeCheckConfigsResponse>(serviceImpl.ListUptimeCheckConfigs));
      serviceBinder.AddMethod(__Method_GetUptimeCheckConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.GetUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig>(serviceImpl.GetUptimeCheckConfig));
      serviceBinder.AddMethod(__Method_CreateUptimeCheckConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.CreateUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig>(serviceImpl.CreateUptimeCheckConfig));
      serviceBinder.AddMethod(__Method_UpdateUptimeCheckConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.UpdateUptimeCheckConfigRequest, global::Google.Cloud.Monitoring.V3.UptimeCheckConfig>(serviceImpl.UpdateUptimeCheckConfig));
      serviceBinder.AddMethod(__Method_DeleteUptimeCheckConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.DeleteUptimeCheckConfigRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteUptimeCheckConfig));
      serviceBinder.AddMethod(__Method_ListUptimeCheckIps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsRequest, global::Google.Cloud.Monitoring.V3.ListUptimeCheckIpsResponse>(serviceImpl.ListUptimeCheckIps));
    }

  }
}
#endregion
