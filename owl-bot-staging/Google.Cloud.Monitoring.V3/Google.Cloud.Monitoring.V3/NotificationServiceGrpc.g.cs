// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/monitoring/v3/notification_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Monitoring.V3 {
  /// <summary>
  /// The Notification Channel API provides access to configuration that
  /// controls how messages related to incidents are sent.
  /// </summary>
  public static partial class NotificationChannelService
  {
    static readonly string __ServiceName = "google.monitoring.v3.NotificationChannelService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest> __Marshaller_google_monitoring_v3_ListNotificationChannelDescriptorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse> __Marshaller_google_monitoring_v3_ListNotificationChannelDescriptorsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest> __Marshaller_google_monitoring_v3_GetNotificationChannelDescriptorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor> __Marshaller_google_monitoring_v3_NotificationChannelDescriptor = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest> __Marshaller_google_monitoring_v3_ListNotificationChannelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse> __Marshaller_google_monitoring_v3_ListNotificationChannelsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest> __Marshaller_google_monitoring_v3_GetNotificationChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.NotificationChannel> __Marshaller_google_monitoring_v3_NotificationChannel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.NotificationChannel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest> __Marshaller_google_monitoring_v3_CreateNotificationChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest> __Marshaller_google_monitoring_v3_UpdateNotificationChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest> __Marshaller_google_monitoring_v3_DeleteNotificationChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest> __Marshaller_google_monitoring_v3_SendNotificationChannelVerificationCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest> __Marshaller_google_monitoring_v3_GetNotificationChannelVerificationCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse> __Marshaller_google_monitoring_v3_GetNotificationChannelVerificationCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest> __Marshaller_google_monitoring_v3_VerifyNotificationChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest, global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse> __Method_ListNotificationChannelDescriptors = new grpc::Method<global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest, global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNotificationChannelDescriptors",
        __Marshaller_google_monitoring_v3_ListNotificationChannelDescriptorsRequest,
        __Marshaller_google_monitoring_v3_ListNotificationChannelDescriptorsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest, global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor> __Method_GetNotificationChannelDescriptor = new grpc::Method<global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest, global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNotificationChannelDescriptor",
        __Marshaller_google_monitoring_v3_GetNotificationChannelDescriptorRequest,
        __Marshaller_google_monitoring_v3_NotificationChannelDescriptor);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest, global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse> __Method_ListNotificationChannels = new grpc::Method<global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest, global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNotificationChannels",
        __Marshaller_google_monitoring_v3_ListNotificationChannelsRequest,
        __Marshaller_google_monitoring_v3_ListNotificationChannelsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel> __Method_GetNotificationChannel = new grpc::Method<global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNotificationChannel",
        __Marshaller_google_monitoring_v3_GetNotificationChannelRequest,
        __Marshaller_google_monitoring_v3_NotificationChannel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel> __Method_CreateNotificationChannel = new grpc::Method<global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNotificationChannel",
        __Marshaller_google_monitoring_v3_CreateNotificationChannelRequest,
        __Marshaller_google_monitoring_v3_NotificationChannel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel> __Method_UpdateNotificationChannel = new grpc::Method<global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNotificationChannel",
        __Marshaller_google_monitoring_v3_UpdateNotificationChannelRequest,
        __Marshaller_google_monitoring_v3_NotificationChannel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteNotificationChannel = new grpc::Method<global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNotificationChannel",
        __Marshaller_google_monitoring_v3_DeleteNotificationChannelRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SendNotificationChannelVerificationCode = new grpc::Method<global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendNotificationChannelVerificationCode",
        __Marshaller_google_monitoring_v3_SendNotificationChannelVerificationCodeRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest, global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse> __Method_GetNotificationChannelVerificationCode = new grpc::Method<global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest, global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNotificationChannelVerificationCode",
        __Marshaller_google_monitoring_v3_GetNotificationChannelVerificationCodeRequest,
        __Marshaller_google_monitoring_v3_GetNotificationChannelVerificationCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel> __Method_VerifyNotificationChannel = new grpc::Method<global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyNotificationChannel",
        __Marshaller_google_monitoring_v3_VerifyNotificationChannelRequest,
        __Marshaller_google_monitoring_v3_NotificationChannel);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Monitoring.V3.NotificationServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NotificationChannelService</summary>
    [grpc::BindServiceMethod(typeof(NotificationChannelService), "BindService")]
    public abstract partial class NotificationChannelServiceBase
    {
      /// <summary>
      /// Lists the descriptors for supported channel types. The use of descriptors
      /// makes it possible for new channel types to be dynamically added.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse> ListNotificationChannelDescriptors(global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a single channel descriptor. The descriptor indicates which fields
      /// are expected / permitted for a notification channel of the given type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor> GetNotificationChannelDescriptor(global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the notification channels that have been created for the project.
      /// To list the types of notification channels that are supported, use
      /// the `ListNotificationChannelDescriptors` method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse> ListNotificationChannels(global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a single notification channel. The channel includes the relevant
      /// configuration details with which the channel was created. However, the
      /// response may truncate or omit passwords, API keys, or other private key
      /// matter and thus the response may not be 100% identical to the information
      /// that was supplied in the call to the create method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.NotificationChannel> GetNotificationChannel(global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new notification channel, representing a single notification
      /// endpoint such as an email address, SMS number, or PagerDuty service.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.NotificationChannel> CreateNotificationChannel(global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a notification channel. Fields not specified in the field mask
      /// remain unchanged.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.NotificationChannel> UpdateNotificationChannel(global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a notification channel.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNotificationChannel(global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Causes a verification code to be delivered to the channel. The code
      /// can then be supplied in `VerifyNotificationChannel` to verify the channel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SendNotificationChannelVerificationCode(global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Requests a verification code for an already verified channel that can then
      /// be used in a call to VerifyNotificationChannel() on a different channel
      /// with an equivalent identity in the same or in a different project. This
      /// makes it possible to copy a channel between projects without requiring
      /// manual reverification of the channel. If the channel is not in the
      /// verified state, this method will fail (in other words, this may only be
      /// used if the SendNotificationChannelVerificationCode and
      /// VerifyNotificationChannel paths have already been used to put the given
      /// channel into the verified state).
      ///
      /// There is no guarantee that the verification codes returned by this method
      /// will be of a similar structure or form as the ones that are delivered
      /// to the channel via SendNotificationChannelVerificationCode; while
      /// VerifyNotificationChannel() will recognize both the codes delivered via
      /// SendNotificationChannelVerificationCode() and returned from
      /// GetNotificationChannelVerificationCode(), it is typically the case that
      /// the verification codes delivered via
      /// SendNotificationChannelVerificationCode() will be shorter and also
      /// have a shorter expiration (e.g. codes such as "G-123456") whereas
      /// GetVerificationCode() will typically return a much longer, websafe base
      /// 64 encoded string that has a longer expiration time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse> GetNotificationChannelVerificationCode(global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Verifies a `NotificationChannel` by proving receipt of the code
      /// delivered to the channel as a result of calling
      /// `SendNotificationChannelVerificationCode`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.NotificationChannel> VerifyNotificationChannel(global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NotificationChannelService</summary>
    public partial class NotificationChannelServiceClient : grpc::ClientBase<NotificationChannelServiceClient>
    {
      /// <summary>Creates a new client for NotificationChannelService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public NotificationChannelServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NotificationChannelService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public NotificationChannelServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected NotificationChannelServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected NotificationChannelServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists the descriptors for supported channel types. The use of descriptors
      /// makes it possible for new channel types to be dynamically added.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse ListNotificationChannelDescriptors(global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotificationChannelDescriptors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the descriptors for supported channel types. The use of descriptors
      /// makes it possible for new channel types to be dynamically added.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse ListNotificationChannelDescriptors(global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNotificationChannelDescriptors, null, options, request);
      }
      /// <summary>
      /// Lists the descriptors for supported channel types. The use of descriptors
      /// makes it possible for new channel types to be dynamically added.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse> ListNotificationChannelDescriptorsAsync(global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotificationChannelDescriptorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the descriptors for supported channel types. The use of descriptors
      /// makes it possible for new channel types to be dynamically added.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse> ListNotificationChannelDescriptorsAsync(global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNotificationChannelDescriptors, null, options, request);
      }
      /// <summary>
      /// Gets a single channel descriptor. The descriptor indicates which fields
      /// are expected / permitted for a notification channel of the given type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor GetNotificationChannelDescriptor(global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationChannelDescriptor(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single channel descriptor. The descriptor indicates which fields
      /// are expected / permitted for a notification channel of the given type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor GetNotificationChannelDescriptor(global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNotificationChannelDescriptor, null, options, request);
      }
      /// <summary>
      /// Gets a single channel descriptor. The descriptor indicates which fields
      /// are expected / permitted for a notification channel of the given type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor> GetNotificationChannelDescriptorAsync(global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationChannelDescriptorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single channel descriptor. The descriptor indicates which fields
      /// are expected / permitted for a notification channel of the given type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor> GetNotificationChannelDescriptorAsync(global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNotificationChannelDescriptor, null, options, request);
      }
      /// <summary>
      /// Lists the notification channels that have been created for the project.
      /// To list the types of notification channels that are supported, use
      /// the `ListNotificationChannelDescriptors` method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse ListNotificationChannels(global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotificationChannels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the notification channels that have been created for the project.
      /// To list the types of notification channels that are supported, use
      /// the `ListNotificationChannelDescriptors` method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse ListNotificationChannels(global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNotificationChannels, null, options, request);
      }
      /// <summary>
      /// Lists the notification channels that have been created for the project.
      /// To list the types of notification channels that are supported, use
      /// the `ListNotificationChannelDescriptors` method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse> ListNotificationChannelsAsync(global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotificationChannelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the notification channels that have been created for the project.
      /// To list the types of notification channels that are supported, use
      /// the `ListNotificationChannelDescriptors` method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse> ListNotificationChannelsAsync(global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNotificationChannels, null, options, request);
      }
      /// <summary>
      /// Gets a single notification channel. The channel includes the relevant
      /// configuration details with which the channel was created. However, the
      /// response may truncate or omit passwords, API keys, or other private key
      /// matter and thus the response may not be 100% identical to the information
      /// that was supplied in the call to the create method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannel GetNotificationChannel(global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single notification channel. The channel includes the relevant
      /// configuration details with which the channel was created. However, the
      /// response may truncate or omit passwords, API keys, or other private key
      /// matter and thus the response may not be 100% identical to the information
      /// that was supplied in the call to the create method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannel GetNotificationChannel(global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Gets a single notification channel. The channel includes the relevant
      /// configuration details with which the channel was created. However, the
      /// response may truncate or omit passwords, API keys, or other private key
      /// matter and thus the response may not be 100% identical to the information
      /// that was supplied in the call to the create method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannel> GetNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single notification channel. The channel includes the relevant
      /// configuration details with which the channel was created. However, the
      /// response may truncate or omit passwords, API keys, or other private key
      /// matter and thus the response may not be 100% identical to the information
      /// that was supplied in the call to the create method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannel> GetNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Creates a new notification channel, representing a single notification
      /// endpoint such as an email address, SMS number, or PagerDuty service.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannel CreateNotificationChannel(global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNotificationChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new notification channel, representing a single notification
      /// endpoint such as an email address, SMS number, or PagerDuty service.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannel CreateNotificationChannel(global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Creates a new notification channel, representing a single notification
      /// endpoint such as an email address, SMS number, or PagerDuty service.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannel> CreateNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNotificationChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new notification channel, representing a single notification
      /// endpoint such as an email address, SMS number, or PagerDuty service.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannel> CreateNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Updates a notification channel. Fields not specified in the field mask
      /// remain unchanged.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannel UpdateNotificationChannel(global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNotificationChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a notification channel. Fields not specified in the field mask
      /// remain unchanged.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannel UpdateNotificationChannel(global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Updates a notification channel. Fields not specified in the field mask
      /// remain unchanged.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannel> UpdateNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNotificationChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a notification channel. Fields not specified in the field mask
      /// remain unchanged.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannel> UpdateNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Deletes a notification channel.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNotificationChannel(global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNotificationChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a notification channel.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNotificationChannel(global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Deletes a notification channel.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNotificationChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a notification channel.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// notification channels in a single project. This includes calls to
      /// CreateNotificationChannel, DeleteNotificationChannel and
      /// UpdateNotificationChannel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Causes a verification code to be delivered to the channel. The code
      /// can then be supplied in `VerifyNotificationChannel` to verify the channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SendNotificationChannelVerificationCode(global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendNotificationChannelVerificationCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Causes a verification code to be delivered to the channel. The code
      /// can then be supplied in `VerifyNotificationChannel` to verify the channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SendNotificationChannelVerificationCode(global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendNotificationChannelVerificationCode, null, options, request);
      }
      /// <summary>
      /// Causes a verification code to be delivered to the channel. The code
      /// can then be supplied in `VerifyNotificationChannel` to verify the channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SendNotificationChannelVerificationCodeAsync(global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendNotificationChannelVerificationCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Causes a verification code to be delivered to the channel. The code
      /// can then be supplied in `VerifyNotificationChannel` to verify the channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SendNotificationChannelVerificationCodeAsync(global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendNotificationChannelVerificationCode, null, options, request);
      }
      /// <summary>
      /// Requests a verification code for an already verified channel that can then
      /// be used in a call to VerifyNotificationChannel() on a different channel
      /// with an equivalent identity in the same or in a different project. This
      /// makes it possible to copy a channel between projects without requiring
      /// manual reverification of the channel. If the channel is not in the
      /// verified state, this method will fail (in other words, this may only be
      /// used if the SendNotificationChannelVerificationCode and
      /// VerifyNotificationChannel paths have already been used to put the given
      /// channel into the verified state).
      ///
      /// There is no guarantee that the verification codes returned by this method
      /// will be of a similar structure or form as the ones that are delivered
      /// to the channel via SendNotificationChannelVerificationCode; while
      /// VerifyNotificationChannel() will recognize both the codes delivered via
      /// SendNotificationChannelVerificationCode() and returned from
      /// GetNotificationChannelVerificationCode(), it is typically the case that
      /// the verification codes delivered via
      /// SendNotificationChannelVerificationCode() will be shorter and also
      /// have a shorter expiration (e.g. codes such as "G-123456") whereas
      /// GetVerificationCode() will typically return a much longer, websafe base
      /// 64 encoded string that has a longer expiration time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse GetNotificationChannelVerificationCode(global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationChannelVerificationCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests a verification code for an already verified channel that can then
      /// be used in a call to VerifyNotificationChannel() on a different channel
      /// with an equivalent identity in the same or in a different project. This
      /// makes it possible to copy a channel between projects without requiring
      /// manual reverification of the channel. If the channel is not in the
      /// verified state, this method will fail (in other words, this may only be
      /// used if the SendNotificationChannelVerificationCode and
      /// VerifyNotificationChannel paths have already been used to put the given
      /// channel into the verified state).
      ///
      /// There is no guarantee that the verification codes returned by this method
      /// will be of a similar structure or form as the ones that are delivered
      /// to the channel via SendNotificationChannelVerificationCode; while
      /// VerifyNotificationChannel() will recognize both the codes delivered via
      /// SendNotificationChannelVerificationCode() and returned from
      /// GetNotificationChannelVerificationCode(), it is typically the case that
      /// the verification codes delivered via
      /// SendNotificationChannelVerificationCode() will be shorter and also
      /// have a shorter expiration (e.g. codes such as "G-123456") whereas
      /// GetVerificationCode() will typically return a much longer, websafe base
      /// 64 encoded string that has a longer expiration time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse GetNotificationChannelVerificationCode(global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNotificationChannelVerificationCode, null, options, request);
      }
      /// <summary>
      /// Requests a verification code for an already verified channel that can then
      /// be used in a call to VerifyNotificationChannel() on a different channel
      /// with an equivalent identity in the same or in a different project. This
      /// makes it possible to copy a channel between projects without requiring
      /// manual reverification of the channel. If the channel is not in the
      /// verified state, this method will fail (in other words, this may only be
      /// used if the SendNotificationChannelVerificationCode and
      /// VerifyNotificationChannel paths have already been used to put the given
      /// channel into the verified state).
      ///
      /// There is no guarantee that the verification codes returned by this method
      /// will be of a similar structure or form as the ones that are delivered
      /// to the channel via SendNotificationChannelVerificationCode; while
      /// VerifyNotificationChannel() will recognize both the codes delivered via
      /// SendNotificationChannelVerificationCode() and returned from
      /// GetNotificationChannelVerificationCode(), it is typically the case that
      /// the verification codes delivered via
      /// SendNotificationChannelVerificationCode() will be shorter and also
      /// have a shorter expiration (e.g. codes such as "G-123456") whereas
      /// GetVerificationCode() will typically return a much longer, websafe base
      /// 64 encoded string that has a longer expiration time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse> GetNotificationChannelVerificationCodeAsync(global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationChannelVerificationCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Requests a verification code for an already verified channel that can then
      /// be used in a call to VerifyNotificationChannel() on a different channel
      /// with an equivalent identity in the same or in a different project. This
      /// makes it possible to copy a channel between projects without requiring
      /// manual reverification of the channel. If the channel is not in the
      /// verified state, this method will fail (in other words, this may only be
      /// used if the SendNotificationChannelVerificationCode and
      /// VerifyNotificationChannel paths have already been used to put the given
      /// channel into the verified state).
      ///
      /// There is no guarantee that the verification codes returned by this method
      /// will be of a similar structure or form as the ones that are delivered
      /// to the channel via SendNotificationChannelVerificationCode; while
      /// VerifyNotificationChannel() will recognize both the codes delivered via
      /// SendNotificationChannelVerificationCode() and returned from
      /// GetNotificationChannelVerificationCode(), it is typically the case that
      /// the verification codes delivered via
      /// SendNotificationChannelVerificationCode() will be shorter and also
      /// have a shorter expiration (e.g. codes such as "G-123456") whereas
      /// GetVerificationCode() will typically return a much longer, websafe base
      /// 64 encoded string that has a longer expiration time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse> GetNotificationChannelVerificationCodeAsync(global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNotificationChannelVerificationCode, null, options, request);
      }
      /// <summary>
      /// Verifies a `NotificationChannel` by proving receipt of the code
      /// delivered to the channel as a result of calling
      /// `SendNotificationChannelVerificationCode`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannel VerifyNotificationChannel(global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyNotificationChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verifies a `NotificationChannel` by proving receipt of the code
      /// delivered to the channel as a result of calling
      /// `SendNotificationChannelVerificationCode`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.NotificationChannel VerifyNotificationChannel(global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyNotificationChannel, null, options, request);
      }
      /// <summary>
      /// Verifies a `NotificationChannel` by proving receipt of the code
      /// delivered to the channel as a result of calling
      /// `SendNotificationChannelVerificationCode`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannel> VerifyNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyNotificationChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verifies a `NotificationChannel` by proving receipt of the code
      /// delivered to the channel as a result of calling
      /// `SendNotificationChannelVerificationCode`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.NotificationChannel> VerifyNotificationChannelAsync(global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyNotificationChannel, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override NotificationChannelServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NotificationChannelServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(NotificationChannelServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListNotificationChannelDescriptors, serviceImpl.ListNotificationChannelDescriptors)
          .AddMethod(__Method_GetNotificationChannelDescriptor, serviceImpl.GetNotificationChannelDescriptor)
          .AddMethod(__Method_ListNotificationChannels, serviceImpl.ListNotificationChannels)
          .AddMethod(__Method_GetNotificationChannel, serviceImpl.GetNotificationChannel)
          .AddMethod(__Method_CreateNotificationChannel, serviceImpl.CreateNotificationChannel)
          .AddMethod(__Method_UpdateNotificationChannel, serviceImpl.UpdateNotificationChannel)
          .AddMethod(__Method_DeleteNotificationChannel, serviceImpl.DeleteNotificationChannel)
          .AddMethod(__Method_SendNotificationChannelVerificationCode, serviceImpl.SendNotificationChannelVerificationCode)
          .AddMethod(__Method_GetNotificationChannelVerificationCode, serviceImpl.GetNotificationChannelVerificationCode)
          .AddMethod(__Method_VerifyNotificationChannel, serviceImpl.VerifyNotificationChannel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NotificationChannelServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListNotificationChannelDescriptors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsRequest, global::Google.Cloud.Monitoring.V3.ListNotificationChannelDescriptorsResponse>(serviceImpl.ListNotificationChannelDescriptors));
      serviceBinder.AddMethod(__Method_GetNotificationChannelDescriptor, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.GetNotificationChannelDescriptorRequest, global::Google.Cloud.Monitoring.V3.NotificationChannelDescriptor>(serviceImpl.GetNotificationChannelDescriptor));
      serviceBinder.AddMethod(__Method_ListNotificationChannels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.ListNotificationChannelsRequest, global::Google.Cloud.Monitoring.V3.ListNotificationChannelsResponse>(serviceImpl.ListNotificationChannels));
      serviceBinder.AddMethod(__Method_GetNotificationChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.GetNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel>(serviceImpl.GetNotificationChannel));
      serviceBinder.AddMethod(__Method_CreateNotificationChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.CreateNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel>(serviceImpl.CreateNotificationChannel));
      serviceBinder.AddMethod(__Method_UpdateNotificationChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.UpdateNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel>(serviceImpl.UpdateNotificationChannel));
      serviceBinder.AddMethod(__Method_DeleteNotificationChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.DeleteNotificationChannelRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteNotificationChannel));
      serviceBinder.AddMethod(__Method_SendNotificationChannelVerificationCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.SendNotificationChannelVerificationCodeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SendNotificationChannelVerificationCode));
      serviceBinder.AddMethod(__Method_GetNotificationChannelVerificationCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeRequest, global::Google.Cloud.Monitoring.V3.GetNotificationChannelVerificationCodeResponse>(serviceImpl.GetNotificationChannelVerificationCode));
      serviceBinder.AddMethod(__Method_VerifyNotificationChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.VerifyNotificationChannelRequest, global::Google.Cloud.Monitoring.V3.NotificationChannel>(serviceImpl.VerifyNotificationChannel));
    }

  }
}
#endregion
