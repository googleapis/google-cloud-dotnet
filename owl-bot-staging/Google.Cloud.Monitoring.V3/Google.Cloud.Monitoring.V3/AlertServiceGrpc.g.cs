// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/monitoring/v3/alert_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Monitoring.V3 {
  /// <summary>
  /// The AlertPolicyService API is used to manage (list, create, delete,
  /// edit) alert policies in Cloud Monitoring. An alerting policy is
  /// a description of the conditions under which some aspect of your
  /// system is considered to be "unhealthy" and the ways to notify
  /// people or services about this state. In addition to using this API, alert
  /// policies can also be managed through
  /// [Cloud Monitoring](https://cloud.google.com/monitoring/docs/),
  /// which can be reached by clicking the "Monitoring" tab in
  /// [Cloud console](https://console.cloud.google.com/).
  /// </summary>
  public static partial class AlertPolicyService
  {
    static readonly string __ServiceName = "google.monitoring.v3.AlertPolicyService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest> __Marshaller_google_monitoring_v3_ListAlertPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse> __Marshaller_google_monitoring_v3_ListAlertPoliciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest> __Marshaller_google_monitoring_v3_GetAlertPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.AlertPolicy> __Marshaller_google_monitoring_v3_AlertPolicy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.AlertPolicy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest> __Marshaller_google_monitoring_v3_CreateAlertPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest> __Marshaller_google_monitoring_v3_DeleteAlertPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest> __Marshaller_google_monitoring_v3_UpdateAlertPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest, global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse> __Method_ListAlertPolicies = new grpc::Method<global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest, global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAlertPolicies",
        __Marshaller_google_monitoring_v3_ListAlertPoliciesRequest,
        __Marshaller_google_monitoring_v3_ListAlertPoliciesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy> __Method_GetAlertPolicy = new grpc::Method<global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAlertPolicy",
        __Marshaller_google_monitoring_v3_GetAlertPolicyRequest,
        __Marshaller_google_monitoring_v3_AlertPolicy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy> __Method_CreateAlertPolicy = new grpc::Method<global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAlertPolicy",
        __Marshaller_google_monitoring_v3_CreateAlertPolicyRequest,
        __Marshaller_google_monitoring_v3_AlertPolicy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAlertPolicy = new grpc::Method<global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAlertPolicy",
        __Marshaller_google_monitoring_v3_DeleteAlertPolicyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy> __Method_UpdateAlertPolicy = new grpc::Method<global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAlertPolicy",
        __Marshaller_google_monitoring_v3_UpdateAlertPolicyRequest,
        __Marshaller_google_monitoring_v3_AlertPolicy);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Monitoring.V3.AlertServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AlertPolicyService</summary>
    [grpc::BindServiceMethod(typeof(AlertPolicyService), "BindService")]
    public abstract partial class AlertPolicyServiceBase
    {
      /// <summary>
      /// Lists the existing alerting policies for the workspace.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse> ListAlertPolicies(global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a single alerting policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.AlertPolicy> GetAlertPolicy(global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.AlertPolicy> CreateAlertPolicy(global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAlertPolicy(global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an alerting policy. You can either replace the entire policy with
      /// a new one or replace only certain fields in the current alerting policy by
      /// specifying the fields to be updated via `updateMask`. Returns the
      /// updated alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Monitoring.V3.AlertPolicy> UpdateAlertPolicy(global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AlertPolicyService</summary>
    public partial class AlertPolicyServiceClient : grpc::ClientBase<AlertPolicyServiceClient>
    {
      /// <summary>Creates a new client for AlertPolicyService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AlertPolicyServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AlertPolicyService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AlertPolicyServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AlertPolicyServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AlertPolicyServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists the existing alerting policies for the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse ListAlertPolicies(global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAlertPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the existing alerting policies for the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse ListAlertPolicies(global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAlertPolicies, null, options, request);
      }
      /// <summary>
      /// Lists the existing alerting policies for the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse> ListAlertPoliciesAsync(global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAlertPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the existing alerting policies for the workspace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse> ListAlertPoliciesAsync(global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAlertPolicies, null, options, request);
      }
      /// <summary>
      /// Gets a single alerting policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.AlertPolicy GetAlertPolicy(global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAlertPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single alerting policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.AlertPolicy GetAlertPolicy(global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAlertPolicy, null, options, request);
      }
      /// <summary>
      /// Gets a single alerting policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.AlertPolicy> GetAlertPolicyAsync(global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAlertPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single alerting policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.AlertPolicy> GetAlertPolicyAsync(global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAlertPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a new alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.AlertPolicy CreateAlertPolicy(global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAlertPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.AlertPolicy CreateAlertPolicy(global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAlertPolicy, null, options, request);
      }
      /// <summary>
      /// Creates a new alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.AlertPolicy> CreateAlertPolicyAsync(global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAlertPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.AlertPolicy> CreateAlertPolicyAsync(global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAlertPolicy, null, options, request);
      }
      /// <summary>
      /// Deletes an alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAlertPolicy(global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAlertPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAlertPolicy(global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAlertPolicy, null, options, request);
      }
      /// <summary>
      /// Deletes an alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAlertPolicyAsync(global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAlertPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAlertPolicyAsync(global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAlertPolicy, null, options, request);
      }
      /// <summary>
      /// Updates an alerting policy. You can either replace the entire policy with
      /// a new one or replace only certain fields in the current alerting policy by
      /// specifying the fields to be updated via `updateMask`. Returns the
      /// updated alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.AlertPolicy UpdateAlertPolicy(global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAlertPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an alerting policy. You can either replace the entire policy with
      /// a new one or replace only certain fields in the current alerting policy by
      /// specifying the fields to be updated via `updateMask`. Returns the
      /// updated alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Monitoring.V3.AlertPolicy UpdateAlertPolicy(global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAlertPolicy, null, options, request);
      }
      /// <summary>
      /// Updates an alerting policy. You can either replace the entire policy with
      /// a new one or replace only certain fields in the current alerting policy by
      /// specifying the fields to be updated via `updateMask`. Returns the
      /// updated alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.AlertPolicy> UpdateAlertPolicyAsync(global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAlertPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an alerting policy. You can either replace the entire policy with
      /// a new one or replace only certain fields in the current alerting policy by
      /// specifying the fields to be updated via `updateMask`. Returns the
      /// updated alerting policy.
      ///
      /// Design your application to single-thread API calls that modify the state of
      /// alerting policies in a single project. This includes calls to
      /// CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Monitoring.V3.AlertPolicy> UpdateAlertPolicyAsync(global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAlertPolicy, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AlertPolicyServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AlertPolicyServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AlertPolicyServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListAlertPolicies, serviceImpl.ListAlertPolicies)
          .AddMethod(__Method_GetAlertPolicy, serviceImpl.GetAlertPolicy)
          .AddMethod(__Method_CreateAlertPolicy, serviceImpl.CreateAlertPolicy)
          .AddMethod(__Method_DeleteAlertPolicy, serviceImpl.DeleteAlertPolicy)
          .AddMethod(__Method_UpdateAlertPolicy, serviceImpl.UpdateAlertPolicy).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AlertPolicyServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListAlertPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.ListAlertPoliciesRequest, global::Google.Cloud.Monitoring.V3.ListAlertPoliciesResponse>(serviceImpl.ListAlertPolicies));
      serviceBinder.AddMethod(__Method_GetAlertPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.GetAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy>(serviceImpl.GetAlertPolicy));
      serviceBinder.AddMethod(__Method_CreateAlertPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.CreateAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy>(serviceImpl.CreateAlertPolicy));
      serviceBinder.AddMethod(__Method_DeleteAlertPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.DeleteAlertPolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteAlertPolicy));
      serviceBinder.AddMethod(__Method_UpdateAlertPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Monitoring.V3.UpdateAlertPolicyRequest, global::Google.Cloud.Monitoring.V3.AlertPolicy>(serviceImpl.UpdateAlertPolicy));
    }

  }
}
#endregion
