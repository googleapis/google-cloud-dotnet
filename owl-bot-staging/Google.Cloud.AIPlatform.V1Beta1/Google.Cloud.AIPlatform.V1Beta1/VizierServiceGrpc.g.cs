// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/aiplatform/v1beta1/vizier_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.AIPlatform.V1Beta1 {
  /// <summary>
  /// Vertex AI Vizier API.
  ///
  /// Vertex AI Vizier is a service to solve blackbox optimization problems,
  /// such as tuning machine learning hyperparameters and searching over deep
  /// learning architectures.
  /// </summary>
  public static partial class VizierService
  {
    static readonly string __ServiceName = "google.cloud.aiplatform.v1beta1.VizierService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest> __Marshaller_google_cloud_aiplatform_v1beta1_CreateStudyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.Study> __Marshaller_google_cloud_aiplatform_v1beta1_Study = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.Study.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest> __Marshaller_google_cloud_aiplatform_v1beta1_GetStudyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest> __Marshaller_google_cloud_aiplatform_v1beta1_ListStudiesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse> __Marshaller_google_cloud_aiplatform_v1beta1_ListStudiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest> __Marshaller_google_cloud_aiplatform_v1beta1_DeleteStudyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest> __Marshaller_google_cloud_aiplatform_v1beta1_LookupStudyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest> __Marshaller_google_cloud_aiplatform_v1beta1_SuggestTrialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest> __Marshaller_google_cloud_aiplatform_v1beta1_CreateTrialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.Trial> __Marshaller_google_cloud_aiplatform_v1beta1_Trial = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.Trial.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest> __Marshaller_google_cloud_aiplatform_v1beta1_GetTrialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest> __Marshaller_google_cloud_aiplatform_v1beta1_ListTrialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse> __Marshaller_google_cloud_aiplatform_v1beta1_ListTrialsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest> __Marshaller_google_cloud_aiplatform_v1beta1_AddTrialMeasurementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest> __Marshaller_google_cloud_aiplatform_v1beta1_CompleteTrialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest> __Marshaller_google_cloud_aiplatform_v1beta1_DeleteTrialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest> __Marshaller_google_cloud_aiplatform_v1beta1_CheckTrialEarlyStoppingStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest> __Marshaller_google_cloud_aiplatform_v1beta1_StopTrialRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest> __Marshaller_google_cloud_aiplatform_v1beta1_ListOptimalTrialsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse> __Marshaller_google_cloud_aiplatform_v1beta1_ListOptimalTrialsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study> __Method_CreateStudy = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateStudy",
        __Marshaller_google_cloud_aiplatform_v1beta1_CreateStudyRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_Study);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study> __Method_GetStudy = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStudy",
        __Marshaller_google_cloud_aiplatform_v1beta1_GetStudyRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_Study);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse> __Method_ListStudies = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListStudies",
        __Marshaller_google_cloud_aiplatform_v1beta1_ListStudiesRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_ListStudiesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteStudy = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteStudy",
        __Marshaller_google_cloud_aiplatform_v1beta1_DeleteStudyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study> __Method_LookupStudy = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookupStudy",
        __Marshaller_google_cloud_aiplatform_v1beta1_LookupStudyRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_Study);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest, global::Google.LongRunning.Operation> __Method_SuggestTrials = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SuggestTrials",
        __Marshaller_google_cloud_aiplatform_v1beta1_SuggestTrialsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial> __Method_CreateTrial = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTrial",
        __Marshaller_google_cloud_aiplatform_v1beta1_CreateTrialRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_Trial);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial> __Method_GetTrial = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTrial",
        __Marshaller_google_cloud_aiplatform_v1beta1_GetTrialRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_Trial);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse> __Method_ListTrials = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTrials",
        __Marshaller_google_cloud_aiplatform_v1beta1_ListTrialsRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_ListTrialsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial> __Method_AddTrialMeasurement = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTrialMeasurement",
        __Marshaller_google_cloud_aiplatform_v1beta1_AddTrialMeasurementRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_Trial);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial> __Method_CompleteTrial = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CompleteTrial",
        __Marshaller_google_cloud_aiplatform_v1beta1_CompleteTrialRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_Trial);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTrial = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTrial",
        __Marshaller_google_cloud_aiplatform_v1beta1_DeleteTrialRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest, global::Google.LongRunning.Operation> __Method_CheckTrialEarlyStoppingState = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckTrialEarlyStoppingState",
        __Marshaller_google_cloud_aiplatform_v1beta1_CheckTrialEarlyStoppingStateRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial> __Method_StopTrial = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopTrial",
        __Marshaller_google_cloud_aiplatform_v1beta1_StopTrialRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_Trial);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse> __Method_ListOptimalTrials = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOptimalTrials",
        __Marshaller_google_cloud_aiplatform_v1beta1_ListOptimalTrialsRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_ListOptimalTrialsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.AIPlatform.V1Beta1.VizierServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VizierService</summary>
    [grpc::BindServiceMethod(typeof(VizierService), "BindService")]
    public abstract partial class VizierServiceBase
    {
      /// <summary>
      /// Creates a Study. A resource name will be generated after creation of the
      /// Study.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.Study> CreateStudy(global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a Study by name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.Study> GetStudy(global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all the studies in a region for an associated project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse> ListStudies(global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a Study.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteStudy(global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Looks a study up using the user-defined display_name field instead of the
      /// fully qualified resource name.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.Study> LookupStudy(global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds one or more Trials to a Study, with parameter values
      /// suggested by Vertex AI Vizier. Returns a long-running
      /// operation associated with the generation of Trial suggestions.
      /// When this long-running operation succeeds, it will contain
      /// a
      /// [SuggestTrialsResponse][google.cloud.aiplatform.v1beta1.SuggestTrialsResponse].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> SuggestTrials(global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds a user provided Trial to a Study.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.Trial> CreateTrial(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a Trial.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.Trial> GetTrial(global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the Trials associated with a Study.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse> ListTrials(global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds a measurement of the objective metrics to a Trial. This measurement
      /// is assumed to have been taken before the Trial is complete.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.Trial> AddTrialMeasurement(global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Marks a Trial as complete.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.Trial> CompleteTrial(global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a Trial.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTrial(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks  whether a Trial should stop or not. Returns a
      /// long-running operation. When the operation is successful,
      /// it will contain a
      /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1beta1.CheckTrialEarlyStoppingStateResponse].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CheckTrialEarlyStoppingState(global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stops a Trial.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.Trial> StopTrial(global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the pareto-optimal Trials for multi-objective Study or the
      /// optimal Trials for single-objective Study. The definition of
      /// pareto-optimal can be checked in wiki page.
      /// https://en.wikipedia.org/wiki/Pareto_efficiency
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse> ListOptimalTrials(global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VizierService</summary>
    public partial class VizierServiceClient : grpc::ClientBase<VizierServiceClient>
    {
      /// <summary>Creates a new client for VizierService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VizierServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VizierService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VizierServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VizierServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VizierServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a Study. A resource name will be generated after creation of the
      /// Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Study CreateStudy(global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateStudy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Study. A resource name will be generated after creation of the
      /// Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Study CreateStudy(global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateStudy, null, options, request);
      }
      /// <summary>
      /// Creates a Study. A resource name will be generated after creation of the
      /// Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Study> CreateStudyAsync(global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateStudyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Study. A resource name will be generated after creation of the
      /// Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Study> CreateStudyAsync(global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateStudy, null, options, request);
      }
      /// <summary>
      /// Gets a Study by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Study GetStudy(global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStudy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Study by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Study GetStudy(global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStudy, null, options, request);
      }
      /// <summary>
      /// Gets a Study by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Study> GetStudyAsync(global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStudyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Study by name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Study> GetStudyAsync(global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStudy, null, options, request);
      }
      /// <summary>
      /// Lists all the studies in a region for an associated project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse ListStudies(global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStudies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the studies in a region for an associated project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse ListStudies(global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListStudies, null, options, request);
      }
      /// <summary>
      /// Lists all the studies in a region for an associated project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse> ListStudiesAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListStudiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the studies in a region for an associated project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse> ListStudiesAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListStudies, null, options, request);
      }
      /// <summary>
      /// Deletes a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteStudy(global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteStudy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteStudy(global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteStudy, null, options, request);
      }
      /// <summary>
      /// Deletes a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteStudyAsync(global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteStudyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteStudyAsync(global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteStudy, null, options, request);
      }
      /// <summary>
      /// Looks a study up using the user-defined display_name field instead of the
      /// fully qualified resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Study LookupStudy(global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupStudy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Looks a study up using the user-defined display_name field instead of the
      /// fully qualified resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Study LookupStudy(global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookupStudy, null, options, request);
      }
      /// <summary>
      /// Looks a study up using the user-defined display_name field instead of the
      /// fully qualified resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Study> LookupStudyAsync(global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupStudyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Looks a study up using the user-defined display_name field instead of the
      /// fully qualified resource name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Study> LookupStudyAsync(global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookupStudy, null, options, request);
      }
      /// <summary>
      /// Adds one or more Trials to a Study, with parameter values
      /// suggested by Vertex AI Vizier. Returns a long-running
      /// operation associated with the generation of Trial suggestions.
      /// When this long-running operation succeeds, it will contain
      /// a
      /// [SuggestTrialsResponse][google.cloud.aiplatform.v1beta1.SuggestTrialsResponse].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SuggestTrials(global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SuggestTrials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds one or more Trials to a Study, with parameter values
      /// suggested by Vertex AI Vizier. Returns a long-running
      /// operation associated with the generation of Trial suggestions.
      /// When this long-running operation succeeds, it will contain
      /// a
      /// [SuggestTrialsResponse][google.cloud.aiplatform.v1beta1.SuggestTrialsResponse].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SuggestTrials(global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SuggestTrials, null, options, request);
      }
      /// <summary>
      /// Adds one or more Trials to a Study, with parameter values
      /// suggested by Vertex AI Vizier. Returns a long-running
      /// operation associated with the generation of Trial suggestions.
      /// When this long-running operation succeeds, it will contain
      /// a
      /// [SuggestTrialsResponse][google.cloud.aiplatform.v1beta1.SuggestTrialsResponse].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SuggestTrialsAsync(global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SuggestTrialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds one or more Trials to a Study, with parameter values
      /// suggested by Vertex AI Vizier. Returns a long-running
      /// operation associated with the generation of Trial suggestions.
      /// When this long-running operation succeeds, it will contain
      /// a
      /// [SuggestTrialsResponse][google.cloud.aiplatform.v1beta1.SuggestTrialsResponse].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SuggestTrialsAsync(global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SuggestTrials, null, options, request);
      }
      /// <summary>
      /// Adds a user provided Trial to a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial CreateTrial(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTrial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a user provided Trial to a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial CreateTrial(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTrial, null, options, request);
      }
      /// <summary>
      /// Adds a user provided Trial to a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> CreateTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTrialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a user provided Trial to a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> CreateTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTrial, null, options, request);
      }
      /// <summary>
      /// Gets a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial GetTrial(global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial GetTrial(global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTrial, null, options, request);
      }
      /// <summary>
      /// Gets a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> GetTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> GetTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTrial, null, options, request);
      }
      /// <summary>
      /// Lists the Trials associated with a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse ListTrials(global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Trials associated with a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse ListTrials(global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTrials, null, options, request);
      }
      /// <summary>
      /// Lists the Trials associated with a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse> ListTrialsAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Trials associated with a Study.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse> ListTrialsAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTrials, null, options, request);
      }
      /// <summary>
      /// Adds a measurement of the objective metrics to a Trial. This measurement
      /// is assumed to have been taken before the Trial is complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial AddTrialMeasurement(global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTrialMeasurement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a measurement of the objective metrics to a Trial. This measurement
      /// is assumed to have been taken before the Trial is complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial AddTrialMeasurement(global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddTrialMeasurement, null, options, request);
      }
      /// <summary>
      /// Adds a measurement of the objective metrics to a Trial. This measurement
      /// is assumed to have been taken before the Trial is complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> AddTrialMeasurementAsync(global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTrialMeasurementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a measurement of the objective metrics to a Trial. This measurement
      /// is assumed to have been taken before the Trial is complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> AddTrialMeasurementAsync(global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddTrialMeasurement, null, options, request);
      }
      /// <summary>
      /// Marks a Trial as complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial CompleteTrial(global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteTrial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks a Trial as complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial CompleteTrial(global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CompleteTrial, null, options, request);
      }
      /// <summary>
      /// Marks a Trial as complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> CompleteTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteTrialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Marks a Trial as complete.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> CompleteTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CompleteTrial, null, options, request);
      }
      /// <summary>
      /// Deletes a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTrial(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTrial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTrial(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTrial, null, options, request);
      }
      /// <summary>
      /// Deletes a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTrialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTrial, null, options, request);
      }
      /// <summary>
      /// Checks  whether a Trial should stop or not. Returns a
      /// long-running operation. When the operation is successful,
      /// it will contain a
      /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1beta1.CheckTrialEarlyStoppingStateResponse].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CheckTrialEarlyStoppingState(global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckTrialEarlyStoppingState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks  whether a Trial should stop or not. Returns a
      /// long-running operation. When the operation is successful,
      /// it will contain a
      /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1beta1.CheckTrialEarlyStoppingStateResponse].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CheckTrialEarlyStoppingState(global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckTrialEarlyStoppingState, null, options, request);
      }
      /// <summary>
      /// Checks  whether a Trial should stop or not. Returns a
      /// long-running operation. When the operation is successful,
      /// it will contain a
      /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1beta1.CheckTrialEarlyStoppingStateResponse].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CheckTrialEarlyStoppingStateAsync(global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckTrialEarlyStoppingStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks  whether a Trial should stop or not. Returns a
      /// long-running operation. When the operation is successful,
      /// it will contain a
      /// [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1beta1.CheckTrialEarlyStoppingStateResponse].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CheckTrialEarlyStoppingStateAsync(global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckTrialEarlyStoppingState, null, options, request);
      }
      /// <summary>
      /// Stops a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial StopTrial(global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopTrial(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.Trial StopTrial(global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopTrial, null, options, request);
      }
      /// <summary>
      /// Stops a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> StopTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopTrialAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops a Trial.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.Trial> StopTrialAsync(global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopTrial, null, options, request);
      }
      /// <summary>
      /// Lists the pareto-optimal Trials for multi-objective Study or the
      /// optimal Trials for single-objective Study. The definition of
      /// pareto-optimal can be checked in wiki page.
      /// https://en.wikipedia.org/wiki/Pareto_efficiency
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse ListOptimalTrials(global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOptimalTrials(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the pareto-optimal Trials for multi-objective Study or the
      /// optimal Trials for single-objective Study. The definition of
      /// pareto-optimal can be checked in wiki page.
      /// https://en.wikipedia.org/wiki/Pareto_efficiency
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse ListOptimalTrials(global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOptimalTrials, null, options, request);
      }
      /// <summary>
      /// Lists the pareto-optimal Trials for multi-objective Study or the
      /// optimal Trials for single-objective Study. The definition of
      /// pareto-optimal can be checked in wiki page.
      /// https://en.wikipedia.org/wiki/Pareto_efficiency
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse> ListOptimalTrialsAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOptimalTrialsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the pareto-optimal Trials for multi-objective Study or the
      /// optimal Trials for single-objective Study. The definition of
      /// pareto-optimal can be checked in wiki page.
      /// https://en.wikipedia.org/wiki/Pareto_efficiency
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse> ListOptimalTrialsAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOptimalTrials, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override VizierServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VizierServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(VizierServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateStudy, serviceImpl.CreateStudy)
          .AddMethod(__Method_GetStudy, serviceImpl.GetStudy)
          .AddMethod(__Method_ListStudies, serviceImpl.ListStudies)
          .AddMethod(__Method_DeleteStudy, serviceImpl.DeleteStudy)
          .AddMethod(__Method_LookupStudy, serviceImpl.LookupStudy)
          .AddMethod(__Method_SuggestTrials, serviceImpl.SuggestTrials)
          .AddMethod(__Method_CreateTrial, serviceImpl.CreateTrial)
          .AddMethod(__Method_GetTrial, serviceImpl.GetTrial)
          .AddMethod(__Method_ListTrials, serviceImpl.ListTrials)
          .AddMethod(__Method_AddTrialMeasurement, serviceImpl.AddTrialMeasurement)
          .AddMethod(__Method_CompleteTrial, serviceImpl.CompleteTrial)
          .AddMethod(__Method_DeleteTrial, serviceImpl.DeleteTrial)
          .AddMethod(__Method_CheckTrialEarlyStoppingState, serviceImpl.CheckTrialEarlyStoppingState)
          .AddMethod(__Method_StopTrial, serviceImpl.StopTrial)
          .AddMethod(__Method_ListOptimalTrials, serviceImpl.ListOptimalTrials).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VizierServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateStudy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.CreateStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study>(serviceImpl.CreateStudy));
      serviceBinder.AddMethod(__Method_GetStudy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.GetStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study>(serviceImpl.GetStudy));
      serviceBinder.AddMethod(__Method_ListStudies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListStudiesResponse>(serviceImpl.ListStudies));
      serviceBinder.AddMethod(__Method_DeleteStudy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.DeleteStudyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteStudy));
      serviceBinder.AddMethod(__Method_LookupStudy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.LookupStudyRequest, global::Google.Cloud.AIPlatform.V1Beta1.Study>(serviceImpl.LookupStudy));
      serviceBinder.AddMethod(__Method_SuggestTrials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.SuggestTrialsRequest, global::Google.LongRunning.Operation>(serviceImpl.SuggestTrials));
      serviceBinder.AddMethod(__Method_CreateTrial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.CreateTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(serviceImpl.CreateTrial));
      serviceBinder.AddMethod(__Method_GetTrial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.GetTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(serviceImpl.GetTrial));
      serviceBinder.AddMethod(__Method_ListTrials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListTrialsResponse>(serviceImpl.ListTrials));
      serviceBinder.AddMethod(__Method_AddTrialMeasurement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.AddTrialMeasurementRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(serviceImpl.AddTrialMeasurement));
      serviceBinder.AddMethod(__Method_CompleteTrial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.CompleteTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(serviceImpl.CompleteTrial));
      serviceBinder.AddMethod(__Method_DeleteTrial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrialRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteTrial));
      serviceBinder.AddMethod(__Method_CheckTrialEarlyStoppingState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.CheckTrialEarlyStoppingStateRequest, global::Google.LongRunning.Operation>(serviceImpl.CheckTrialEarlyStoppingState));
      serviceBinder.AddMethod(__Method_StopTrial, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.StopTrialRequest, global::Google.Cloud.AIPlatform.V1Beta1.Trial>(serviceImpl.StopTrial));
      serviceBinder.AddMethod(__Method_ListOptimalTrials, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListOptimalTrialsResponse>(serviceImpl.ListOptimalTrials));
    }

  }
}
#endregion
