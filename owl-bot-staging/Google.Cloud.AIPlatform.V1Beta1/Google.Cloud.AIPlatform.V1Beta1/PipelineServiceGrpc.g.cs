// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/aiplatform/v1beta1/pipeline_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.AIPlatform.V1Beta1 {
  /// <summary>
  /// A service for creating and managing Vertex AI's pipelines. This includes both
  /// `TrainingPipeline` resources (used for AutoML and custom training) and
  /// `PipelineJob` resources (used for Vertex AI Pipelines).
  /// </summary>
  public static partial class PipelineService
  {
    static readonly string __ServiceName = "google.cloud.aiplatform.v1beta1.PipelineService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest> __Marshaller_google_cloud_aiplatform_v1beta1_CreateTrainingPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> __Marshaller_google_cloud_aiplatform_v1beta1_TrainingPipeline = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest> __Marshaller_google_cloud_aiplatform_v1beta1_GetTrainingPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest> __Marshaller_google_cloud_aiplatform_v1beta1_ListTrainingPipelinesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse> __Marshaller_google_cloud_aiplatform_v1beta1_ListTrainingPipelinesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest> __Marshaller_google_cloud_aiplatform_v1beta1_DeleteTrainingPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest> __Marshaller_google_cloud_aiplatform_v1beta1_CancelTrainingPipelineRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest> __Marshaller_google_cloud_aiplatform_v1beta1_CreatePipelineJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> __Marshaller_google_cloud_aiplatform_v1beta1_PipelineJob = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest> __Marshaller_google_cloud_aiplatform_v1beta1_GetPipelineJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest> __Marshaller_google_cloud_aiplatform_v1beta1_ListPipelineJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse> __Marshaller_google_cloud_aiplatform_v1beta1_ListPipelineJobsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest> __Marshaller_google_cloud_aiplatform_v1beta1_DeletePipelineJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest> __Marshaller_google_cloud_aiplatform_v1beta1_BatchDeletePipelineJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest> __Marshaller_google_cloud_aiplatform_v1beta1_CancelPipelineJobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest> __Marshaller_google_cloud_aiplatform_v1beta1_BatchCancelPipelineJobsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest, global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> __Method_CreateTrainingPipeline = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest, global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTrainingPipeline",
        __Marshaller_google_cloud_aiplatform_v1beta1_CreateTrainingPipelineRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_TrainingPipeline);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest, global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> __Method_GetTrainingPipeline = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest, global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTrainingPipeline",
        __Marshaller_google_cloud_aiplatform_v1beta1_GetTrainingPipelineRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_TrainingPipeline);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse> __Method_ListTrainingPipelines = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTrainingPipelines",
        __Marshaller_google_cloud_aiplatform_v1beta1_ListTrainingPipelinesRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_ListTrainingPipelinesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest, global::Google.LongRunning.Operation> __Method_DeleteTrainingPipeline = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTrainingPipeline",
        __Marshaller_google_cloud_aiplatform_v1beta1_DeleteTrainingPipelineRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CancelTrainingPipeline = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelTrainingPipeline",
        __Marshaller_google_cloud_aiplatform_v1beta1_CancelTrainingPipelineRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest, global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> __Method_CreatePipelineJob = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest, global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePipelineJob",
        __Marshaller_google_cloud_aiplatform_v1beta1_CreatePipelineJobRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_PipelineJob);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest, global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> __Method_GetPipelineJob = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest, global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPipelineJob",
        __Marshaller_google_cloud_aiplatform_v1beta1_GetPipelineJobRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_PipelineJob);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse> __Method_ListPipelineJobs = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPipelineJobs",
        __Marshaller_google_cloud_aiplatform_v1beta1_ListPipelineJobsRequest,
        __Marshaller_google_cloud_aiplatform_v1beta1_ListPipelineJobsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest, global::Google.LongRunning.Operation> __Method_DeletePipelineJob = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePipelineJob",
        __Marshaller_google_cloud_aiplatform_v1beta1_DeletePipelineJobRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest, global::Google.LongRunning.Operation> __Method_BatchDeletePipelineJobs = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchDeletePipelineJobs",
        __Marshaller_google_cloud_aiplatform_v1beta1_BatchDeletePipelineJobsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CancelPipelineJob = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelPipelineJob",
        __Marshaller_google_cloud_aiplatform_v1beta1_CancelPipelineJobRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest, global::Google.LongRunning.Operation> __Method_BatchCancelPipelineJobs = new grpc::Method<global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCancelPipelineJobs",
        __Marshaller_google_cloud_aiplatform_v1beta1_BatchCancelPipelineJobsRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.AIPlatform.V1Beta1.PipelineServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PipelineService</summary>
    [grpc::BindServiceMethod(typeof(PipelineService), "BindService")]
    public abstract partial class PipelineServiceBase
    {
      /// <summary>
      /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
      /// attempted to be run.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> CreateTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> GetTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists TrainingPipelines in a Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse> ListTrainingPipelines(global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancels a TrainingPipeline.
      /// Starts asynchronous cancellation on the TrainingPipeline. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1beta1.PipelineService.GetTrainingPipeline]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
      /// a
      /// [TrainingPipeline.error][google.cloud.aiplatform.v1beta1.TrainingPipeline.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [TrainingPipeline.state][google.cloud.aiplatform.v1beta1.TrainingPipeline.state]
      /// is set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CancelTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a PipelineJob. A PipelineJob will run immediately when created.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> CreatePipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a PipelineJob.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> GetPipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists PipelineJobs in a Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse> ListPipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a PipelineJob.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeletePipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Batch deletes PipelineJobs
      /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
      /// If it succeeds, all of the PipelineJobs are deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> BatchDeletePipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancels a PipelineJob.
      /// Starts asynchronous cancellation on the PipelineJob. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1beta1.PipelineService.GetPipelineJob]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the PipelineJob is not deleted; instead it becomes a pipeline with
      /// a [PipelineJob.error][google.cloud.aiplatform.v1beta1.PipelineJob.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [PipelineJob.state][google.cloud.aiplatform.v1beta1.PipelineJob.state] is
      /// set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CancelPipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Batch cancel PipelineJobs.
      /// Firstly the server will check if all the jobs are in non-terminal states,
      /// and skip the jobs that are already terminated.
      /// If the operation failed, none of the pipeline jobs are cancelled.
      /// The server will poll the states of all the pipeline jobs periodically
      /// to check the cancellation status.
      /// This operation will return an LRO.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> BatchCancelPipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PipelineService</summary>
    public partial class PipelineServiceClient : grpc::ClientBase<PipelineServiceClient>
    {
      /// <summary>Creates a new client for PipelineService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PipelineServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PipelineService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PipelineServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PipelineServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PipelineServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
      /// attempted to be run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline CreateTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTrainingPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
      /// attempted to be run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline CreateTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTrainingPipeline, null, options, request);
      }
      /// <summary>
      /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
      /// attempted to be run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> CreateTrainingPipelineAsync(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTrainingPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TrainingPipeline. A created TrainingPipeline right away will be
      /// attempted to be run.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> CreateTrainingPipelineAsync(global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTrainingPipeline, null, options, request);
      }
      /// <summary>
      /// Gets a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline GetTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrainingPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline GetTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTrainingPipeline, null, options, request);
      }
      /// <summary>
      /// Gets a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> GetTrainingPipelineAsync(global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrainingPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline> GetTrainingPipelineAsync(global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTrainingPipeline, null, options, request);
      }
      /// <summary>
      /// Lists TrainingPipelines in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse ListTrainingPipelines(global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrainingPipelines(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TrainingPipelines in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse ListTrainingPipelines(global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTrainingPipelines, null, options, request);
      }
      /// <summary>
      /// Lists TrainingPipelines in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse> ListTrainingPipelinesAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrainingPipelinesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TrainingPipelines in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse> ListTrainingPipelinesAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTrainingPipelines, null, options, request);
      }
      /// <summary>
      /// Deletes a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTrainingPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTrainingPipeline, null, options, request);
      }
      /// <summary>
      /// Deletes a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTrainingPipelineAsync(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTrainingPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a TrainingPipeline.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTrainingPipelineAsync(global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTrainingPipeline, null, options, request);
      }
      /// <summary>
      /// Cancels a TrainingPipeline.
      /// Starts asynchronous cancellation on the TrainingPipeline. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1beta1.PipelineService.GetTrainingPipeline]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
      /// a
      /// [TrainingPipeline.error][google.cloud.aiplatform.v1beta1.TrainingPipeline.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [TrainingPipeline.state][google.cloud.aiplatform.v1beta1.TrainingPipeline.state]
      /// is set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelTrainingPipeline(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels a TrainingPipeline.
      /// Starts asynchronous cancellation on the TrainingPipeline. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1beta1.PipelineService.GetTrainingPipeline]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
      /// a
      /// [TrainingPipeline.error][google.cloud.aiplatform.v1beta1.TrainingPipeline.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [TrainingPipeline.state][google.cloud.aiplatform.v1beta1.TrainingPipeline.state]
      /// is set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelTrainingPipeline(global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelTrainingPipeline, null, options, request);
      }
      /// <summary>
      /// Cancels a TrainingPipeline.
      /// Starts asynchronous cancellation on the TrainingPipeline. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1beta1.PipelineService.GetTrainingPipeline]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
      /// a
      /// [TrainingPipeline.error][google.cloud.aiplatform.v1beta1.TrainingPipeline.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [TrainingPipeline.state][google.cloud.aiplatform.v1beta1.TrainingPipeline.state]
      /// is set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelTrainingPipelineAsync(global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelTrainingPipelineAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels a TrainingPipeline.
      /// Starts asynchronous cancellation on the TrainingPipeline. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetTrainingPipeline][google.cloud.aiplatform.v1beta1.PipelineService.GetTrainingPipeline]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the TrainingPipeline is not deleted; instead it becomes a pipeline with
      /// a
      /// [TrainingPipeline.error][google.cloud.aiplatform.v1beta1.TrainingPipeline.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [TrainingPipeline.state][google.cloud.aiplatform.v1beta1.TrainingPipeline.state]
      /// is set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelTrainingPipelineAsync(global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelTrainingPipeline, null, options, request);
      }
      /// <summary>
      /// Creates a PipelineJob. A PipelineJob will run immediately when created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob CreatePipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePipelineJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a PipelineJob. A PipelineJob will run immediately when created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob CreatePipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePipelineJob, null, options, request);
      }
      /// <summary>
      /// Creates a PipelineJob. A PipelineJob will run immediately when created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> CreatePipelineJobAsync(global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePipelineJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a PipelineJob. A PipelineJob will run immediately when created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> CreatePipelineJobAsync(global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePipelineJob, null, options, request);
      }
      /// <summary>
      /// Gets a PipelineJob.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob GetPipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPipelineJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a PipelineJob.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob GetPipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPipelineJob, null, options, request);
      }
      /// <summary>
      /// Gets a PipelineJob.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> GetPipelineJobAsync(global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPipelineJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a PipelineJob.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob> GetPipelineJobAsync(global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPipelineJob, null, options, request);
      }
      /// <summary>
      /// Lists PipelineJobs in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse ListPipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPipelineJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists PipelineJobs in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse ListPipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPipelineJobs, null, options, request);
      }
      /// <summary>
      /// Lists PipelineJobs in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse> ListPipelineJobsAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPipelineJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists PipelineJobs in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse> ListPipelineJobsAsync(global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPipelineJobs, null, options, request);
      }
      /// <summary>
      /// Deletes a PipelineJob.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeletePipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePipelineJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a PipelineJob.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeletePipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePipelineJob, null, options, request);
      }
      /// <summary>
      /// Deletes a PipelineJob.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeletePipelineJobAsync(global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePipelineJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a PipelineJob.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeletePipelineJobAsync(global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePipelineJob, null, options, request);
      }
      /// <summary>
      /// Batch deletes PipelineJobs
      /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
      /// If it succeeds, all of the PipelineJobs are deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BatchDeletePipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeletePipelineJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch deletes PipelineJobs
      /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
      /// If it succeeds, all of the PipelineJobs are deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BatchDeletePipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchDeletePipelineJobs, null, options, request);
      }
      /// <summary>
      /// Batch deletes PipelineJobs
      /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
      /// If it succeeds, all of the PipelineJobs are deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BatchDeletePipelineJobsAsync(global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeletePipelineJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch deletes PipelineJobs
      /// The Operation is atomic. If it fails, none of the PipelineJobs are deleted.
      /// If it succeeds, all of the PipelineJobs are deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BatchDeletePipelineJobsAsync(global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchDeletePipelineJobs, null, options, request);
      }
      /// <summary>
      /// Cancels a PipelineJob.
      /// Starts asynchronous cancellation on the PipelineJob. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1beta1.PipelineService.GetPipelineJob]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the PipelineJob is not deleted; instead it becomes a pipeline with
      /// a [PipelineJob.error][google.cloud.aiplatform.v1beta1.PipelineJob.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [PipelineJob.state][google.cloud.aiplatform.v1beta1.PipelineJob.state] is
      /// set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelPipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelPipelineJob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels a PipelineJob.
      /// Starts asynchronous cancellation on the PipelineJob. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1beta1.PipelineService.GetPipelineJob]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the PipelineJob is not deleted; instead it becomes a pipeline with
      /// a [PipelineJob.error][google.cloud.aiplatform.v1beta1.PipelineJob.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [PipelineJob.state][google.cloud.aiplatform.v1beta1.PipelineJob.state] is
      /// set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelPipelineJob(global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelPipelineJob, null, options, request);
      }
      /// <summary>
      /// Cancels a PipelineJob.
      /// Starts asynchronous cancellation on the PipelineJob. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1beta1.PipelineService.GetPipelineJob]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the PipelineJob is not deleted; instead it becomes a pipeline with
      /// a [PipelineJob.error][google.cloud.aiplatform.v1beta1.PipelineJob.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [PipelineJob.state][google.cloud.aiplatform.v1beta1.PipelineJob.state] is
      /// set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelPipelineJobAsync(global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelPipelineJobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancels a PipelineJob.
      /// Starts asynchronous cancellation on the PipelineJob. The server
      /// makes a best effort to cancel the pipeline, but success is not
      /// guaranteed. Clients can use
      /// [PipelineService.GetPipelineJob][google.cloud.aiplatform.v1beta1.PipelineService.GetPipelineJob]
      /// or other methods to check whether the cancellation succeeded or whether the
      /// pipeline completed despite cancellation. On successful cancellation,
      /// the PipelineJob is not deleted; instead it becomes a pipeline with
      /// a [PipelineJob.error][google.cloud.aiplatform.v1beta1.PipelineJob.error]
      /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
      /// corresponding to `Code.CANCELLED`, and
      /// [PipelineJob.state][google.cloud.aiplatform.v1beta1.PipelineJob.state] is
      /// set to `CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelPipelineJobAsync(global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelPipelineJob, null, options, request);
      }
      /// <summary>
      /// Batch cancel PipelineJobs.
      /// Firstly the server will check if all the jobs are in non-terminal states,
      /// and skip the jobs that are already terminated.
      /// If the operation failed, none of the pipeline jobs are cancelled.
      /// The server will poll the states of all the pipeline jobs periodically
      /// to check the cancellation status.
      /// This operation will return an LRO.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BatchCancelPipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCancelPipelineJobs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch cancel PipelineJobs.
      /// Firstly the server will check if all the jobs are in non-terminal states,
      /// and skip the jobs that are already terminated.
      /// If the operation failed, none of the pipeline jobs are cancelled.
      /// The server will poll the states of all the pipeline jobs periodically
      /// to check the cancellation status.
      /// This operation will return an LRO.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BatchCancelPipelineJobs(global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCancelPipelineJobs, null, options, request);
      }
      /// <summary>
      /// Batch cancel PipelineJobs.
      /// Firstly the server will check if all the jobs are in non-terminal states,
      /// and skip the jobs that are already terminated.
      /// If the operation failed, none of the pipeline jobs are cancelled.
      /// The server will poll the states of all the pipeline jobs periodically
      /// to check the cancellation status.
      /// This operation will return an LRO.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BatchCancelPipelineJobsAsync(global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCancelPipelineJobsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch cancel PipelineJobs.
      /// Firstly the server will check if all the jobs are in non-terminal states,
      /// and skip the jobs that are already terminated.
      /// If the operation failed, none of the pipeline jobs are cancelled.
      /// The server will poll the states of all the pipeline jobs periodically
      /// to check the cancellation status.
      /// This operation will return an LRO.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BatchCancelPipelineJobsAsync(global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCancelPipelineJobs, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PipelineServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PipelineServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PipelineServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTrainingPipeline, serviceImpl.CreateTrainingPipeline)
          .AddMethod(__Method_GetTrainingPipeline, serviceImpl.GetTrainingPipeline)
          .AddMethod(__Method_ListTrainingPipelines, serviceImpl.ListTrainingPipelines)
          .AddMethod(__Method_DeleteTrainingPipeline, serviceImpl.DeleteTrainingPipeline)
          .AddMethod(__Method_CancelTrainingPipeline, serviceImpl.CancelTrainingPipeline)
          .AddMethod(__Method_CreatePipelineJob, serviceImpl.CreatePipelineJob)
          .AddMethod(__Method_GetPipelineJob, serviceImpl.GetPipelineJob)
          .AddMethod(__Method_ListPipelineJobs, serviceImpl.ListPipelineJobs)
          .AddMethod(__Method_DeletePipelineJob, serviceImpl.DeletePipelineJob)
          .AddMethod(__Method_BatchDeletePipelineJobs, serviceImpl.BatchDeletePipelineJobs)
          .AddMethod(__Method_CancelPipelineJob, serviceImpl.CancelPipelineJob)
          .AddMethod(__Method_BatchCancelPipelineJobs, serviceImpl.BatchCancelPipelineJobs).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PipelineServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateTrainingPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.CreateTrainingPipelineRequest, global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline>(serviceImpl.CreateTrainingPipeline));
      serviceBinder.AddMethod(__Method_GetTrainingPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.GetTrainingPipelineRequest, global::Google.Cloud.AIPlatform.V1Beta1.TrainingPipeline>(serviceImpl.GetTrainingPipeline));
      serviceBinder.AddMethod(__Method_ListTrainingPipelines, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListTrainingPipelinesResponse>(serviceImpl.ListTrainingPipelines));
      serviceBinder.AddMethod(__Method_DeleteTrainingPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.DeleteTrainingPipelineRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteTrainingPipeline));
      serviceBinder.AddMethod(__Method_CancelTrainingPipeline, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.CancelTrainingPipelineRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CancelTrainingPipeline));
      serviceBinder.AddMethod(__Method_CreatePipelineJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.CreatePipelineJobRequest, global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob>(serviceImpl.CreatePipelineJob));
      serviceBinder.AddMethod(__Method_GetPipelineJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.GetPipelineJobRequest, global::Google.Cloud.AIPlatform.V1Beta1.PipelineJob>(serviceImpl.GetPipelineJob));
      serviceBinder.AddMethod(__Method_ListPipelineJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsRequest, global::Google.Cloud.AIPlatform.V1Beta1.ListPipelineJobsResponse>(serviceImpl.ListPipelineJobs));
      serviceBinder.AddMethod(__Method_DeletePipelineJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.DeletePipelineJobRequest, global::Google.LongRunning.Operation>(serviceImpl.DeletePipelineJob));
      serviceBinder.AddMethod(__Method_BatchDeletePipelineJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.BatchDeletePipelineJobsRequest, global::Google.LongRunning.Operation>(serviceImpl.BatchDeletePipelineJobs));
      serviceBinder.AddMethod(__Method_CancelPipelineJob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.CancelPipelineJobRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CancelPipelineJob));
      serviceBinder.AddMethod(__Method_BatchCancelPipelineJobs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1Beta1.BatchCancelPipelineJobsRequest, global::Google.LongRunning.Operation>(serviceImpl.BatchCancelPipelineJobs));
    }

  }
}
#endregion
