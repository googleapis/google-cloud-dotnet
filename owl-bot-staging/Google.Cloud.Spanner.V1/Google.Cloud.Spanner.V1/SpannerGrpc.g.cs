// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/spanner/v1/spanner.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Spanner.V1 {
  /// <summary>
  /// Cloud Spanner API
  ///
  /// The Cloud Spanner API can be used to manage sessions and execute
  /// transactions on data stored in Cloud Spanner databases.
  /// </summary>
  public static partial class Spanner
  {
    static readonly string __ServiceName = "google.spanner.v1.Spanner";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.CreateSessionRequest> __Marshaller_google_spanner_v1_CreateSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.CreateSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.Session> __Marshaller_google_spanner_v1_Session = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.Session.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest> __Marshaller_google_spanner_v1_BatchCreateSessionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse> __Marshaller_google_spanner_v1_BatchCreateSessionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.GetSessionRequest> __Marshaller_google_spanner_v1_GetSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.GetSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ListSessionsRequest> __Marshaller_google_spanner_v1_ListSessionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.ListSessionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ListSessionsResponse> __Marshaller_google_spanner_v1_ListSessionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.ListSessionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.DeleteSessionRequest> __Marshaller_google_spanner_v1_DeleteSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.DeleteSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest> __Marshaller_google_spanner_v1_ExecuteSqlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.ExecuteSqlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ResultSet> __Marshaller_google_spanner_v1_ResultSet = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.ResultSet.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.PartialResultSet> __Marshaller_google_spanner_v1_PartialResultSet = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.PartialResultSet.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest> __Marshaller_google_spanner_v1_ExecuteBatchDmlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse> __Marshaller_google_spanner_v1_ExecuteBatchDmlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.ReadRequest> __Marshaller_google_spanner_v1_ReadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.ReadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.BeginTransactionRequest> __Marshaller_google_spanner_v1_BeginTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.BeginTransactionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.Transaction> __Marshaller_google_spanner_v1_Transaction = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.Transaction.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.CommitRequest> __Marshaller_google_spanner_v1_CommitRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.CommitRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.CommitResponse> __Marshaller_google_spanner_v1_CommitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.CommitResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.RollbackRequest> __Marshaller_google_spanner_v1_RollbackRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.RollbackRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.PartitionQueryRequest> __Marshaller_google_spanner_v1_PartitionQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.PartitionQueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.PartitionResponse> __Marshaller_google_spanner_v1_PartitionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.PartitionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.PartitionReadRequest> __Marshaller_google_spanner_v1_PartitionReadRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.PartitionReadRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.BatchWriteRequest> __Marshaller_google_spanner_v1_BatchWriteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.BatchWriteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Spanner.V1.BatchWriteResponse> __Marshaller_google_spanner_v1_BatchWriteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Spanner.V1.BatchWriteResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.CreateSessionRequest, global::Google.Cloud.Spanner.V1.Session> __Method_CreateSession = new grpc::Method<global::Google.Cloud.Spanner.V1.CreateSessionRequest, global::Google.Cloud.Spanner.V1.Session>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSession",
        __Marshaller_google_spanner_v1_CreateSessionRequest,
        __Marshaller_google_spanner_v1_Session);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest, global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse> __Method_BatchCreateSessions = new grpc::Method<global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest, global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateSessions",
        __Marshaller_google_spanner_v1_BatchCreateSessionsRequest,
        __Marshaller_google_spanner_v1_BatchCreateSessionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.GetSessionRequest, global::Google.Cloud.Spanner.V1.Session> __Method_GetSession = new grpc::Method<global::Google.Cloud.Spanner.V1.GetSessionRequest, global::Google.Cloud.Spanner.V1.Session>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSession",
        __Marshaller_google_spanner_v1_GetSessionRequest,
        __Marshaller_google_spanner_v1_Session);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ListSessionsRequest, global::Google.Cloud.Spanner.V1.ListSessionsResponse> __Method_ListSessions = new grpc::Method<global::Google.Cloud.Spanner.V1.ListSessionsRequest, global::Google.Cloud.Spanner.V1.ListSessionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSessions",
        __Marshaller_google_spanner_v1_ListSessionsRequest,
        __Marshaller_google_spanner_v1_ListSessionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.DeleteSessionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSession = new grpc::Method<global::Google.Cloud.Spanner.V1.DeleteSessionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSession",
        __Marshaller_google_spanner_v1_DeleteSessionRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.ResultSet> __Method_ExecuteSql = new grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.ResultSet>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteSql",
        __Marshaller_google_spanner_v1_ExecuteSqlRequest,
        __Marshaller_google_spanner_v1_ResultSet);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.PartialResultSet> __Method_ExecuteStreamingSql = new grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.PartialResultSet>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ExecuteStreamingSql",
        __Marshaller_google_spanner_v1_ExecuteSqlRequest,
        __Marshaller_google_spanner_v1_PartialResultSet);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest, global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse> __Method_ExecuteBatchDml = new grpc::Method<global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest, global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteBatchDml",
        __Marshaller_google_spanner_v1_ExecuteBatchDmlRequest,
        __Marshaller_google_spanner_v1_ExecuteBatchDmlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.ResultSet> __Method_Read = new grpc::Method<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.ResultSet>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Read",
        __Marshaller_google_spanner_v1_ReadRequest,
        __Marshaller_google_spanner_v1_ResultSet);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.PartialResultSet> __Method_StreamingRead = new grpc::Method<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.PartialResultSet>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamingRead",
        __Marshaller_google_spanner_v1_ReadRequest,
        __Marshaller_google_spanner_v1_PartialResultSet);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.BeginTransactionRequest, global::Google.Cloud.Spanner.V1.Transaction> __Method_BeginTransaction = new grpc::Method<global::Google.Cloud.Spanner.V1.BeginTransactionRequest, global::Google.Cloud.Spanner.V1.Transaction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeginTransaction",
        __Marshaller_google_spanner_v1_BeginTransactionRequest,
        __Marshaller_google_spanner_v1_Transaction);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.CommitRequest, global::Google.Cloud.Spanner.V1.CommitResponse> __Method_Commit = new grpc::Method<global::Google.Cloud.Spanner.V1.CommitRequest, global::Google.Cloud.Spanner.V1.CommitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Commit",
        __Marshaller_google_spanner_v1_CommitRequest,
        __Marshaller_google_spanner_v1_CommitResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.RollbackRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Rollback = new grpc::Method<global::Google.Cloud.Spanner.V1.RollbackRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Rollback",
        __Marshaller_google_spanner_v1_RollbackRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.PartitionQueryRequest, global::Google.Cloud.Spanner.V1.PartitionResponse> __Method_PartitionQuery = new grpc::Method<global::Google.Cloud.Spanner.V1.PartitionQueryRequest, global::Google.Cloud.Spanner.V1.PartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PartitionQuery",
        __Marshaller_google_spanner_v1_PartitionQueryRequest,
        __Marshaller_google_spanner_v1_PartitionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.PartitionReadRequest, global::Google.Cloud.Spanner.V1.PartitionResponse> __Method_PartitionRead = new grpc::Method<global::Google.Cloud.Spanner.V1.PartitionReadRequest, global::Google.Cloud.Spanner.V1.PartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PartitionRead",
        __Marshaller_google_spanner_v1_PartitionReadRequest,
        __Marshaller_google_spanner_v1_PartitionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Spanner.V1.BatchWriteRequest, global::Google.Cloud.Spanner.V1.BatchWriteResponse> __Method_BatchWrite = new grpc::Method<global::Google.Cloud.Spanner.V1.BatchWriteRequest, global::Google.Cloud.Spanner.V1.BatchWriteResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "BatchWrite",
        __Marshaller_google_spanner_v1_BatchWriteRequest,
        __Marshaller_google_spanner_v1_BatchWriteResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Spanner.V1.SpannerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Spanner</summary>
    [grpc::BindServiceMethod(typeof(Spanner), "BindService")]
    public abstract partial class SpannerBase
    {
      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Active sessions use additional server resources, so it is a good idea to
      /// delete idle and unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner may delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.Session> CreateSession(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates multiple new sessions.
      ///
      /// This API can be used to initialize a session cache on the clients.
      /// See https://goo.gl/TgSFN2 for best practices on session cache management.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse> BatchCreateSessions(global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.Session> GetSession(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all sessions in a given database.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.ListSessionsResponse> ListSessions(global::Google.Cloud.Spanner.V1.ListSessionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Ends a session, releasing server resources associated with it. This will
      /// asynchronously trigger cancellation of any operations that are running with
      /// this session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSession(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes an SQL statement, returning all results in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Operations inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]
      /// instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.ResultSet> ExecuteSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the
      /// result set as a stream. Unlike
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there is no limit on
      /// the size of the returned result set. However, no individual row in the
      /// result set can exceed 100 MiB, and no column value can exceed 10 MiB.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ExecuteStreamingSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Spanner.V1.PartialResultSet> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes a batch of SQL DML statements. This method allows many statements
      /// to be run with lower latency than submitting them sequentially with
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].
      ///
      /// Statements are executed in sequential order. A request can succeed even if
      /// a statement fails. The
      /// [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status]
      /// field in the response provides information about the statement that failed.
      /// Clients must inspect this field to determine whether an error occurred.
      ///
      /// Execution stops after the first failed statement; the remaining statements
      /// are not executed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse> ExecuteBatchDml(global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be
      /// used to return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.ResultSet> Read(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Like [Read][google.spanner.v1.Spanner.Read], except returns the result set
      /// as a stream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no
      /// limit on the size of the returned result set. However, no individual row in
      /// the result set can exceed 100 MiB, and no column value can exceed
      /// 10 MiB.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamingRead(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Spanner.V1.PartialResultSet> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read],
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.Transaction> BeginTransaction(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      ///
      /// On very rare occasions, `Commit` might return `UNKNOWN`. This can happen,
      /// for example, if the client job experiences a 1+ hour networking failure.
      /// At that point, Cloud Spanner has lost track of the transaction outcome and
      /// we recommend that you perform another read from the database to see the
      /// state of things as they are now.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.CommitResponse> Commit(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and ultimately
      /// decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Rollback(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a query
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] to
      /// specify a subset of the query result to read.  The same session and
      /// read-only transaction must be used by the PartitionQueryRequest used to
      /// create the partition tokens and the ExecuteSqlRequests that use the
      /// partition tokens.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the query, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.PartitionResponse> PartitionQuery(global::Google.Cloud.Spanner.V1.PartitionQueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a read
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to specify a
      /// subset of the read result to read.  The same session and read-only
      /// transaction must be used by the PartitionReadRequest used to create the
      /// partition tokens and the ReadRequests that use the partition tokens.  There
      /// are no ordering guarantees on rows returned among the returned partition
      /// tokens, or even within each individual StreamingRead call issued with a
      /// partition_token.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the read, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Spanner.V1.PartitionResponse> PartitionRead(global::Google.Cloud.Spanner.V1.PartitionReadRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Batches the supplied mutation groups in a collection of efficient
      /// transactions. All mutations in a group are committed atomically. However,
      /// mutations across groups can be committed non-atomically in an unspecified
      /// order and thus, they must be independent of each other. Partial failure is
      /// possible, i.e., some groups may have been committed successfully, while
      /// some may have failed. The results of individual batches are streamed into
      /// the response as the batches are applied.
      ///
      /// BatchWrite requests are not replay protected, meaning that each mutation
      /// group may be applied more than once. Replays of non-idempotent mutations
      /// may have undesirable effects. For example, replays of an insert mutation
      /// may produce an already exists error or if you use generated or commit
      /// timestamp-based keys, it may result in additional rows being added to the
      /// mutation's table. We recommend structuring your mutation groups to be
      /// idempotent to avoid this issue.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task BatchWrite(global::Google.Cloud.Spanner.V1.BatchWriteRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Spanner.V1.BatchWriteResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Spanner</summary>
    public partial class SpannerClient : grpc::ClientBase<SpannerClient>
    {
      /// <summary>Creates a new client for Spanner</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SpannerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Spanner that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SpannerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SpannerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SpannerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Active sessions use additional server resources, so it is a good idea to
      /// delete idle and unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner may delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.Session CreateSession(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Active sessions use additional server resources, so it is a good idea to
      /// delete idle and unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner may delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.Session CreateSession(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Active sessions use additional server resources, so it is a good idea to
      /// delete idle and unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner may delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Session> CreateSessionAsync(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new session. A session can be used to perform
      /// transactions that read and/or modify data in a Cloud Spanner database.
      /// Sessions are meant to be reused for many consecutive
      /// transactions.
      ///
      /// Sessions can only execute one transaction at a time. To execute
      /// multiple concurrent read-write/write-only transactions, create
      /// multiple sessions. Note that standalone reads and queries use a
      /// transaction internally, and count toward the one transaction
      /// limit.
      ///
      /// Active sessions use additional server resources, so it is a good idea to
      /// delete idle and unneeded sessions.
      /// Aside from explicit deletes, Cloud Spanner may delete sessions for which no
      /// operations are sent for more than an hour. If a session is deleted,
      /// requests to it return `NOT_FOUND`.
      ///
      /// Idle sessions can be kept alive by sending a trivial SQL query
      /// periodically, e.g., `"SELECT 1"`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Session> CreateSessionAsync(global::Google.Cloud.Spanner.V1.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      /// Creates multiple new sessions.
      ///
      /// This API can be used to initialize a session cache on the clients.
      /// See https://goo.gl/TgSFN2 for best practices on session cache management.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse BatchCreateSessions(global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates multiple new sessions.
      ///
      /// This API can be used to initialize a session cache on the clients.
      /// See https://goo.gl/TgSFN2 for best practices on session cache management.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse BatchCreateSessions(global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateSessions, null, options, request);
      }
      /// <summary>
      /// Creates multiple new sessions.
      ///
      /// This API can be used to initialize a session cache on the clients.
      /// See https://goo.gl/TgSFN2 for best practices on session cache management.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse> BatchCreateSessionsAsync(global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates multiple new sessions.
      ///
      /// This API can be used to initialize a session cache on the clients.
      /// See https://goo.gl/TgSFN2 for best practices on session cache management.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse> BatchCreateSessionsAsync(global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateSessions, null, options, request);
      }
      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.Session GetSession(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.Session GetSession(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSession, null, options, request);
      }
      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Session> GetSessionAsync(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a session. Returns `NOT_FOUND` if the session does not exist.
      /// This is mainly useful for determining whether a session is still
      /// alive.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Session> GetSessionAsync(global::Google.Cloud.Spanner.V1.GetSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSession, null, options, request);
      }
      /// <summary>
      /// Lists all sessions in a given database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.ListSessionsResponse ListSessions(global::Google.Cloud.Spanner.V1.ListSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all sessions in a given database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.ListSessionsResponse ListSessions(global::Google.Cloud.Spanner.V1.ListSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSessions, null, options, request);
      }
      /// <summary>
      /// Lists all sessions in a given database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ListSessionsResponse> ListSessionsAsync(global::Google.Cloud.Spanner.V1.ListSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all sessions in a given database.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ListSessionsResponse> ListSessionsAsync(global::Google.Cloud.Spanner.V1.ListSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSessions, null, options, request);
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it. This will
      /// asynchronously trigger cancellation of any operations that are running with
      /// this session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSession(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it. This will
      /// asynchronously trigger cancellation of any operations that are running with
      /// this session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSession(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it. This will
      /// asynchronously trigger cancellation of any operations that are running with
      /// this session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSessionAsync(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ends a session, releasing server resources associated with it. This will
      /// asynchronously trigger cancellation of any operations that are running with
      /// this session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSessionAsync(global::Google.Cloud.Spanner.V1.DeleteSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      /// Executes an SQL statement, returning all results in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Operations inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]
      /// instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.ResultSet ExecuteSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteSql(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes an SQL statement, returning all results in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Operations inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]
      /// instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.ResultSet ExecuteSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteSql, null, options, request);
      }
      /// <summary>
      /// Executes an SQL statement, returning all results in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Operations inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]
      /// instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ResultSet> ExecuteSqlAsync(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteSqlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes an SQL statement, returning all results in a single reply. This
      /// method cannot be used to return a result set larger than 10 MiB;
      /// if the query yields more data than that, the query fails with
      /// a `FAILED_PRECONDITION` error.
      ///
      /// Operations inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be fetched in streaming fashion by calling
      /// [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql]
      /// instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ResultSet> ExecuteSqlAsync(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteSql, null, options, request);
      }
      /// <summary>
      /// Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the
      /// result set as a stream. Unlike
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there is no limit on
      /// the size of the returned result set. However, no individual row in the
      /// result set can exceed 100 MiB, and no column value can exceed 10 MiB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.PartialResultSet> ExecuteStreamingSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteStreamingSql(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Like [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], except returns the
      /// result set as a stream. Unlike
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql], there is no limit on
      /// the size of the returned result set. However, no individual row in the
      /// result set can exceed 100 MiB, and no column value can exceed 10 MiB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.PartialResultSet> ExecuteStreamingSql(global::Google.Cloud.Spanner.V1.ExecuteSqlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ExecuteStreamingSql, null, options, request);
      }
      /// <summary>
      /// Executes a batch of SQL DML statements. This method allows many statements
      /// to be run with lower latency than submitting them sequentially with
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].
      ///
      /// Statements are executed in sequential order. A request can succeed even if
      /// a statement fails. The
      /// [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status]
      /// field in the response provides information about the statement that failed.
      /// Clients must inspect this field to determine whether an error occurred.
      ///
      /// Execution stops after the first failed statement; the remaining statements
      /// are not executed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse ExecuteBatchDml(global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteBatchDml(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes a batch of SQL DML statements. This method allows many statements
      /// to be run with lower latency than submitting them sequentially with
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].
      ///
      /// Statements are executed in sequential order. A request can succeed even if
      /// a statement fails. The
      /// [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status]
      /// field in the response provides information about the statement that failed.
      /// Clients must inspect this field to determine whether an error occurred.
      ///
      /// Execution stops after the first failed statement; the remaining statements
      /// are not executed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse ExecuteBatchDml(global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteBatchDml, null, options, request);
      }
      /// <summary>
      /// Executes a batch of SQL DML statements. This method allows many statements
      /// to be run with lower latency than submitting them sequentially with
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].
      ///
      /// Statements are executed in sequential order. A request can succeed even if
      /// a statement fails. The
      /// [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status]
      /// field in the response provides information about the statement that failed.
      /// Clients must inspect this field to determine whether an error occurred.
      ///
      /// Execution stops after the first failed statement; the remaining statements
      /// are not executed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse> ExecuteBatchDmlAsync(global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteBatchDmlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes a batch of SQL DML statements. This method allows many statements
      /// to be run with lower latency than submitting them sequentially with
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].
      ///
      /// Statements are executed in sequential order. A request can succeed even if
      /// a statement fails. The
      /// [ExecuteBatchDmlResponse.status][google.spanner.v1.ExecuteBatchDmlResponse.status]
      /// field in the response provides information about the statement that failed.
      /// Clients must inspect this field to determine whether an error occurred.
      ///
      /// Execution stops after the first failed statement; the remaining statements
      /// are not executed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse> ExecuteBatchDmlAsync(global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteBatchDml, null, options, request);
      }
      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be
      /// used to return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.ResultSet Read(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Read(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be
      /// used to return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.ResultSet Read(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Read, null, options, request);
      }
      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be
      /// used to return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ResultSet> ReadAsync(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads rows from the database using key lookups and scans, as a
      /// simple key/value style alternative to
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].  This method cannot be
      /// used to return a result set larger than 10 MiB; if the read matches more
      /// data than that, the read fails with a `FAILED_PRECONDITION`
      /// error.
      ///
      /// Reads inside read-write transactions might return `ABORTED`. If
      /// this occurs, the application should restart the transaction from
      /// the beginning. See [Transaction][google.spanner.v1.Transaction] for more
      /// details.
      ///
      /// Larger result sets can be yielded in streaming fashion by calling
      /// [StreamingRead][google.spanner.v1.Spanner.StreamingRead] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.ResultSet> ReadAsync(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Read, null, options, request);
      }
      /// <summary>
      /// Like [Read][google.spanner.v1.Spanner.Read], except returns the result set
      /// as a stream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no
      /// limit on the size of the returned result set. However, no individual row in
      /// the result set can exceed 100 MiB, and no column value can exceed
      /// 10 MiB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.PartialResultSet> StreamingRead(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamingRead(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Like [Read][google.spanner.v1.Spanner.Read], except returns the result set
      /// as a stream. Unlike [Read][google.spanner.v1.Spanner.Read], there is no
      /// limit on the size of the returned result set. However, no individual row in
      /// the result set can exceed 100 MiB, and no column value can exceed
      /// 10 MiB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.PartialResultSet> StreamingRead(global::Google.Cloud.Spanner.V1.ReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamingRead, null, options, request);
      }
      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read],
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.Transaction BeginTransaction(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read],
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.Transaction BeginTransaction(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeginTransaction, null, options, request);
      }
      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read],
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Transaction> BeginTransactionAsync(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Begins a new transaction. This step can often be skipped:
      /// [Read][google.spanner.v1.Spanner.Read],
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] and
      /// [Commit][google.spanner.v1.Spanner.Commit] can begin a new transaction as a
      /// side-effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.Transaction> BeginTransactionAsync(global::Google.Cloud.Spanner.V1.BeginTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeginTransaction, null, options, request);
      }
      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      ///
      /// On very rare occasions, `Commit` might return `UNKNOWN`. This can happen,
      /// for example, if the client job experiences a 1+ hour networking failure.
      /// At that point, Cloud Spanner has lost track of the transaction outcome and
      /// we recommend that you perform another read from the database to see the
      /// state of things as they are now.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.CommitResponse Commit(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Commit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      ///
      /// On very rare occasions, `Commit` might return `UNKNOWN`. This can happen,
      /// for example, if the client job experiences a 1+ hour networking failure.
      /// At that point, Cloud Spanner has lost track of the transaction outcome and
      /// we recommend that you perform another read from the database to see the
      /// state of things as they are now.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.CommitResponse Commit(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Commit, null, options, request);
      }
      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      ///
      /// On very rare occasions, `Commit` might return `UNKNOWN`. This can happen,
      /// for example, if the client job experiences a 1+ hour networking failure.
      /// At that point, Cloud Spanner has lost track of the transaction outcome and
      /// we recommend that you perform another read from the database to see the
      /// state of things as they are now.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.CommitResponse> CommitAsync(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commits a transaction. The request includes the mutations to be
      /// applied to rows in the database.
      ///
      /// `Commit` might return an `ABORTED` error. This can occur at any time;
      /// commonly, the cause is conflicts with concurrent
      /// transactions. However, it can also happen for a variety of other
      /// reasons. If `Commit` returns `ABORTED`, the caller should re-attempt
      /// the transaction from the beginning, re-using the same session.
      ///
      /// On very rare occasions, `Commit` might return `UNKNOWN`. This can happen,
      /// for example, if the client job experiences a 1+ hour networking failure.
      /// At that point, Cloud Spanner has lost track of the transaction outcome and
      /// we recommend that you perform another read from the database to see the
      /// state of things as they are now.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.CommitResponse> CommitAsync(global::Google.Cloud.Spanner.V1.CommitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Commit, null, options, request);
      }
      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and ultimately
      /// decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Rollback(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Rollback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and ultimately
      /// decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Rollback(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Rollback, null, options, request);
      }
      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and ultimately
      /// decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RollbackAsync(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rolls back a transaction, releasing any locks it holds. It is a good
      /// idea to call this for any transaction that includes one or more
      /// [Read][google.spanner.v1.Spanner.Read] or
      /// [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql] requests and ultimately
      /// decides not to commit.
      ///
      /// `Rollback` returns `OK` if it successfully aborts the transaction, the
      /// transaction was already aborted, or the transaction is not
      /// found. `Rollback` never returns `ABORTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RollbackAsync(global::Google.Cloud.Spanner.V1.RollbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Rollback, null, options, request);
      }
      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a query
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] to
      /// specify a subset of the query result to read.  The same session and
      /// read-only transaction must be used by the PartitionQueryRequest used to
      /// create the partition tokens and the ExecuteSqlRequests that use the
      /// partition tokens.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the query, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.PartitionResponse PartitionQuery(global::Google.Cloud.Spanner.V1.PartitionQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PartitionQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a query
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] to
      /// specify a subset of the query result to read.  The same session and
      /// read-only transaction must be used by the PartitionQueryRequest used to
      /// create the partition tokens and the ExecuteSqlRequests that use the
      /// partition tokens.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the query, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.PartitionResponse PartitionQuery(global::Google.Cloud.Spanner.V1.PartitionQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PartitionQuery, null, options, request);
      }
      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a query
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] to
      /// specify a subset of the query result to read.  The same session and
      /// read-only transaction must be used by the PartitionQueryRequest used to
      /// create the partition tokens and the ExecuteSqlRequests that use the
      /// partition tokens.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the query, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.PartitionResponse> PartitionQueryAsync(global::Google.Cloud.Spanner.V1.PartitionQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PartitionQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a query
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [ExecuteStreamingSql][google.spanner.v1.Spanner.ExecuteStreamingSql] to
      /// specify a subset of the query result to read.  The same session and
      /// read-only transaction must be used by the PartitionQueryRequest used to
      /// create the partition tokens and the ExecuteSqlRequests that use the
      /// partition tokens.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the query, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.PartitionResponse> PartitionQueryAsync(global::Google.Cloud.Spanner.V1.PartitionQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PartitionQuery, null, options, request);
      }
      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a read
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to specify a
      /// subset of the read result to read.  The same session and read-only
      /// transaction must be used by the PartitionReadRequest used to create the
      /// partition tokens and the ReadRequests that use the partition tokens.  There
      /// are no ordering guarantees on rows returned among the returned partition
      /// tokens, or even within each individual StreamingRead call issued with a
      /// partition_token.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the read, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.PartitionResponse PartitionRead(global::Google.Cloud.Spanner.V1.PartitionReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PartitionRead(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a read
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to specify a
      /// subset of the read result to read.  The same session and read-only
      /// transaction must be used by the PartitionReadRequest used to create the
      /// partition tokens and the ReadRequests that use the partition tokens.  There
      /// are no ordering guarantees on rows returned among the returned partition
      /// tokens, or even within each individual StreamingRead call issued with a
      /// partition_token.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the read, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Spanner.V1.PartitionResponse PartitionRead(global::Google.Cloud.Spanner.V1.PartitionReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PartitionRead, null, options, request);
      }
      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a read
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to specify a
      /// subset of the read result to read.  The same session and read-only
      /// transaction must be used by the PartitionReadRequest used to create the
      /// partition tokens and the ReadRequests that use the partition tokens.  There
      /// are no ordering guarantees on rows returned among the returned partition
      /// tokens, or even within each individual StreamingRead call issued with a
      /// partition_token.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the read, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.PartitionResponse> PartitionReadAsync(global::Google.Cloud.Spanner.V1.PartitionReadRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PartitionReadAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a set of partition tokens that can be used to execute a read
      /// operation in parallel.  Each of the returned partition tokens can be used
      /// by [StreamingRead][google.spanner.v1.Spanner.StreamingRead] to specify a
      /// subset of the read result to read.  The same session and read-only
      /// transaction must be used by the PartitionReadRequest used to create the
      /// partition tokens and the ReadRequests that use the partition tokens.  There
      /// are no ordering guarantees on rows returned among the returned partition
      /// tokens, or even within each individual StreamingRead call issued with a
      /// partition_token.
      ///
      /// Partition tokens become invalid when the session used to create them
      /// is deleted, is idle for too long, begins a new transaction, or becomes too
      /// old.  When any of these happen, it is not possible to resume the read, and
      /// the whole operation must be restarted from the beginning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Spanner.V1.PartitionResponse> PartitionReadAsync(global::Google.Cloud.Spanner.V1.PartitionReadRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PartitionRead, null, options, request);
      }
      /// <summary>
      /// Batches the supplied mutation groups in a collection of efficient
      /// transactions. All mutations in a group are committed atomically. However,
      /// mutations across groups can be committed non-atomically in an unspecified
      /// order and thus, they must be independent of each other. Partial failure is
      /// possible, i.e., some groups may have been committed successfully, while
      /// some may have failed. The results of individual batches are streamed into
      /// the response as the batches are applied.
      ///
      /// BatchWrite requests are not replay protected, meaning that each mutation
      /// group may be applied more than once. Replays of non-idempotent mutations
      /// may have undesirable effects. For example, replays of an insert mutation
      /// may produce an already exists error or if you use generated or commit
      /// timestamp-based keys, it may result in additional rows being added to the
      /// mutation's table. We recommend structuring your mutation groups to be
      /// idempotent to avoid this issue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.BatchWriteResponse> BatchWrite(global::Google.Cloud.Spanner.V1.BatchWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchWrite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batches the supplied mutation groups in a collection of efficient
      /// transactions. All mutations in a group are committed atomically. However,
      /// mutations across groups can be committed non-atomically in an unspecified
      /// order and thus, they must be independent of each other. Partial failure is
      /// possible, i.e., some groups may have been committed successfully, while
      /// some may have failed. The results of individual batches are streamed into
      /// the response as the batches are applied.
      ///
      /// BatchWrite requests are not replay protected, meaning that each mutation
      /// group may be applied more than once. Replays of non-idempotent mutations
      /// may have undesirable effects. For example, replays of an insert mutation
      /// may produce an already exists error or if you use generated or commit
      /// timestamp-based keys, it may result in additional rows being added to the
      /// mutation's table. We recommend structuring your mutation groups to be
      /// idempotent to avoid this issue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Spanner.V1.BatchWriteResponse> BatchWrite(global::Google.Cloud.Spanner.V1.BatchWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_BatchWrite, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SpannerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SpannerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SpannerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSession, serviceImpl.CreateSession)
          .AddMethod(__Method_BatchCreateSessions, serviceImpl.BatchCreateSessions)
          .AddMethod(__Method_GetSession, serviceImpl.GetSession)
          .AddMethod(__Method_ListSessions, serviceImpl.ListSessions)
          .AddMethod(__Method_DeleteSession, serviceImpl.DeleteSession)
          .AddMethod(__Method_ExecuteSql, serviceImpl.ExecuteSql)
          .AddMethod(__Method_ExecuteStreamingSql, serviceImpl.ExecuteStreamingSql)
          .AddMethod(__Method_ExecuteBatchDml, serviceImpl.ExecuteBatchDml)
          .AddMethod(__Method_Read, serviceImpl.Read)
          .AddMethod(__Method_StreamingRead, serviceImpl.StreamingRead)
          .AddMethod(__Method_BeginTransaction, serviceImpl.BeginTransaction)
          .AddMethod(__Method_Commit, serviceImpl.Commit)
          .AddMethod(__Method_Rollback, serviceImpl.Rollback)
          .AddMethod(__Method_PartitionQuery, serviceImpl.PartitionQuery)
          .AddMethod(__Method_PartitionRead, serviceImpl.PartitionRead)
          .AddMethod(__Method_BatchWrite, serviceImpl.BatchWrite).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SpannerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.CreateSessionRequest, global::Google.Cloud.Spanner.V1.Session>(serviceImpl.CreateSession));
      serviceBinder.AddMethod(__Method_BatchCreateSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.BatchCreateSessionsRequest, global::Google.Cloud.Spanner.V1.BatchCreateSessionsResponse>(serviceImpl.BatchCreateSessions));
      serviceBinder.AddMethod(__Method_GetSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.GetSessionRequest, global::Google.Cloud.Spanner.V1.Session>(serviceImpl.GetSession));
      serviceBinder.AddMethod(__Method_ListSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.ListSessionsRequest, global::Google.Cloud.Spanner.V1.ListSessionsResponse>(serviceImpl.ListSessions));
      serviceBinder.AddMethod(__Method_DeleteSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.DeleteSessionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteSession));
      serviceBinder.AddMethod(__Method_ExecuteSql, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.ResultSet>(serviceImpl.ExecuteSql));
      serviceBinder.AddMethod(__Method_ExecuteStreamingSql, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Spanner.V1.ExecuteSqlRequest, global::Google.Cloud.Spanner.V1.PartialResultSet>(serviceImpl.ExecuteStreamingSql));
      serviceBinder.AddMethod(__Method_ExecuteBatchDml, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.ExecuteBatchDmlRequest, global::Google.Cloud.Spanner.V1.ExecuteBatchDmlResponse>(serviceImpl.ExecuteBatchDml));
      serviceBinder.AddMethod(__Method_Read, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.ResultSet>(serviceImpl.Read));
      serviceBinder.AddMethod(__Method_StreamingRead, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Spanner.V1.ReadRequest, global::Google.Cloud.Spanner.V1.PartialResultSet>(serviceImpl.StreamingRead));
      serviceBinder.AddMethod(__Method_BeginTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.BeginTransactionRequest, global::Google.Cloud.Spanner.V1.Transaction>(serviceImpl.BeginTransaction));
      serviceBinder.AddMethod(__Method_Commit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.CommitRequest, global::Google.Cloud.Spanner.V1.CommitResponse>(serviceImpl.Commit));
      serviceBinder.AddMethod(__Method_Rollback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.RollbackRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Rollback));
      serviceBinder.AddMethod(__Method_PartitionQuery, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.PartitionQueryRequest, global::Google.Cloud.Spanner.V1.PartitionResponse>(serviceImpl.PartitionQuery));
      serviceBinder.AddMethod(__Method_PartitionRead, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Spanner.V1.PartitionReadRequest, global::Google.Cloud.Spanner.V1.PartitionResponse>(serviceImpl.PartitionRead));
      serviceBinder.AddMethod(__Method_BatchWrite, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Spanner.V1.BatchWriteRequest, global::Google.Cloud.Spanner.V1.BatchWriteResponse>(serviceImpl.BatchWrite));
    }

  }
}
#endregion
