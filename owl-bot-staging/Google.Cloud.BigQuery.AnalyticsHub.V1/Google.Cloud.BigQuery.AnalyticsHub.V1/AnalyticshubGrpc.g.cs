// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/bigquery/analyticshub/v1/analyticshub.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.BigQuery.AnalyticsHub.V1 {
  /// <summary>
  /// The `AnalyticsHubService` API facilitates data sharing within and across
  /// organizations. It allows data providers to publish listings that reference
  /// shared datasets. With Analytics Hub, users can discover and search for
  /// listings that they have access to. Subscribers can view and subscribe to
  /// listings. When you subscribe to a listing, Analytics Hub creates a linked
  /// dataset in your project.
  /// </summary>
  public static partial class AnalyticsHubService
  {
    static readonly string __ServiceName = "google.cloud.bigquery.analyticshub.v1.AnalyticsHubService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListDataExchangesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListDataExchangesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListOrgDataExchangesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListOrgDataExchangesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_GetDataExchangeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> __Marshaller_google_cloud_bigquery_analyticshub_v1_DataExchange = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_CreateDataExchangeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_UpdateDataExchangeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_DeleteDataExchangeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListListingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListListingsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_GetListingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> __Marshaller_google_cloud_bigquery_analyticshub_v1_Listing = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_CreateListingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_UpdateListingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_DeleteListingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_SubscribeListingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse> __Marshaller_google_cloud_bigquery_analyticshub_v1_SubscribeListingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_SubscribeDataExchangeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_RefreshSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_GetSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription> __Marshaller_google_cloud_bigquery_analyticshub_v1_Subscription = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListSubscriptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListSubscriptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListSharedResourceSubscriptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse> __Marshaller_google_cloud_bigquery_analyticshub_v1_ListSharedResourceSubscriptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_RevokeSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse> __Marshaller_google_cloud_bigquery_analyticshub_v1_RevokeSubscriptionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest> __Marshaller_google_cloud_bigquery_analyticshub_v1_DeleteSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse> __Method_ListDataExchanges = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDataExchanges",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListDataExchangesRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListDataExchangesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse> __Method_ListOrgDataExchanges = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrgDataExchanges",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListOrgDataExchangesRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListOrgDataExchangesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> __Method_GetDataExchange = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataExchange",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_GetDataExchangeRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_DataExchange);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> __Method_CreateDataExchange = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDataExchange",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_CreateDataExchangeRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_DataExchange);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> __Method_UpdateDataExchange = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDataExchange",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_UpdateDataExchangeRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_DataExchange);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDataExchange = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDataExchange",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_DeleteDataExchangeRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse> __Method_ListListings = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListListings",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListListingsRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListListingsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> __Method_GetListing = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetListing",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_GetListingRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_Listing);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> __Method_CreateListing = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateListing",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_CreateListingRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_Listing);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> __Method_UpdateListing = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateListing",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_UpdateListingRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_Listing);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteListing = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteListing",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_DeleteListingRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse> __Method_SubscribeListing = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeListing",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_SubscribeListingRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_SubscribeListingResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest, global::Google.LongRunning.Operation> __Method_SubscribeDataExchange = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubscribeDataExchange",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_SubscribeDataExchangeRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest, global::Google.LongRunning.Operation> __Method_RefreshSubscription = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RefreshSubscription",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_RefreshSubscriptionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription> __Method_GetSubscription = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSubscription",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_GetSubscriptionRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_Subscription);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse> __Method_ListSubscriptions = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSubscriptions",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListSubscriptionsRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListSubscriptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse> __Method_ListSharedResourceSubscriptions = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSharedResourceSubscriptions",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListSharedResourceSubscriptionsRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_ListSharedResourceSubscriptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse> __Method_RevokeSubscription = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RevokeSubscription",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_RevokeSubscriptionRequest,
        __Marshaller_google_cloud_bigquery_analyticshub_v1_RevokeSubscriptionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest, global::Google.LongRunning.Operation> __Method_DeleteSubscription = new grpc::Method<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSubscription",
        __Marshaller_google_cloud_bigquery_analyticshub_v1_DeleteSubscriptionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.BigQuery.AnalyticsHub.V1.AnalyticshubReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AnalyticsHubService</summary>
    [grpc::BindServiceMethod(typeof(AnalyticsHubService), "BindService")]
    public abstract partial class AnalyticsHubServiceBase
    {
      /// <summary>
      /// Lists all data exchanges in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse> ListDataExchanges(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all data exchanges from projects in a given organization and
      /// location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse> ListOrgDataExchanges(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the details of a data exchange.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> GetDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new data exchange.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> CreateDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing data exchange.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> UpdateDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an existing data exchange.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all listings in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse> ListListings(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the details of a listing.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> GetListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new listing.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> CreateListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing listing.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> UpdateListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a listing.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Subscribes to a listing.
      ///
      /// Currently, with Analytics Hub, you can create listings that
      /// reference only BigQuery datasets.
      /// Upon subscription to a listing for a BigQuery dataset, Analytics Hub
      /// creates a linked dataset in the subscriber's project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse> SubscribeListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a Subscription to a Data Exchange. This is a long-running operation
      /// as it will create one or more linked datasets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> SubscribeDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Refreshes a Subscription to a Data Exchange. A Data Exchange can become
      /// stale when a publisher adds or removes data. This is a long-running
      /// operation as it may create many linked datasets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RefreshSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the details of a Subscription.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription> GetSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all subscriptions in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse> ListSubscriptions(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all subscriptions on a given Data Exchange or Listing.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse> ListSharedResourceSubscriptions(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Revokes a given subscription.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse> RevokeSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a subscription.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the IAM policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the IAM policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the permissions that a caller has.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AnalyticsHubService</summary>
    public partial class AnalyticsHubServiceClient : grpc::ClientBase<AnalyticsHubServiceClient>
    {
      /// <summary>Creates a new client for AnalyticsHubService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AnalyticsHubServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AnalyticsHubService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AnalyticsHubServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AnalyticsHubServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AnalyticsHubServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists all data exchanges in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse ListDataExchanges(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataExchanges(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all data exchanges in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse ListDataExchanges(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDataExchanges, null, options, request);
      }
      /// <summary>
      /// Lists all data exchanges in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse> ListDataExchangesAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataExchangesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all data exchanges in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse> ListDataExchangesAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDataExchanges, null, options, request);
      }
      /// <summary>
      /// Lists all data exchanges from projects in a given organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse ListOrgDataExchanges(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrgDataExchanges(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all data exchanges from projects in a given organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse ListOrgDataExchanges(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrgDataExchanges, null, options, request);
      }
      /// <summary>
      /// Lists all data exchanges from projects in a given organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse> ListOrgDataExchangesAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrgDataExchangesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all data exchanges from projects in a given organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse> ListOrgDataExchangesAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrgDataExchanges, null, options, request);
      }
      /// <summary>
      /// Gets the details of a data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange GetDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataExchange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange GetDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataExchange, null, options, request);
      }
      /// <summary>
      /// Gets the details of a data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> GetDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataExchangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> GetDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataExchange, null, options, request);
      }
      /// <summary>
      /// Creates a new data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange CreateDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataExchange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange CreateDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDataExchange, null, options, request);
      }
      /// <summary>
      /// Creates a new data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> CreateDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataExchangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> CreateDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDataExchange, null, options, request);
      }
      /// <summary>
      /// Updates an existing data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange UpdateDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataExchange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange UpdateDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDataExchange, null, options, request);
      }
      /// <summary>
      /// Updates an existing data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> UpdateDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataExchangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange> UpdateDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDataExchange, null, options, request);
      }
      /// <summary>
      /// Deletes an existing data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataExchange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDataExchange, null, options, request);
      }
      /// <summary>
      /// Deletes an existing data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataExchangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an existing data exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDataExchange, null, options, request);
      }
      /// <summary>
      /// Lists all listings in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse ListListings(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListListings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all listings in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse ListListings(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListListings, null, options, request);
      }
      /// <summary>
      /// Lists all listings in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse> ListListingsAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListListingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all listings in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse> ListListingsAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListListings, null, options, request);
      }
      /// <summary>
      /// Gets the details of a listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing GetListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing GetListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetListing, null, options, request);
      }
      /// <summary>
      /// Gets the details of a listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> GetListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> GetListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetListing, null, options, request);
      }
      /// <summary>
      /// Creates a new listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing CreateListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing CreateListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateListing, null, options, request);
      }
      /// <summary>
      /// Creates a new listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> CreateListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> CreateListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateListing, null, options, request);
      }
      /// <summary>
      /// Updates an existing listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing UpdateListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing UpdateListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateListing, null, options, request);
      }
      /// <summary>
      /// Updates an existing listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> UpdateListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing> UpdateListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateListing, null, options, request);
      }
      /// <summary>
      /// Deletes a listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteListing, null, options, request);
      }
      /// <summary>
      /// Deletes a listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteListing, null, options, request);
      }
      /// <summary>
      /// Subscribes to a listing.
      ///
      /// Currently, with Analytics Hub, you can create listings that
      /// reference only BigQuery datasets.
      /// Upon subscription to a listing for a BigQuery dataset, Analytics Hub
      /// creates a linked dataset in the subscriber's project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse SubscribeListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes to a listing.
      ///
      /// Currently, with Analytics Hub, you can create listings that
      /// reference only BigQuery datasets.
      /// Upon subscription to a listing for a BigQuery dataset, Analytics Hub
      /// creates a linked dataset in the subscriber's project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse SubscribeListing(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeListing, null, options, request);
      }
      /// <summary>
      /// Subscribes to a listing.
      ///
      /// Currently, with Analytics Hub, you can create listings that
      /// reference only BigQuery datasets.
      /// Upon subscription to a listing for a BigQuery dataset, Analytics Hub
      /// creates a linked dataset in the subscriber's project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse> SubscribeListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Subscribes to a listing.
      ///
      /// Currently, with Analytics Hub, you can create listings that
      /// reference only BigQuery datasets.
      /// Upon subscription to a listing for a BigQuery dataset, Analytics Hub
      /// creates a linked dataset in the subscriber's project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse> SubscribeListingAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeListing, null, options, request);
      }
      /// <summary>
      /// Creates a Subscription to a Data Exchange. This is a long-running operation
      /// as it will create one or more linked datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SubscribeDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeDataExchange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Subscription to a Data Exchange. This is a long-running operation
      /// as it will create one or more linked datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SubscribeDataExchange(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubscribeDataExchange, null, options, request);
      }
      /// <summary>
      /// Creates a Subscription to a Data Exchange. This is a long-running operation
      /// as it will create one or more linked datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SubscribeDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeDataExchangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Subscription to a Data Exchange. This is a long-running operation
      /// as it will create one or more linked datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SubscribeDataExchangeAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubscribeDataExchange, null, options, request);
      }
      /// <summary>
      /// Refreshes a Subscription to a Data Exchange. A Data Exchange can become
      /// stale when a publisher adds or removes data. This is a long-running
      /// operation as it may create many linked datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RefreshSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Refreshes a Subscription to a Data Exchange. A Data Exchange can become
      /// stale when a publisher adds or removes data. This is a long-running
      /// operation as it may create many linked datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RefreshSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RefreshSubscription, null, options, request);
      }
      /// <summary>
      /// Refreshes a Subscription to a Data Exchange. A Data Exchange can become
      /// stale when a publisher adds or removes data. This is a long-running
      /// operation as it may create many linked datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RefreshSubscriptionAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Refreshes a Subscription to a Data Exchange. A Data Exchange can become
      /// stale when a publisher adds or removes data. This is a long-running
      /// operation as it may create many linked datasets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RefreshSubscriptionAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RefreshSubscription, null, options, request);
      }
      /// <summary>
      /// Gets the details of a Subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription GetSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a Subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription GetSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      /// Gets the details of a Subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription> GetSubscriptionAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a Subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription> GetSubscriptionAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSubscription, null, options, request);
      }
      /// <summary>
      /// Lists all subscriptions in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse ListSubscriptions(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all subscriptions in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse ListSubscriptions(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      /// Lists all subscriptions in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all subscriptions in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse> ListSubscriptionsAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSubscriptions, null, options, request);
      }
      /// <summary>
      /// Lists all subscriptions on a given Data Exchange or Listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse ListSharedResourceSubscriptions(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSharedResourceSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all subscriptions on a given Data Exchange or Listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse ListSharedResourceSubscriptions(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSharedResourceSubscriptions, null, options, request);
      }
      /// <summary>
      /// Lists all subscriptions on a given Data Exchange or Listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse> ListSharedResourceSubscriptionsAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSharedResourceSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all subscriptions on a given Data Exchange or Listing.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse> ListSharedResourceSubscriptionsAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSharedResourceSubscriptions, null, options, request);
      }
      /// <summary>
      /// Revokes a given subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse RevokeSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Revokes a given subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse RevokeSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RevokeSubscription, null, options, request);
      }
      /// <summary>
      /// Revokes a given subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse> RevokeSubscriptionAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Revokes a given subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse> RevokeSubscriptionAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RevokeSubscription, null, options, request);
      }
      /// <summary>
      /// Deletes a subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteSubscription(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSubscription, null, options, request);
      }
      /// <summary>
      /// Deletes a subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteSubscriptionAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a subscription.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteSubscriptionAsync(global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSubscription, null, options, request);
      }
      /// <summary>
      /// Gets the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the IAM policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns the permissions that a caller has.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the permissions that a caller has.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns the permissions that a caller has.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the permissions that a caller has.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AnalyticsHubServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AnalyticsHubServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AnalyticsHubServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListDataExchanges, serviceImpl.ListDataExchanges)
          .AddMethod(__Method_ListOrgDataExchanges, serviceImpl.ListOrgDataExchanges)
          .AddMethod(__Method_GetDataExchange, serviceImpl.GetDataExchange)
          .AddMethod(__Method_CreateDataExchange, serviceImpl.CreateDataExchange)
          .AddMethod(__Method_UpdateDataExchange, serviceImpl.UpdateDataExchange)
          .AddMethod(__Method_DeleteDataExchange, serviceImpl.DeleteDataExchange)
          .AddMethod(__Method_ListListings, serviceImpl.ListListings)
          .AddMethod(__Method_GetListing, serviceImpl.GetListing)
          .AddMethod(__Method_CreateListing, serviceImpl.CreateListing)
          .AddMethod(__Method_UpdateListing, serviceImpl.UpdateListing)
          .AddMethod(__Method_DeleteListing, serviceImpl.DeleteListing)
          .AddMethod(__Method_SubscribeListing, serviceImpl.SubscribeListing)
          .AddMethod(__Method_SubscribeDataExchange, serviceImpl.SubscribeDataExchange)
          .AddMethod(__Method_RefreshSubscription, serviceImpl.RefreshSubscription)
          .AddMethod(__Method_GetSubscription, serviceImpl.GetSubscription)
          .AddMethod(__Method_ListSubscriptions, serviceImpl.ListSubscriptions)
          .AddMethod(__Method_ListSharedResourceSubscriptions, serviceImpl.ListSharedResourceSubscriptions)
          .AddMethod(__Method_RevokeSubscription, serviceImpl.RevokeSubscription)
          .AddMethod(__Method_DeleteSubscription, serviceImpl.DeleteSubscription)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AnalyticsHubServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListDataExchanges, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListDataExchangesResponse>(serviceImpl.ListDataExchanges));
      serviceBinder.AddMethod(__Method_ListOrgDataExchanges, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListOrgDataExchangesResponse>(serviceImpl.ListOrgDataExchanges));
      serviceBinder.AddMethod(__Method_GetDataExchange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange>(serviceImpl.GetDataExchange));
      serviceBinder.AddMethod(__Method_CreateDataExchange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange>(serviceImpl.CreateDataExchange));
      serviceBinder.AddMethod(__Method_UpdateDataExchange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateDataExchangeRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.DataExchange>(serviceImpl.UpdateDataExchange));
      serviceBinder.AddMethod(__Method_DeleteDataExchange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteDataExchangeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDataExchange));
      serviceBinder.AddMethod(__Method_ListListings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListListingsResponse>(serviceImpl.ListListings));
      serviceBinder.AddMethod(__Method_GetListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing>(serviceImpl.GetListing));
      serviceBinder.AddMethod(__Method_CreateListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.CreateListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing>(serviceImpl.CreateListing));
      serviceBinder.AddMethod(__Method_UpdateListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.UpdateListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Listing>(serviceImpl.UpdateListing));
      serviceBinder.AddMethod(__Method_DeleteListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteListingRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteListing));
      serviceBinder.AddMethod(__Method_SubscribeListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeListingResponse>(serviceImpl.SubscribeListing));
      serviceBinder.AddMethod(__Method_SubscribeDataExchange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.SubscribeDataExchangeRequest, global::Google.LongRunning.Operation>(serviceImpl.SubscribeDataExchange));
      serviceBinder.AddMethod(__Method_RefreshSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RefreshSubscriptionRequest, global::Google.LongRunning.Operation>(serviceImpl.RefreshSubscription));
      serviceBinder.AddMethod(__Method_GetSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.GetSubscriptionRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.Subscription>(serviceImpl.GetSubscription));
      serviceBinder.AddMethod(__Method_ListSubscriptions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSubscriptionsResponse>(serviceImpl.ListSubscriptions));
      serviceBinder.AddMethod(__Method_ListSharedResourceSubscriptions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.ListSharedResourceSubscriptionsResponse>(serviceImpl.ListSharedResourceSubscriptions));
      serviceBinder.AddMethod(__Method_RevokeSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionRequest, global::Google.Cloud.BigQuery.AnalyticsHub.V1.RevokeSubscriptionResponse>(serviceImpl.RevokeSubscription));
      serviceBinder.AddMethod(__Method_DeleteSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.BigQuery.AnalyticsHub.V1.DeleteSubscriptionRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteSubscription));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
}
#endregion
