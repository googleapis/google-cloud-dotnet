// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/routing/v2/waypoint.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Maps.Routing.V2 {

  /// <summary>Holder for reflection information generated from google/maps/routing/v2/waypoint.proto</summary>
  public static partial class WaypointReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/routing/v2/waypoint.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WaypointReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVnb29nbGUvbWFwcy9yb3V0aW5nL3YyL3dheXBvaW50LnByb3RvEhZnb29n",
            "bGUubWFwcy5yb3V0aW5nLnYyGiVnb29nbGUvbWFwcy9yb3V0aW5nL3YyL2xv",
            "Y2F0aW9uLnByb3RvIrUBCghXYXlwb2ludBI0Cghsb2NhdGlvbhgBIAEoCzIg",
            "Lmdvb2dsZS5tYXBzLnJvdXRpbmcudjIuTG9jYXRpb25IABISCghwbGFjZV9p",
            "ZBgCIAEoCUgAEhEKB2FkZHJlc3MYByABKAlIABILCgN2aWEYAyABKAgSGAoQ",
            "dmVoaWNsZV9zdG9wb3ZlchgEIAEoCBIUCgxzaWRlX29mX3JvYWQYBSABKAhC",
            "DwoNbG9jYXRpb25fdHlwZUK/AQoaY29tLmdvb2dsZS5tYXBzLnJvdXRpbmcu",
            "djJCDVdheXBvaW50UHJvdG9QAVo6Y2xvdWQuZ29vZ2xlLmNvbS9nby9tYXBz",
            "L3JvdXRpbmcvYXBpdjIvcm91dGluZ3BiO3JvdXRpbmdwYqICBUdNUlYyqgIW",
            "R29vZ2xlLk1hcHMuUm91dGluZy5WMsoCFkdvb2dsZVxNYXBzXFJvdXRpbmdc",
            "VjLqAhlHb29nbGU6Ok1hcHM6OlJvdXRpbmc6OlYyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Maps.Routing.V2.LocationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.Routing.V2.Waypoint), global::Google.Maps.Routing.V2.Waypoint.Parser, new[]{ "Location", "PlaceId", "Address", "Via", "VehicleStopover", "SideOfRoad" }, new[]{ "LocationType" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Encapsulates a waypoint. Waypoints mark both the beginning and end of a
  /// route, and include intermediate stops along the route.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Waypoint : pb::IMessage<Waypoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Waypoint> _parser = new pb::MessageParser<Waypoint>(() => new Waypoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Waypoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.Routing.V2.WaypointReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Waypoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Waypoint(Waypoint other) : this() {
      via_ = other.via_;
      vehicleStopover_ = other.vehicleStopover_;
      sideOfRoad_ = other.sideOfRoad_;
      switch (other.LocationTypeCase) {
        case LocationTypeOneofCase.Location:
          Location = other.Location.Clone();
          break;
        case LocationTypeOneofCase.PlaceId:
          PlaceId = other.PlaceId;
          break;
        case LocationTypeOneofCase.Address:
          Address = other.Address;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Waypoint Clone() {
      return new Waypoint(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    /// <summary>
    /// A point specified using geographic coordinates, including an optional
    /// heading.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Maps.Routing.V2.Location Location {
      get { return locationTypeCase_ == LocationTypeOneofCase.Location ? (global::Google.Maps.Routing.V2.Location) locationType_ : null; }
      set {
        locationType_ = value;
        locationTypeCase_ = value == null ? LocationTypeOneofCase.None : LocationTypeOneofCase.Location;
      }
    }

    /// <summary>Field number for the "place_id" field.</summary>
    public const int PlaceIdFieldNumber = 2;
    /// <summary>
    /// The POI Place ID associated with the waypoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlaceId {
      get { return HasPlaceId ? (string) locationType_ : ""; }
      set {
        locationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        locationTypeCase_ = LocationTypeOneofCase.PlaceId;
      }
    }
    /// <summary>Gets whether the "place_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPlaceId {
      get { return locationTypeCase_ == LocationTypeOneofCase.PlaceId; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "place_id" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPlaceId() {
      if (HasPlaceId) {
        ClearLocationType();
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 7;
    /// <summary>
    /// Human readable address or a plus code.
    /// See https://plus.codes for details.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Address {
      get { return HasAddress ? (string) locationType_ : ""; }
      set {
        locationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        locationTypeCase_ = LocationTypeOneofCase.Address;
      }
    }
    /// <summary>Gets whether the "address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAddress {
      get { return locationTypeCase_ == LocationTypeOneofCase.Address; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "address" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAddress() {
      if (HasAddress) {
        ClearLocationType();
      }
    }

    /// <summary>Field number for the "via" field.</summary>
    public const int ViaFieldNumber = 3;
    private bool via_;
    /// <summary>
    /// Marks this waypoint as a milestone rather a stopping point. For
    /// each non-via waypoint in the request, the response appends an entry to the
    /// [`legs`][google.maps.routing.v2.Route.legs]
    /// array to provide the details for stopovers on that leg of the trip. Set
    /// this value to true when you want the route to pass through this waypoint
    /// without stopping over. Via waypoints don't cause an entry to be added to
    /// the `legs` array, but they do route the journey through the waypoint. You
    /// can only set this value on waypoints that are intermediates. The request
    /// fails if you set this field on terminal waypoints. If
    /// `ComputeRoutesRequest.optimize_waypoint_order` is set to true then this
    /// field cannot be set to true; otherwise, the request fails.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Via {
      get { return via_; }
      set {
        via_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_stopover" field.</summary>
    public const int VehicleStopoverFieldNumber = 4;
    private bool vehicleStopover_;
    /// <summary>
    /// Indicates that the waypoint is meant for vehicles to stop at, where the
    /// intention is to either pickup or drop-off. When you set this value, the
    /// calculated route won't include non-`via` waypoints on roads that are
    /// unsuitable for pickup and drop-off. This option works only for `DRIVE` and
    /// `TWO_WHEELER` travel modes, and when the `location_type` is
    /// [`Location`][google.maps.routing.v2.Location].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool VehicleStopover {
      get { return vehicleStopover_; }
      set {
        vehicleStopover_ = value;
      }
    }

    /// <summary>Field number for the "side_of_road" field.</summary>
    public const int SideOfRoadFieldNumber = 5;
    private bool sideOfRoad_;
    /// <summary>
    /// Indicates that the location of this waypoint is meant to have a preference
    /// for the vehicle to stop at a particular side of road. When you set this
    /// value, the route will pass through the location so that the vehicle can
    /// stop at the side of road that the location is biased towards from the
    /// center of the road. This option works only for `DRIVE` and `TWO_WHEELER`
    /// [`RouteTravelMode`][google.maps.routing.v2.RouteTravelMode].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SideOfRoad {
      get { return sideOfRoad_; }
      set {
        sideOfRoad_ = value;
      }
    }

    private object locationType_;
    /// <summary>Enum of possible cases for the "location_type" oneof.</summary>
    public enum LocationTypeOneofCase {
      None = 0,
      Location = 1,
      PlaceId = 2,
      Address = 7,
    }
    private LocationTypeOneofCase locationTypeCase_ = LocationTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LocationTypeOneofCase LocationTypeCase {
      get { return locationTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocationType() {
      locationTypeCase_ = LocationTypeOneofCase.None;
      locationType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Waypoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Waypoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (PlaceId != other.PlaceId) return false;
      if (Address != other.Address) return false;
      if (Via != other.Via) return false;
      if (VehicleStopover != other.VehicleStopover) return false;
      if (SideOfRoad != other.SideOfRoad) return false;
      if (LocationTypeCase != other.LocationTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (locationTypeCase_ == LocationTypeOneofCase.Location) hash ^= Location.GetHashCode();
      if (HasPlaceId) hash ^= PlaceId.GetHashCode();
      if (HasAddress) hash ^= Address.GetHashCode();
      if (Via != false) hash ^= Via.GetHashCode();
      if (VehicleStopover != false) hash ^= VehicleStopover.GetHashCode();
      if (SideOfRoad != false) hash ^= SideOfRoad.GetHashCode();
      hash ^= (int) locationTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (locationTypeCase_ == LocationTypeOneofCase.Location) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasPlaceId) {
        output.WriteRawTag(18);
        output.WriteString(PlaceId);
      }
      if (Via != false) {
        output.WriteRawTag(24);
        output.WriteBool(Via);
      }
      if (VehicleStopover != false) {
        output.WriteRawTag(32);
        output.WriteBool(VehicleStopover);
      }
      if (SideOfRoad != false) {
        output.WriteRawTag(40);
        output.WriteBool(SideOfRoad);
      }
      if (HasAddress) {
        output.WriteRawTag(58);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (locationTypeCase_ == LocationTypeOneofCase.Location) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasPlaceId) {
        output.WriteRawTag(18);
        output.WriteString(PlaceId);
      }
      if (Via != false) {
        output.WriteRawTag(24);
        output.WriteBool(Via);
      }
      if (VehicleStopover != false) {
        output.WriteRawTag(32);
        output.WriteBool(VehicleStopover);
      }
      if (SideOfRoad != false) {
        output.WriteRawTag(40);
        output.WriteBool(SideOfRoad);
      }
      if (HasAddress) {
        output.WriteRawTag(58);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (locationTypeCase_ == LocationTypeOneofCase.Location) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (HasPlaceId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlaceId);
      }
      if (HasAddress) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Via != false) {
        size += 1 + 1;
      }
      if (VehicleStopover != false) {
        size += 1 + 1;
      }
      if (SideOfRoad != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Waypoint other) {
      if (other == null) {
        return;
      }
      if (other.Via != false) {
        Via = other.Via;
      }
      if (other.VehicleStopover != false) {
        VehicleStopover = other.VehicleStopover;
      }
      if (other.SideOfRoad != false) {
        SideOfRoad = other.SideOfRoad;
      }
      switch (other.LocationTypeCase) {
        case LocationTypeOneofCase.Location:
          if (Location == null) {
            Location = new global::Google.Maps.Routing.V2.Location();
          }
          Location.MergeFrom(other.Location);
          break;
        case LocationTypeOneofCase.PlaceId:
          PlaceId = other.PlaceId;
          break;
        case LocationTypeOneofCase.Address:
          Address = other.Address;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Google.Maps.Routing.V2.Location subBuilder = new global::Google.Maps.Routing.V2.Location();
            if (locationTypeCase_ == LocationTypeOneofCase.Location) {
              subBuilder.MergeFrom(Location);
            }
            input.ReadMessage(subBuilder);
            Location = subBuilder;
            break;
          }
          case 18: {
            PlaceId = input.ReadString();
            break;
          }
          case 24: {
            Via = input.ReadBool();
            break;
          }
          case 32: {
            VehicleStopover = input.ReadBool();
            break;
          }
          case 40: {
            SideOfRoad = input.ReadBool();
            break;
          }
          case 58: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Google.Maps.Routing.V2.Location subBuilder = new global::Google.Maps.Routing.V2.Location();
            if (locationTypeCase_ == LocationTypeOneofCase.Location) {
              subBuilder.MergeFrom(Location);
            }
            input.ReadMessage(subBuilder);
            Location = subBuilder;
            break;
          }
          case 18: {
            PlaceId = input.ReadString();
            break;
          }
          case 24: {
            Via = input.ReadBool();
            break;
          }
          case 32: {
            VehicleStopover = input.ReadBool();
            break;
          }
          case 40: {
            SideOfRoad = input.ReadBool();
            break;
          }
          case 58: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
