// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/automl/v1/classification.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.AutoML.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/automl/v1/classification.proto</summary>
  public static partial class ClassificationReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/automl/v1/classification.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClassificationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Citnb29nbGUvY2xvdWQvYXV0b21sL3YxL2NsYXNzaWZpY2F0aW9uLnByb3Rv",
            "EhZnb29nbGUuY2xvdWQuYXV0b21sLnYxIikKGENsYXNzaWZpY2F0aW9uQW5u",
            "b3RhdGlvbhINCgVzY29yZRgBIAEoAiKBBwofQ2xhc3NpZmljYXRpb25FdmFs",
            "dWF0aW9uTWV0cmljcxIOCgZhdV9wcmMYASABKAISDgoGYXVfcm9jGAYgASgC",
            "EhAKCGxvZ19sb3NzGAcgASgCEnAKGGNvbmZpZGVuY2VfbWV0cmljc19lbnRy",
            "eRgDIAMoCzJOLmdvb2dsZS5jbG91ZC5hdXRvbWwudjEuQ2xhc3NpZmljYXRp",
            "b25FdmFsdWF0aW9uTWV0cmljcy5Db25maWRlbmNlTWV0cmljc0VudHJ5EmEK",
            "EGNvbmZ1c2lvbl9tYXRyaXgYBCABKAsyRy5nb29nbGUuY2xvdWQuYXV0b21s",
            "LnYxLkNsYXNzaWZpY2F0aW9uRXZhbHVhdGlvbk1ldHJpY3MuQ29uZnVzaW9u",
            "TWF0cml4EhoKEmFubm90YXRpb25fc3BlY19pZBgFIAMoCRr8AgoWQ29uZmlk",
            "ZW5jZU1ldHJpY3NFbnRyeRIcChRjb25maWRlbmNlX3RocmVzaG9sZBgBIAEo",
            "AhIaChJwb3NpdGlvbl90aHJlc2hvbGQYDiABKAUSDgoGcmVjYWxsGAIgASgC",
            "EhEKCXByZWNpc2lvbhgDIAEoAhIbChNmYWxzZV9wb3NpdGl2ZV9yYXRlGAgg",
            "ASgCEhAKCGYxX3Njb3JlGAQgASgCEhIKCnJlY2FsbF9hdDEYBSABKAISFQoN",
            "cHJlY2lzaW9uX2F0MRgGIAEoAhIfChdmYWxzZV9wb3NpdGl2ZV9yYXRlX2F0",
            "MRgJIAEoAhIUCgxmMV9zY29yZV9hdDEYByABKAISGwoTdHJ1ZV9wb3NpdGl2",
            "ZV9jb3VudBgKIAEoAxIcChRmYWxzZV9wb3NpdGl2ZV9jb3VudBgLIAEoAxIc",
            "ChRmYWxzZV9uZWdhdGl2ZV9jb3VudBgMIAEoAxIbChN0cnVlX25lZ2F0aXZl",
            "X2NvdW50GA0gASgDGrsBCg9Db25mdXNpb25NYXRyaXgSGgoSYW5ub3RhdGlv",
            "bl9zcGVjX2lkGAEgAygJEhQKDGRpc3BsYXlfbmFtZRgDIAMoCRJYCgNyb3cY",
            "AiADKAsySy5nb29nbGUuY2xvdWQuYXV0b21sLnYxLkNsYXNzaWZpY2F0aW9u",
            "RXZhbHVhdGlvbk1ldHJpY3MuQ29uZnVzaW9uTWF0cml4LlJvdxocCgNSb3cS",
            "FQoNZXhhbXBsZV9jb3VudBgBIAMoBSpZChJDbGFzc2lmaWNhdGlvblR5cGUS",
            "IwofQ0xBU1NJRklDQVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEg4KCk1VTFRJ",
            "Q0xBU1MQARIOCgpNVUxUSUxBQkVMEAJCtQEKGmNvbS5nb29nbGUuY2xvdWQu",
            "YXV0b21sLnYxQhNDbGFzc2lmaWNhdGlvblByb3RvUAFaMmNsb3VkLmdvb2ds",
            "ZS5jb20vZ28vYXV0b21sL2FwaXYxL2F1dG9tbHBiO2F1dG9tbHBiqgIWR29v",
            "Z2xlLkNsb3VkLkF1dG9NTC5WMcoCFkdvb2dsZVxDbG91ZFxBdXRvTWxcVjHq",
            "AhlHb29nbGU6OkNsb3VkOjpBdXRvTUw6OlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.AutoML.V1.ClassificationType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.AutoML.V1.ClassificationAnnotation), global::Google.Cloud.AutoML.V1.ClassificationAnnotation.Parser, new[]{ "Score" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics), global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Parser, new[]{ "AuPrc", "AuRoc", "LogLoss", "ConfidenceMetricsEntry", "ConfusionMatrix", "AnnotationSpecId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfidenceMetricsEntry), global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfidenceMetricsEntry.Parser, new[]{ "ConfidenceThreshold", "PositionThreshold", "Recall", "Precision", "FalsePositiveRate", "F1Score", "RecallAt1", "PrecisionAt1", "FalsePositiveRateAt1", "F1ScoreAt1", "TruePositiveCount", "FalsePositiveCount", "FalseNegativeCount", "TrueNegativeCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix), global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Parser, new[]{ "AnnotationSpecId", "DisplayName", "Row" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Types.Row), global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Types.Row.Parser, new[]{ "ExampleCount" }, null, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Type of the classification problem.
  /// </summary>
  public enum ClassificationType {
    /// <summary>
    /// An un-set value of this enum.
    /// </summary>
    [pbr::OriginalName("CLASSIFICATION_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// At most one label is allowed per example.
    /// </summary>
    [pbr::OriginalName("MULTICLASS")] Multiclass = 1,
    /// <summary>
    /// Multiple labels are allowed for one example.
    /// </summary>
    [pbr::OriginalName("MULTILABEL")] Multilabel = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Contains annotation details specific to classification.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ClassificationAnnotation : pb::IMessage<ClassificationAnnotation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClassificationAnnotation> _parser = new pb::MessageParser<ClassificationAnnotation>(() => new ClassificationAnnotation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClassificationAnnotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.AutoML.V1.ClassificationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClassificationAnnotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClassificationAnnotation(ClassificationAnnotation other) : this() {
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClassificationAnnotation Clone() {
      return new ClassificationAnnotation(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private float score_;
    /// <summary>
    /// Output only. A confidence estimate between 0.0 and 1.0. A higher value
    /// means greater confidence that the annotation is positive. If a user
    /// approves an annotation as negative or positive, the score value remains
    /// unchanged. If a user creates an annotation, the score is 0 for negative or
    /// 1 for positive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClassificationAnnotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClassificationAnnotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Score, other.Score)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Score);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Score != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Score != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClassificationAnnotation other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0F) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Score = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Score = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Model evaluation metrics for classification problems.
  /// Note: For Video Classification this metrics only describe quality of the
  /// Video Classification predictions of "segment_classification" type.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ClassificationEvaluationMetrics : pb::IMessage<ClassificationEvaluationMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClassificationEvaluationMetrics> _parser = new pb::MessageParser<ClassificationEvaluationMetrics>(() => new ClassificationEvaluationMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClassificationEvaluationMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.AutoML.V1.ClassificationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClassificationEvaluationMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClassificationEvaluationMetrics(ClassificationEvaluationMetrics other) : this() {
      auPrc_ = other.auPrc_;
      auRoc_ = other.auRoc_;
      logLoss_ = other.logLoss_;
      confidenceMetricsEntry_ = other.confidenceMetricsEntry_.Clone();
      confusionMatrix_ = other.confusionMatrix_ != null ? other.confusionMatrix_.Clone() : null;
      annotationSpecId_ = other.annotationSpecId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClassificationEvaluationMetrics Clone() {
      return new ClassificationEvaluationMetrics(this);
    }

    /// <summary>Field number for the "au_prc" field.</summary>
    public const int AuPrcFieldNumber = 1;
    private float auPrc_;
    /// <summary>
    /// Output only. The Area Under Precision-Recall Curve metric. Micro-averaged
    /// for the overall evaluation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AuPrc {
      get { return auPrc_; }
      set {
        auPrc_ = value;
      }
    }

    /// <summary>Field number for the "au_roc" field.</summary>
    public const int AuRocFieldNumber = 6;
    private float auRoc_;
    /// <summary>
    /// Output only. The Area Under Receiver Operating Characteristic curve metric.
    /// Micro-averaged for the overall evaluation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AuRoc {
      get { return auRoc_; }
      set {
        auRoc_ = value;
      }
    }

    /// <summary>Field number for the "log_loss" field.</summary>
    public const int LogLossFieldNumber = 7;
    private float logLoss_;
    /// <summary>
    /// Output only. The Log Loss metric.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float LogLoss {
      get { return logLoss_; }
      set {
        logLoss_ = value;
      }
    }

    /// <summary>Field number for the "confidence_metrics_entry" field.</summary>
    public const int ConfidenceMetricsEntryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfidenceMetricsEntry> _repeated_confidenceMetricsEntry_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfidenceMetricsEntry.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfidenceMetricsEntry> confidenceMetricsEntry_ = new pbc::RepeatedField<global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfidenceMetricsEntry>();
    /// <summary>
    /// Output only. Metrics for each confidence_threshold in
    /// 0.00,0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and
    /// position_threshold = INT32_MAX_VALUE.
    /// ROC and precision-recall curves, and other aggregated metrics are derived
    /// from them. The confidence metrics entries may also be supplied for
    /// additional values of position_threshold, but from these no aggregated
    /// metrics are computed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfidenceMetricsEntry> ConfidenceMetricsEntry {
      get { return confidenceMetricsEntry_; }
    }

    /// <summary>Field number for the "confusion_matrix" field.</summary>
    public const int ConfusionMatrixFieldNumber = 4;
    private global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix confusionMatrix_;
    /// <summary>
    /// Output only. Confusion matrix of the evaluation.
    /// Only set for MULTICLASS classification problems where number
    /// of labels is no more than 10.
    /// Only set for model level evaluation, not for evaluation per label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix ConfusionMatrix {
      get { return confusionMatrix_; }
      set {
        confusionMatrix_ = value;
      }
    }

    /// <summary>Field number for the "annotation_spec_id" field.</summary>
    public const int AnnotationSpecIdFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_annotationSpecId_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> annotationSpecId_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Output only. The annotation spec ids used for this evaluation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> AnnotationSpecId {
      get { return annotationSpecId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClassificationEvaluationMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClassificationEvaluationMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AuPrc, other.AuPrc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AuRoc, other.AuRoc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LogLoss, other.LogLoss)) return false;
      if(!confidenceMetricsEntry_.Equals(other.confidenceMetricsEntry_)) return false;
      if (!object.Equals(ConfusionMatrix, other.ConfusionMatrix)) return false;
      if(!annotationSpecId_.Equals(other.annotationSpecId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AuPrc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AuPrc);
      if (AuRoc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AuRoc);
      if (LogLoss != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LogLoss);
      hash ^= confidenceMetricsEntry_.GetHashCode();
      if (confusionMatrix_ != null) hash ^= ConfusionMatrix.GetHashCode();
      hash ^= annotationSpecId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AuPrc != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AuPrc);
      }
      confidenceMetricsEntry_.WriteTo(output, _repeated_confidenceMetricsEntry_codec);
      if (confusionMatrix_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConfusionMatrix);
      }
      annotationSpecId_.WriteTo(output, _repeated_annotationSpecId_codec);
      if (AuRoc != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(AuRoc);
      }
      if (LogLoss != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(LogLoss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AuPrc != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AuPrc);
      }
      confidenceMetricsEntry_.WriteTo(ref output, _repeated_confidenceMetricsEntry_codec);
      if (confusionMatrix_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConfusionMatrix);
      }
      annotationSpecId_.WriteTo(ref output, _repeated_annotationSpecId_codec);
      if (AuRoc != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(AuRoc);
      }
      if (LogLoss != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(LogLoss);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AuPrc != 0F) {
        size += 1 + 4;
      }
      if (AuRoc != 0F) {
        size += 1 + 4;
      }
      if (LogLoss != 0F) {
        size += 1 + 4;
      }
      size += confidenceMetricsEntry_.CalculateSize(_repeated_confidenceMetricsEntry_codec);
      if (confusionMatrix_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfusionMatrix);
      }
      size += annotationSpecId_.CalculateSize(_repeated_annotationSpecId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClassificationEvaluationMetrics other) {
      if (other == null) {
        return;
      }
      if (other.AuPrc != 0F) {
        AuPrc = other.AuPrc;
      }
      if (other.AuRoc != 0F) {
        AuRoc = other.AuRoc;
      }
      if (other.LogLoss != 0F) {
        LogLoss = other.LogLoss;
      }
      confidenceMetricsEntry_.Add(other.confidenceMetricsEntry_);
      if (other.confusionMatrix_ != null) {
        if (confusionMatrix_ == null) {
          ConfusionMatrix = new global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix();
        }
        ConfusionMatrix.MergeFrom(other.ConfusionMatrix);
      }
      annotationSpecId_.Add(other.annotationSpecId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AuPrc = input.ReadFloat();
            break;
          }
          case 26: {
            confidenceMetricsEntry_.AddEntriesFrom(input, _repeated_confidenceMetricsEntry_codec);
            break;
          }
          case 34: {
            if (confusionMatrix_ == null) {
              ConfusionMatrix = new global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix();
            }
            input.ReadMessage(ConfusionMatrix);
            break;
          }
          case 42: {
            annotationSpecId_.AddEntriesFrom(input, _repeated_annotationSpecId_codec);
            break;
          }
          case 53: {
            AuRoc = input.ReadFloat();
            break;
          }
          case 61: {
            LogLoss = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            AuPrc = input.ReadFloat();
            break;
          }
          case 26: {
            confidenceMetricsEntry_.AddEntriesFrom(ref input, _repeated_confidenceMetricsEntry_codec);
            break;
          }
          case 34: {
            if (confusionMatrix_ == null) {
              ConfusionMatrix = new global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix();
            }
            input.ReadMessage(ConfusionMatrix);
            break;
          }
          case 42: {
            annotationSpecId_.AddEntriesFrom(ref input, _repeated_annotationSpecId_codec);
            break;
          }
          case 53: {
            AuRoc = input.ReadFloat();
            break;
          }
          case 61: {
            LogLoss = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ClassificationEvaluationMetrics message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Metrics for a single confidence threshold.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class ConfidenceMetricsEntry : pb::IMessage<ConfidenceMetricsEntry>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ConfidenceMetricsEntry> _parser = new pb::MessageParser<ConfidenceMetricsEntry>(() => new ConfidenceMetricsEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ConfidenceMetricsEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConfidenceMetricsEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConfidenceMetricsEntry(ConfidenceMetricsEntry other) : this() {
          confidenceThreshold_ = other.confidenceThreshold_;
          positionThreshold_ = other.positionThreshold_;
          recall_ = other.recall_;
          precision_ = other.precision_;
          falsePositiveRate_ = other.falsePositiveRate_;
          f1Score_ = other.f1Score_;
          recallAt1_ = other.recallAt1_;
          precisionAt1_ = other.precisionAt1_;
          falsePositiveRateAt1_ = other.falsePositiveRateAt1_;
          f1ScoreAt1_ = other.f1ScoreAt1_;
          truePositiveCount_ = other.truePositiveCount_;
          falsePositiveCount_ = other.falsePositiveCount_;
          falseNegativeCount_ = other.falseNegativeCount_;
          trueNegativeCount_ = other.trueNegativeCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConfidenceMetricsEntry Clone() {
          return new ConfidenceMetricsEntry(this);
        }

        /// <summary>Field number for the "confidence_threshold" field.</summary>
        public const int ConfidenceThresholdFieldNumber = 1;
        private float confidenceThreshold_;
        /// <summary>
        /// Output only. Metrics are computed with an assumption that the model
        /// never returns predictions with score lower than this value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float ConfidenceThreshold {
          get { return confidenceThreshold_; }
          set {
            confidenceThreshold_ = value;
          }
        }

        /// <summary>Field number for the "position_threshold" field.</summary>
        public const int PositionThresholdFieldNumber = 14;
        private int positionThreshold_;
        /// <summary>
        /// Output only. Metrics are computed with an assumption that the model
        /// always returns at most this many predictions (ordered by their score,
        /// descendingly), but they all still need to meet the confidence_threshold.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int PositionThreshold {
          get { return positionThreshold_; }
          set {
            positionThreshold_ = value;
          }
        }

        /// <summary>Field number for the "recall" field.</summary>
        public const int RecallFieldNumber = 2;
        private float recall_;
        /// <summary>
        /// Output only. Recall (True Positive Rate) for the given confidence
        /// threshold.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Recall {
          get { return recall_; }
          set {
            recall_ = value;
          }
        }

        /// <summary>Field number for the "precision" field.</summary>
        public const int PrecisionFieldNumber = 3;
        private float precision_;
        /// <summary>
        /// Output only. Precision for the given confidence threshold.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Precision {
          get { return precision_; }
          set {
            precision_ = value;
          }
        }

        /// <summary>Field number for the "false_positive_rate" field.</summary>
        public const int FalsePositiveRateFieldNumber = 8;
        private float falsePositiveRate_;
        /// <summary>
        /// Output only. False Positive Rate for the given confidence threshold.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float FalsePositiveRate {
          get { return falsePositiveRate_; }
          set {
            falsePositiveRate_ = value;
          }
        }

        /// <summary>Field number for the "f1_score" field.</summary>
        public const int F1ScoreFieldNumber = 4;
        private float f1Score_;
        /// <summary>
        /// Output only. The harmonic mean of recall and precision.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float F1Score {
          get { return f1Score_; }
          set {
            f1Score_ = value;
          }
        }

        /// <summary>Field number for the "recall_at1" field.</summary>
        public const int RecallAt1FieldNumber = 5;
        private float recallAt1_;
        /// <summary>
        /// Output only. The Recall (True Positive Rate) when only considering the
        /// label that has the highest prediction score and not below the confidence
        /// threshold for each example.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float RecallAt1 {
          get { return recallAt1_; }
          set {
            recallAt1_ = value;
          }
        }

        /// <summary>Field number for the "precision_at1" field.</summary>
        public const int PrecisionAt1FieldNumber = 6;
        private float precisionAt1_;
        /// <summary>
        /// Output only. The precision when only considering the label that has the
        /// highest prediction score and not below the confidence threshold for each
        /// example.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float PrecisionAt1 {
          get { return precisionAt1_; }
          set {
            precisionAt1_ = value;
          }
        }

        /// <summary>Field number for the "false_positive_rate_at1" field.</summary>
        public const int FalsePositiveRateAt1FieldNumber = 9;
        private float falsePositiveRateAt1_;
        /// <summary>
        /// Output only. The False Positive Rate when only considering the label that
        /// has the highest prediction score and not below the confidence threshold
        /// for each example.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float FalsePositiveRateAt1 {
          get { return falsePositiveRateAt1_; }
          set {
            falsePositiveRateAt1_ = value;
          }
        }

        /// <summary>Field number for the "f1_score_at1" field.</summary>
        public const int F1ScoreAt1FieldNumber = 7;
        private float f1ScoreAt1_;
        /// <summary>
        /// Output only. The harmonic mean of [recall_at1][google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfidenceMetricsEntry.recall_at1] and [precision_at1][google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfidenceMetricsEntry.precision_at1].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float F1ScoreAt1 {
          get { return f1ScoreAt1_; }
          set {
            f1ScoreAt1_ = value;
          }
        }

        /// <summary>Field number for the "true_positive_count" field.</summary>
        public const int TruePositiveCountFieldNumber = 10;
        private long truePositiveCount_;
        /// <summary>
        /// Output only. The number of model created labels that match a ground truth
        /// label.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TruePositiveCount {
          get { return truePositiveCount_; }
          set {
            truePositiveCount_ = value;
          }
        }

        /// <summary>Field number for the "false_positive_count" field.</summary>
        public const int FalsePositiveCountFieldNumber = 11;
        private long falsePositiveCount_;
        /// <summary>
        /// Output only. The number of model created labels that do not match a
        /// ground truth label.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long FalsePositiveCount {
          get { return falsePositiveCount_; }
          set {
            falsePositiveCount_ = value;
          }
        }

        /// <summary>Field number for the "false_negative_count" field.</summary>
        public const int FalseNegativeCountFieldNumber = 12;
        private long falseNegativeCount_;
        /// <summary>
        /// Output only. The number of ground truth labels that are not matched
        /// by a model created label.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long FalseNegativeCount {
          get { return falseNegativeCount_; }
          set {
            falseNegativeCount_ = value;
          }
        }

        /// <summary>Field number for the "true_negative_count" field.</summary>
        public const int TrueNegativeCountFieldNumber = 13;
        private long trueNegativeCount_;
        /// <summary>
        /// Output only. The number of labels that were not created by the model,
        /// but if they would, they would not match a ground truth label.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TrueNegativeCount {
          get { return trueNegativeCount_; }
          set {
            trueNegativeCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ConfidenceMetricsEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ConfidenceMetricsEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConfidenceThreshold, other.ConfidenceThreshold)) return false;
          if (PositionThreshold != other.PositionThreshold) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Recall, other.Recall)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Precision, other.Precision)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FalsePositiveRate, other.FalsePositiveRate)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(F1Score, other.F1Score)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RecallAt1, other.RecallAt1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PrecisionAt1, other.PrecisionAt1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FalsePositiveRateAt1, other.FalsePositiveRateAt1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(F1ScoreAt1, other.F1ScoreAt1)) return false;
          if (TruePositiveCount != other.TruePositiveCount) return false;
          if (FalsePositiveCount != other.FalsePositiveCount) return false;
          if (FalseNegativeCount != other.FalseNegativeCount) return false;
          if (TrueNegativeCount != other.TrueNegativeCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (ConfidenceThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConfidenceThreshold);
          if (PositionThreshold != 0) hash ^= PositionThreshold.GetHashCode();
          if (Recall != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Recall);
          if (Precision != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Precision);
          if (FalsePositiveRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FalsePositiveRate);
          if (F1Score != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(F1Score);
          if (RecallAt1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RecallAt1);
          if (PrecisionAt1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PrecisionAt1);
          if (FalsePositiveRateAt1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FalsePositiveRateAt1);
          if (F1ScoreAt1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(F1ScoreAt1);
          if (TruePositiveCount != 0L) hash ^= TruePositiveCount.GetHashCode();
          if (FalsePositiveCount != 0L) hash ^= FalsePositiveCount.GetHashCode();
          if (FalseNegativeCount != 0L) hash ^= FalseNegativeCount.GetHashCode();
          if (TrueNegativeCount != 0L) hash ^= TrueNegativeCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ConfidenceThreshold != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(ConfidenceThreshold);
          }
          if (Recall != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Recall);
          }
          if (Precision != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Precision);
          }
          if (F1Score != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(F1Score);
          }
          if (RecallAt1 != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(RecallAt1);
          }
          if (PrecisionAt1 != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(PrecisionAt1);
          }
          if (F1ScoreAt1 != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(F1ScoreAt1);
          }
          if (FalsePositiveRate != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(FalsePositiveRate);
          }
          if (FalsePositiveRateAt1 != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(FalsePositiveRateAt1);
          }
          if (TruePositiveCount != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(TruePositiveCount);
          }
          if (FalsePositiveCount != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(FalsePositiveCount);
          }
          if (FalseNegativeCount != 0L) {
            output.WriteRawTag(96);
            output.WriteInt64(FalseNegativeCount);
          }
          if (TrueNegativeCount != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(TrueNegativeCount);
          }
          if (PositionThreshold != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(PositionThreshold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ConfidenceThreshold != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(ConfidenceThreshold);
          }
          if (Recall != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(Recall);
          }
          if (Precision != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(Precision);
          }
          if (F1Score != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(F1Score);
          }
          if (RecallAt1 != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(RecallAt1);
          }
          if (PrecisionAt1 != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(PrecisionAt1);
          }
          if (F1ScoreAt1 != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(F1ScoreAt1);
          }
          if (FalsePositiveRate != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(FalsePositiveRate);
          }
          if (FalsePositiveRateAt1 != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(FalsePositiveRateAt1);
          }
          if (TruePositiveCount != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(TruePositiveCount);
          }
          if (FalsePositiveCount != 0L) {
            output.WriteRawTag(88);
            output.WriteInt64(FalsePositiveCount);
          }
          if (FalseNegativeCount != 0L) {
            output.WriteRawTag(96);
            output.WriteInt64(FalseNegativeCount);
          }
          if (TrueNegativeCount != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(TrueNegativeCount);
          }
          if (PositionThreshold != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(PositionThreshold);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (ConfidenceThreshold != 0F) {
            size += 1 + 4;
          }
          if (PositionThreshold != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(PositionThreshold);
          }
          if (Recall != 0F) {
            size += 1 + 4;
          }
          if (Precision != 0F) {
            size += 1 + 4;
          }
          if (FalsePositiveRate != 0F) {
            size += 1 + 4;
          }
          if (F1Score != 0F) {
            size += 1 + 4;
          }
          if (RecallAt1 != 0F) {
            size += 1 + 4;
          }
          if (PrecisionAt1 != 0F) {
            size += 1 + 4;
          }
          if (FalsePositiveRateAt1 != 0F) {
            size += 1 + 4;
          }
          if (F1ScoreAt1 != 0F) {
            size += 1 + 4;
          }
          if (TruePositiveCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TruePositiveCount);
          }
          if (FalsePositiveCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FalsePositiveCount);
          }
          if (FalseNegativeCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FalseNegativeCount);
          }
          if (TrueNegativeCount != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TrueNegativeCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ConfidenceMetricsEntry other) {
          if (other == null) {
            return;
          }
          if (other.ConfidenceThreshold != 0F) {
            ConfidenceThreshold = other.ConfidenceThreshold;
          }
          if (other.PositionThreshold != 0) {
            PositionThreshold = other.PositionThreshold;
          }
          if (other.Recall != 0F) {
            Recall = other.Recall;
          }
          if (other.Precision != 0F) {
            Precision = other.Precision;
          }
          if (other.FalsePositiveRate != 0F) {
            FalsePositiveRate = other.FalsePositiveRate;
          }
          if (other.F1Score != 0F) {
            F1Score = other.F1Score;
          }
          if (other.RecallAt1 != 0F) {
            RecallAt1 = other.RecallAt1;
          }
          if (other.PrecisionAt1 != 0F) {
            PrecisionAt1 = other.PrecisionAt1;
          }
          if (other.FalsePositiveRateAt1 != 0F) {
            FalsePositiveRateAt1 = other.FalsePositiveRateAt1;
          }
          if (other.F1ScoreAt1 != 0F) {
            F1ScoreAt1 = other.F1ScoreAt1;
          }
          if (other.TruePositiveCount != 0L) {
            TruePositiveCount = other.TruePositiveCount;
          }
          if (other.FalsePositiveCount != 0L) {
            FalsePositiveCount = other.FalsePositiveCount;
          }
          if (other.FalseNegativeCount != 0L) {
            FalseNegativeCount = other.FalseNegativeCount;
          }
          if (other.TrueNegativeCount != 0L) {
            TrueNegativeCount = other.TrueNegativeCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                ConfidenceThreshold = input.ReadFloat();
                break;
              }
              case 21: {
                Recall = input.ReadFloat();
                break;
              }
              case 29: {
                Precision = input.ReadFloat();
                break;
              }
              case 37: {
                F1Score = input.ReadFloat();
                break;
              }
              case 45: {
                RecallAt1 = input.ReadFloat();
                break;
              }
              case 53: {
                PrecisionAt1 = input.ReadFloat();
                break;
              }
              case 61: {
                F1ScoreAt1 = input.ReadFloat();
                break;
              }
              case 69: {
                FalsePositiveRate = input.ReadFloat();
                break;
              }
              case 77: {
                FalsePositiveRateAt1 = input.ReadFloat();
                break;
              }
              case 80: {
                TruePositiveCount = input.ReadInt64();
                break;
              }
              case 88: {
                FalsePositiveCount = input.ReadInt64();
                break;
              }
              case 96: {
                FalseNegativeCount = input.ReadInt64();
                break;
              }
              case 104: {
                TrueNegativeCount = input.ReadInt64();
                break;
              }
              case 112: {
                PositionThreshold = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                ConfidenceThreshold = input.ReadFloat();
                break;
              }
              case 21: {
                Recall = input.ReadFloat();
                break;
              }
              case 29: {
                Precision = input.ReadFloat();
                break;
              }
              case 37: {
                F1Score = input.ReadFloat();
                break;
              }
              case 45: {
                RecallAt1 = input.ReadFloat();
                break;
              }
              case 53: {
                PrecisionAt1 = input.ReadFloat();
                break;
              }
              case 61: {
                F1ScoreAt1 = input.ReadFloat();
                break;
              }
              case 69: {
                FalsePositiveRate = input.ReadFloat();
                break;
              }
              case 77: {
                FalsePositiveRateAt1 = input.ReadFloat();
                break;
              }
              case 80: {
                TruePositiveCount = input.ReadInt64();
                break;
              }
              case 88: {
                FalsePositiveCount = input.ReadInt64();
                break;
              }
              case 96: {
                FalseNegativeCount = input.ReadInt64();
                break;
              }
              case 104: {
                TrueNegativeCount = input.ReadInt64();
                break;
              }
              case 112: {
                PositionThreshold = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Confusion matrix of the model running the classification.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class ConfusionMatrix : pb::IMessage<ConfusionMatrix>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ConfusionMatrix> _parser = new pb::MessageParser<ConfusionMatrix>(() => new ConfusionMatrix());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ConfusionMatrix> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConfusionMatrix() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConfusionMatrix(ConfusionMatrix other) : this() {
          annotationSpecId_ = other.annotationSpecId_.Clone();
          displayName_ = other.displayName_.Clone();
          row_ = other.row_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ConfusionMatrix Clone() {
          return new ConfusionMatrix(this);
        }

        /// <summary>Field number for the "annotation_spec_id" field.</summary>
        public const int AnnotationSpecIdFieldNumber = 1;
        private static readonly pb::FieldCodec<string> _repeated_annotationSpecId_codec
            = pb::FieldCodec.ForString(10);
        private readonly pbc::RepeatedField<string> annotationSpecId_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Output only. IDs of the annotation specs used in the confusion matrix.
        /// For Tables CLASSIFICATION
        /// [prediction_type][google.cloud.automl.v1p1beta.TablesModelMetadata.prediction_type]
        /// only list of [annotation_spec_display_name-s][] is populated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> AnnotationSpecId {
          get { return annotationSpecId_; }
        }

        /// <summary>Field number for the "display_name" field.</summary>
        public const int DisplayNameFieldNumber = 3;
        private static readonly pb::FieldCodec<string> _repeated_displayName_codec
            = pb::FieldCodec.ForString(26);
        private readonly pbc::RepeatedField<string> displayName_ = new pbc::RepeatedField<string>();
        /// <summary>
        /// Output only. Display name of the annotation specs used in the confusion
        /// matrix, as they were at the moment of the evaluation. For Tables
        /// CLASSIFICATION
        /// [prediction_type-s][google.cloud.automl.v1p1beta.TablesModelMetadata.prediction_type],
        /// distinct values of the target column at the moment of the model
        /// evaluation are populated here.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<string> DisplayName {
          get { return displayName_; }
        }

        /// <summary>Field number for the "row" field.</summary>
        public const int RowFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Types.Row> _repeated_row_codec
            = pb::FieldCodec.ForMessage(18, global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Types.Row.Parser);
        private readonly pbc::RepeatedField<global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Types.Row> row_ = new pbc::RepeatedField<global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Types.Row>();
        /// <summary>
        /// Output only. Rows in the confusion matrix. The number of rows is equal to
        /// the size of `annotation_spec_id`.
        /// `row[i].example_count[j]` is the number of examples that have ground
        /// truth of the `annotation_spec_id[i]` and are predicted as
        /// `annotation_spec_id[j]` by the model being evaluated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Types.Row> Row {
          get { return row_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ConfusionMatrix);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ConfusionMatrix other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!annotationSpecId_.Equals(other.annotationSpecId_)) return false;
          if(!displayName_.Equals(other.displayName_)) return false;
          if(!row_.Equals(other.row_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= annotationSpecId_.GetHashCode();
          hash ^= displayName_.GetHashCode();
          hash ^= row_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          annotationSpecId_.WriteTo(output, _repeated_annotationSpecId_codec);
          row_.WriteTo(output, _repeated_row_codec);
          displayName_.WriteTo(output, _repeated_displayName_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          annotationSpecId_.WriteTo(ref output, _repeated_annotationSpecId_codec);
          row_.WriteTo(ref output, _repeated_row_codec);
          displayName_.WriteTo(ref output, _repeated_displayName_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += annotationSpecId_.CalculateSize(_repeated_annotationSpecId_codec);
          size += displayName_.CalculateSize(_repeated_displayName_codec);
          size += row_.CalculateSize(_repeated_row_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ConfusionMatrix other) {
          if (other == null) {
            return;
          }
          annotationSpecId_.Add(other.annotationSpecId_);
          displayName_.Add(other.displayName_);
          row_.Add(other.row_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                annotationSpecId_.AddEntriesFrom(input, _repeated_annotationSpecId_codec);
                break;
              }
              case 18: {
                row_.AddEntriesFrom(input, _repeated_row_codec);
                break;
              }
              case 26: {
                displayName_.AddEntriesFrom(input, _repeated_displayName_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                annotationSpecId_.AddEntriesFrom(ref input, _repeated_annotationSpecId_codec);
                break;
              }
              case 18: {
                row_.AddEntriesFrom(ref input, _repeated_row_codec);
                break;
              }
              case 26: {
                displayName_.AddEntriesFrom(ref input, _repeated_displayName_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the ConfusionMatrix message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// Output only. A row in the confusion matrix.
          /// </summary>
          [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
          public sealed partial class Row : pb::IMessage<Row>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<Row> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Cloud.AutoML.V1.ClassificationEvaluationMetrics.Types.ConfusionMatrix.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Row() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Row(Row other) : this() {
              exampleCount_ = other.exampleCount_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Row Clone() {
              return new Row(this);
            }

            /// <summary>Field number for the "example_count" field.</summary>
            public const int ExampleCountFieldNumber = 1;
            private static readonly pb::FieldCodec<int> _repeated_exampleCount_codec
                = pb::FieldCodec.ForInt32(10);
            private readonly pbc::RepeatedField<int> exampleCount_ = new pbc::RepeatedField<int>();
            /// <summary>
            /// Output only. Value of the specific cell in the confusion matrix.
            /// The number of values each row has (i.e. the length of the row) is equal
            /// to the length of the `annotation_spec_id` field or, if that one is not
            /// populated, length of the [display_name][google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix.display_name] field.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public pbc::RepeatedField<int> ExampleCount {
              get { return exampleCount_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as Row);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(Row other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!exampleCount_.Equals(other.exampleCount_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= exampleCount_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              exampleCount_.WriteTo(output, _repeated_exampleCount_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              exampleCount_.WriteTo(ref output, _repeated_exampleCount_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              size += exampleCount_.CalculateSize(_repeated_exampleCount_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(Row other) {
              if (other == null) {
                return;
              }
              exampleCount_.Add(other.exampleCount_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    exampleCount_.AddEntriesFrom(input, _repeated_exampleCount_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10:
                  case 8: {
                    exampleCount_.AddEntriesFrom(ref input, _repeated_exampleCount_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
