// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/aiplatform/v1/schedule_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.AIPlatform.V1 {
  /// <summary>
  /// A service for creating and managing Vertex AI's Schedule resources to
  /// periodically launch shceudled runs to make API calls.
  /// </summary>
  public static partial class ScheduleService
  {
    static readonly string __ServiceName = "google.cloud.aiplatform.v1.ScheduleService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest> __Marshaller_google_cloud_aiplatform_v1_CreateScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.Schedule> __Marshaller_google_cloud_aiplatform_v1_Schedule = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.Schedule.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest> __Marshaller_google_cloud_aiplatform_v1_DeleteScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.GetScheduleRequest> __Marshaller_google_cloud_aiplatform_v1_GetScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.GetScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest> __Marshaller_google_cloud_aiplatform_v1_ListSchedulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse> __Marshaller_google_cloud_aiplatform_v1_ListSchedulesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest> __Marshaller_google_cloud_aiplatform_v1_PauseScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest> __Marshaller_google_cloud_aiplatform_v1_ResumeScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest> __Marshaller_google_cloud_aiplatform_v1_UpdateScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule> __Method_CreateSchedule = new grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSchedule",
        __Marshaller_google_cloud_aiplatform_v1_CreateScheduleRequest,
        __Marshaller_google_cloud_aiplatform_v1_Schedule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest, global::Google.LongRunning.Operation> __Method_DeleteSchedule = new grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSchedule",
        __Marshaller_google_cloud_aiplatform_v1_DeleteScheduleRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.GetScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule> __Method_GetSchedule = new grpc::Method<global::Google.Cloud.AIPlatform.V1.GetScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSchedule",
        __Marshaller_google_cloud_aiplatform_v1_GetScheduleRequest,
        __Marshaller_google_cloud_aiplatform_v1_Schedule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest, global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse> __Method_ListSchedules = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest, global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSchedules",
        __Marshaller_google_cloud_aiplatform_v1_ListSchedulesRequest,
        __Marshaller_google_cloud_aiplatform_v1_ListSchedulesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_PauseSchedule = new grpc::Method<global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PauseSchedule",
        __Marshaller_google_cloud_aiplatform_v1_PauseScheduleRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ResumeSchedule = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResumeSchedule",
        __Marshaller_google_cloud_aiplatform_v1_ResumeScheduleRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule> __Method_UpdateSchedule = new grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSchedule",
        __Marshaller_google_cloud_aiplatform_v1_UpdateScheduleRequest,
        __Marshaller_google_cloud_aiplatform_v1_Schedule);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.AIPlatform.V1.ScheduleServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ScheduleService</summary>
    [grpc::BindServiceMethod(typeof(ScheduleService), "BindService")]
    public abstract partial class ScheduleServiceBase
    {
      /// <summary>
      /// Creates a Schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.Schedule> CreateSchedule(global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a Schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteSchedule(global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a Schedule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.Schedule> GetSchedule(global::Google.Cloud.AIPlatform.V1.GetScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists Schedules in a Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse> ListSchedules(global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Pauses a Schedule. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
      /// the schedule is paused, no new runs will be created. Already created runs
      /// will NOT be paused or canceled.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> PauseSchedule(global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resumes a paused Schedule to start scheduling new runs. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
      /// Only paused Schedule can be resumed.
      ///
      /// When the Schedule is resumed, new runs will be scheduled starting from the
      /// next execution time after the current time based on the time_specification
      /// in the Schedule. If
      /// [Schedule.catch_up][google.cloud.aiplatform.v1.Schedule.catch_up] is set up
      /// true, all missed runs will be scheduled for backfill first.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ResumeSchedule(global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an active or paused Schedule.
      ///
      /// When the Schedule is updated, new runs will be scheduled starting from the
      /// updated next execution time after the update time based on the
      /// time_specification in the updated Schedule. All unstarted runs before the
      /// update time will be skipped while already created runs will NOT be paused
      /// or canceled.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.Schedule> UpdateSchedule(global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ScheduleService</summary>
    public partial class ScheduleServiceClient : grpc::ClientBase<ScheduleServiceClient>
    {
      /// <summary>Creates a new client for ScheduleService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ScheduleServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ScheduleService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ScheduleServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ScheduleServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ScheduleServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.Schedule CreateSchedule(global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.Schedule CreateSchedule(global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSchedule, null, options, request);
      }
      /// <summary>
      /// Creates a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.Schedule> CreateScheduleAsync(global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.Schedule> CreateScheduleAsync(global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSchedule, null, options, request);
      }
      /// <summary>
      /// Deletes a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteSchedule(global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteSchedule(global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSchedule, null, options, request);
      }
      /// <summary>
      /// Deletes a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteScheduleAsync(global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteScheduleAsync(global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSchedule, null, options, request);
      }
      /// <summary>
      /// Gets a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.Schedule GetSchedule(global::Google.Cloud.AIPlatform.V1.GetScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.Schedule GetSchedule(global::Google.Cloud.AIPlatform.V1.GetScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSchedule, null, options, request);
      }
      /// <summary>
      /// Gets a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.Schedule> GetScheduleAsync(global::Google.Cloud.AIPlatform.V1.GetScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.Schedule> GetScheduleAsync(global::Google.Cloud.AIPlatform.V1.GetScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSchedule, null, options, request);
      }
      /// <summary>
      /// Lists Schedules in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse ListSchedules(global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSchedules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Schedules in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse ListSchedules(global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSchedules, null, options, request);
      }
      /// <summary>
      /// Lists Schedules in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse> ListSchedulesAsync(global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSchedulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Schedules in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse> ListSchedulesAsync(global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSchedules, null, options, request);
      }
      /// <summary>
      /// Pauses a Schedule. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
      /// the schedule is paused, no new runs will be created. Already created runs
      /// will NOT be paused or canceled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PauseSchedule(global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pauses a Schedule. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
      /// the schedule is paused, no new runs will be created. Already created runs
      /// will NOT be paused or canceled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty PauseSchedule(global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PauseSchedule, null, options, request);
      }
      /// <summary>
      /// Pauses a Schedule. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
      /// the schedule is paused, no new runs will be created. Already created runs
      /// will NOT be paused or canceled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PauseScheduleAsync(global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pauses a Schedule. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'PAUSED'. If
      /// the schedule is paused, no new runs will be created. Already created runs
      /// will NOT be paused or canceled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PauseScheduleAsync(global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PauseSchedule, null, options, request);
      }
      /// <summary>
      /// Resumes a paused Schedule to start scheduling new runs. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
      /// Only paused Schedule can be resumed.
      ///
      /// When the Schedule is resumed, new runs will be scheduled starting from the
      /// next execution time after the current time based on the time_specification
      /// in the Schedule. If
      /// [Schedule.catch_up][google.cloud.aiplatform.v1.Schedule.catch_up] is set up
      /// true, all missed runs will be scheduled for backfill first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ResumeSchedule(global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResumeSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resumes a paused Schedule to start scheduling new runs. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
      /// Only paused Schedule can be resumed.
      ///
      /// When the Schedule is resumed, new runs will be scheduled starting from the
      /// next execution time after the current time based on the time_specification
      /// in the Schedule. If
      /// [Schedule.catch_up][google.cloud.aiplatform.v1.Schedule.catch_up] is set up
      /// true, all missed runs will be scheduled for backfill first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ResumeSchedule(global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResumeSchedule, null, options, request);
      }
      /// <summary>
      /// Resumes a paused Schedule to start scheduling new runs. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
      /// Only paused Schedule can be resumed.
      ///
      /// When the Schedule is resumed, new runs will be scheduled starting from the
      /// next execution time after the current time based on the time_specification
      /// in the Schedule. If
      /// [Schedule.catch_up][google.cloud.aiplatform.v1.Schedule.catch_up] is set up
      /// true, all missed runs will be scheduled for backfill first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ResumeScheduleAsync(global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResumeScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resumes a paused Schedule to start scheduling new runs. Will mark
      /// [Schedule.state][google.cloud.aiplatform.v1.Schedule.state] to 'ACTIVE'.
      /// Only paused Schedule can be resumed.
      ///
      /// When the Schedule is resumed, new runs will be scheduled starting from the
      /// next execution time after the current time based on the time_specification
      /// in the Schedule. If
      /// [Schedule.catch_up][google.cloud.aiplatform.v1.Schedule.catch_up] is set up
      /// true, all missed runs will be scheduled for backfill first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ResumeScheduleAsync(global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResumeSchedule, null, options, request);
      }
      /// <summary>
      /// Updates an active or paused Schedule.
      ///
      /// When the Schedule is updated, new runs will be scheduled starting from the
      /// updated next execution time after the update time based on the
      /// time_specification in the updated Schedule. All unstarted runs before the
      /// update time will be skipped while already created runs will NOT be paused
      /// or canceled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.Schedule UpdateSchedule(global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an active or paused Schedule.
      ///
      /// When the Schedule is updated, new runs will be scheduled starting from the
      /// updated next execution time after the update time based on the
      /// time_specification in the updated Schedule. All unstarted runs before the
      /// update time will be skipped while already created runs will NOT be paused
      /// or canceled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.Schedule UpdateSchedule(global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSchedule, null, options, request);
      }
      /// <summary>
      /// Updates an active or paused Schedule.
      ///
      /// When the Schedule is updated, new runs will be scheduled starting from the
      /// updated next execution time after the update time based on the
      /// time_specification in the updated Schedule. All unstarted runs before the
      /// update time will be skipped while already created runs will NOT be paused
      /// or canceled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.Schedule> UpdateScheduleAsync(global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an active or paused Schedule.
      ///
      /// When the Schedule is updated, new runs will be scheduled starting from the
      /// updated next execution time after the update time based on the
      /// time_specification in the updated Schedule. All unstarted runs before the
      /// update time will be skipped while already created runs will NOT be paused
      /// or canceled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.Schedule> UpdateScheduleAsync(global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSchedule, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ScheduleServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ScheduleServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ScheduleServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSchedule, serviceImpl.CreateSchedule)
          .AddMethod(__Method_DeleteSchedule, serviceImpl.DeleteSchedule)
          .AddMethod(__Method_GetSchedule, serviceImpl.GetSchedule)
          .AddMethod(__Method_ListSchedules, serviceImpl.ListSchedules)
          .AddMethod(__Method_PauseSchedule, serviceImpl.PauseSchedule)
          .AddMethod(__Method_ResumeSchedule, serviceImpl.ResumeSchedule)
          .AddMethod(__Method_UpdateSchedule, serviceImpl.UpdateSchedule).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ScheduleServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.CreateScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule>(serviceImpl.CreateSchedule));
      serviceBinder.AddMethod(__Method_DeleteSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.DeleteScheduleRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteSchedule));
      serviceBinder.AddMethod(__Method_GetSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.GetScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule>(serviceImpl.GetSchedule));
      serviceBinder.AddMethod(__Method_ListSchedules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ListSchedulesRequest, global::Google.Cloud.AIPlatform.V1.ListSchedulesResponse>(serviceImpl.ListSchedules));
      serviceBinder.AddMethod(__Method_PauseSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.PauseScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.PauseSchedule));
      serviceBinder.AddMethod(__Method_ResumeSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ResumeScheduleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ResumeSchedule));
      serviceBinder.AddMethod(__Method_UpdateSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.UpdateScheduleRequest, global::Google.Cloud.AIPlatform.V1.Schedule>(serviceImpl.UpdateSchedule));
    }

  }
}
#endregion
