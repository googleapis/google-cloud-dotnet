// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/aiplatform/v1/tensorboard_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.AIPlatform.V1 {
  /// <summary>
  /// TensorboardService
  /// </summary>
  public static partial class TensorboardService
  {
    static readonly string __ServiceName = "google.cloud.aiplatform.v1.TensorboardService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest> __Marshaller_google_cloud_aiplatform_v1_CreateTensorboardRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest> __Marshaller_google_cloud_aiplatform_v1_GetTensorboardRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.Tensorboard> __Marshaller_google_cloud_aiplatform_v1_Tensorboard = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.Tensorboard.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest> __Marshaller_google_cloud_aiplatform_v1_UpdateTensorboardRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest> __Marshaller_google_cloud_aiplatform_v1_ListTensorboardsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse> __Marshaller_google_cloud_aiplatform_v1_ListTensorboardsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest> __Marshaller_google_cloud_aiplatform_v1_DeleteTensorboardRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest> __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardUsageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse> __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardUsageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest> __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardSizeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse> __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardSizeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest> __Marshaller_google_cloud_aiplatform_v1_CreateTensorboardExperimentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> __Marshaller_google_cloud_aiplatform_v1_TensorboardExperiment = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest> __Marshaller_google_cloud_aiplatform_v1_GetTensorboardExperimentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest> __Marshaller_google_cloud_aiplatform_v1_UpdateTensorboardExperimentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest> __Marshaller_google_cloud_aiplatform_v1_ListTensorboardExperimentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse> __Marshaller_google_cloud_aiplatform_v1_ListTensorboardExperimentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest> __Marshaller_google_cloud_aiplatform_v1_DeleteTensorboardExperimentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest> __Marshaller_google_cloud_aiplatform_v1_CreateTensorboardRunRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.TensorboardRun> __Marshaller_google_cloud_aiplatform_v1_TensorboardRun = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.TensorboardRun.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest> __Marshaller_google_cloud_aiplatform_v1_BatchCreateTensorboardRunsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse> __Marshaller_google_cloud_aiplatform_v1_BatchCreateTensorboardRunsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest> __Marshaller_google_cloud_aiplatform_v1_GetTensorboardRunRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest> __Marshaller_google_cloud_aiplatform_v1_UpdateTensorboardRunRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest> __Marshaller_google_cloud_aiplatform_v1_ListTensorboardRunsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse> __Marshaller_google_cloud_aiplatform_v1_ListTensorboardRunsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest> __Marshaller_google_cloud_aiplatform_v1_DeleteTensorboardRunRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest> __Marshaller_google_cloud_aiplatform_v1_BatchCreateTensorboardTimeSeriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse> __Marshaller_google_cloud_aiplatform_v1_BatchCreateTensorboardTimeSeriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest> __Marshaller_google_cloud_aiplatform_v1_CreateTensorboardTimeSeriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> __Marshaller_google_cloud_aiplatform_v1_TensorboardTimeSeries = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest> __Marshaller_google_cloud_aiplatform_v1_GetTensorboardTimeSeriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest> __Marshaller_google_cloud_aiplatform_v1_UpdateTensorboardTimeSeriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest> __Marshaller_google_cloud_aiplatform_v1_ListTensorboardTimeSeriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse> __Marshaller_google_cloud_aiplatform_v1_ListTensorboardTimeSeriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest> __Marshaller_google_cloud_aiplatform_v1_DeleteTensorboardTimeSeriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest> __Marshaller_google_cloud_aiplatform_v1_BatchReadTensorboardTimeSeriesDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse> __Marshaller_google_cloud_aiplatform_v1_BatchReadTensorboardTimeSeriesDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest> __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardTimeSeriesDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse> __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardTimeSeriesDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataRequest> __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardBlobDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataResponse> __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardBlobDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest> __Marshaller_google_cloud_aiplatform_v1_WriteTensorboardExperimentDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse> __Marshaller_google_cloud_aiplatform_v1_WriteTensorboardExperimentDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest> __Marshaller_google_cloud_aiplatform_v1_WriteTensorboardRunDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse> __Marshaller_google_cloud_aiplatform_v1_WriteTensorboardRunDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest> __Marshaller_google_cloud_aiplatform_v1_ExportTensorboardTimeSeriesDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse> __Marshaller_google_cloud_aiplatform_v1_ExportTensorboardTimeSeriesDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest, global::Google.LongRunning.Operation> __Method_CreateTensorboard = new grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTensorboard",
        __Marshaller_google_cloud_aiplatform_v1_CreateTensorboardRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest, global::Google.Cloud.AIPlatform.V1.Tensorboard> __Method_GetTensorboard = new grpc::Method<global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest, global::Google.Cloud.AIPlatform.V1.Tensorboard>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTensorboard",
        __Marshaller_google_cloud_aiplatform_v1_GetTensorboardRequest,
        __Marshaller_google_cloud_aiplatform_v1_Tensorboard);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest, global::Google.LongRunning.Operation> __Method_UpdateTensorboard = new grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTensorboard",
        __Marshaller_google_cloud_aiplatform_v1_UpdateTensorboardRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse> __Method_ListTensorboards = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTensorboards",
        __Marshaller_google_cloud_aiplatform_v1_ListTensorboardsRequest,
        __Marshaller_google_cloud_aiplatform_v1_ListTensorboardsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest, global::Google.LongRunning.Operation> __Method_DeleteTensorboard = new grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTensorboard",
        __Marshaller_google_cloud_aiplatform_v1_DeleteTensorboardRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse> __Method_ReadTensorboardUsage = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadTensorboardUsage",
        __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardUsageRequest,
        __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardUsageResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse> __Method_ReadTensorboardSize = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadTensorboardSize",
        __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardSizeRequest,
        __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardSizeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> __Method_CreateTensorboardExperiment = new grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTensorboardExperiment",
        __Marshaller_google_cloud_aiplatform_v1_CreateTensorboardExperimentRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardExperiment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> __Method_GetTensorboardExperiment = new grpc::Method<global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTensorboardExperiment",
        __Marshaller_google_cloud_aiplatform_v1_GetTensorboardExperimentRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardExperiment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> __Method_UpdateTensorboardExperiment = new grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTensorboardExperiment",
        __Marshaller_google_cloud_aiplatform_v1_UpdateTensorboardExperimentRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardExperiment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse> __Method_ListTensorboardExperiments = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTensorboardExperiments",
        __Marshaller_google_cloud_aiplatform_v1_ListTensorboardExperimentsRequest,
        __Marshaller_google_cloud_aiplatform_v1_ListTensorboardExperimentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest, global::Google.LongRunning.Operation> __Method_DeleteTensorboardExperiment = new grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTensorboardExperiment",
        __Marshaller_google_cloud_aiplatform_v1_DeleteTensorboardExperimentRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun> __Method_CreateTensorboardRun = new grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTensorboardRun",
        __Marshaller_google_cloud_aiplatform_v1_CreateTensorboardRunRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardRun);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse> __Method_BatchCreateTensorboardRuns = new grpc::Method<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateTensorboardRuns",
        __Marshaller_google_cloud_aiplatform_v1_BatchCreateTensorboardRunsRequest,
        __Marshaller_google_cloud_aiplatform_v1_BatchCreateTensorboardRunsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun> __Method_GetTensorboardRun = new grpc::Method<global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTensorboardRun",
        __Marshaller_google_cloud_aiplatform_v1_GetTensorboardRunRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardRun);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun> __Method_UpdateTensorboardRun = new grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTensorboardRun",
        __Marshaller_google_cloud_aiplatform_v1_UpdateTensorboardRunRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardRun);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse> __Method_ListTensorboardRuns = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTensorboardRuns",
        __Marshaller_google_cloud_aiplatform_v1_ListTensorboardRunsRequest,
        __Marshaller_google_cloud_aiplatform_v1_ListTensorboardRunsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest, global::Google.LongRunning.Operation> __Method_DeleteTensorboardRun = new grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTensorboardRun",
        __Marshaller_google_cloud_aiplatform_v1_DeleteTensorboardRunRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse> __Method_BatchCreateTensorboardTimeSeries = new grpc::Method<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateTensorboardTimeSeries",
        __Marshaller_google_cloud_aiplatform_v1_BatchCreateTensorboardTimeSeriesRequest,
        __Marshaller_google_cloud_aiplatform_v1_BatchCreateTensorboardTimeSeriesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> __Method_CreateTensorboardTimeSeries = new grpc::Method<global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTensorboardTimeSeries",
        __Marshaller_google_cloud_aiplatform_v1_CreateTensorboardTimeSeriesRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardTimeSeries);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> __Method_GetTensorboardTimeSeries = new grpc::Method<global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTensorboardTimeSeries",
        __Marshaller_google_cloud_aiplatform_v1_GetTensorboardTimeSeriesRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardTimeSeries);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> __Method_UpdateTensorboardTimeSeries = new grpc::Method<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTensorboardTimeSeries",
        __Marshaller_google_cloud_aiplatform_v1_UpdateTensorboardTimeSeriesRequest,
        __Marshaller_google_cloud_aiplatform_v1_TensorboardTimeSeries);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse> __Method_ListTensorboardTimeSeries = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTensorboardTimeSeries",
        __Marshaller_google_cloud_aiplatform_v1_ListTensorboardTimeSeriesRequest,
        __Marshaller_google_cloud_aiplatform_v1_ListTensorboardTimeSeriesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest, global::Google.LongRunning.Operation> __Method_DeleteTensorboardTimeSeries = new grpc::Method<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTensorboardTimeSeries",
        __Marshaller_google_cloud_aiplatform_v1_DeleteTensorboardTimeSeriesRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse> __Method_BatchReadTensorboardTimeSeriesData = new grpc::Method<global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchReadTensorboardTimeSeriesData",
        __Marshaller_google_cloud_aiplatform_v1_BatchReadTensorboardTimeSeriesDataRequest,
        __Marshaller_google_cloud_aiplatform_v1_BatchReadTensorboardTimeSeriesDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse> __Method_ReadTensorboardTimeSeriesData = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadTensorboardTimeSeriesData",
        __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardTimeSeriesDataRequest,
        __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardTimeSeriesDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataResponse> __Method_ReadTensorboardBlobData = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ReadTensorboardBlobData",
        __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardBlobDataRequest,
        __Marshaller_google_cloud_aiplatform_v1_ReadTensorboardBlobDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest, global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse> __Method_WriteTensorboardExperimentData = new grpc::Method<global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest, global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WriteTensorboardExperimentData",
        __Marshaller_google_cloud_aiplatform_v1_WriteTensorboardExperimentDataRequest,
        __Marshaller_google_cloud_aiplatform_v1_WriteTensorboardExperimentDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest, global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse> __Method_WriteTensorboardRunData = new grpc::Method<global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest, global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WriteTensorboardRunData",
        __Marshaller_google_cloud_aiplatform_v1_WriteTensorboardRunDataRequest,
        __Marshaller_google_cloud_aiplatform_v1_WriteTensorboardRunDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse> __Method_ExportTensorboardTimeSeriesData = new grpc::Method<global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExportTensorboardTimeSeriesData",
        __Marshaller_google_cloud_aiplatform_v1_ExportTensorboardTimeSeriesDataRequest,
        __Marshaller_google_cloud_aiplatform_v1_ExportTensorboardTimeSeriesDataResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.AIPlatform.V1.TensorboardServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TensorboardService</summary>
    [grpc::BindServiceMethod(typeof(TensorboardService), "BindService")]
    public abstract partial class TensorboardServiceBase
    {
      /// <summary>
      /// Creates a Tensorboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateTensorboard(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a Tensorboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.Tensorboard> GetTensorboard(global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a Tensorboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateTensorboard(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists Tensorboards in a Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse> ListTensorboards(global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a Tensorboard.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteTensorboard(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of monthly active users for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse> ReadTensorboardUsage(global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the storage size for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse> ReadTensorboardSize(global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> CreateTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> GetTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> UpdateTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists TensorboardExperiments in a Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse> ListTensorboardExperiments(global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardRun> CreateTensorboardRun(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Batch create TensorboardRuns.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse> BatchCreateTensorboardRuns(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a TensorboardRun.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardRun> GetTensorboardRun(global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardRun> UpdateTensorboardRun(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists TensorboardRuns in a Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse> ListTensorboardRuns(global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a TensorboardRun.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteTensorboardRun(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse> BatchCreateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> CreateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> GetTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> UpdateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists TensorboardTimeSeries in a Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse> ListTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
      /// 1000 for scalars, 100 for tensors and blob references. If the number of
      /// data points stored is less than the limit, all data is returned.
      /// Otherwise, the number limit of data points is randomly selected from
      /// this time series and returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse> BatchReadTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reads a TensorboardTimeSeries' data. By default, if the number of data
      /// points stored is less than 1000, all data is returned. Otherwise, 1000
      /// data points is randomly selected from this time series and returned.
      /// This value can be changed by changing max_data_points, which can't be
      /// greater than 10k.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse> ReadTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets bytes of TensorboardBlobs.
      /// This is to allow reading blob data stored in consumer project's Cloud
      /// Storage bucket without users having to obtain Cloud Storage access
      /// permission.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ReadTensorboardBlobData(global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataRequest request, grpc::IServerStreamWriter<global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Write time series data points of multiple TensorboardTimeSeries in multiple
      /// TensorboardRun's. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse> WriteTensorboardExperimentData(global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Write time series data points into multiple TensorboardTimeSeries under
      /// a TensorboardRun. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse> WriteTensorboardRunData(global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
      /// responses.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse> ExportTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TensorboardService</summary>
    public partial class TensorboardServiceClient : grpc::ClientBase<TensorboardServiceClient>
    {
      /// <summary>Creates a new client for TensorboardService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TensorboardServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TensorboardService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TensorboardServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TensorboardServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TensorboardServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateTensorboard(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTensorboard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateTensorboard(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTensorboard, null, options, request);
      }
      /// <summary>
      /// Creates a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateTensorboardAsync(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTensorboardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateTensorboardAsync(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTensorboard, null, options, request);
      }
      /// <summary>
      /// Gets a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.Tensorboard GetTensorboard(global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTensorboard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.Tensorboard GetTensorboard(global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTensorboard, null, options, request);
      }
      /// <summary>
      /// Gets a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.Tensorboard> GetTensorboardAsync(global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTensorboardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.Tensorboard> GetTensorboardAsync(global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTensorboard, null, options, request);
      }
      /// <summary>
      /// Updates a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateTensorboard(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTensorboard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateTensorboard(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTensorboard, null, options, request);
      }
      /// <summary>
      /// Updates a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateTensorboardAsync(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTensorboardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateTensorboardAsync(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTensorboard, null, options, request);
      }
      /// <summary>
      /// Lists Tensorboards in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse ListTensorboards(global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTensorboards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Tensorboards in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse ListTensorboards(global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTensorboards, null, options, request);
      }
      /// <summary>
      /// Lists Tensorboards in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse> ListTensorboardsAsync(global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTensorboardsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Tensorboards in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse> ListTensorboardsAsync(global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTensorboards, null, options, request);
      }
      /// <summary>
      /// Deletes a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTensorboard(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTensorboard(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTensorboard(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTensorboard, null, options, request);
      }
      /// <summary>
      /// Deletes a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTensorboardAsync(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTensorboardAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Tensorboard.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTensorboardAsync(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTensorboard, null, options, request);
      }
      /// <summary>
      /// Returns a list of monthly active users for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse ReadTensorboardUsage(global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadTensorboardUsage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of monthly active users for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse ReadTensorboardUsage(global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadTensorboardUsage, null, options, request);
      }
      /// <summary>
      /// Returns a list of monthly active users for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse> ReadTensorboardUsageAsync(global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadTensorboardUsageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of monthly active users for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse> ReadTensorboardUsageAsync(global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadTensorboardUsage, null, options, request);
      }
      /// <summary>
      /// Returns the storage size for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse ReadTensorboardSize(global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadTensorboardSize(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the storage size for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse ReadTensorboardSize(global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadTensorboardSize, null, options, request);
      }
      /// <summary>
      /// Returns the storage size for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse> ReadTensorboardSizeAsync(global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadTensorboardSizeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the storage size for a given TensorBoard instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse> ReadTensorboardSizeAsync(global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadTensorboardSize, null, options, request);
      }
      /// <summary>
      /// Creates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardExperiment CreateTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTensorboardExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardExperiment CreateTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTensorboardExperiment, null, options, request);
      }
      /// <summary>
      /// Creates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> CreateTensorboardExperimentAsync(global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTensorboardExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> CreateTensorboardExperimentAsync(global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTensorboardExperiment, null, options, request);
      }
      /// <summary>
      /// Gets a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardExperiment GetTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTensorboardExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardExperiment GetTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTensorboardExperiment, null, options, request);
      }
      /// <summary>
      /// Gets a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> GetTensorboardExperimentAsync(global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTensorboardExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> GetTensorboardExperimentAsync(global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTensorboardExperiment, null, options, request);
      }
      /// <summary>
      /// Updates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardExperiment UpdateTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTensorboardExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardExperiment UpdateTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTensorboardExperiment, null, options, request);
      }
      /// <summary>
      /// Updates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> UpdateTensorboardExperimentAsync(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTensorboardExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardExperiment> UpdateTensorboardExperimentAsync(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTensorboardExperiment, null, options, request);
      }
      /// <summary>
      /// Lists TensorboardExperiments in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse ListTensorboardExperiments(global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTensorboardExperiments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TensorboardExperiments in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse ListTensorboardExperiments(global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTensorboardExperiments, null, options, request);
      }
      /// <summary>
      /// Lists TensorboardExperiments in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse> ListTensorboardExperimentsAsync(global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTensorboardExperimentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TensorboardExperiments in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse> ListTensorboardExperimentsAsync(global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTensorboardExperiments, null, options, request);
      }
      /// <summary>
      /// Deletes a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTensorboardExperiment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTensorboardExperiment(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTensorboardExperiment, null, options, request);
      }
      /// <summary>
      /// Deletes a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTensorboardExperimentAsync(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTensorboardExperimentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTensorboardExperimentAsync(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTensorboardExperiment, null, options, request);
      }
      /// <summary>
      /// Creates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardRun CreateTensorboardRun(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTensorboardRun(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardRun CreateTensorboardRun(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTensorboardRun, null, options, request);
      }
      /// <summary>
      /// Creates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardRun> CreateTensorboardRunAsync(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTensorboardRunAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardRun> CreateTensorboardRunAsync(global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTensorboardRun, null, options, request);
      }
      /// <summary>
      /// Batch create TensorboardRuns.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse BatchCreateTensorboardRuns(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateTensorboardRuns(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch create TensorboardRuns.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse BatchCreateTensorboardRuns(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateTensorboardRuns, null, options, request);
      }
      /// <summary>
      /// Batch create TensorboardRuns.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse> BatchCreateTensorboardRunsAsync(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateTensorboardRunsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch create TensorboardRuns.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse> BatchCreateTensorboardRunsAsync(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateTensorboardRuns, null, options, request);
      }
      /// <summary>
      /// Gets a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardRun GetTensorboardRun(global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTensorboardRun(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardRun GetTensorboardRun(global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTensorboardRun, null, options, request);
      }
      /// <summary>
      /// Gets a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardRun> GetTensorboardRunAsync(global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTensorboardRunAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardRun> GetTensorboardRunAsync(global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTensorboardRun, null, options, request);
      }
      /// <summary>
      /// Updates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardRun UpdateTensorboardRun(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTensorboardRun(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardRun UpdateTensorboardRun(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTensorboardRun, null, options, request);
      }
      /// <summary>
      /// Updates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardRun> UpdateTensorboardRunAsync(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTensorboardRunAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardRun> UpdateTensorboardRunAsync(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTensorboardRun, null, options, request);
      }
      /// <summary>
      /// Lists TensorboardRuns in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse ListTensorboardRuns(global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTensorboardRuns(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TensorboardRuns in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse ListTensorboardRuns(global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTensorboardRuns, null, options, request);
      }
      /// <summary>
      /// Lists TensorboardRuns in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse> ListTensorboardRunsAsync(global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTensorboardRunsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TensorboardRuns in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse> ListTensorboardRunsAsync(global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTensorboardRuns, null, options, request);
      }
      /// <summary>
      /// Deletes a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTensorboardRun(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTensorboardRun(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTensorboardRun(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTensorboardRun, null, options, request);
      }
      /// <summary>
      /// Deletes a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTensorboardRunAsync(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTensorboardRunAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a TensorboardRun.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTensorboardRunAsync(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTensorboardRun, null, options, request);
      }
      /// <summary>
      /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse BatchCreateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateTensorboardTimeSeries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse BatchCreateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse> BatchCreateTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateTensorboardTimeSeriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Batch create TensorboardTimeSeries that belong to a TensorboardExperiment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse> BatchCreateTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Creates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries CreateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTensorboardTimeSeries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries CreateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Creates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> CreateTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTensorboardTimeSeriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> CreateTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Gets a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries GetTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTensorboardTimeSeries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries GetTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Gets a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> GetTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTensorboardTimeSeriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> GetTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Updates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries UpdateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTensorboardTimeSeries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries UpdateTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Updates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> UpdateTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTensorboardTimeSeriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries> UpdateTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Lists TensorboardTimeSeries in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse ListTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTensorboardTimeSeries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TensorboardTimeSeries in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse ListTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Lists TensorboardTimeSeries in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse> ListTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTensorboardTimeSeriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TensorboardTimeSeries in a Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse> ListTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Deletes a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTensorboardTimeSeries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTensorboardTimeSeries(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Deletes a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTensorboardTimeSeriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a TensorboardTimeSeries.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTensorboardTimeSeriesAsync(global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTensorboardTimeSeries, null, options, request);
      }
      /// <summary>
      /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
      /// 1000 for scalars, 100 for tensors and blob references. If the number of
      /// data points stored is less than the limit, all data is returned.
      /// Otherwise, the number limit of data points is randomly selected from
      /// this time series and returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse BatchReadTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchReadTensorboardTimeSeriesData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
      /// 1000 for scalars, 100 for tensors and blob references. If the number of
      /// data points stored is less than the limit, all data is returned.
      /// Otherwise, the number limit of data points is randomly selected from
      /// this time series and returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse BatchReadTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchReadTensorboardTimeSeriesData, null, options, request);
      }
      /// <summary>
      /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
      /// 1000 for scalars, 100 for tensors and blob references. If the number of
      /// data points stored is less than the limit, all data is returned.
      /// Otherwise, the number limit of data points is randomly selected from
      /// this time series and returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse> BatchReadTensorboardTimeSeriesDataAsync(global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchReadTensorboardTimeSeriesDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads multiple TensorboardTimeSeries' data. The data point number limit is
      /// 1000 for scalars, 100 for tensors and blob references. If the number of
      /// data points stored is less than the limit, all data is returned.
      /// Otherwise, the number limit of data points is randomly selected from
      /// this time series and returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse> BatchReadTensorboardTimeSeriesDataAsync(global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchReadTensorboardTimeSeriesData, null, options, request);
      }
      /// <summary>
      /// Reads a TensorboardTimeSeries' data. By default, if the number of data
      /// points stored is less than 1000, all data is returned. Otherwise, 1000
      /// data points is randomly selected from this time series and returned.
      /// This value can be changed by changing max_data_points, which can't be
      /// greater than 10k.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse ReadTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadTensorboardTimeSeriesData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads a TensorboardTimeSeries' data. By default, if the number of data
      /// points stored is less than 1000, all data is returned. Otherwise, 1000
      /// data points is randomly selected from this time series and returned.
      /// This value can be changed by changing max_data_points, which can't be
      /// greater than 10k.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse ReadTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadTensorboardTimeSeriesData, null, options, request);
      }
      /// <summary>
      /// Reads a TensorboardTimeSeries' data. By default, if the number of data
      /// points stored is less than 1000, all data is returned. Otherwise, 1000
      /// data points is randomly selected from this time series and returned.
      /// This value can be changed by changing max_data_points, which can't be
      /// greater than 10k.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse> ReadTensorboardTimeSeriesDataAsync(global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadTensorboardTimeSeriesDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads a TensorboardTimeSeries' data. By default, if the number of data
      /// points stored is less than 1000, all data is returned. Otherwise, 1000
      /// data points is randomly selected from this time series and returned.
      /// This value can be changed by changing max_data_points, which can't be
      /// greater than 10k.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse> ReadTensorboardTimeSeriesDataAsync(global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadTensorboardTimeSeriesData, null, options, request);
      }
      /// <summary>
      /// Gets bytes of TensorboardBlobs.
      /// This is to allow reading blob data stored in consumer project's Cloud
      /// Storage bucket without users having to obtain Cloud Storage access
      /// permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataResponse> ReadTensorboardBlobData(global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadTensorboardBlobData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets bytes of TensorboardBlobs.
      /// This is to allow reading blob data stored in consumer project's Cloud
      /// Storage bucket without users having to obtain Cloud Storage access
      /// permission.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataResponse> ReadTensorboardBlobData(global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReadTensorboardBlobData, null, options, request);
      }
      /// <summary>
      /// Write time series data points of multiple TensorboardTimeSeries in multiple
      /// TensorboardRun's. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse WriteTensorboardExperimentData(global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteTensorboardExperimentData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Write time series data points of multiple TensorboardTimeSeries in multiple
      /// TensorboardRun's. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse WriteTensorboardExperimentData(global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WriteTensorboardExperimentData, null, options, request);
      }
      /// <summary>
      /// Write time series data points of multiple TensorboardTimeSeries in multiple
      /// TensorboardRun's. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse> WriteTensorboardExperimentDataAsync(global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteTensorboardExperimentDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Write time series data points of multiple TensorboardTimeSeries in multiple
      /// TensorboardRun's. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse> WriteTensorboardExperimentDataAsync(global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WriteTensorboardExperimentData, null, options, request);
      }
      /// <summary>
      /// Write time series data points into multiple TensorboardTimeSeries under
      /// a TensorboardRun. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse WriteTensorboardRunData(global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteTensorboardRunData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Write time series data points into multiple TensorboardTimeSeries under
      /// a TensorboardRun. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse WriteTensorboardRunData(global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WriteTensorboardRunData, null, options, request);
      }
      /// <summary>
      /// Write time series data points into multiple TensorboardTimeSeries under
      /// a TensorboardRun. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse> WriteTensorboardRunDataAsync(global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteTensorboardRunDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Write time series data points into multiple TensorboardTimeSeries under
      /// a TensorboardRun. If any data fail to be ingested, an error is returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse> WriteTensorboardRunDataAsync(global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WriteTensorboardRunData, null, options, request);
      }
      /// <summary>
      /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
      /// responses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse ExportTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportTensorboardTimeSeriesData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
      /// responses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse ExportTensorboardTimeSeriesData(global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExportTensorboardTimeSeriesData, null, options, request);
      }
      /// <summary>
      /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
      /// responses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse> ExportTensorboardTimeSeriesDataAsync(global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportTensorboardTimeSeriesDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports a TensorboardTimeSeries' data. Data is returned in paginated
      /// responses.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse> ExportTensorboardTimeSeriesDataAsync(global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExportTensorboardTimeSeriesData, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TensorboardServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TensorboardServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TensorboardServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTensorboard, serviceImpl.CreateTensorboard)
          .AddMethod(__Method_GetTensorboard, serviceImpl.GetTensorboard)
          .AddMethod(__Method_UpdateTensorboard, serviceImpl.UpdateTensorboard)
          .AddMethod(__Method_ListTensorboards, serviceImpl.ListTensorboards)
          .AddMethod(__Method_DeleteTensorboard, serviceImpl.DeleteTensorboard)
          .AddMethod(__Method_ReadTensorboardUsage, serviceImpl.ReadTensorboardUsage)
          .AddMethod(__Method_ReadTensorboardSize, serviceImpl.ReadTensorboardSize)
          .AddMethod(__Method_CreateTensorboardExperiment, serviceImpl.CreateTensorboardExperiment)
          .AddMethod(__Method_GetTensorboardExperiment, serviceImpl.GetTensorboardExperiment)
          .AddMethod(__Method_UpdateTensorboardExperiment, serviceImpl.UpdateTensorboardExperiment)
          .AddMethod(__Method_ListTensorboardExperiments, serviceImpl.ListTensorboardExperiments)
          .AddMethod(__Method_DeleteTensorboardExperiment, serviceImpl.DeleteTensorboardExperiment)
          .AddMethod(__Method_CreateTensorboardRun, serviceImpl.CreateTensorboardRun)
          .AddMethod(__Method_BatchCreateTensorboardRuns, serviceImpl.BatchCreateTensorboardRuns)
          .AddMethod(__Method_GetTensorboardRun, serviceImpl.GetTensorboardRun)
          .AddMethod(__Method_UpdateTensorboardRun, serviceImpl.UpdateTensorboardRun)
          .AddMethod(__Method_ListTensorboardRuns, serviceImpl.ListTensorboardRuns)
          .AddMethod(__Method_DeleteTensorboardRun, serviceImpl.DeleteTensorboardRun)
          .AddMethod(__Method_BatchCreateTensorboardTimeSeries, serviceImpl.BatchCreateTensorboardTimeSeries)
          .AddMethod(__Method_CreateTensorboardTimeSeries, serviceImpl.CreateTensorboardTimeSeries)
          .AddMethod(__Method_GetTensorboardTimeSeries, serviceImpl.GetTensorboardTimeSeries)
          .AddMethod(__Method_UpdateTensorboardTimeSeries, serviceImpl.UpdateTensorboardTimeSeries)
          .AddMethod(__Method_ListTensorboardTimeSeries, serviceImpl.ListTensorboardTimeSeries)
          .AddMethod(__Method_DeleteTensorboardTimeSeries, serviceImpl.DeleteTensorboardTimeSeries)
          .AddMethod(__Method_BatchReadTensorboardTimeSeriesData, serviceImpl.BatchReadTensorboardTimeSeriesData)
          .AddMethod(__Method_ReadTensorboardTimeSeriesData, serviceImpl.ReadTensorboardTimeSeriesData)
          .AddMethod(__Method_ReadTensorboardBlobData, serviceImpl.ReadTensorboardBlobData)
          .AddMethod(__Method_WriteTensorboardExperimentData, serviceImpl.WriteTensorboardExperimentData)
          .AddMethod(__Method_WriteTensorboardRunData, serviceImpl.WriteTensorboardRunData)
          .AddMethod(__Method_ExportTensorboardTimeSeriesData, serviceImpl.ExportTensorboardTimeSeriesData).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TensorboardServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateTensorboard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.CreateTensorboardRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateTensorboard));
      serviceBinder.AddMethod(__Method_GetTensorboard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.GetTensorboardRequest, global::Google.Cloud.AIPlatform.V1.Tensorboard>(serviceImpl.GetTensorboard));
      serviceBinder.AddMethod(__Method_UpdateTensorboard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateTensorboard));
      serviceBinder.AddMethod(__Method_ListTensorboards, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ListTensorboardsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardsResponse>(serviceImpl.ListTensorboards));
      serviceBinder.AddMethod(__Method_DeleteTensorboard, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteTensorboard));
      serviceBinder.AddMethod(__Method_ReadTensorboardUsage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardUsageResponse>(serviceImpl.ReadTensorboardUsage));
      serviceBinder.AddMethod(__Method_ReadTensorboardSize, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardSizeResponse>(serviceImpl.ReadTensorboardSize));
      serviceBinder.AddMethod(__Method_CreateTensorboardExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.CreateTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment>(serviceImpl.CreateTensorboardExperiment));
      serviceBinder.AddMethod(__Method_GetTensorboardExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.GetTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment>(serviceImpl.GetTensorboardExperiment));
      serviceBinder.AddMethod(__Method_UpdateTensorboardExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardExperimentRequest, global::Google.Cloud.AIPlatform.V1.TensorboardExperiment>(serviceImpl.UpdateTensorboardExperiment));
      serviceBinder.AddMethod(__Method_ListTensorboardExperiments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardExperimentsResponse>(serviceImpl.ListTensorboardExperiments));
      serviceBinder.AddMethod(__Method_DeleteTensorboardExperiment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardExperimentRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteTensorboardExperiment));
      serviceBinder.AddMethod(__Method_CreateTensorboardRun, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.CreateTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun>(serviceImpl.CreateTensorboardRun));
      serviceBinder.AddMethod(__Method_BatchCreateTensorboardRuns, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsRequest, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardRunsResponse>(serviceImpl.BatchCreateTensorboardRuns));
      serviceBinder.AddMethod(__Method_GetTensorboardRun, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.GetTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun>(serviceImpl.GetTensorboardRun));
      serviceBinder.AddMethod(__Method_UpdateTensorboardRun, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardRunRequest, global::Google.Cloud.AIPlatform.V1.TensorboardRun>(serviceImpl.UpdateTensorboardRun));
      serviceBinder.AddMethod(__Method_ListTensorboardRuns, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardRunsResponse>(serviceImpl.ListTensorboardRuns));
      serviceBinder.AddMethod(__Method_DeleteTensorboardRun, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardRunRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteTensorboardRun));
      serviceBinder.AddMethod(__Method_BatchCreateTensorboardTimeSeries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.BatchCreateTensorboardTimeSeriesResponse>(serviceImpl.BatchCreateTensorboardTimeSeries));
      serviceBinder.AddMethod(__Method_CreateTensorboardTimeSeries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.CreateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries>(serviceImpl.CreateTensorboardTimeSeries));
      serviceBinder.AddMethod(__Method_GetTensorboardTimeSeries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.GetTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries>(serviceImpl.GetTensorboardTimeSeries));
      serviceBinder.AddMethod(__Method_UpdateTensorboardTimeSeries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.UpdateTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.TensorboardTimeSeries>(serviceImpl.UpdateTensorboardTimeSeries));
      serviceBinder.AddMethod(__Method_ListTensorboardTimeSeries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesRequest, global::Google.Cloud.AIPlatform.V1.ListTensorboardTimeSeriesResponse>(serviceImpl.ListTensorboardTimeSeries));
      serviceBinder.AddMethod(__Method_DeleteTensorboardTimeSeries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.DeleteTensorboardTimeSeriesRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteTensorboardTimeSeries));
      serviceBinder.AddMethod(__Method_BatchReadTensorboardTimeSeriesData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.BatchReadTensorboardTimeSeriesDataResponse>(serviceImpl.BatchReadTensorboardTimeSeriesData));
      serviceBinder.AddMethod(__Method_ReadTensorboardTimeSeriesData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardTimeSeriesDataResponse>(serviceImpl.ReadTensorboardTimeSeriesData));
      serviceBinder.AddMethod(__Method_ReadTensorboardBlobData, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataRequest, global::Google.Cloud.AIPlatform.V1.ReadTensorboardBlobDataResponse>(serviceImpl.ReadTensorboardBlobData));
      serviceBinder.AddMethod(__Method_WriteTensorboardExperimentData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataRequest, global::Google.Cloud.AIPlatform.V1.WriteTensorboardExperimentDataResponse>(serviceImpl.WriteTensorboardExperimentData));
      serviceBinder.AddMethod(__Method_WriteTensorboardRunData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataRequest, global::Google.Cloud.AIPlatform.V1.WriteTensorboardRunDataResponse>(serviceImpl.WriteTensorboardRunData));
      serviceBinder.AddMethod(__Method_ExportTensorboardTimeSeriesData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataRequest, global::Google.Cloud.AIPlatform.V1.ExportTensorboardTimeSeriesDataResponse>(serviceImpl.ExportTensorboardTimeSeriesData));
    }

  }
}
#endregion
