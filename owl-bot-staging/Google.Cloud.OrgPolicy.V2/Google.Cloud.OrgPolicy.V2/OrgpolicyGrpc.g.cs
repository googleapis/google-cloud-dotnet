// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/orgpolicy/v2/orgpolicy.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.OrgPolicy.V2 {
  /// <summary>
  /// An interface for managing organization policies.
  ///
  /// The Organization Policy Service provides a simple mechanism for
  /// organizations to restrict the allowed configurations across their entire
  /// resource hierarchy.
  ///
  /// You can use a policy to configure restrictions on resources. For
  /// example, you can enforce a policy that restricts which Google
  /// Cloud APIs can be activated in a certain part of your resource
  /// hierarchy, or prevents serial port access to VM instances in a
  /// particular folder.
  ///
  /// Policies are inherited down through the resource hierarchy. A policy
  /// applied to a parent resource automatically applies to all its child resources
  /// unless overridden with a policy lower in the hierarchy.
  ///
  /// A constraint defines an aspect of a resource's configuration that can be
  /// controlled by an organization's policy administrator. Policies are a
  /// collection of constraints that defines their allowable configuration on a
  /// particular resource and its child resources.
  /// </summary>
  public static partial class OrgPolicy
  {
    static readonly string __ServiceName = "google.cloud.orgpolicy.v2.OrgPolicy";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest> __Marshaller_google_cloud_orgpolicy_v2_ListConstraintsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse> __Marshaller_google_cloud_orgpolicy_v2_ListConstraintsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest> __Marshaller_google_cloud_orgpolicy_v2_ListPoliciesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse> __Marshaller_google_cloud_orgpolicy_v2_ListPoliciesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest> __Marshaller_google_cloud_orgpolicy_v2_GetPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.Policy> __Marshaller_google_cloud_orgpolicy_v2_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest> __Marshaller_google_cloud_orgpolicy_v2_GetEffectivePolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest> __Marshaller_google_cloud_orgpolicy_v2_CreatePolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest> __Marshaller_google_cloud_orgpolicy_v2_UpdatePolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest> __Marshaller_google_cloud_orgpolicy_v2_DeletePolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest> __Marshaller_google_cloud_orgpolicy_v2_CreateCustomConstraintRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> __Marshaller_google_cloud_orgpolicy_v2_CustomConstraint = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.CustomConstraint.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest> __Marshaller_google_cloud_orgpolicy_v2_UpdateCustomConstraintRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest> __Marshaller_google_cloud_orgpolicy_v2_GetCustomConstraintRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest> __Marshaller_google_cloud_orgpolicy_v2_ListCustomConstraintsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse> __Marshaller_google_cloud_orgpolicy_v2_ListCustomConstraintsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest> __Marshaller_google_cloud_orgpolicy_v2_DeleteCustomConstraintRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest, global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse> __Method_ListConstraints = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest, global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConstraints",
        __Marshaller_google_cloud_orgpolicy_v2_ListConstraintsRequest,
        __Marshaller_google_cloud_orgpolicy_v2_ListConstraintsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest, global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse> __Method_ListPolicies = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest, global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPolicies",
        __Marshaller_google_cloud_orgpolicy_v2_ListPoliciesRequest,
        __Marshaller_google_cloud_orgpolicy_v2_ListPoliciesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy> __Method_GetPolicy = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPolicy",
        __Marshaller_google_cloud_orgpolicy_v2_GetPolicyRequest,
        __Marshaller_google_cloud_orgpolicy_v2_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy> __Method_GetEffectivePolicy = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEffectivePolicy",
        __Marshaller_google_cloud_orgpolicy_v2_GetEffectivePolicyRequest,
        __Marshaller_google_cloud_orgpolicy_v2_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy> __Method_CreatePolicy = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePolicy",
        __Marshaller_google_cloud_orgpolicy_v2_CreatePolicyRequest,
        __Marshaller_google_cloud_orgpolicy_v2_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy> __Method_UpdatePolicy = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePolicy",
        __Marshaller_google_cloud_orgpolicy_v2_UpdatePolicyRequest,
        __Marshaller_google_cloud_orgpolicy_v2_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeletePolicy = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePolicy",
        __Marshaller_google_cloud_orgpolicy_v2_DeletePolicyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint> __Method_CreateCustomConstraint = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCustomConstraint",
        __Marshaller_google_cloud_orgpolicy_v2_CreateCustomConstraintRequest,
        __Marshaller_google_cloud_orgpolicy_v2_CustomConstraint);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint> __Method_UpdateCustomConstraint = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCustomConstraint",
        __Marshaller_google_cloud_orgpolicy_v2_UpdateCustomConstraintRequest,
        __Marshaller_google_cloud_orgpolicy_v2_CustomConstraint);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint> __Method_GetCustomConstraint = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCustomConstraint",
        __Marshaller_google_cloud_orgpolicy_v2_GetCustomConstraintRequest,
        __Marshaller_google_cloud_orgpolicy_v2_CustomConstraint);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest, global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse> __Method_ListCustomConstraints = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest, global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCustomConstraints",
        __Marshaller_google_cloud_orgpolicy_v2_ListCustomConstraintsRequest,
        __Marshaller_google_cloud_orgpolicy_v2_ListCustomConstraintsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteCustomConstraint = new grpc::Method<global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCustomConstraint",
        __Marshaller_google_cloud_orgpolicy_v2_DeleteCustomConstraintRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.OrgPolicy.V2.OrgpolicyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OrgPolicy</summary>
    [grpc::BindServiceMethod(typeof(OrgPolicy), "BindService")]
    public abstract partial class OrgPolicyBase
    {
      /// <summary>
      /// Lists constraints that could be applied on the specified resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse> ListConstraints(global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all of the policies that exist on a particular resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse> ListPolicies(global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a policy on a resource.
      ///
      /// If no policy is set on the resource, `NOT_FOUND` is returned. The
      /// `etag` value can be used with `UpdatePolicy()` to update a
      /// policy during read-modify-write.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.Policy> GetPolicy(global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the effective policy on a resource. This is the result of merging
      /// policies in the resource hierarchy and evaluating conditions. The
      /// returned policy will not have an `etag` or `condition` set because it is
      /// an evaluated policy across multiple resources.
      /// Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
      /// not be expanded.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.Policy> GetEffectivePolicy(global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// policy already exists on the given Google Cloud resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.Policy> CreatePolicy(global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or the policy do not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
      /// supplied in the request does not match the persisted etag of the policy
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.Policy> UpdatePolicy(global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or organization policy does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeletePolicy(global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// organization does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// constraint already exists on the given organization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> CreateCustomConstraint(global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> UpdateCustomConstraint(global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// custom constraint does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> GetCustomConstraint(global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all of the custom constraints that exist on a particular
      /// organization resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse> ListCustomConstraints(global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCustomConstraint(global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OrgPolicy</summary>
    public partial class OrgPolicyClient : grpc::ClientBase<OrgPolicyClient>
    {
      /// <summary>Creates a new client for OrgPolicy</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OrgPolicyClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OrgPolicy that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OrgPolicyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OrgPolicyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OrgPolicyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists constraints that could be applied on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse ListConstraints(global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConstraints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists constraints that could be applied on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse ListConstraints(global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConstraints, null, options, request);
      }
      /// <summary>
      /// Lists constraints that could be applied on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse> ListConstraintsAsync(global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConstraintsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists constraints that could be applied on the specified resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse> ListConstraintsAsync(global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConstraints, null, options, request);
      }
      /// <summary>
      /// Retrieves all of the policies that exist on a particular resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse ListPolicies(global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPolicies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all of the policies that exist on a particular resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse ListPolicies(global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPolicies, null, options, request);
      }
      /// <summary>
      /// Retrieves all of the policies that exist on a particular resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse> ListPoliciesAsync(global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPoliciesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all of the policies that exist on a particular resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse> ListPoliciesAsync(global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPolicies, null, options, request);
      }
      /// <summary>
      /// Gets a policy on a resource.
      ///
      /// If no policy is set on the resource, `NOT_FOUND` is returned. The
      /// `etag` value can be used with `UpdatePolicy()` to update a
      /// policy during read-modify-write.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.Policy GetPolicy(global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a policy on a resource.
      ///
      /// If no policy is set on the resource, `NOT_FOUND` is returned. The
      /// `etag` value can be used with `UpdatePolicy()` to update a
      /// policy during read-modify-write.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.Policy GetPolicy(global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPolicy, null, options, request);
      }
      /// <summary>
      /// Gets a policy on a resource.
      ///
      /// If no policy is set on the resource, `NOT_FOUND` is returned. The
      /// `etag` value can be used with `UpdatePolicy()` to update a
      /// policy during read-modify-write.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.Policy> GetPolicyAsync(global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a policy on a resource.
      ///
      /// If no policy is set on the resource, `NOT_FOUND` is returned. The
      /// `etag` value can be used with `UpdatePolicy()` to update a
      /// policy during read-modify-write.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.Policy> GetPolicyAsync(global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the effective policy on a resource. This is the result of merging
      /// policies in the resource hierarchy and evaluating conditions. The
      /// returned policy will not have an `etag` or `condition` set because it is
      /// an evaluated policy across multiple resources.
      /// Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
      /// not be expanded.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.Policy GetEffectivePolicy(global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEffectivePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the effective policy on a resource. This is the result of merging
      /// policies in the resource hierarchy and evaluating conditions. The
      /// returned policy will not have an `etag` or `condition` set because it is
      /// an evaluated policy across multiple resources.
      /// Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
      /// not be expanded.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.Policy GetEffectivePolicy(global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEffectivePolicy, null, options, request);
      }
      /// <summary>
      /// Gets the effective policy on a resource. This is the result of merging
      /// policies in the resource hierarchy and evaluating conditions. The
      /// returned policy will not have an `etag` or `condition` set because it is
      /// an evaluated policy across multiple resources.
      /// Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
      /// not be expanded.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.Policy> GetEffectivePolicyAsync(global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEffectivePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the effective policy on a resource. This is the result of merging
      /// policies in the resource hierarchy and evaluating conditions. The
      /// returned policy will not have an `etag` or `condition` set because it is
      /// an evaluated policy across multiple resources.
      /// Subtrees of Resource Manager resource hierarchy with 'under:' prefix will
      /// not be expanded.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.Policy> GetEffectivePolicyAsync(global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEffectivePolicy, null, options, request);
      }
      /// <summary>
      /// Creates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// policy already exists on the given Google Cloud resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.Policy CreatePolicy(global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// policy already exists on the given Google Cloud resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.Policy CreatePolicy(global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePolicy, null, options, request);
      }
      /// <summary>
      /// Creates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// policy already exists on the given Google Cloud resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.Policy> CreatePolicyAsync(global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// policy already exists on the given Google Cloud resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.Policy> CreatePolicyAsync(global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePolicy, null, options, request);
      }
      /// <summary>
      /// Updates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or the policy do not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
      /// supplied in the request does not match the persisted etag of the policy
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.Policy UpdatePolicy(global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or the policy do not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
      /// supplied in the request does not match the persisted etag of the policy
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.Policy UpdatePolicy(global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePolicy, null, options, request);
      }
      /// <summary>
      /// Updates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or the policy do not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
      /// supplied in the request does not match the persisted etag of the policy
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.Policy> UpdatePolicyAsync(global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or the policy do not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
      /// supplied in the request does not match the persisted etag of the policy
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.Policy> UpdatePolicyAsync(global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePolicy, null, options, request);
      }
      /// <summary>
      /// Deletes a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or organization policy does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeletePolicy(global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or organization policy does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeletePolicy(global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePolicy, null, options, request);
      }
      /// <summary>
      /// Deletes a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or organization policy does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeletePolicyAsync(global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a policy.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint or organization policy does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeletePolicyAsync(global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePolicy, null, options, request);
      }
      /// <summary>
      /// Creates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// organization does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// constraint already exists on the given organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.CustomConstraint CreateCustomConstraint(global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCustomConstraint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// organization does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// constraint already exists on the given organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.CustomConstraint CreateCustomConstraint(global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCustomConstraint, null, options, request);
      }
      /// <summary>
      /// Creates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// organization does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// constraint already exists on the given organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> CreateCustomConstraintAsync(global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCustomConstraintAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// organization does not exist.
      /// Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the
      /// constraint already exists on the given organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> CreateCustomConstraintAsync(global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCustomConstraint, null, options, request);
      }
      /// <summary>
      /// Updates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.CustomConstraint UpdateCustomConstraint(global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCustomConstraint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.CustomConstraint UpdateCustomConstraint(global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCustomConstraint, null, options, request);
      }
      /// <summary>
      /// Updates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> UpdateCustomConstraintAsync(global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCustomConstraintAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      ///
      /// Note: the supplied policy will perform a full overwrite of all
      /// fields.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> UpdateCustomConstraintAsync(global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCustomConstraint, null, options, request);
      }
      /// <summary>
      /// Gets a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// custom constraint does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.CustomConstraint GetCustomConstraint(global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCustomConstraint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// custom constraint does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.CustomConstraint GetCustomConstraint(global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCustomConstraint, null, options, request);
      }
      /// <summary>
      /// Gets a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// custom constraint does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> GetCustomConstraintAsync(global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCustomConstraintAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// custom constraint does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.CustomConstraint> GetCustomConstraintAsync(global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCustomConstraint, null, options, request);
      }
      /// <summary>
      /// Retrieves all of the custom constraints that exist on a particular
      /// organization resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse ListCustomConstraints(global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCustomConstraints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all of the custom constraints that exist on a particular
      /// organization resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse ListCustomConstraints(global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCustomConstraints, null, options, request);
      }
      /// <summary>
      /// Retrieves all of the custom constraints that exist on a particular
      /// organization resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse> ListCustomConstraintsAsync(global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCustomConstraintsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all of the custom constraints that exist on a particular
      /// organization resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse> ListCustomConstraintsAsync(global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCustomConstraints, null, options, request);
      }
      /// <summary>
      /// Deletes a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteCustomConstraint(global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCustomConstraint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteCustomConstraint(global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCustomConstraint, null, options, request);
      }
      /// <summary>
      /// Deletes a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCustomConstraintAsync(global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCustomConstraintAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a custom constraint.
      ///
      /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
      /// constraint does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteCustomConstraintAsync(global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCustomConstraint, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override OrgPolicyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OrgPolicyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(OrgPolicyBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListConstraints, serviceImpl.ListConstraints)
          .AddMethod(__Method_ListPolicies, serviceImpl.ListPolicies)
          .AddMethod(__Method_GetPolicy, serviceImpl.GetPolicy)
          .AddMethod(__Method_GetEffectivePolicy, serviceImpl.GetEffectivePolicy)
          .AddMethod(__Method_CreatePolicy, serviceImpl.CreatePolicy)
          .AddMethod(__Method_UpdatePolicy, serviceImpl.UpdatePolicy)
          .AddMethod(__Method_DeletePolicy, serviceImpl.DeletePolicy)
          .AddMethod(__Method_CreateCustomConstraint, serviceImpl.CreateCustomConstraint)
          .AddMethod(__Method_UpdateCustomConstraint, serviceImpl.UpdateCustomConstraint)
          .AddMethod(__Method_GetCustomConstraint, serviceImpl.GetCustomConstraint)
          .AddMethod(__Method_ListCustomConstraints, serviceImpl.ListCustomConstraints)
          .AddMethod(__Method_DeleteCustomConstraint, serviceImpl.DeleteCustomConstraint).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OrgPolicyBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListConstraints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.ListConstraintsRequest, global::Google.Cloud.OrgPolicy.V2.ListConstraintsResponse>(serviceImpl.ListConstraints));
      serviceBinder.AddMethod(__Method_ListPolicies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.ListPoliciesRequest, global::Google.Cloud.OrgPolicy.V2.ListPoliciesResponse>(serviceImpl.ListPolicies));
      serviceBinder.AddMethod(__Method_GetPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.GetPolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy>(serviceImpl.GetPolicy));
      serviceBinder.AddMethod(__Method_GetEffectivePolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.GetEffectivePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy>(serviceImpl.GetEffectivePolicy));
      serviceBinder.AddMethod(__Method_CreatePolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.CreatePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy>(serviceImpl.CreatePolicy));
      serviceBinder.AddMethod(__Method_UpdatePolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.UpdatePolicyRequest, global::Google.Cloud.OrgPolicy.V2.Policy>(serviceImpl.UpdatePolicy));
      serviceBinder.AddMethod(__Method_DeletePolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.DeletePolicyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeletePolicy));
      serviceBinder.AddMethod(__Method_CreateCustomConstraint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.CreateCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint>(serviceImpl.CreateCustomConstraint));
      serviceBinder.AddMethod(__Method_UpdateCustomConstraint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.UpdateCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint>(serviceImpl.UpdateCustomConstraint));
      serviceBinder.AddMethod(__Method_GetCustomConstraint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.GetCustomConstraintRequest, global::Google.Cloud.OrgPolicy.V2.CustomConstraint>(serviceImpl.GetCustomConstraint));
      serviceBinder.AddMethod(__Method_ListCustomConstraints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsRequest, global::Google.Cloud.OrgPolicy.V2.ListCustomConstraintsResponse>(serviceImpl.ListCustomConstraints));
      serviceBinder.AddMethod(__Method_DeleteCustomConstraint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.OrgPolicy.V2.DeleteCustomConstraintRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteCustomConstraint));
    }

  }
}
#endregion
