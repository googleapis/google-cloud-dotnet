// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/certificatemanager/v1/certificate_manager.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.CertificateManager.V1 {
  /// <summary>
  /// API Overview
  ///
  /// Certificates Manager API allows customers to see and manage all their TLS
  /// certificates.
  ///
  /// Certificates Manager API service provides methods to manage certificates,
  /// group them into collections, and create serving configuration that can be
  /// easily applied to other Cloud resources e.g. Target Proxies.
  ///
  /// Data Model
  ///
  /// The Certificates Manager service exposes the following resources:
  ///
  /// * `Certificate` that describes a single TLS certificate.
  /// * `CertificateMap` that describes a collection of certificates that can be
  /// attached to a target resource.
  /// * `CertificateMapEntry` that describes a single configuration entry that
  /// consists of a SNI and a group of certificates. It's a subresource of
  /// CertificateMap.
  ///
  /// Certificate, CertificateMap and CertificateMapEntry IDs
  /// have to fully match the regexp `[a-z0-9-]{1,63}`. In other words,
  /// - only lower case letters, digits, and hyphen are allowed
  /// - length of the resource ID has to be in [1,63] range.
  ///
  /// Provides methods to manage Cloud Certificate Manager entities.
  /// </summary>
  public static partial class CertificateManager
  {
    static readonly string __ServiceName = "google.cloud.certificatemanager.v1.CertificateManager";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest> __Marshaller_google_cloud_certificatemanager_v1_ListCertificatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse> __Marshaller_google_cloud_certificatemanager_v1_ListCertificatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.GetCertificateRequest> __Marshaller_google_cloud_certificatemanager_v1_GetCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.GetCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.Certificate> __Marshaller_google_cloud_certificatemanager_v1_Certificate = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.Certificate.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest> __Marshaller_google_cloud_certificatemanager_v1_CreateCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest> __Marshaller_google_cloud_certificatemanager_v1_UpdateCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest> __Marshaller_google_cloud_certificatemanager_v1_DeleteCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest> __Marshaller_google_cloud_certificatemanager_v1_ListCertificateMapsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse> __Marshaller_google_cloud_certificatemanager_v1_ListCertificateMapsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest> __Marshaller_google_cloud_certificatemanager_v1_GetCertificateMapRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CertificateMap> __Marshaller_google_cloud_certificatemanager_v1_CertificateMap = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CertificateMap.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest> __Marshaller_google_cloud_certificatemanager_v1_CreateCertificateMapRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest> __Marshaller_google_cloud_certificatemanager_v1_UpdateCertificateMapRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest> __Marshaller_google_cloud_certificatemanager_v1_DeleteCertificateMapRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest> __Marshaller_google_cloud_certificatemanager_v1_ListCertificateMapEntriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse> __Marshaller_google_cloud_certificatemanager_v1_ListCertificateMapEntriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest> __Marshaller_google_cloud_certificatemanager_v1_GetCertificateMapEntryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CertificateMapEntry> __Marshaller_google_cloud_certificatemanager_v1_CertificateMapEntry = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CertificateMapEntry.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest> __Marshaller_google_cloud_certificatemanager_v1_CreateCertificateMapEntryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest> __Marshaller_google_cloud_certificatemanager_v1_UpdateCertificateMapEntryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest> __Marshaller_google_cloud_certificatemanager_v1_DeleteCertificateMapEntryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest> __Marshaller_google_cloud_certificatemanager_v1_ListDnsAuthorizationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse> __Marshaller_google_cloud_certificatemanager_v1_ListDnsAuthorizationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest> __Marshaller_google_cloud_certificatemanager_v1_GetDnsAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.DnsAuthorization> __Marshaller_google_cloud_certificatemanager_v1_DnsAuthorization = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.DnsAuthorization.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest> __Marshaller_google_cloud_certificatemanager_v1_CreateDnsAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest> __Marshaller_google_cloud_certificatemanager_v1_UpdateDnsAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest> __Marshaller_google_cloud_certificatemanager_v1_DeleteDnsAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest> __Marshaller_google_cloud_certificatemanager_v1_ListCertificateIssuanceConfigsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse> __Marshaller_google_cloud_certificatemanager_v1_ListCertificateIssuanceConfigsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest> __Marshaller_google_cloud_certificatemanager_v1_GetCertificateIssuanceConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig> __Marshaller_google_cloud_certificatemanager_v1_CertificateIssuanceConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest> __Marshaller_google_cloud_certificatemanager_v1_CreateCertificateIssuanceConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest> __Marshaller_google_cloud_certificatemanager_v1_DeleteCertificateIssuanceConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest> __Marshaller_google_cloud_certificatemanager_v1_ListTrustConfigsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse> __Marshaller_google_cloud_certificatemanager_v1_ListTrustConfigsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest> __Marshaller_google_cloud_certificatemanager_v1_GetTrustConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.TrustConfig> __Marshaller_google_cloud_certificatemanager_v1_TrustConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.TrustConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest> __Marshaller_google_cloud_certificatemanager_v1_CreateTrustConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest> __Marshaller_google_cloud_certificatemanager_v1_UpdateTrustConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest> __Marshaller_google_cloud_certificatemanager_v1_DeleteTrustConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest, global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse> __Method_ListCertificates = new grpc::Method<global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest, global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificates",
        __Marshaller_google_cloud_certificatemanager_v1_ListCertificatesRequest,
        __Marshaller_google_cloud_certificatemanager_v1_ListCertificatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.GetCertificateRequest, global::Google.Cloud.CertificateManager.V1.Certificate> __Method_GetCertificate = new grpc::Method<global::Google.Cloud.CertificateManager.V1.GetCertificateRequest, global::Google.Cloud.CertificateManager.V1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificate",
        __Marshaller_google_cloud_certificatemanager_v1_GetCertificateRequest,
        __Marshaller_google_cloud_certificatemanager_v1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest, global::Google.LongRunning.Operation> __Method_CreateCertificate = new grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificate",
        __Marshaller_google_cloud_certificatemanager_v1_CreateCertificateRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest, global::Google.LongRunning.Operation> __Method_UpdateCertificate = new grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificate",
        __Marshaller_google_cloud_certificatemanager_v1_UpdateCertificateRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest, global::Google.LongRunning.Operation> __Method_DeleteCertificate = new grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCertificate",
        __Marshaller_google_cloud_certificatemanager_v1_DeleteCertificateRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse> __Method_ListCertificateMaps = new grpc::Method<global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificateMaps",
        __Marshaller_google_cloud_certificatemanager_v1_ListCertificateMapsRequest,
        __Marshaller_google_cloud_certificatemanager_v1_ListCertificateMapsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest, global::Google.Cloud.CertificateManager.V1.CertificateMap> __Method_GetCertificateMap = new grpc::Method<global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest, global::Google.Cloud.CertificateManager.V1.CertificateMap>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificateMap",
        __Marshaller_google_cloud_certificatemanager_v1_GetCertificateMapRequest,
        __Marshaller_google_cloud_certificatemanager_v1_CertificateMap);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest, global::Google.LongRunning.Operation> __Method_CreateCertificateMap = new grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificateMap",
        __Marshaller_google_cloud_certificatemanager_v1_CreateCertificateMapRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest, global::Google.LongRunning.Operation> __Method_UpdateCertificateMap = new grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificateMap",
        __Marshaller_google_cloud_certificatemanager_v1_UpdateCertificateMapRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest, global::Google.LongRunning.Operation> __Method_DeleteCertificateMap = new grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCertificateMap",
        __Marshaller_google_cloud_certificatemanager_v1_DeleteCertificateMapRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse> __Method_ListCertificateMapEntries = new grpc::Method<global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificateMapEntries",
        __Marshaller_google_cloud_certificatemanager_v1_ListCertificateMapEntriesRequest,
        __Marshaller_google_cloud_certificatemanager_v1_ListCertificateMapEntriesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest, global::Google.Cloud.CertificateManager.V1.CertificateMapEntry> __Method_GetCertificateMapEntry = new grpc::Method<global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest, global::Google.Cloud.CertificateManager.V1.CertificateMapEntry>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificateMapEntry",
        __Marshaller_google_cloud_certificatemanager_v1_GetCertificateMapEntryRequest,
        __Marshaller_google_cloud_certificatemanager_v1_CertificateMapEntry);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest, global::Google.LongRunning.Operation> __Method_CreateCertificateMapEntry = new grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificateMapEntry",
        __Marshaller_google_cloud_certificatemanager_v1_CreateCertificateMapEntryRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest, global::Google.LongRunning.Operation> __Method_UpdateCertificateMapEntry = new grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificateMapEntry",
        __Marshaller_google_cloud_certificatemanager_v1_UpdateCertificateMapEntryRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest, global::Google.LongRunning.Operation> __Method_DeleteCertificateMapEntry = new grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCertificateMapEntry",
        __Marshaller_google_cloud_certificatemanager_v1_DeleteCertificateMapEntryRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest, global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse> __Method_ListDnsAuthorizations = new grpc::Method<global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest, global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDnsAuthorizations",
        __Marshaller_google_cloud_certificatemanager_v1_ListDnsAuthorizationsRequest,
        __Marshaller_google_cloud_certificatemanager_v1_ListDnsAuthorizationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest, global::Google.Cloud.CertificateManager.V1.DnsAuthorization> __Method_GetDnsAuthorization = new grpc::Method<global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest, global::Google.Cloud.CertificateManager.V1.DnsAuthorization>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDnsAuthorization",
        __Marshaller_google_cloud_certificatemanager_v1_GetDnsAuthorizationRequest,
        __Marshaller_google_cloud_certificatemanager_v1_DnsAuthorization);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest, global::Google.LongRunning.Operation> __Method_CreateDnsAuthorization = new grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDnsAuthorization",
        __Marshaller_google_cloud_certificatemanager_v1_CreateDnsAuthorizationRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest, global::Google.LongRunning.Operation> __Method_UpdateDnsAuthorization = new grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDnsAuthorization",
        __Marshaller_google_cloud_certificatemanager_v1_UpdateDnsAuthorizationRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest, global::Google.LongRunning.Operation> __Method_DeleteDnsAuthorization = new grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDnsAuthorization",
        __Marshaller_google_cloud_certificatemanager_v1_DeleteDnsAuthorizationRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse> __Method_ListCertificateIssuanceConfigs = new grpc::Method<global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificateIssuanceConfigs",
        __Marshaller_google_cloud_certificatemanager_v1_ListCertificateIssuanceConfigsRequest,
        __Marshaller_google_cloud_certificatemanager_v1_ListCertificateIssuanceConfigsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest, global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig> __Method_GetCertificateIssuanceConfig = new grpc::Method<global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest, global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificateIssuanceConfig",
        __Marshaller_google_cloud_certificatemanager_v1_GetCertificateIssuanceConfigRequest,
        __Marshaller_google_cloud_certificatemanager_v1_CertificateIssuanceConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest, global::Google.LongRunning.Operation> __Method_CreateCertificateIssuanceConfig = new grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificateIssuanceConfig",
        __Marshaller_google_cloud_certificatemanager_v1_CreateCertificateIssuanceConfigRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest, global::Google.LongRunning.Operation> __Method_DeleteCertificateIssuanceConfig = new grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCertificateIssuanceConfig",
        __Marshaller_google_cloud_certificatemanager_v1_DeleteCertificateIssuanceConfigRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest, global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse> __Method_ListTrustConfigs = new grpc::Method<global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest, global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTrustConfigs",
        __Marshaller_google_cloud_certificatemanager_v1_ListTrustConfigsRequest,
        __Marshaller_google_cloud_certificatemanager_v1_ListTrustConfigsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest, global::Google.Cloud.CertificateManager.V1.TrustConfig> __Method_GetTrustConfig = new grpc::Method<global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest, global::Google.Cloud.CertificateManager.V1.TrustConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTrustConfig",
        __Marshaller_google_cloud_certificatemanager_v1_GetTrustConfigRequest,
        __Marshaller_google_cloud_certificatemanager_v1_TrustConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest, global::Google.LongRunning.Operation> __Method_CreateTrustConfig = new grpc::Method<global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTrustConfig",
        __Marshaller_google_cloud_certificatemanager_v1_CreateTrustConfigRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest, global::Google.LongRunning.Operation> __Method_UpdateTrustConfig = new grpc::Method<global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTrustConfig",
        __Marshaller_google_cloud_certificatemanager_v1_UpdateTrustConfigRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest, global::Google.LongRunning.Operation> __Method_DeleteTrustConfig = new grpc::Method<global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTrustConfig",
        __Marshaller_google_cloud_certificatemanager_v1_DeleteTrustConfigRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.CertificateManager.V1.CertificateManagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CertificateManager</summary>
    [grpc::BindServiceMethod(typeof(CertificateManager), "BindService")]
    public abstract partial class CertificateManagerBase
    {
      /// <summary>
      /// Lists Certificates in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse> ListCertificates(global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single Certificate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.Certificate> GetCertificate(global::Google.Cloud.CertificateManager.V1.GetCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new Certificate in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCertificate(global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a Certificate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCertificate(global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single Certificate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCertificate(global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists CertificateMaps in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse> ListCertificateMaps(global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single CertificateMap.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.CertificateMap> GetCertificateMap(global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new CertificateMap in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCertificateMap(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a CertificateMap.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCertificateMap(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single CertificateMap. A Certificate Map can't be deleted
      /// if it contains Certificate Map Entries. Remove all the entries from
      /// the map before calling this method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCertificateMap(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists CertificateMapEntries in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse> ListCertificateMapEntries(global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.CertificateMapEntry> GetCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new CertificateMapEntry in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists DnsAuthorizations in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse> ListDnsAuthorizations(global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.DnsAuthorization> GetDnsAuthorization(global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new DnsAuthorization in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateDnsAuthorization(global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a DnsAuthorization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateDnsAuthorization(global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteDnsAuthorization(global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists CertificateIssuanceConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse> ListCertificateIssuanceConfigs(global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig> GetCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new CertificateIssuanceConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists TrustConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse> ListTrustConfigs(global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single TrustConfig.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.CertificateManager.V1.TrustConfig> GetTrustConfig(global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new TrustConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateTrustConfig(global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a TrustConfig.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateTrustConfig(global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single TrustConfig.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteTrustConfig(global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CertificateManager</summary>
    public partial class CertificateManagerClient : grpc::ClientBase<CertificateManagerClient>
    {
      /// <summary>Creates a new client for CertificateManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CertificateManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CertificateManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CertificateManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CertificateManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CertificateManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists Certificates in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse ListCertificates(global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Certificates in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse ListCertificates(global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificates, null, options, request);
      }
      /// <summary>
      /// Lists Certificates in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse> ListCertificatesAsync(global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Certificates in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse> ListCertificatesAsync(global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificates, null, options, request);
      }
      /// <summary>
      /// Gets details of a single Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.Certificate GetCertificate(global::Google.Cloud.CertificateManager.V1.GetCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.Certificate GetCertificate(global::Google.Cloud.CertificateManager.V1.GetCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificate, null, options, request);
      }
      /// <summary>
      /// Gets details of a single Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.Certificate> GetCertificateAsync(global::Google.Cloud.CertificateManager.V1.GetCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.Certificate> GetCertificateAsync(global::Google.Cloud.CertificateManager.V1.GetCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificate, null, options, request);
      }
      /// <summary>
      /// Creates a new Certificate in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificate(global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Certificate in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificate(global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificate, null, options, request);
      }
      /// <summary>
      /// Creates a new Certificate in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateAsync(global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Certificate in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateAsync(global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificate, null, options, request);
      }
      /// <summary>
      /// Updates a Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificate(global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificate(global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificate, null, options, request);
      }
      /// <summary>
      /// Updates a Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateAsync(global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateAsync(global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificate, null, options, request);
      }
      /// <summary>
      /// Deletes a single Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificate(global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificate(global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCertificate, null, options, request);
      }
      /// <summary>
      /// Deletes a single Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateAsync(global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single Certificate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateAsync(global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCertificate, null, options, request);
      }
      /// <summary>
      /// Lists CertificateMaps in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse ListCertificateMaps(global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateMaps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists CertificateMaps in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse ListCertificateMaps(global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificateMaps, null, options, request);
      }
      /// <summary>
      /// Lists CertificateMaps in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse> ListCertificateMapsAsync(global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateMapsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists CertificateMaps in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse> ListCertificateMapsAsync(global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificateMaps, null, options, request);
      }
      /// <summary>
      /// Gets details of a single CertificateMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.CertificateMap GetCertificateMap(global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single CertificateMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.CertificateMap GetCertificateMap(global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificateMap, null, options, request);
      }
      /// <summary>
      /// Gets details of a single CertificateMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.CertificateMap> GetCertificateMapAsync(global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single CertificateMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.CertificateMap> GetCertificateMapAsync(global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificateMap, null, options, request);
      }
      /// <summary>
      /// Creates a new CertificateMap in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateMap(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new CertificateMap in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateMap(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificateMap, null, options, request);
      }
      /// <summary>
      /// Creates a new CertificateMap in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateMapAsync(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new CertificateMap in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateMapAsync(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificateMap, null, options, request);
      }
      /// <summary>
      /// Updates a CertificateMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateMap(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a CertificateMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateMap(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificateMap, null, options, request);
      }
      /// <summary>
      /// Updates a CertificateMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateMapAsync(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a CertificateMap.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateMapAsync(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificateMap, null, options, request);
      }
      /// <summary>
      /// Deletes a single CertificateMap. A Certificate Map can't be deleted
      /// if it contains Certificate Map Entries. Remove all the entries from
      /// the map before calling this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateMap(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single CertificateMap. A Certificate Map can't be deleted
      /// if it contains Certificate Map Entries. Remove all the entries from
      /// the map before calling this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateMap(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCertificateMap, null, options, request);
      }
      /// <summary>
      /// Deletes a single CertificateMap. A Certificate Map can't be deleted
      /// if it contains Certificate Map Entries. Remove all the entries from
      /// the map before calling this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateMapAsync(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single CertificateMap. A Certificate Map can't be deleted
      /// if it contains Certificate Map Entries. Remove all the entries from
      /// the map before calling this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateMapAsync(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCertificateMap, null, options, request);
      }
      /// <summary>
      /// Lists CertificateMapEntries in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse ListCertificateMapEntries(global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateMapEntries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists CertificateMapEntries in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse ListCertificateMapEntries(global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificateMapEntries, null, options, request);
      }
      /// <summary>
      /// Lists CertificateMapEntries in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse> ListCertificateMapEntriesAsync(global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateMapEntriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists CertificateMapEntries in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse> ListCertificateMapEntriesAsync(global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificateMapEntries, null, options, request);
      }
      /// <summary>
      /// Gets details of a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.CertificateMapEntry GetCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateMapEntry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.CertificateMapEntry GetCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificateMapEntry, null, options, request);
      }
      /// <summary>
      /// Gets details of a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.CertificateMapEntry> GetCertificateMapEntryAsync(global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateMapEntryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.CertificateMapEntry> GetCertificateMapEntryAsync(global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificateMapEntry, null, options, request);
      }
      /// <summary>
      /// Creates a new CertificateMapEntry in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateMapEntry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new CertificateMapEntry in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificateMapEntry, null, options, request);
      }
      /// <summary>
      /// Creates a new CertificateMapEntry in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateMapEntryAsync(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateMapEntryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new CertificateMapEntry in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateMapEntryAsync(global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificateMapEntry, null, options, request);
      }
      /// <summary>
      /// Updates a CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateMapEntry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificateMapEntry, null, options, request);
      }
      /// <summary>
      /// Updates a CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateMapEntryAsync(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateMapEntryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateMapEntryAsync(global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificateMapEntry, null, options, request);
      }
      /// <summary>
      /// Deletes a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateMapEntry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateMapEntry(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCertificateMapEntry, null, options, request);
      }
      /// <summary>
      /// Deletes a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateMapEntryAsync(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateMapEntryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single CertificateMapEntry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateMapEntryAsync(global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCertificateMapEntry, null, options, request);
      }
      /// <summary>
      /// Lists DnsAuthorizations in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse ListDnsAuthorizations(global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDnsAuthorizations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists DnsAuthorizations in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse ListDnsAuthorizations(global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDnsAuthorizations, null, options, request);
      }
      /// <summary>
      /// Lists DnsAuthorizations in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse> ListDnsAuthorizationsAsync(global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDnsAuthorizationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists DnsAuthorizations in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse> ListDnsAuthorizationsAsync(global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDnsAuthorizations, null, options, request);
      }
      /// <summary>
      /// Gets details of a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.DnsAuthorization GetDnsAuthorization(global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDnsAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.DnsAuthorization GetDnsAuthorization(global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDnsAuthorization, null, options, request);
      }
      /// <summary>
      /// Gets details of a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.DnsAuthorization> GetDnsAuthorizationAsync(global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDnsAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.DnsAuthorization> GetDnsAuthorizationAsync(global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDnsAuthorization, null, options, request);
      }
      /// <summary>
      /// Creates a new DnsAuthorization in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateDnsAuthorization(global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDnsAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new DnsAuthorization in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateDnsAuthorization(global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDnsAuthorization, null, options, request);
      }
      /// <summary>
      /// Creates a new DnsAuthorization in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateDnsAuthorizationAsync(global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDnsAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new DnsAuthorization in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateDnsAuthorizationAsync(global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDnsAuthorization, null, options, request);
      }
      /// <summary>
      /// Updates a DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDnsAuthorization(global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDnsAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDnsAuthorization(global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDnsAuthorization, null, options, request);
      }
      /// <summary>
      /// Updates a DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDnsAuthorizationAsync(global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDnsAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDnsAuthorizationAsync(global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDnsAuthorization, null, options, request);
      }
      /// <summary>
      /// Deletes a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteDnsAuthorization(global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDnsAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteDnsAuthorization(global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDnsAuthorization, null, options, request);
      }
      /// <summary>
      /// Deletes a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteDnsAuthorizationAsync(global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDnsAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single DnsAuthorization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteDnsAuthorizationAsync(global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDnsAuthorization, null, options, request);
      }
      /// <summary>
      /// Lists CertificateIssuanceConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse ListCertificateIssuanceConfigs(global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateIssuanceConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists CertificateIssuanceConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse ListCertificateIssuanceConfigs(global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificateIssuanceConfigs, null, options, request);
      }
      /// <summary>
      /// Lists CertificateIssuanceConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse> ListCertificateIssuanceConfigsAsync(global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateIssuanceConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists CertificateIssuanceConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse> ListCertificateIssuanceConfigsAsync(global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificateIssuanceConfigs, null, options, request);
      }
      /// <summary>
      /// Gets details of a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig GetCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateIssuanceConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig GetCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificateIssuanceConfig, null, options, request);
      }
      /// <summary>
      /// Gets details of a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig> GetCertificateIssuanceConfigAsync(global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateIssuanceConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig> GetCertificateIssuanceConfigAsync(global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificateIssuanceConfig, null, options, request);
      }
      /// <summary>
      /// Creates a new CertificateIssuanceConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateIssuanceConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new CertificateIssuanceConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificateIssuanceConfig, null, options, request);
      }
      /// <summary>
      /// Creates a new CertificateIssuanceConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateIssuanceConfigAsync(global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateIssuanceConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new CertificateIssuanceConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateIssuanceConfigAsync(global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificateIssuanceConfig, null, options, request);
      }
      /// <summary>
      /// Deletes a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateIssuanceConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateIssuanceConfig(global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCertificateIssuanceConfig, null, options, request);
      }
      /// <summary>
      /// Deletes a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateIssuanceConfigAsync(global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateIssuanceConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single CertificateIssuanceConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateIssuanceConfigAsync(global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCertificateIssuanceConfig, null, options, request);
      }
      /// <summary>
      /// Lists TrustConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse ListTrustConfigs(global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrustConfigs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TrustConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse ListTrustConfigs(global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTrustConfigs, null, options, request);
      }
      /// <summary>
      /// Lists TrustConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse> ListTrustConfigsAsync(global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTrustConfigsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists TrustConfigs in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse> ListTrustConfigsAsync(global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTrustConfigs, null, options, request);
      }
      /// <summary>
      /// Gets details of a single TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.TrustConfig GetTrustConfig(global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrustConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.CertificateManager.V1.TrustConfig GetTrustConfig(global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTrustConfig, null, options, request);
      }
      /// <summary>
      /// Gets details of a single TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.TrustConfig> GetTrustConfigAsync(global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTrustConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.CertificateManager.V1.TrustConfig> GetTrustConfigAsync(global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTrustConfig, null, options, request);
      }
      /// <summary>
      /// Creates a new TrustConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateTrustConfig(global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTrustConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new TrustConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateTrustConfig(global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTrustConfig, null, options, request);
      }
      /// <summary>
      /// Creates a new TrustConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateTrustConfigAsync(global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTrustConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new TrustConfig in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateTrustConfigAsync(global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTrustConfig, null, options, request);
      }
      /// <summary>
      /// Updates a TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateTrustConfig(global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTrustConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateTrustConfig(global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTrustConfig, null, options, request);
      }
      /// <summary>
      /// Updates a TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateTrustConfigAsync(global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTrustConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateTrustConfigAsync(global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTrustConfig, null, options, request);
      }
      /// <summary>
      /// Deletes a single TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTrustConfig(global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTrustConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteTrustConfig(global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTrustConfig, null, options, request);
      }
      /// <summary>
      /// Deletes a single TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTrustConfigAsync(global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTrustConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single TrustConfig.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteTrustConfigAsync(global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTrustConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CertificateManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CertificateManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CertificateManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListCertificates, serviceImpl.ListCertificates)
          .AddMethod(__Method_GetCertificate, serviceImpl.GetCertificate)
          .AddMethod(__Method_CreateCertificate, serviceImpl.CreateCertificate)
          .AddMethod(__Method_UpdateCertificate, serviceImpl.UpdateCertificate)
          .AddMethod(__Method_DeleteCertificate, serviceImpl.DeleteCertificate)
          .AddMethod(__Method_ListCertificateMaps, serviceImpl.ListCertificateMaps)
          .AddMethod(__Method_GetCertificateMap, serviceImpl.GetCertificateMap)
          .AddMethod(__Method_CreateCertificateMap, serviceImpl.CreateCertificateMap)
          .AddMethod(__Method_UpdateCertificateMap, serviceImpl.UpdateCertificateMap)
          .AddMethod(__Method_DeleteCertificateMap, serviceImpl.DeleteCertificateMap)
          .AddMethod(__Method_ListCertificateMapEntries, serviceImpl.ListCertificateMapEntries)
          .AddMethod(__Method_GetCertificateMapEntry, serviceImpl.GetCertificateMapEntry)
          .AddMethod(__Method_CreateCertificateMapEntry, serviceImpl.CreateCertificateMapEntry)
          .AddMethod(__Method_UpdateCertificateMapEntry, serviceImpl.UpdateCertificateMapEntry)
          .AddMethod(__Method_DeleteCertificateMapEntry, serviceImpl.DeleteCertificateMapEntry)
          .AddMethod(__Method_ListDnsAuthorizations, serviceImpl.ListDnsAuthorizations)
          .AddMethod(__Method_GetDnsAuthorization, serviceImpl.GetDnsAuthorization)
          .AddMethod(__Method_CreateDnsAuthorization, serviceImpl.CreateDnsAuthorization)
          .AddMethod(__Method_UpdateDnsAuthorization, serviceImpl.UpdateDnsAuthorization)
          .AddMethod(__Method_DeleteDnsAuthorization, serviceImpl.DeleteDnsAuthorization)
          .AddMethod(__Method_ListCertificateIssuanceConfigs, serviceImpl.ListCertificateIssuanceConfigs)
          .AddMethod(__Method_GetCertificateIssuanceConfig, serviceImpl.GetCertificateIssuanceConfig)
          .AddMethod(__Method_CreateCertificateIssuanceConfig, serviceImpl.CreateCertificateIssuanceConfig)
          .AddMethod(__Method_DeleteCertificateIssuanceConfig, serviceImpl.DeleteCertificateIssuanceConfig)
          .AddMethod(__Method_ListTrustConfigs, serviceImpl.ListTrustConfigs)
          .AddMethod(__Method_GetTrustConfig, serviceImpl.GetTrustConfig)
          .AddMethod(__Method_CreateTrustConfig, serviceImpl.CreateTrustConfig)
          .AddMethod(__Method_UpdateTrustConfig, serviceImpl.UpdateTrustConfig)
          .AddMethod(__Method_DeleteTrustConfig, serviceImpl.DeleteTrustConfig).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CertificateManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListCertificates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.ListCertificatesRequest, global::Google.Cloud.CertificateManager.V1.ListCertificatesResponse>(serviceImpl.ListCertificates));
      serviceBinder.AddMethod(__Method_GetCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.GetCertificateRequest, global::Google.Cloud.CertificateManager.V1.Certificate>(serviceImpl.GetCertificate));
      serviceBinder.AddMethod(__Method_CreateCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.CreateCertificateRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCertificate));
      serviceBinder.AddMethod(__Method_UpdateCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.UpdateCertificateRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCertificate));
      serviceBinder.AddMethod(__Method_DeleteCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.DeleteCertificateRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCertificate));
      serviceBinder.AddMethod(__Method_ListCertificateMaps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.ListCertificateMapsRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateMapsResponse>(serviceImpl.ListCertificateMaps));
      serviceBinder.AddMethod(__Method_GetCertificateMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.GetCertificateMapRequest, global::Google.Cloud.CertificateManager.V1.CertificateMap>(serviceImpl.GetCertificateMap));
      serviceBinder.AddMethod(__Method_CreateCertificateMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.CreateCertificateMapRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCertificateMap));
      serviceBinder.AddMethod(__Method_UpdateCertificateMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCertificateMap));
      serviceBinder.AddMethod(__Method_DeleteCertificateMap, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCertificateMap));
      serviceBinder.AddMethod(__Method_ListCertificateMapEntries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateMapEntriesResponse>(serviceImpl.ListCertificateMapEntries));
      serviceBinder.AddMethod(__Method_GetCertificateMapEntry, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.GetCertificateMapEntryRequest, global::Google.Cloud.CertificateManager.V1.CertificateMapEntry>(serviceImpl.GetCertificateMapEntry));
      serviceBinder.AddMethod(__Method_CreateCertificateMapEntry, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.CreateCertificateMapEntryRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCertificateMapEntry));
      serviceBinder.AddMethod(__Method_UpdateCertificateMapEntry, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.UpdateCertificateMapEntryRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCertificateMapEntry));
      serviceBinder.AddMethod(__Method_DeleteCertificateMapEntry, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.DeleteCertificateMapEntryRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCertificateMapEntry));
      serviceBinder.AddMethod(__Method_ListDnsAuthorizations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsRequest, global::Google.Cloud.CertificateManager.V1.ListDnsAuthorizationsResponse>(serviceImpl.ListDnsAuthorizations));
      serviceBinder.AddMethod(__Method_GetDnsAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.GetDnsAuthorizationRequest, global::Google.Cloud.CertificateManager.V1.DnsAuthorization>(serviceImpl.GetDnsAuthorization));
      serviceBinder.AddMethod(__Method_CreateDnsAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.CreateDnsAuthorizationRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateDnsAuthorization));
      serviceBinder.AddMethod(__Method_UpdateDnsAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.UpdateDnsAuthorizationRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateDnsAuthorization));
      serviceBinder.AddMethod(__Method_DeleteDnsAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.DeleteDnsAuthorizationRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteDnsAuthorization));
      serviceBinder.AddMethod(__Method_ListCertificateIssuanceConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsRequest, global::Google.Cloud.CertificateManager.V1.ListCertificateIssuanceConfigsResponse>(serviceImpl.ListCertificateIssuanceConfigs));
      serviceBinder.AddMethod(__Method_GetCertificateIssuanceConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.GetCertificateIssuanceConfigRequest, global::Google.Cloud.CertificateManager.V1.CertificateIssuanceConfig>(serviceImpl.GetCertificateIssuanceConfig));
      serviceBinder.AddMethod(__Method_CreateCertificateIssuanceConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.CreateCertificateIssuanceConfigRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCertificateIssuanceConfig));
      serviceBinder.AddMethod(__Method_DeleteCertificateIssuanceConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.DeleteCertificateIssuanceConfigRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCertificateIssuanceConfig));
      serviceBinder.AddMethod(__Method_ListTrustConfigs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.ListTrustConfigsRequest, global::Google.Cloud.CertificateManager.V1.ListTrustConfigsResponse>(serviceImpl.ListTrustConfigs));
      serviceBinder.AddMethod(__Method_GetTrustConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.GetTrustConfigRequest, global::Google.Cloud.CertificateManager.V1.TrustConfig>(serviceImpl.GetTrustConfig));
      serviceBinder.AddMethod(__Method_CreateTrustConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.CreateTrustConfigRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateTrustConfig));
      serviceBinder.AddMethod(__Method_UpdateTrustConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.UpdateTrustConfigRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateTrustConfig));
      serviceBinder.AddMethod(__Method_DeleteTrustConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.CertificateManager.V1.DeleteTrustConfigRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteTrustConfig));
    }

  }
}
#endregion
