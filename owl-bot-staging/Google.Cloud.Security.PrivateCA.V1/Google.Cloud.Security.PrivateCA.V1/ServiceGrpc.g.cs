// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/security/privateca/v1/service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Security.PrivateCA.V1 {
  /// <summary>
  /// [Certificate Authority
  /// Service][google.cloud.security.privateca.v1.CertificateAuthorityService]
  /// manages private certificate authorities and issued certificates.
  /// </summary>
  public static partial class CertificateAuthorityService
  {
    static readonly string __ServiceName = "google.cloud.security.privateca.v1.CertificateAuthorityService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest> __Marshaller_google_cloud_security_privateca_v1_CreateCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.Certificate> __Marshaller_google_cloud_security_privateca_v1_Certificate = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.Certificate.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest> __Marshaller_google_cloud_security_privateca_v1_GetCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest> __Marshaller_google_cloud_security_privateca_v1_ListCertificatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse> __Marshaller_google_cloud_security_privateca_v1_ListCertificatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest> __Marshaller_google_cloud_security_privateca_v1_RevokeCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest> __Marshaller_google_cloud_security_privateca_v1_UpdateCertificateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1_ActivateCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1_CreateCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1_DisableCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1_EnableCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest> __Marshaller_google_cloud_security_privateca_v1_FetchCertificateAuthorityCsrRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse> __Marshaller_google_cloud_security_privateca_v1_FetchCertificateAuthorityCsrResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1_GetCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority> __Marshaller_google_cloud_security_privateca_v1_CertificateAuthority = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest> __Marshaller_google_cloud_security_privateca_v1_ListCertificateAuthoritiesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse> __Marshaller_google_cloud_security_privateca_v1_ListCertificateAuthoritiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1_UndeleteCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1_DeleteCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest> __Marshaller_google_cloud_security_privateca_v1_UpdateCertificateAuthorityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest> __Marshaller_google_cloud_security_privateca_v1_CreateCaPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest> __Marshaller_google_cloud_security_privateca_v1_UpdateCaPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest> __Marshaller_google_cloud_security_privateca_v1_GetCaPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.CaPool> __Marshaller_google_cloud_security_privateca_v1_CaPool = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.CaPool.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest> __Marshaller_google_cloud_security_privateca_v1_ListCaPoolsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse> __Marshaller_google_cloud_security_privateca_v1_ListCaPoolsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest> __Marshaller_google_cloud_security_privateca_v1_DeleteCaPoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest> __Marshaller_google_cloud_security_privateca_v1_FetchCaCertsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse> __Marshaller_google_cloud_security_privateca_v1_FetchCaCertsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest> __Marshaller_google_cloud_security_privateca_v1_GetCertificateRevocationListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList> __Marshaller_google_cloud_security_privateca_v1_CertificateRevocationList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest> __Marshaller_google_cloud_security_privateca_v1_ListCertificateRevocationListsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse> __Marshaller_google_cloud_security_privateca_v1_ListCertificateRevocationListsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest> __Marshaller_google_cloud_security_privateca_v1_UpdateCertificateRevocationListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest> __Marshaller_google_cloud_security_privateca_v1_CreateCertificateTemplateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest> __Marshaller_google_cloud_security_privateca_v1_DeleteCertificateTemplateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest> __Marshaller_google_cloud_security_privateca_v1_GetCertificateTemplateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate> __Marshaller_google_cloud_security_privateca_v1_CertificateTemplate = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest> __Marshaller_google_cloud_security_privateca_v1_ListCertificateTemplatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse> __Marshaller_google_cloud_security_privateca_v1_ListCertificateTemplatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest> __Marshaller_google_cloud_security_privateca_v1_UpdateCertificateTemplateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate> __Method_CreateCertificate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificate",
        __Marshaller_google_cloud_security_privateca_v1_CreateCertificateRequest,
        __Marshaller_google_cloud_security_privateca_v1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate> __Method_GetCertificate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificate",
        __Marshaller_google_cloud_security_privateca_v1_GetCertificateRequest,
        __Marshaller_google_cloud_security_privateca_v1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse> __Method_ListCertificates = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificates",
        __Marshaller_google_cloud_security_privateca_v1_ListCertificatesRequest,
        __Marshaller_google_cloud_security_privateca_v1_ListCertificatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate> __Method_RevokeCertificate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RevokeCertificate",
        __Marshaller_google_cloud_security_privateca_v1_RevokeCertificateRequest,
        __Marshaller_google_cloud_security_privateca_v1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate> __Method_UpdateCertificate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificate",
        __Marshaller_google_cloud_security_privateca_v1_UpdateCertificateRequest,
        __Marshaller_google_cloud_security_privateca_v1_Certificate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_ActivateCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1_ActivateCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_CreateCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1_CreateCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_DisableCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisableCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1_DisableCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_EnableCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1_EnableCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest, global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse> __Method_FetchCertificateAuthorityCsr = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest, global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchCertificateAuthorityCsr",
        __Marshaller_google_cloud_security_privateca_v1_FetchCertificateAuthorityCsrRequest,
        __Marshaller_google_cloud_security_privateca_v1_FetchCertificateAuthorityCsrResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority> __Method_GetCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1_GetCertificateAuthorityRequest,
        __Marshaller_google_cloud_security_privateca_v1_CertificateAuthority);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse> __Method_ListCertificateAuthorities = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificateAuthorities",
        __Marshaller_google_cloud_security_privateca_v1_ListCertificateAuthoritiesRequest,
        __Marshaller_google_cloud_security_privateca_v1_ListCertificateAuthoritiesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_UndeleteCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1_UndeleteCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_DeleteCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1_DeleteCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest, global::Google.LongRunning.Operation> __Method_UpdateCertificateAuthority = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificateAuthority",
        __Marshaller_google_cloud_security_privateca_v1_UpdateCertificateAuthorityRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest, global::Google.LongRunning.Operation> __Method_CreateCaPool = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCaPool",
        __Marshaller_google_cloud_security_privateca_v1_CreateCaPoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest, global::Google.LongRunning.Operation> __Method_UpdateCaPool = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCaPool",
        __Marshaller_google_cloud_security_privateca_v1_UpdateCaPoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest, global::Google.Cloud.Security.PrivateCA.V1.CaPool> __Method_GetCaPool = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest, global::Google.Cloud.Security.PrivateCA.V1.CaPool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCaPool",
        __Marshaller_google_cloud_security_privateca_v1_GetCaPoolRequest,
        __Marshaller_google_cloud_security_privateca_v1_CaPool);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse> __Method_ListCaPools = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCaPools",
        __Marshaller_google_cloud_security_privateca_v1_ListCaPoolsRequest,
        __Marshaller_google_cloud_security_privateca_v1_ListCaPoolsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest, global::Google.LongRunning.Operation> __Method_DeleteCaPool = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCaPool",
        __Marshaller_google_cloud_security_privateca_v1_DeleteCaPoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest, global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse> __Method_FetchCaCerts = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest, global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchCaCerts",
        __Marshaller_google_cloud_security_privateca_v1_FetchCaCertsRequest,
        __Marshaller_google_cloud_security_privateca_v1_FetchCaCertsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList> __Method_GetCertificateRevocationList = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificateRevocationList",
        __Marshaller_google_cloud_security_privateca_v1_GetCertificateRevocationListRequest,
        __Marshaller_google_cloud_security_privateca_v1_CertificateRevocationList);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse> __Method_ListCertificateRevocationLists = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificateRevocationLists",
        __Marshaller_google_cloud_security_privateca_v1_ListCertificateRevocationListsRequest,
        __Marshaller_google_cloud_security_privateca_v1_ListCertificateRevocationListsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest, global::Google.LongRunning.Operation> __Method_UpdateCertificateRevocationList = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificateRevocationList",
        __Marshaller_google_cloud_security_privateca_v1_UpdateCertificateRevocationListRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest, global::Google.LongRunning.Operation> __Method_CreateCertificateTemplate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCertificateTemplate",
        __Marshaller_google_cloud_security_privateca_v1_CreateCertificateTemplateRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest, global::Google.LongRunning.Operation> __Method_DeleteCertificateTemplate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteCertificateTemplate",
        __Marshaller_google_cloud_security_privateca_v1_DeleteCertificateTemplateRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate> __Method_GetCertificateTemplate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCertificateTemplate",
        __Marshaller_google_cloud_security_privateca_v1_GetCertificateTemplateRequest,
        __Marshaller_google_cloud_security_privateca_v1_CertificateTemplate);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse> __Method_ListCertificateTemplates = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCertificateTemplates",
        __Marshaller_google_cloud_security_privateca_v1_ListCertificateTemplatesRequest,
        __Marshaller_google_cloud_security_privateca_v1_ListCertificateTemplatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest, global::Google.LongRunning.Operation> __Method_UpdateCertificateTemplate = new grpc::Method<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCertificateTemplate",
        __Marshaller_google_cloud_security_privateca_v1_UpdateCertificateTemplateRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Security.PrivateCA.V1.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CertificateAuthorityService</summary>
    [grpc::BindServiceMethod(typeof(CertificateAuthorityService), "BindService")]
    public abstract partial class CertificateAuthorityServiceBase
    {
      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
      /// in a given Project, Location from a particular
      /// [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.Certificate> CreateCertificate(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.Certificate> GetCertificate(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse> ListCertificates(global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.Certificate> RevokeCertificate(global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.Certificate> UpdateCertificate(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activate a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// After the parent Certificate Authority signs a certificate signing request
      /// from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
      /// this method can complete the activation process.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ActivateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Disable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DisableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> EnableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetch a certificate signing request (CSR) from a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// The CSR must then be signed by the desired parent Certificate Authority,
      /// which could be another
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// resource, or could be an on-prem certificate authority. See also
      /// [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse> FetchCertificateAuthorityCsr(global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority> GetCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists
      /// [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse> ListCertificateAuthorities(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Undelete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that has been deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UndeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCaPool(global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCaPool(global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.CaPool> GetCaPool(global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists [CaPools][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse> ListCaPools(global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCaPool(global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FetchCaCerts returns the current trust anchor for the
      /// [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
      /// certificate chains for all certificate authorities in the ENABLED,
      /// DISABLED, or STAGED states.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse> FetchCaCerts(global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList> GetCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists
      /// [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse> ListCertificateRevocationLists(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteCertificateTemplate deletes a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate> GetCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists
      /// [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse> ListCertificateTemplates(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CertificateAuthorityService</summary>
    public partial class CertificateAuthorityServiceClient : grpc::ClientBase<CertificateAuthorityServiceClient>
    {
      /// <summary>Creates a new client for CertificateAuthorityService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CertificateAuthorityServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CertificateAuthorityService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CertificateAuthorityServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CertificateAuthorityServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CertificateAuthorityServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
      /// in a given Project, Location from a particular
      /// [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.Certificate CreateCertificate(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
      /// in a given Project, Location from a particular
      /// [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.Certificate CreateCertificate(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificate, null, options, request);
      }
      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
      /// in a given Project, Location from a particular
      /// [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.Certificate> CreateCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
      /// in a given Project, Location from a particular
      /// [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.Certificate> CreateCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificate, null, options, request);
      }
      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.Certificate GetCertificate(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.Certificate GetCertificate(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificate, null, options, request);
      }
      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.Certificate> GetCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.Certificate> GetCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificate, null, options, request);
      }
      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse ListCertificates(global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse ListCertificates(global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificates, null, options, request);
      }
      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse> ListCertificatesAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [Certificates][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse> ListCertificatesAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificates, null, options, request);
      }
      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.Certificate RevokeCertificate(global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.Certificate RevokeCertificate(global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RevokeCertificate, null, options, request);
      }
      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.Certificate> RevokeCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.Certificate> RevokeCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RevokeCertificate, null, options, request);
      }
      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.Certificate UpdateCertificate(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.Certificate UpdateCertificate(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificate, null, options, request);
      }
      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.Certificate> UpdateCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
      /// Currently, the only field you can update is the
      /// [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.Certificate> UpdateCertificateAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificate, null, options, request);
      }
      /// <summary>
      /// Activate a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// After the parent Certificate Authority signs a certificate signing request
      /// from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
      /// this method can complete the activation process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ActivateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// After the parent Certificate Authority signs a certificate signing request
      /// from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
      /// this method can complete the activation process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ActivateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Activate a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// After the parent Certificate Authority signs a certificate signing request
      /// from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
      /// this method can complete the activation process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ActivateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// After the parent Certificate Authority signs a certificate signing request
      /// from
      /// [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
      /// this method can complete the activation process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ActivateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Create a new
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Create a new
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Disable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DisableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DisableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisableCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Disable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DisableCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DisableCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisableCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Enable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation EnableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation EnableCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Enable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> EnableCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> EnableCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Fetch a certificate signing request (CSR) from a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// The CSR must then be signed by the desired parent Certificate Authority,
      /// which could be another
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// resource, or could be an on-prem certificate authority. See also
      /// [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse FetchCertificateAuthorityCsr(global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchCertificateAuthorityCsr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch a certificate signing request (CSR) from a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// The CSR must then be signed by the desired parent Certificate Authority,
      /// which could be another
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// resource, or could be an on-prem certificate authority. See also
      /// [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse FetchCertificateAuthorityCsr(global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchCertificateAuthorityCsr, null, options, request);
      }
      /// <summary>
      /// Fetch a certificate signing request (CSR) from a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// The CSR must then be signed by the desired parent Certificate Authority,
      /// which could be another
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// resource, or could be an on-prem certificate authority. See also
      /// [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse> FetchCertificateAuthorityCsrAsync(global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchCertificateAuthorityCsrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch a certificate signing request (CSR) from a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that is in state
      /// [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
      /// and is of type
      /// [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
      /// The CSR must then be signed by the desired parent Certificate Authority,
      /// which could be another
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// resource, or could be an on-prem certificate authority. See also
      /// [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse> FetchCertificateAuthorityCsrAsync(global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchCertificateAuthorityCsr, null, options, request);
      }
      /// <summary>
      /// Returns a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority GetCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority GetCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Returns a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority> GetCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority> GetCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Lists
      /// [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse ListCertificateAuthorities(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateAuthorities(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists
      /// [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse ListCertificateAuthorities(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificateAuthorities, null, options, request);
      }
      /// <summary>
      /// Lists
      /// [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse> ListCertificateAuthoritiesAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateAuthoritiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists
      /// [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse> ListCertificateAuthoritiesAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificateAuthorities, null, options, request);
      }
      /// <summary>
      /// Undelete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that has been deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undelete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that has been deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Undelete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that has been deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undelete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
      /// that has been deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Delete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Delete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Update a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateAuthority(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateAuthority(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Update a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateAuthorityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a
      /// [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateAuthorityAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificateAuthority, null, options, request);
      }
      /// <summary>
      /// Create a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCaPool(global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCaPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCaPool(global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCaPool, null, options, request);
      }
      /// <summary>
      /// Create a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCaPoolAsync(global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCaPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCaPoolAsync(global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCaPool, null, options, request);
      }
      /// <summary>
      /// Update a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCaPool(global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCaPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCaPool(global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCaPool, null, options, request);
      }
      /// <summary>
      /// Update a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCaPoolAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCaPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCaPoolAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCaPool, null, options, request);
      }
      /// <summary>
      /// Returns a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.CaPool GetCaPool(global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCaPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.CaPool GetCaPool(global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCaPool, null, options, request);
      }
      /// <summary>
      /// Returns a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.CaPool> GetCaPoolAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCaPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.CaPool> GetCaPoolAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCaPool, null, options, request);
      }
      /// <summary>
      /// Lists [CaPools][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse ListCaPools(global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCaPools(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CaPools][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse ListCaPools(global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCaPools, null, options, request);
      }
      /// <summary>
      /// Lists [CaPools][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse> ListCaPoolsAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCaPoolsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists [CaPools][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse> ListCaPoolsAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCaPools, null, options, request);
      }
      /// <summary>
      /// Delete a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCaPool(global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCaPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCaPool(global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCaPool, null, options, request);
      }
      /// <summary>
      /// Delete a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCaPoolAsync(global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCaPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a [CaPool][google.cloud.security.privateca.v1.CaPool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCaPoolAsync(global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCaPool, null, options, request);
      }
      /// <summary>
      /// FetchCaCerts returns the current trust anchor for the
      /// [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
      /// certificate chains for all certificate authorities in the ENABLED,
      /// DISABLED, or STAGED states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse FetchCaCerts(global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchCaCerts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FetchCaCerts returns the current trust anchor for the
      /// [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
      /// certificate chains for all certificate authorities in the ENABLED,
      /// DISABLED, or STAGED states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse FetchCaCerts(global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchCaCerts, null, options, request);
      }
      /// <summary>
      /// FetchCaCerts returns the current trust anchor for the
      /// [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
      /// certificate chains for all certificate authorities in the ENABLED,
      /// DISABLED, or STAGED states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse> FetchCaCertsAsync(global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchCaCertsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FetchCaCerts returns the current trust anchor for the
      /// [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
      /// certificate chains for all certificate authorities in the ENABLED,
      /// DISABLED, or STAGED states.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse> FetchCaCertsAsync(global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchCaCerts, null, options, request);
      }
      /// <summary>
      /// Returns a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList GetCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateRevocationList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList GetCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificateRevocationList, null, options, request);
      }
      /// <summary>
      /// Returns a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList> GetCertificateRevocationListAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateRevocationListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList> GetCertificateRevocationListAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificateRevocationList, null, options, request);
      }
      /// <summary>
      /// Lists
      /// [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse ListCertificateRevocationLists(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateRevocationLists(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists
      /// [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse ListCertificateRevocationLists(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificateRevocationLists, null, options, request);
      }
      /// <summary>
      /// Lists
      /// [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse> ListCertificateRevocationListsAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateRevocationListsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists
      /// [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse> ListCertificateRevocationListsAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificateRevocationLists, null, options, request);
      }
      /// <summary>
      /// Update a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateRevocationList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateRevocationList(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificateRevocationList, null, options, request);
      }
      /// <summary>
      /// Update a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateRevocationListAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateRevocationListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a
      /// [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateRevocationListAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificateRevocationList, null, options, request);
      }
      /// <summary>
      /// Create a new
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCertificateTemplate, null, options, request);
      }
      /// <summary>
      /// Create a new
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateTemplateAsync(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCertificateTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
      /// in a given Project and Location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCertificateTemplateAsync(global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCertificateTemplate, null, options, request);
      }
      /// <summary>
      /// DeleteCertificateTemplate deletes a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteCertificateTemplate deletes a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteCertificateTemplate, null, options, request);
      }
      /// <summary>
      /// DeleteCertificateTemplate deletes a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateTemplateAsync(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteCertificateTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteCertificateTemplate deletes a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteCertificateTemplateAsync(global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteCertificateTemplate, null, options, request);
      }
      /// <summary>
      /// Returns a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate GetCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate GetCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCertificateTemplate, null, options, request);
      }
      /// <summary>
      /// Returns a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate> GetCertificateTemplateAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCertificateTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate> GetCertificateTemplateAsync(global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCertificateTemplate, null, options, request);
      }
      /// <summary>
      /// Lists
      /// [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse ListCertificateTemplates(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateTemplates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists
      /// [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse ListCertificateTemplates(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCertificateTemplates, null, options, request);
      }
      /// <summary>
      /// Lists
      /// [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse> ListCertificateTemplatesAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCertificateTemplatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists
      /// [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse> ListCertificateTemplatesAsync(global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCertificateTemplates, null, options, request);
      }
      /// <summary>
      /// Update a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateCertificateTemplate(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCertificateTemplate, null, options, request);
      }
      /// <summary>
      /// Update a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateTemplateAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCertificateTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a
      /// [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateCertificateTemplateAsync(global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCertificateTemplate, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CertificateAuthorityServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CertificateAuthorityServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CertificateAuthorityServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateCertificate, serviceImpl.CreateCertificate)
          .AddMethod(__Method_GetCertificate, serviceImpl.GetCertificate)
          .AddMethod(__Method_ListCertificates, serviceImpl.ListCertificates)
          .AddMethod(__Method_RevokeCertificate, serviceImpl.RevokeCertificate)
          .AddMethod(__Method_UpdateCertificate, serviceImpl.UpdateCertificate)
          .AddMethod(__Method_ActivateCertificateAuthority, serviceImpl.ActivateCertificateAuthority)
          .AddMethod(__Method_CreateCertificateAuthority, serviceImpl.CreateCertificateAuthority)
          .AddMethod(__Method_DisableCertificateAuthority, serviceImpl.DisableCertificateAuthority)
          .AddMethod(__Method_EnableCertificateAuthority, serviceImpl.EnableCertificateAuthority)
          .AddMethod(__Method_FetchCertificateAuthorityCsr, serviceImpl.FetchCertificateAuthorityCsr)
          .AddMethod(__Method_GetCertificateAuthority, serviceImpl.GetCertificateAuthority)
          .AddMethod(__Method_ListCertificateAuthorities, serviceImpl.ListCertificateAuthorities)
          .AddMethod(__Method_UndeleteCertificateAuthority, serviceImpl.UndeleteCertificateAuthority)
          .AddMethod(__Method_DeleteCertificateAuthority, serviceImpl.DeleteCertificateAuthority)
          .AddMethod(__Method_UpdateCertificateAuthority, serviceImpl.UpdateCertificateAuthority)
          .AddMethod(__Method_CreateCaPool, serviceImpl.CreateCaPool)
          .AddMethod(__Method_UpdateCaPool, serviceImpl.UpdateCaPool)
          .AddMethod(__Method_GetCaPool, serviceImpl.GetCaPool)
          .AddMethod(__Method_ListCaPools, serviceImpl.ListCaPools)
          .AddMethod(__Method_DeleteCaPool, serviceImpl.DeleteCaPool)
          .AddMethod(__Method_FetchCaCerts, serviceImpl.FetchCaCerts)
          .AddMethod(__Method_GetCertificateRevocationList, serviceImpl.GetCertificateRevocationList)
          .AddMethod(__Method_ListCertificateRevocationLists, serviceImpl.ListCertificateRevocationLists)
          .AddMethod(__Method_UpdateCertificateRevocationList, serviceImpl.UpdateCertificateRevocationList)
          .AddMethod(__Method_CreateCertificateTemplate, serviceImpl.CreateCertificateTemplate)
          .AddMethod(__Method_DeleteCertificateTemplate, serviceImpl.DeleteCertificateTemplate)
          .AddMethod(__Method_GetCertificateTemplate, serviceImpl.GetCertificateTemplate)
          .AddMethod(__Method_ListCertificateTemplates, serviceImpl.ListCertificateTemplates)
          .AddMethod(__Method_UpdateCertificateTemplate, serviceImpl.UpdateCertificateTemplate).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CertificateAuthorityServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate>(serviceImpl.CreateCertificate));
      serviceBinder.AddMethod(__Method_GetCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate>(serviceImpl.GetCertificate));
      serviceBinder.AddMethod(__Method_ListCertificates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificatesResponse>(serviceImpl.ListCertificates));
      serviceBinder.AddMethod(__Method_RevokeCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.RevokeCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate>(serviceImpl.RevokeCertificate));
      serviceBinder.AddMethod(__Method_UpdateCertificate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRequest, global::Google.Cloud.Security.PrivateCA.V1.Certificate>(serviceImpl.UpdateCertificate));
      serviceBinder.AddMethod(__Method_ActivateCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.ActivateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.ActivateCertificateAuthority));
      serviceBinder.AddMethod(__Method_CreateCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCertificateAuthority));
      serviceBinder.AddMethod(__Method_DisableCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.DisableCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.DisableCertificateAuthority));
      serviceBinder.AddMethod(__Method_EnableCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.EnableCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.EnableCertificateAuthority));
      serviceBinder.AddMethod(__Method_FetchCertificateAuthorityCsr, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrRequest, global::Google.Cloud.Security.PrivateCA.V1.FetchCertificateAuthorityCsrResponse>(serviceImpl.FetchCertificateAuthorityCsr));
      serviceBinder.AddMethod(__Method_GetCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateAuthorityRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateAuthority>(serviceImpl.GetCertificateAuthority));
      serviceBinder.AddMethod(__Method_ListCertificateAuthorities, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateAuthoritiesResponse>(serviceImpl.ListCertificateAuthorities));
      serviceBinder.AddMethod(__Method_UndeleteCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.UndeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.UndeleteCertificateAuthority));
      serviceBinder.AddMethod(__Method_DeleteCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCertificateAuthority));
      serviceBinder.AddMethod(__Method_UpdateCertificateAuthority, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateAuthorityRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCertificateAuthority));
      serviceBinder.AddMethod(__Method_CreateCaPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.CreateCaPoolRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCaPool));
      serviceBinder.AddMethod(__Method_UpdateCaPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.UpdateCaPoolRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCaPool));
      serviceBinder.AddMethod(__Method_GetCaPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.GetCaPoolRequest, global::Google.Cloud.Security.PrivateCA.V1.CaPool>(serviceImpl.GetCaPool));
      serviceBinder.AddMethod(__Method_ListCaPools, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCaPoolsResponse>(serviceImpl.ListCaPools));
      serviceBinder.AddMethod(__Method_DeleteCaPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.DeleteCaPoolRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCaPool));
      serviceBinder.AddMethod(__Method_FetchCaCerts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsRequest, global::Google.Cloud.Security.PrivateCA.V1.FetchCaCertsResponse>(serviceImpl.FetchCaCerts));
      serviceBinder.AddMethod(__Method_GetCertificateRevocationList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateRevocationListRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateRevocationList>(serviceImpl.GetCertificateRevocationList));
      serviceBinder.AddMethod(__Method_ListCertificateRevocationLists, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateRevocationListsResponse>(serviceImpl.ListCertificateRevocationLists));
      serviceBinder.AddMethod(__Method_UpdateCertificateRevocationList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateRevocationListRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCertificateRevocationList));
      serviceBinder.AddMethod(__Method_CreateCertificateTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.CreateCertificateTemplateRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateCertificateTemplate));
      serviceBinder.AddMethod(__Method_DeleteCertificateTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.DeleteCertificateTemplateRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteCertificateTemplate));
      serviceBinder.AddMethod(__Method_GetCertificateTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.GetCertificateTemplateRequest, global::Google.Cloud.Security.PrivateCA.V1.CertificateTemplate>(serviceImpl.GetCertificateTemplate));
      serviceBinder.AddMethod(__Method_ListCertificateTemplates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesRequest, global::Google.Cloud.Security.PrivateCA.V1.ListCertificateTemplatesResponse>(serviceImpl.ListCertificateTemplates));
      serviceBinder.AddMethod(__Method_UpdateCertificateTemplate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Security.PrivateCA.V1.UpdateCertificateTemplateRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateCertificateTemplate));
    }

  }
}
#endregion
