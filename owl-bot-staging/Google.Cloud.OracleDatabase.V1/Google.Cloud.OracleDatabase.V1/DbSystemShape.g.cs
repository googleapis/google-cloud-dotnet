// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/oracledatabase/v1/db_system_shape.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.OracleDatabase.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/oracledatabase/v1/db_system_shape.proto</summary>
  public static partial class DbSystemShapeReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/oracledatabase/v1/db_system_shape.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DbSystemShapeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRnb29nbGUvY2xvdWQvb3JhY2xlZGF0YWJhc2UvdjEvZGJfc3lzdGVtX3No",
            "YXBlLnByb3RvEh5nb29nbGUuY2xvdWQub3JhY2xlZGF0YWJhc2UudjEaH2dv",
            "b2dsZS9hcGkvZmllbGRfYmVoYXZpb3IucHJvdG8aGWdvb2dsZS9hcGkvcmVz",
            "b3VyY2UucHJvdG8ixQQKDURiU3lzdGVtU2hhcGUSEQoEbmFtZRgBIAEoCUID",
            "4EEIEhIKBXNoYXBlGAIgASgJQgPgQQESGwoObWluX25vZGVfY291bnQYAyAB",
            "KAVCA+BBARIbCg5tYXhfbm9kZV9jb3VudBgEIAEoBUID4EEBEh4KEW1pbl9z",
            "dG9yYWdlX2NvdW50GAUgASgFQgPgQQESHgoRbWF4X3N0b3JhZ2VfY291bnQY",
            "BiABKAVCA+BBARIqCh1hdmFpbGFibGVfY29yZV9jb3VudF9wZXJfbm9kZRgH",
            "IAEoBUID4EEBEikKHGF2YWlsYWJsZV9tZW1vcnlfcGVyX25vZGVfZ2IYCCAB",
            "KAVCA+BBARImChlhdmFpbGFibGVfZGF0YV9zdG9yYWdlX3RiGAkgASgFQgPg",
            "QQESJAoXbWluX2NvcmVfY291bnRfcGVyX25vZGUYCiABKAVCA+BBARIjChZt",
            "aW5fbWVtb3J5X3Blcl9ub2RlX2diGAsgASgFQgPgQQESLAofbWluX2RiX25v",
            "ZGVfc3RvcmFnZV9wZXJfbm9kZV9nYhgMIAEoBUID4EEBOpoB6kGWAQorb3Jh",
            "Y2xlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vRGJTeXN0ZW1TaGFwZRJIcHJv",
            "amVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L2RiU3lzdGVt",
            "U2hhcGVzL3tkYl9zeXN0ZW1fc2hhcGV9Kg5kYlN5c3RlbVNoYXBlczINZGJT",
            "eXN0ZW1TaGFwZULsAQoiY29tLmdvb2dsZS5jbG91ZC5vcmFjbGVkYXRhYmFz",
            "ZS52MUISRGJTeXN0ZW1TaGFwZVByb3RvUAFaSmNsb3VkLmdvb2dsZS5jb20v",
            "Z28vb3JhY2xlZGF0YWJhc2UvYXBpdjEvb3JhY2xlZGF0YWJhc2VwYjtvcmFj",
            "bGVkYXRhYmFzZXBiqgIeR29vZ2xlLkNsb3VkLk9yYWNsZURhdGFiYXNlLlYx",
            "ygIeR29vZ2xlXENsb3VkXE9yYWNsZURhdGFiYXNlXFYx6gIhR29vZ2xlOjpD",
            "bG91ZDo6T3JhY2xlRGF0YWJhc2U6OlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.OracleDatabase.V1.DbSystemShape), global::Google.Cloud.OracleDatabase.V1.DbSystemShape.Parser, new[]{ "Name", "Shape", "MinNodeCount", "MaxNodeCount", "MinStorageCount", "MaxStorageCount", "AvailableCoreCountPerNode", "AvailableMemoryPerNodeGb", "AvailableDataStorageTb", "MinCoreCountPerNode", "MinMemoryPerNodeGb", "MinDbNodeStoragePerNodeGb" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Details of the Database System Shapes resource.
  /// https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/DbSystemShapeSummary/
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DbSystemShape : pb::IMessage<DbSystemShape>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DbSystemShape> _parser = new pb::MessageParser<DbSystemShape>(() => new DbSystemShape());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DbSystemShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.OracleDatabase.V1.DbSystemShapeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbSystemShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbSystemShape(DbSystemShape other) : this() {
      name_ = other.name_;
      shape_ = other.shape_;
      minNodeCount_ = other.minNodeCount_;
      maxNodeCount_ = other.maxNodeCount_;
      minStorageCount_ = other.minStorageCount_;
      maxStorageCount_ = other.maxStorageCount_;
      availableCoreCountPerNode_ = other.availableCoreCountPerNode_;
      availableMemoryPerNodeGb_ = other.availableMemoryPerNodeGb_;
      availableDataStorageTb_ = other.availableDataStorageTb_;
      minCoreCountPerNode_ = other.minCoreCountPerNode_;
      minMemoryPerNodeGb_ = other.minMemoryPerNodeGb_;
      minDbNodeStoragePerNodeGb_ = other.minDbNodeStoragePerNodeGb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DbSystemShape Clone() {
      return new DbSystemShape(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Identifier. The name of the Database System Shape resource with the format:
    /// projects/{project}/locations/{region}/dbSystemShapes/{db_system_shape}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 2;
    private string shape_ = "";
    /// <summary>
    /// Optional. shape
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Shape {
      get { return shape_; }
      set {
        shape_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_node_count" field.</summary>
    public const int MinNodeCountFieldNumber = 3;
    private int minNodeCount_;
    /// <summary>
    /// Optional. Minimum number of database servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinNodeCount {
      get { return minNodeCount_; }
      set {
        minNodeCount_ = value;
      }
    }

    /// <summary>Field number for the "max_node_count" field.</summary>
    public const int MaxNodeCountFieldNumber = 4;
    private int maxNodeCount_;
    /// <summary>
    /// Optional. Maximum number of database servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxNodeCount {
      get { return maxNodeCount_; }
      set {
        maxNodeCount_ = value;
      }
    }

    /// <summary>Field number for the "min_storage_count" field.</summary>
    public const int MinStorageCountFieldNumber = 5;
    private int minStorageCount_;
    /// <summary>
    /// Optional. Minimum number of storage servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinStorageCount {
      get { return minStorageCount_; }
      set {
        minStorageCount_ = value;
      }
    }

    /// <summary>Field number for the "max_storage_count" field.</summary>
    public const int MaxStorageCountFieldNumber = 6;
    private int maxStorageCount_;
    /// <summary>
    /// Optional. Maximum number of storage servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxStorageCount {
      get { return maxStorageCount_; }
      set {
        maxStorageCount_ = value;
      }
    }

    /// <summary>Field number for the "available_core_count_per_node" field.</summary>
    public const int AvailableCoreCountPerNodeFieldNumber = 7;
    private int availableCoreCountPerNode_;
    /// <summary>
    /// Optional. Number of cores per node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AvailableCoreCountPerNode {
      get { return availableCoreCountPerNode_; }
      set {
        availableCoreCountPerNode_ = value;
      }
    }

    /// <summary>Field number for the "available_memory_per_node_gb" field.</summary>
    public const int AvailableMemoryPerNodeGbFieldNumber = 8;
    private int availableMemoryPerNodeGb_;
    /// <summary>
    /// Optional. Memory per database server node in gigabytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AvailableMemoryPerNodeGb {
      get { return availableMemoryPerNodeGb_; }
      set {
        availableMemoryPerNodeGb_ = value;
      }
    }

    /// <summary>Field number for the "available_data_storage_tb" field.</summary>
    public const int AvailableDataStorageTbFieldNumber = 9;
    private int availableDataStorageTb_;
    /// <summary>
    /// Optional. Storage per storage server in terabytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AvailableDataStorageTb {
      get { return availableDataStorageTb_; }
      set {
        availableDataStorageTb_ = value;
      }
    }

    /// <summary>Field number for the "min_core_count_per_node" field.</summary>
    public const int MinCoreCountPerNodeFieldNumber = 10;
    private int minCoreCountPerNode_;
    /// <summary>
    /// Optional. Minimum core count per node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinCoreCountPerNode {
      get { return minCoreCountPerNode_; }
      set {
        minCoreCountPerNode_ = value;
      }
    }

    /// <summary>Field number for the "min_memory_per_node_gb" field.</summary>
    public const int MinMemoryPerNodeGbFieldNumber = 11;
    private int minMemoryPerNodeGb_;
    /// <summary>
    /// Optional. Minimum memory per node in gigabytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinMemoryPerNodeGb {
      get { return minMemoryPerNodeGb_; }
      set {
        minMemoryPerNodeGb_ = value;
      }
    }

    /// <summary>Field number for the "min_db_node_storage_per_node_gb" field.</summary>
    public const int MinDbNodeStoragePerNodeGbFieldNumber = 12;
    private int minDbNodeStoragePerNodeGb_;
    /// <summary>
    /// Optional. Minimum node storage per database server in gigabytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinDbNodeStoragePerNodeGb {
      get { return minDbNodeStoragePerNodeGb_; }
      set {
        minDbNodeStoragePerNodeGb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DbSystemShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DbSystemShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Shape != other.Shape) return false;
      if (MinNodeCount != other.MinNodeCount) return false;
      if (MaxNodeCount != other.MaxNodeCount) return false;
      if (MinStorageCount != other.MinStorageCount) return false;
      if (MaxStorageCount != other.MaxStorageCount) return false;
      if (AvailableCoreCountPerNode != other.AvailableCoreCountPerNode) return false;
      if (AvailableMemoryPerNodeGb != other.AvailableMemoryPerNodeGb) return false;
      if (AvailableDataStorageTb != other.AvailableDataStorageTb) return false;
      if (MinCoreCountPerNode != other.MinCoreCountPerNode) return false;
      if (MinMemoryPerNodeGb != other.MinMemoryPerNodeGb) return false;
      if (MinDbNodeStoragePerNodeGb != other.MinDbNodeStoragePerNodeGb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Shape.Length != 0) hash ^= Shape.GetHashCode();
      if (MinNodeCount != 0) hash ^= MinNodeCount.GetHashCode();
      if (MaxNodeCount != 0) hash ^= MaxNodeCount.GetHashCode();
      if (MinStorageCount != 0) hash ^= MinStorageCount.GetHashCode();
      if (MaxStorageCount != 0) hash ^= MaxStorageCount.GetHashCode();
      if (AvailableCoreCountPerNode != 0) hash ^= AvailableCoreCountPerNode.GetHashCode();
      if (AvailableMemoryPerNodeGb != 0) hash ^= AvailableMemoryPerNodeGb.GetHashCode();
      if (AvailableDataStorageTb != 0) hash ^= AvailableDataStorageTb.GetHashCode();
      if (MinCoreCountPerNode != 0) hash ^= MinCoreCountPerNode.GetHashCode();
      if (MinMemoryPerNodeGb != 0) hash ^= MinMemoryPerNodeGb.GetHashCode();
      if (MinDbNodeStoragePerNodeGb != 0) hash ^= MinDbNodeStoragePerNodeGb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Shape.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Shape);
      }
      if (MinNodeCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinNodeCount);
      }
      if (MaxNodeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxNodeCount);
      }
      if (MinStorageCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MinStorageCount);
      }
      if (MaxStorageCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxStorageCount);
      }
      if (AvailableCoreCountPerNode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AvailableCoreCountPerNode);
      }
      if (AvailableMemoryPerNodeGb != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AvailableMemoryPerNodeGb);
      }
      if (AvailableDataStorageTb != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AvailableDataStorageTb);
      }
      if (MinCoreCountPerNode != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MinCoreCountPerNode);
      }
      if (MinMemoryPerNodeGb != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinMemoryPerNodeGb);
      }
      if (MinDbNodeStoragePerNodeGb != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MinDbNodeStoragePerNodeGb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Shape.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Shape);
      }
      if (MinNodeCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinNodeCount);
      }
      if (MaxNodeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxNodeCount);
      }
      if (MinStorageCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MinStorageCount);
      }
      if (MaxStorageCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxStorageCount);
      }
      if (AvailableCoreCountPerNode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AvailableCoreCountPerNode);
      }
      if (AvailableMemoryPerNodeGb != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AvailableMemoryPerNodeGb);
      }
      if (AvailableDataStorageTb != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AvailableDataStorageTb);
      }
      if (MinCoreCountPerNode != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MinCoreCountPerNode);
      }
      if (MinMemoryPerNodeGb != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinMemoryPerNodeGb);
      }
      if (MinDbNodeStoragePerNodeGb != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MinDbNodeStoragePerNodeGb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Shape.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shape);
      }
      if (MinNodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinNodeCount);
      }
      if (MaxNodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNodeCount);
      }
      if (MinStorageCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinStorageCount);
      }
      if (MaxStorageCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxStorageCount);
      }
      if (AvailableCoreCountPerNode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableCoreCountPerNode);
      }
      if (AvailableMemoryPerNodeGb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableMemoryPerNodeGb);
      }
      if (AvailableDataStorageTb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableDataStorageTb);
      }
      if (MinCoreCountPerNode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinCoreCountPerNode);
      }
      if (MinMemoryPerNodeGb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinMemoryPerNodeGb);
      }
      if (MinDbNodeStoragePerNodeGb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinDbNodeStoragePerNodeGb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DbSystemShape other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Shape.Length != 0) {
        Shape = other.Shape;
      }
      if (other.MinNodeCount != 0) {
        MinNodeCount = other.MinNodeCount;
      }
      if (other.MaxNodeCount != 0) {
        MaxNodeCount = other.MaxNodeCount;
      }
      if (other.MinStorageCount != 0) {
        MinStorageCount = other.MinStorageCount;
      }
      if (other.MaxStorageCount != 0) {
        MaxStorageCount = other.MaxStorageCount;
      }
      if (other.AvailableCoreCountPerNode != 0) {
        AvailableCoreCountPerNode = other.AvailableCoreCountPerNode;
      }
      if (other.AvailableMemoryPerNodeGb != 0) {
        AvailableMemoryPerNodeGb = other.AvailableMemoryPerNodeGb;
      }
      if (other.AvailableDataStorageTb != 0) {
        AvailableDataStorageTb = other.AvailableDataStorageTb;
      }
      if (other.MinCoreCountPerNode != 0) {
        MinCoreCountPerNode = other.MinCoreCountPerNode;
      }
      if (other.MinMemoryPerNodeGb != 0) {
        MinMemoryPerNodeGb = other.MinMemoryPerNodeGb;
      }
      if (other.MinDbNodeStoragePerNodeGb != 0) {
        MinDbNodeStoragePerNodeGb = other.MinDbNodeStoragePerNodeGb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Shape = input.ReadString();
            break;
          }
          case 24: {
            MinNodeCount = input.ReadInt32();
            break;
          }
          case 32: {
            MaxNodeCount = input.ReadInt32();
            break;
          }
          case 40: {
            MinStorageCount = input.ReadInt32();
            break;
          }
          case 48: {
            MaxStorageCount = input.ReadInt32();
            break;
          }
          case 56: {
            AvailableCoreCountPerNode = input.ReadInt32();
            break;
          }
          case 64: {
            AvailableMemoryPerNodeGb = input.ReadInt32();
            break;
          }
          case 72: {
            AvailableDataStorageTb = input.ReadInt32();
            break;
          }
          case 80: {
            MinCoreCountPerNode = input.ReadInt32();
            break;
          }
          case 88: {
            MinMemoryPerNodeGb = input.ReadInt32();
            break;
          }
          case 96: {
            MinDbNodeStoragePerNodeGb = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Shape = input.ReadString();
            break;
          }
          case 24: {
            MinNodeCount = input.ReadInt32();
            break;
          }
          case 32: {
            MaxNodeCount = input.ReadInt32();
            break;
          }
          case 40: {
            MinStorageCount = input.ReadInt32();
            break;
          }
          case 48: {
            MaxStorageCount = input.ReadInt32();
            break;
          }
          case 56: {
            AvailableCoreCountPerNode = input.ReadInt32();
            break;
          }
          case 64: {
            AvailableMemoryPerNodeGb = input.ReadInt32();
            break;
          }
          case 72: {
            AvailableDataStorageTb = input.ReadInt32();
            break;
          }
          case 80: {
            MinCoreCountPerNode = input.ReadInt32();
            break;
          }
          case 88: {
            MinMemoryPerNodeGb = input.ReadInt32();
            break;
          }
          case 96: {
            MinDbNodeStoragePerNodeGb = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
