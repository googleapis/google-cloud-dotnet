// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/connectors/v1/ssl_config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.Connectors.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/connectors/v1/ssl_config.proto</summary>
  public static partial class SslConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/connectors/v1/ssl_config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SslConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Citnb29nbGUvY2xvdWQvY29ubmVjdG9ycy92MS9zc2xfY29uZmlnLnByb3Rv",
            "Ehpnb29nbGUuY2xvdWQuY29ubmVjdG9ycy52MRonZ29vZ2xlL2Nsb3VkL2Nv",
            "bm5lY3RvcnMvdjEvY29tbW9uLnByb3RvIrYCChFTc2xDb25maWdUZW1wbGF0",
            "ZRI1Cghzc2xfdHlwZRgBIAEoDjIjLmdvb2dsZS5jbG91ZC5jb25uZWN0b3Jz",
            "LnYxLlNzbFR5cGUSGAoQaXNfdGxzX21hbmRhdG9yeRgCIAEoCBI+ChBzZXJ2",
            "ZXJfY2VydF90eXBlGAMgAygOMiQuZ29vZ2xlLmNsb3VkLmNvbm5lY3RvcnMu",
            "djEuQ2VydFR5cGUSPgoQY2xpZW50X2NlcnRfdHlwZRgEIAMoDjIkLmdvb2ds",
            "ZS5jbG91ZC5jb25uZWN0b3JzLnYxLkNlcnRUeXBlElAKFGFkZGl0aW9uYWxf",
            "dmFyaWFibGVzGAUgAygLMjIuZ29vZ2xlLmNsb3VkLmNvbm5lY3RvcnMudjEu",
            "Q29uZmlnVmFyaWFibGVUZW1wbGF0ZSKiBQoJU3NsQ29uZmlnEjEKBHR5cGUY",
            "ASABKA4yIy5nb29nbGUuY2xvdWQuY29ubmVjdG9ycy52MS5Tc2xUeXBlEkUK",
            "C3RydXN0X21vZGVsGAIgASgOMjAuZ29vZ2xlLmNsb3VkLmNvbm5lY3RvcnMu",
            "djEuU3NsQ29uZmlnLlRydXN0TW9kZWwSRgoacHJpdmF0ZV9zZXJ2ZXJfY2Vy",
            "dGlmaWNhdGUYAyABKAsyIi5nb29nbGUuY2xvdWQuY29ubmVjdG9ycy52MS5T",
            "ZWNyZXQSPgoSY2xpZW50X2NlcnRpZmljYXRlGAQgASgLMiIuZ29vZ2xlLmNs",
            "b3VkLmNvbm5lY3RvcnMudjEuU2VjcmV0Ej4KEmNsaWVudF9wcml2YXRlX2tl",
            "eRgFIAEoCzIiLmdvb2dsZS5jbG91ZC5jb25uZWN0b3JzLnYxLlNlY3JldBJD",
            "ChdjbGllbnRfcHJpdmF0ZV9rZXlfcGFzcxgGIAEoCzIiLmdvb2dsZS5jbG91",
            "ZC5jb25uZWN0b3JzLnYxLlNlY3JldBI+ChBzZXJ2ZXJfY2VydF90eXBlGAcg",
            "ASgOMiQuZ29vZ2xlLmNsb3VkLmNvbm5lY3RvcnMudjEuQ2VydFR5cGUSPgoQ",
            "Y2xpZW50X2NlcnRfdHlwZRgIIAEoDjIkLmdvb2dsZS5jbG91ZC5jb25uZWN0",
            "b3JzLnYxLkNlcnRUeXBlEg8KB3VzZV9zc2wYCSABKAgSSAoUYWRkaXRpb25h",
            "bF92YXJpYWJsZXMYCiADKAsyKi5nb29nbGUuY2xvdWQuY29ubmVjdG9ycy52",
            "MS5Db25maWdWYXJpYWJsZSIzCgpUcnVzdE1vZGVsEgoKBlBVQkxJQxAAEgsK",
            "B1BSSVZBVEUQARIMCghJTlNFQ1VSRRACKjYKB1NzbFR5cGUSGAoUU1NMX1RZ",
            "UEVfVU5TUEVDSUZJRUQQABIHCgNUTFMQARIICgRNVExTEAIqLgoIQ2VydFR5",
            "cGUSGQoVQ0VSVF9UWVBFX1VOU1BFQ0lGSUVEEAASBwoDUEVNEAFCcgoeY29t",
            "Lmdvb2dsZS5jbG91ZC5jb25uZWN0b3JzLnYxQg5Tc2xDb25maWdQcm90b1AB",
            "Wj5jbG91ZC5nb29nbGUuY29tL2dvL2Nvbm5lY3RvcnMvYXBpdjEvY29ubmVj",
            "dG9yc3BiO2Nvbm5lY3RvcnNwYmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Cloud.Connectors.V1.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Cloud.Connectors.V1.SslType), typeof(global::Google.Cloud.Connectors.V1.CertType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Connectors.V1.SslConfigTemplate), global::Google.Cloud.Connectors.V1.SslConfigTemplate.Parser, new[]{ "SslType", "IsTlsMandatory", "ServerCertType", "ClientCertType", "AdditionalVariables" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.Connectors.V1.SslConfig), global::Google.Cloud.Connectors.V1.SslConfig.Parser, new[]{ "Type", "TrustModel", "PrivateServerCertificate", "ClientCertificate", "ClientPrivateKey", "ClientPrivateKeyPass", "ServerCertType", "ClientCertType", "UseSsl", "AdditionalVariables" }, null, new[]{ typeof(global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Enum for controlling the SSL Type (TLS/MTLS)
  /// </summary>
  public enum SslType {
    /// <summary>
    /// No SSL configuration required.
    /// </summary>
    [pbr::OriginalName("SSL_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// TLS Handshake
    /// </summary>
    [pbr::OriginalName("TLS")] Tls = 1,
    /// <summary>
    /// mutual TLS (MTLS) Handshake
    /// </summary>
    [pbr::OriginalName("MTLS")] Mtls = 2,
  }

  /// <summary>
  /// Enum for Cert Types
  /// </summary>
  public enum CertType {
    /// <summary>
    /// Cert type unspecified.
    /// </summary>
    [pbr::OriginalName("CERT_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Privacy Enhanced Mail (PEM) Type
    /// </summary>
    [pbr::OriginalName("PEM")] Pem = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Ssl config details of a connector version
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SslConfigTemplate : pb::IMessage<SslConfigTemplate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SslConfigTemplate> _parser = new pb::MessageParser<SslConfigTemplate>(() => new SslConfigTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SslConfigTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Connectors.V1.SslConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SslConfigTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SslConfigTemplate(SslConfigTemplate other) : this() {
      sslType_ = other.sslType_;
      isTlsMandatory_ = other.isTlsMandatory_;
      serverCertType_ = other.serverCertType_.Clone();
      clientCertType_ = other.clientCertType_.Clone();
      additionalVariables_ = other.additionalVariables_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SslConfigTemplate Clone() {
      return new SslConfigTemplate(this);
    }

    /// <summary>Field number for the "ssl_type" field.</summary>
    public const int SslTypeFieldNumber = 1;
    private global::Google.Cloud.Connectors.V1.SslType sslType_ = global::Google.Cloud.Connectors.V1.SslType.Unspecified;
    /// <summary>
    /// Controls the ssl type for the given connector version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.SslType SslType {
      get { return sslType_; }
      set {
        sslType_ = value;
      }
    }

    /// <summary>Field number for the "is_tls_mandatory" field.</summary>
    public const int IsTlsMandatoryFieldNumber = 2;
    private bool isTlsMandatory_;
    /// <summary>
    /// Boolean for determining if the connector version mandates TLS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTlsMandatory {
      get { return isTlsMandatory_; }
      set {
        isTlsMandatory_ = value;
      }
    }

    /// <summary>Field number for the "server_cert_type" field.</summary>
    public const int ServerCertTypeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.Connectors.V1.CertType> _repeated_serverCertType_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Google.Cloud.Connectors.V1.CertType) x);
    private readonly pbc::RepeatedField<global::Google.Cloud.Connectors.V1.CertType> serverCertType_ = new pbc::RepeatedField<global::Google.Cloud.Connectors.V1.CertType>();
    /// <summary>
    /// List of supported Server Cert Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.Connectors.V1.CertType> ServerCertType {
      get { return serverCertType_; }
    }

    /// <summary>Field number for the "client_cert_type" field.</summary>
    public const int ClientCertTypeFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Cloud.Connectors.V1.CertType> _repeated_clientCertType_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Google.Cloud.Connectors.V1.CertType) x);
    private readonly pbc::RepeatedField<global::Google.Cloud.Connectors.V1.CertType> clientCertType_ = new pbc::RepeatedField<global::Google.Cloud.Connectors.V1.CertType>();
    /// <summary>
    /// List of supported Client Cert Types
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.Connectors.V1.CertType> ClientCertType {
      get { return clientCertType_; }
    }

    /// <summary>Field number for the "additional_variables" field.</summary>
    public const int AdditionalVariablesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.Connectors.V1.ConfigVariableTemplate> _repeated_additionalVariables_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.Connectors.V1.ConfigVariableTemplate.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Connectors.V1.ConfigVariableTemplate> additionalVariables_ = new pbc::RepeatedField<global::Google.Cloud.Connectors.V1.ConfigVariableTemplate>();
    /// <summary>
    /// Any additional fields that need to be rendered
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.Connectors.V1.ConfigVariableTemplate> AdditionalVariables {
      get { return additionalVariables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SslConfigTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SslConfigTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SslType != other.SslType) return false;
      if (IsTlsMandatory != other.IsTlsMandatory) return false;
      if(!serverCertType_.Equals(other.serverCertType_)) return false;
      if(!clientCertType_.Equals(other.clientCertType_)) return false;
      if(!additionalVariables_.Equals(other.additionalVariables_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SslType != global::Google.Cloud.Connectors.V1.SslType.Unspecified) hash ^= SslType.GetHashCode();
      if (IsTlsMandatory != false) hash ^= IsTlsMandatory.GetHashCode();
      hash ^= serverCertType_.GetHashCode();
      hash ^= clientCertType_.GetHashCode();
      hash ^= additionalVariables_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SslType != global::Google.Cloud.Connectors.V1.SslType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SslType);
      }
      if (IsTlsMandatory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTlsMandatory);
      }
      serverCertType_.WriteTo(output, _repeated_serverCertType_codec);
      clientCertType_.WriteTo(output, _repeated_clientCertType_codec);
      additionalVariables_.WriteTo(output, _repeated_additionalVariables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SslType != global::Google.Cloud.Connectors.V1.SslType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SslType);
      }
      if (IsTlsMandatory != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTlsMandatory);
      }
      serverCertType_.WriteTo(ref output, _repeated_serverCertType_codec);
      clientCertType_.WriteTo(ref output, _repeated_clientCertType_codec);
      additionalVariables_.WriteTo(ref output, _repeated_additionalVariables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SslType != global::Google.Cloud.Connectors.V1.SslType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SslType);
      }
      if (IsTlsMandatory != false) {
        size += 1 + 1;
      }
      size += serverCertType_.CalculateSize(_repeated_serverCertType_codec);
      size += clientCertType_.CalculateSize(_repeated_clientCertType_codec);
      size += additionalVariables_.CalculateSize(_repeated_additionalVariables_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SslConfigTemplate other) {
      if (other == null) {
        return;
      }
      if (other.SslType != global::Google.Cloud.Connectors.V1.SslType.Unspecified) {
        SslType = other.SslType;
      }
      if (other.IsTlsMandatory != false) {
        IsTlsMandatory = other.IsTlsMandatory;
      }
      serverCertType_.Add(other.serverCertType_);
      clientCertType_.Add(other.clientCertType_);
      additionalVariables_.Add(other.additionalVariables_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SslType = (global::Google.Cloud.Connectors.V1.SslType) input.ReadEnum();
            break;
          }
          case 16: {
            IsTlsMandatory = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            serverCertType_.AddEntriesFrom(input, _repeated_serverCertType_codec);
            break;
          }
          case 34:
          case 32: {
            clientCertType_.AddEntriesFrom(input, _repeated_clientCertType_codec);
            break;
          }
          case 42: {
            additionalVariables_.AddEntriesFrom(input, _repeated_additionalVariables_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SslType = (global::Google.Cloud.Connectors.V1.SslType) input.ReadEnum();
            break;
          }
          case 16: {
            IsTlsMandatory = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            serverCertType_.AddEntriesFrom(ref input, _repeated_serverCertType_codec);
            break;
          }
          case 34:
          case 32: {
            clientCertType_.AddEntriesFrom(ref input, _repeated_clientCertType_codec);
            break;
          }
          case 42: {
            additionalVariables_.AddEntriesFrom(ref input, _repeated_additionalVariables_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SSL Configuration of a connection
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SslConfig : pb::IMessage<SslConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SslConfig> _parser = new pb::MessageParser<SslConfig>(() => new SslConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SslConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.Connectors.V1.SslConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SslConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SslConfig(SslConfig other) : this() {
      type_ = other.type_;
      trustModel_ = other.trustModel_;
      privateServerCertificate_ = other.privateServerCertificate_ != null ? other.privateServerCertificate_.Clone() : null;
      clientCertificate_ = other.clientCertificate_ != null ? other.clientCertificate_.Clone() : null;
      clientPrivateKey_ = other.clientPrivateKey_ != null ? other.clientPrivateKey_.Clone() : null;
      clientPrivateKeyPass_ = other.clientPrivateKeyPass_ != null ? other.clientPrivateKeyPass_.Clone() : null;
      serverCertType_ = other.serverCertType_;
      clientCertType_ = other.clientCertType_;
      useSsl_ = other.useSsl_;
      additionalVariables_ = other.additionalVariables_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SslConfig Clone() {
      return new SslConfig(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Google.Cloud.Connectors.V1.SslType type_ = global::Google.Cloud.Connectors.V1.SslType.Unspecified;
    /// <summary>
    /// Controls the ssl type for the given connector version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.SslType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "trust_model" field.</summary>
    public const int TrustModelFieldNumber = 2;
    private global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel trustModel_ = global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel.Public;
    /// <summary>
    /// Trust Model of the SSL connection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel TrustModel {
      get { return trustModel_; }
      set {
        trustModel_ = value;
      }
    }

    /// <summary>Field number for the "private_server_certificate" field.</summary>
    public const int PrivateServerCertificateFieldNumber = 3;
    private global::Google.Cloud.Connectors.V1.Secret privateServerCertificate_;
    /// <summary>
    /// Private Server Certificate. Needs to be specified if trust model is
    /// `PRIVATE`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.Secret PrivateServerCertificate {
      get { return privateServerCertificate_; }
      set {
        privateServerCertificate_ = value;
      }
    }

    /// <summary>Field number for the "client_certificate" field.</summary>
    public const int ClientCertificateFieldNumber = 4;
    private global::Google.Cloud.Connectors.V1.Secret clientCertificate_;
    /// <summary>
    /// Client Certificate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.Secret ClientCertificate {
      get { return clientCertificate_; }
      set {
        clientCertificate_ = value;
      }
    }

    /// <summary>Field number for the "client_private_key" field.</summary>
    public const int ClientPrivateKeyFieldNumber = 5;
    private global::Google.Cloud.Connectors.V1.Secret clientPrivateKey_;
    /// <summary>
    /// Client Private Key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.Secret ClientPrivateKey {
      get { return clientPrivateKey_; }
      set {
        clientPrivateKey_ = value;
      }
    }

    /// <summary>Field number for the "client_private_key_pass" field.</summary>
    public const int ClientPrivateKeyPassFieldNumber = 6;
    private global::Google.Cloud.Connectors.V1.Secret clientPrivateKeyPass_;
    /// <summary>
    /// Secret containing the passphrase protecting the Client Private Key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.Secret ClientPrivateKeyPass {
      get { return clientPrivateKeyPass_; }
      set {
        clientPrivateKeyPass_ = value;
      }
    }

    /// <summary>Field number for the "server_cert_type" field.</summary>
    public const int ServerCertTypeFieldNumber = 7;
    private global::Google.Cloud.Connectors.V1.CertType serverCertType_ = global::Google.Cloud.Connectors.V1.CertType.Unspecified;
    /// <summary>
    /// Type of Server Cert (PEM/JKS/.. etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.CertType ServerCertType {
      get { return serverCertType_; }
      set {
        serverCertType_ = value;
      }
    }

    /// <summary>Field number for the "client_cert_type" field.</summary>
    public const int ClientCertTypeFieldNumber = 8;
    private global::Google.Cloud.Connectors.V1.CertType clientCertType_ = global::Google.Cloud.Connectors.V1.CertType.Unspecified;
    /// <summary>
    /// Type of Client Cert (PEM/JKS/.. etc.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.Connectors.V1.CertType ClientCertType {
      get { return clientCertType_; }
      set {
        clientCertType_ = value;
      }
    }

    /// <summary>Field number for the "use_ssl" field.</summary>
    public const int UseSslFieldNumber = 9;
    private bool useSsl_;
    /// <summary>
    /// Bool for enabling SSL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseSsl {
      get { return useSsl_; }
      set {
        useSsl_ = value;
      }
    }

    /// <summary>Field number for the "additional_variables" field.</summary>
    public const int AdditionalVariablesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Cloud.Connectors.V1.ConfigVariable> _repeated_additionalVariables_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Cloud.Connectors.V1.ConfigVariable.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.Connectors.V1.ConfigVariable> additionalVariables_ = new pbc::RepeatedField<global::Google.Cloud.Connectors.V1.ConfigVariable>();
    /// <summary>
    /// Additional SSL related field values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.Connectors.V1.ConfigVariable> AdditionalVariables {
      get { return additionalVariables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SslConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SslConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TrustModel != other.TrustModel) return false;
      if (!object.Equals(PrivateServerCertificate, other.PrivateServerCertificate)) return false;
      if (!object.Equals(ClientCertificate, other.ClientCertificate)) return false;
      if (!object.Equals(ClientPrivateKey, other.ClientPrivateKey)) return false;
      if (!object.Equals(ClientPrivateKeyPass, other.ClientPrivateKeyPass)) return false;
      if (ServerCertType != other.ServerCertType) return false;
      if (ClientCertType != other.ClientCertType) return false;
      if (UseSsl != other.UseSsl) return false;
      if(!additionalVariables_.Equals(other.additionalVariables_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Google.Cloud.Connectors.V1.SslType.Unspecified) hash ^= Type.GetHashCode();
      if (TrustModel != global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel.Public) hash ^= TrustModel.GetHashCode();
      if (privateServerCertificate_ != null) hash ^= PrivateServerCertificate.GetHashCode();
      if (clientCertificate_ != null) hash ^= ClientCertificate.GetHashCode();
      if (clientPrivateKey_ != null) hash ^= ClientPrivateKey.GetHashCode();
      if (clientPrivateKeyPass_ != null) hash ^= ClientPrivateKeyPass.GetHashCode();
      if (ServerCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) hash ^= ServerCertType.GetHashCode();
      if (ClientCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) hash ^= ClientCertType.GetHashCode();
      if (UseSsl != false) hash ^= UseSsl.GetHashCode();
      hash ^= additionalVariables_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Google.Cloud.Connectors.V1.SslType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TrustModel != global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel.Public) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TrustModel);
      }
      if (privateServerCertificate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PrivateServerCertificate);
      }
      if (clientCertificate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClientCertificate);
      }
      if (clientPrivateKey_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ClientPrivateKey);
      }
      if (clientPrivateKeyPass_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ClientPrivateKeyPass);
      }
      if (ServerCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ServerCertType);
      }
      if (ClientCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ClientCertType);
      }
      if (UseSsl != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseSsl);
      }
      additionalVariables_.WriteTo(output, _repeated_additionalVariables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Google.Cloud.Connectors.V1.SslType.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TrustModel != global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel.Public) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TrustModel);
      }
      if (privateServerCertificate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PrivateServerCertificate);
      }
      if (clientCertificate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClientCertificate);
      }
      if (clientPrivateKey_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ClientPrivateKey);
      }
      if (clientPrivateKeyPass_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ClientPrivateKeyPass);
      }
      if (ServerCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) ServerCertType);
      }
      if (ClientCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ClientCertType);
      }
      if (UseSsl != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseSsl);
      }
      additionalVariables_.WriteTo(ref output, _repeated_additionalVariables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Google.Cloud.Connectors.V1.SslType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TrustModel != global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel.Public) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrustModel);
      }
      if (privateServerCertificate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrivateServerCertificate);
      }
      if (clientCertificate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientCertificate);
      }
      if (clientPrivateKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientPrivateKey);
      }
      if (clientPrivateKeyPass_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientPrivateKeyPass);
      }
      if (ServerCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServerCertType);
      }
      if (ClientCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientCertType);
      }
      if (UseSsl != false) {
        size += 1 + 1;
      }
      size += additionalVariables_.CalculateSize(_repeated_additionalVariables_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SslConfig other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Google.Cloud.Connectors.V1.SslType.Unspecified) {
        Type = other.Type;
      }
      if (other.TrustModel != global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel.Public) {
        TrustModel = other.TrustModel;
      }
      if (other.privateServerCertificate_ != null) {
        if (privateServerCertificate_ == null) {
          PrivateServerCertificate = new global::Google.Cloud.Connectors.V1.Secret();
        }
        PrivateServerCertificate.MergeFrom(other.PrivateServerCertificate);
      }
      if (other.clientCertificate_ != null) {
        if (clientCertificate_ == null) {
          ClientCertificate = new global::Google.Cloud.Connectors.V1.Secret();
        }
        ClientCertificate.MergeFrom(other.ClientCertificate);
      }
      if (other.clientPrivateKey_ != null) {
        if (clientPrivateKey_ == null) {
          ClientPrivateKey = new global::Google.Cloud.Connectors.V1.Secret();
        }
        ClientPrivateKey.MergeFrom(other.ClientPrivateKey);
      }
      if (other.clientPrivateKeyPass_ != null) {
        if (clientPrivateKeyPass_ == null) {
          ClientPrivateKeyPass = new global::Google.Cloud.Connectors.V1.Secret();
        }
        ClientPrivateKeyPass.MergeFrom(other.ClientPrivateKeyPass);
      }
      if (other.ServerCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) {
        ServerCertType = other.ServerCertType;
      }
      if (other.ClientCertType != global::Google.Cloud.Connectors.V1.CertType.Unspecified) {
        ClientCertType = other.ClientCertType;
      }
      if (other.UseSsl != false) {
        UseSsl = other.UseSsl;
      }
      additionalVariables_.Add(other.additionalVariables_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Google.Cloud.Connectors.V1.SslType) input.ReadEnum();
            break;
          }
          case 16: {
            TrustModel = (global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel) input.ReadEnum();
            break;
          }
          case 26: {
            if (privateServerCertificate_ == null) {
              PrivateServerCertificate = new global::Google.Cloud.Connectors.V1.Secret();
            }
            input.ReadMessage(PrivateServerCertificate);
            break;
          }
          case 34: {
            if (clientCertificate_ == null) {
              ClientCertificate = new global::Google.Cloud.Connectors.V1.Secret();
            }
            input.ReadMessage(ClientCertificate);
            break;
          }
          case 42: {
            if (clientPrivateKey_ == null) {
              ClientPrivateKey = new global::Google.Cloud.Connectors.V1.Secret();
            }
            input.ReadMessage(ClientPrivateKey);
            break;
          }
          case 50: {
            if (clientPrivateKeyPass_ == null) {
              ClientPrivateKeyPass = new global::Google.Cloud.Connectors.V1.Secret();
            }
            input.ReadMessage(ClientPrivateKeyPass);
            break;
          }
          case 56: {
            ServerCertType = (global::Google.Cloud.Connectors.V1.CertType) input.ReadEnum();
            break;
          }
          case 64: {
            ClientCertType = (global::Google.Cloud.Connectors.V1.CertType) input.ReadEnum();
            break;
          }
          case 72: {
            UseSsl = input.ReadBool();
            break;
          }
          case 82: {
            additionalVariables_.AddEntriesFrom(input, _repeated_additionalVariables_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Google.Cloud.Connectors.V1.SslType) input.ReadEnum();
            break;
          }
          case 16: {
            TrustModel = (global::Google.Cloud.Connectors.V1.SslConfig.Types.TrustModel) input.ReadEnum();
            break;
          }
          case 26: {
            if (privateServerCertificate_ == null) {
              PrivateServerCertificate = new global::Google.Cloud.Connectors.V1.Secret();
            }
            input.ReadMessage(PrivateServerCertificate);
            break;
          }
          case 34: {
            if (clientCertificate_ == null) {
              ClientCertificate = new global::Google.Cloud.Connectors.V1.Secret();
            }
            input.ReadMessage(ClientCertificate);
            break;
          }
          case 42: {
            if (clientPrivateKey_ == null) {
              ClientPrivateKey = new global::Google.Cloud.Connectors.V1.Secret();
            }
            input.ReadMessage(ClientPrivateKey);
            break;
          }
          case 50: {
            if (clientPrivateKeyPass_ == null) {
              ClientPrivateKeyPass = new global::Google.Cloud.Connectors.V1.Secret();
            }
            input.ReadMessage(ClientPrivateKeyPass);
            break;
          }
          case 56: {
            ServerCertType = (global::Google.Cloud.Connectors.V1.CertType) input.ReadEnum();
            break;
          }
          case 64: {
            ClientCertType = (global::Google.Cloud.Connectors.V1.CertType) input.ReadEnum();
            break;
          }
          case 72: {
            UseSsl = input.ReadBool();
            break;
          }
          case 82: {
            additionalVariables_.AddEntriesFrom(ref input, _repeated_additionalVariables_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SslConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Enum for Ttust Model
      /// </summary>
      public enum TrustModel {
        /// <summary>
        /// Public Trust Model. Takes the Default Java trust store.
        /// </summary>
        [pbr::OriginalName("PUBLIC")] Public = 0,
        /// <summary>
        /// Private Trust Model. Takes custom/private trust store.
        /// </summary>
        [pbr::OriginalName("PRIVATE")] Private = 1,
        /// <summary>
        /// Insecure Trust Model. Accept all certificates.
        /// </summary>
        [pbr::OriginalName("INSECURE")] Insecure = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
