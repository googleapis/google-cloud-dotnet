// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/fleetengine/v1/vehicle_api.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Maps.FleetEngine.V1 {
  /// <summary>
  /// Vehicle management service.
  /// </summary>
  public static partial class VehicleService
  {
    static readonly string __ServiceName = "maps.fleetengine.v1.VehicleService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.CreateVehicleRequest> __Marshaller_maps_fleetengine_v1_CreateVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.CreateVehicleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.Vehicle> __Marshaller_maps_fleetengine_v1_Vehicle = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.Vehicle.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.GetVehicleRequest> __Marshaller_maps_fleetengine_v1_GetVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.GetVehicleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest> __Marshaller_maps_fleetengine_v1_UpdateVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest> __Marshaller_maps_fleetengine_v1_UpdateVehicleAttributesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse> __Marshaller_maps_fleetengine_v1_UpdateVehicleAttributesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.ListVehiclesRequest> __Marshaller_maps_fleetengine_v1_ListVehiclesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.ListVehiclesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.ListVehiclesResponse> __Marshaller_maps_fleetengine_v1_ListVehiclesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.ListVehiclesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest> __Marshaller_maps_fleetengine_v1_SearchVehiclesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse> __Marshaller_maps_fleetengine_v1_SearchVehiclesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Maps.FleetEngine.V1.CreateVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle> __Method_CreateVehicle = new grpc::Method<global::Google.Maps.FleetEngine.V1.CreateVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateVehicle",
        __Marshaller_maps_fleetengine_v1_CreateVehicleRequest,
        __Marshaller_maps_fleetengine_v1_Vehicle);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Maps.FleetEngine.V1.GetVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle> __Method_GetVehicle = new grpc::Method<global::Google.Maps.FleetEngine.V1.GetVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVehicle",
        __Marshaller_maps_fleetengine_v1_GetVehicleRequest,
        __Marshaller_maps_fleetengine_v1_Vehicle);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle> __Method_UpdateVehicle = new grpc::Method<global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateVehicle",
        __Marshaller_maps_fleetengine_v1_UpdateVehicleRequest,
        __Marshaller_maps_fleetengine_v1_Vehicle);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest, global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse> __Method_UpdateVehicleAttributes = new grpc::Method<global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest, global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateVehicleAttributes",
        __Marshaller_maps_fleetengine_v1_UpdateVehicleAttributesRequest,
        __Marshaller_maps_fleetengine_v1_UpdateVehicleAttributesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Maps.FleetEngine.V1.ListVehiclesRequest, global::Google.Maps.FleetEngine.V1.ListVehiclesResponse> __Method_ListVehicles = new grpc::Method<global::Google.Maps.FleetEngine.V1.ListVehiclesRequest, global::Google.Maps.FleetEngine.V1.ListVehiclesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListVehicles",
        __Marshaller_maps_fleetengine_v1_ListVehiclesRequest,
        __Marshaller_maps_fleetengine_v1_ListVehiclesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest, global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse> __Method_SearchVehicles = new grpc::Method<global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest, global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchVehicles",
        __Marshaller_maps_fleetengine_v1_SearchVehiclesRequest,
        __Marshaller_maps_fleetengine_v1_SearchVehiclesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Maps.FleetEngine.V1.VehicleApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VehicleService</summary>
    [grpc::BindServiceMethod(typeof(VehicleService), "BindService")]
    public abstract partial class VehicleServiceBase
    {
      /// <summary>
      /// Instantiates a new vehicle associated with an on-demand rideshare or
      /// deliveries provider. Each `Vehicle` must have a unique vehicle ID.
      ///
      /// The following `Vehicle` fields are required when creating a `Vehicle`:
      ///
      /// * `vehicleState`
      /// * `supportedTripTypes`
      /// * `maximumCapacity`
      /// * `vehicleType`
      ///
      /// The following `Vehicle` fields are ignored when creating a `Vehicle`:
      ///
      /// * `name`
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment`
      /// * `current_route_segment_end_point`
      /// * `current_route_segment_version`
      /// * `current_route_segment_traffic`
      /// * `route`
      /// * `waypoints`
      /// * `waypoints_version`
      /// * `remaining_distance_meters`
      /// * `remaining_time_seconds`
      /// * `eta_to_next_waypoint`
      /// * `navigation_status`
      ///
      /// All other fields are optional and used if provided.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Maps.FleetEngine.V1.Vehicle> CreateVehicle(global::Google.Maps.FleetEngine.V1.CreateVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a vehicle from the Fleet Engine.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Maps.FleetEngine.V1.Vehicle> GetVehicle(global::Google.Maps.FleetEngine.V1.GetVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Writes updated vehicle data to the Fleet Engine.
      ///
      /// When updating a `Vehicle`, the following fields cannot be updated since
      /// they are managed by the server:
      ///
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment_version`
      /// * `waypoints_version`
      ///
      /// The vehicle `name` also cannot be updated.
      ///
      /// If the `attributes` field is updated, **all** the vehicle's attributes are
      /// replaced with the attributes provided in the request. If you want to update
      /// only some attributes, see the `UpdateVehicleAttributes` method. Likewise,
      /// the `waypoints` field can be updated, but must contain all the waypoints
      /// currently on the vehicle, and no other waypoints.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Maps.FleetEngine.V1.Vehicle> UpdateVehicle(global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Partially updates a vehicle's attributes.
      /// Only the attributes mentioned in the request will be updated, other
      /// attributes will NOT be altered. Note: this is different in `UpdateVehicle`,
      /// where the whole `attributes` field will be replaced by the one in
      /// `UpdateVehicleRequest`, attributes not in the request would be removed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse> UpdateVehicleAttributes(global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a paginated list of vehicles associated with
      /// a provider that match the request options.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Maps.FleetEngine.V1.ListVehiclesResponse> ListVehicles(global::Google.Maps.FleetEngine.V1.ListVehiclesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of vehicles that match the request options.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse> SearchVehicles(global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VehicleService</summary>
    public partial class VehicleServiceClient : grpc::ClientBase<VehicleServiceClient>
    {
      /// <summary>Creates a new client for VehicleService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VehicleServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VehicleService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public VehicleServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VehicleServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected VehicleServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Instantiates a new vehicle associated with an on-demand rideshare or
      /// deliveries provider. Each `Vehicle` must have a unique vehicle ID.
      ///
      /// The following `Vehicle` fields are required when creating a `Vehicle`:
      ///
      /// * `vehicleState`
      /// * `supportedTripTypes`
      /// * `maximumCapacity`
      /// * `vehicleType`
      ///
      /// The following `Vehicle` fields are ignored when creating a `Vehicle`:
      ///
      /// * `name`
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment`
      /// * `current_route_segment_end_point`
      /// * `current_route_segment_version`
      /// * `current_route_segment_traffic`
      /// * `route`
      /// * `waypoints`
      /// * `waypoints_version`
      /// * `remaining_distance_meters`
      /// * `remaining_time_seconds`
      /// * `eta_to_next_waypoint`
      /// * `navigation_status`
      ///
      /// All other fields are optional and used if provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.Vehicle CreateVehicle(global::Google.Maps.FleetEngine.V1.CreateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instantiates a new vehicle associated with an on-demand rideshare or
      /// deliveries provider. Each `Vehicle` must have a unique vehicle ID.
      ///
      /// The following `Vehicle` fields are required when creating a `Vehicle`:
      ///
      /// * `vehicleState`
      /// * `supportedTripTypes`
      /// * `maximumCapacity`
      /// * `vehicleType`
      ///
      /// The following `Vehicle` fields are ignored when creating a `Vehicle`:
      ///
      /// * `name`
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment`
      /// * `current_route_segment_end_point`
      /// * `current_route_segment_version`
      /// * `current_route_segment_traffic`
      /// * `route`
      /// * `waypoints`
      /// * `waypoints_version`
      /// * `remaining_distance_meters`
      /// * `remaining_time_seconds`
      /// * `eta_to_next_waypoint`
      /// * `navigation_status`
      ///
      /// All other fields are optional and used if provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.Vehicle CreateVehicle(global::Google.Maps.FleetEngine.V1.CreateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateVehicle, null, options, request);
      }
      /// <summary>
      /// Instantiates a new vehicle associated with an on-demand rideshare or
      /// deliveries provider. Each `Vehicle` must have a unique vehicle ID.
      ///
      /// The following `Vehicle` fields are required when creating a `Vehicle`:
      ///
      /// * `vehicleState`
      /// * `supportedTripTypes`
      /// * `maximumCapacity`
      /// * `vehicleType`
      ///
      /// The following `Vehicle` fields are ignored when creating a `Vehicle`:
      ///
      /// * `name`
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment`
      /// * `current_route_segment_end_point`
      /// * `current_route_segment_version`
      /// * `current_route_segment_traffic`
      /// * `route`
      /// * `waypoints`
      /// * `waypoints_version`
      /// * `remaining_distance_meters`
      /// * `remaining_time_seconds`
      /// * `eta_to_next_waypoint`
      /// * `navigation_status`
      ///
      /// All other fields are optional and used if provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.Vehicle> CreateVehicleAsync(global::Google.Maps.FleetEngine.V1.CreateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Instantiates a new vehicle associated with an on-demand rideshare or
      /// deliveries provider. Each `Vehicle` must have a unique vehicle ID.
      ///
      /// The following `Vehicle` fields are required when creating a `Vehicle`:
      ///
      /// * `vehicleState`
      /// * `supportedTripTypes`
      /// * `maximumCapacity`
      /// * `vehicleType`
      ///
      /// The following `Vehicle` fields are ignored when creating a `Vehicle`:
      ///
      /// * `name`
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment`
      /// * `current_route_segment_end_point`
      /// * `current_route_segment_version`
      /// * `current_route_segment_traffic`
      /// * `route`
      /// * `waypoints`
      /// * `waypoints_version`
      /// * `remaining_distance_meters`
      /// * `remaining_time_seconds`
      /// * `eta_to_next_waypoint`
      /// * `navigation_status`
      ///
      /// All other fields are optional and used if provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.Vehicle> CreateVehicleAsync(global::Google.Maps.FleetEngine.V1.CreateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateVehicle, null, options, request);
      }
      /// <summary>
      /// Returns a vehicle from the Fleet Engine.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.Vehicle GetVehicle(global::Google.Maps.FleetEngine.V1.GetVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a vehicle from the Fleet Engine.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.Vehicle GetVehicle(global::Google.Maps.FleetEngine.V1.GetVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVehicle, null, options, request);
      }
      /// <summary>
      /// Returns a vehicle from the Fleet Engine.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.Vehicle> GetVehicleAsync(global::Google.Maps.FleetEngine.V1.GetVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a vehicle from the Fleet Engine.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.Vehicle> GetVehicleAsync(global::Google.Maps.FleetEngine.V1.GetVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVehicle, null, options, request);
      }
      /// <summary>
      /// Writes updated vehicle data to the Fleet Engine.
      ///
      /// When updating a `Vehicle`, the following fields cannot be updated since
      /// they are managed by the server:
      ///
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment_version`
      /// * `waypoints_version`
      ///
      /// The vehicle `name` also cannot be updated.
      ///
      /// If the `attributes` field is updated, **all** the vehicle's attributes are
      /// replaced with the attributes provided in the request. If you want to update
      /// only some attributes, see the `UpdateVehicleAttributes` method. Likewise,
      /// the `waypoints` field can be updated, but must contain all the waypoints
      /// currently on the vehicle, and no other waypoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.Vehicle UpdateVehicle(global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Writes updated vehicle data to the Fleet Engine.
      ///
      /// When updating a `Vehicle`, the following fields cannot be updated since
      /// they are managed by the server:
      ///
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment_version`
      /// * `waypoints_version`
      ///
      /// The vehicle `name` also cannot be updated.
      ///
      /// If the `attributes` field is updated, **all** the vehicle's attributes are
      /// replaced with the attributes provided in the request. If you want to update
      /// only some attributes, see the `UpdateVehicleAttributes` method. Likewise,
      /// the `waypoints` field can be updated, but must contain all the waypoints
      /// currently on the vehicle, and no other waypoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.Vehicle UpdateVehicle(global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateVehicle, null, options, request);
      }
      /// <summary>
      /// Writes updated vehicle data to the Fleet Engine.
      ///
      /// When updating a `Vehicle`, the following fields cannot be updated since
      /// they are managed by the server:
      ///
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment_version`
      /// * `waypoints_version`
      ///
      /// The vehicle `name` also cannot be updated.
      ///
      /// If the `attributes` field is updated, **all** the vehicle's attributes are
      /// replaced with the attributes provided in the request. If you want to update
      /// only some attributes, see the `UpdateVehicleAttributes` method. Likewise,
      /// the `waypoints` field can be updated, but must contain all the waypoints
      /// currently on the vehicle, and no other waypoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.Vehicle> UpdateVehicleAsync(global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Writes updated vehicle data to the Fleet Engine.
      ///
      /// When updating a `Vehicle`, the following fields cannot be updated since
      /// they are managed by the server:
      ///
      /// * `currentTrips`
      /// * `availableCapacity`
      /// * `current_route_segment_version`
      /// * `waypoints_version`
      ///
      /// The vehicle `name` also cannot be updated.
      ///
      /// If the `attributes` field is updated, **all** the vehicle's attributes are
      /// replaced with the attributes provided in the request. If you want to update
      /// only some attributes, see the `UpdateVehicleAttributes` method. Likewise,
      /// the `waypoints` field can be updated, but must contain all the waypoints
      /// currently on the vehicle, and no other waypoints.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.Vehicle> UpdateVehicleAsync(global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateVehicle, null, options, request);
      }
      /// <summary>
      /// Partially updates a vehicle's attributes.
      /// Only the attributes mentioned in the request will be updated, other
      /// attributes will NOT be altered. Note: this is different in `UpdateVehicle`,
      /// where the whole `attributes` field will be replaced by the one in
      /// `UpdateVehicleRequest`, attributes not in the request would be removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse UpdateVehicleAttributes(global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVehicleAttributes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Partially updates a vehicle's attributes.
      /// Only the attributes mentioned in the request will be updated, other
      /// attributes will NOT be altered. Note: this is different in `UpdateVehicle`,
      /// where the whole `attributes` field will be replaced by the one in
      /// `UpdateVehicleRequest`, attributes not in the request would be removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse UpdateVehicleAttributes(global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateVehicleAttributes, null, options, request);
      }
      /// <summary>
      /// Partially updates a vehicle's attributes.
      /// Only the attributes mentioned in the request will be updated, other
      /// attributes will NOT be altered. Note: this is different in `UpdateVehicle`,
      /// where the whole `attributes` field will be replaced by the one in
      /// `UpdateVehicleRequest`, attributes not in the request would be removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse> UpdateVehicleAttributesAsync(global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVehicleAttributesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Partially updates a vehicle's attributes.
      /// Only the attributes mentioned in the request will be updated, other
      /// attributes will NOT be altered. Note: this is different in `UpdateVehicle`,
      /// where the whole `attributes` field will be replaced by the one in
      /// `UpdateVehicleRequest`, attributes not in the request would be removed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse> UpdateVehicleAttributesAsync(global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateVehicleAttributes, null, options, request);
      }
      /// <summary>
      /// Returns a paginated list of vehicles associated with
      /// a provider that match the request options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.ListVehiclesResponse ListVehicles(global::Google.Maps.FleetEngine.V1.ListVehiclesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVehicles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a paginated list of vehicles associated with
      /// a provider that match the request options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.ListVehiclesResponse ListVehicles(global::Google.Maps.FleetEngine.V1.ListVehiclesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListVehicles, null, options, request);
      }
      /// <summary>
      /// Returns a paginated list of vehicles associated with
      /// a provider that match the request options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.ListVehiclesResponse> ListVehiclesAsync(global::Google.Maps.FleetEngine.V1.ListVehiclesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListVehiclesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a paginated list of vehicles associated with
      /// a provider that match the request options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.ListVehiclesResponse> ListVehiclesAsync(global::Google.Maps.FleetEngine.V1.ListVehiclesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListVehicles, null, options, request);
      }
      /// <summary>
      /// Returns a list of vehicles that match the request options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse SearchVehicles(global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchVehicles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of vehicles that match the request options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse SearchVehicles(global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchVehicles, null, options, request);
      }
      /// <summary>
      /// Returns a list of vehicles that match the request options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse> SearchVehiclesAsync(global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchVehiclesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of vehicles that match the request options.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse> SearchVehiclesAsync(global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchVehicles, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override VehicleServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VehicleServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(VehicleServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateVehicle, serviceImpl.CreateVehicle)
          .AddMethod(__Method_GetVehicle, serviceImpl.GetVehicle)
          .AddMethod(__Method_UpdateVehicle, serviceImpl.UpdateVehicle)
          .AddMethod(__Method_UpdateVehicleAttributes, serviceImpl.UpdateVehicleAttributes)
          .AddMethod(__Method_ListVehicles, serviceImpl.ListVehicles)
          .AddMethod(__Method_SearchVehicles, serviceImpl.SearchVehicles).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VehicleServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Maps.FleetEngine.V1.CreateVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle>(serviceImpl.CreateVehicle));
      serviceBinder.AddMethod(__Method_GetVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Maps.FleetEngine.V1.GetVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle>(serviceImpl.GetVehicle));
      serviceBinder.AddMethod(__Method_UpdateVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Maps.FleetEngine.V1.UpdateVehicleRequest, global::Google.Maps.FleetEngine.V1.Vehicle>(serviceImpl.UpdateVehicle));
      serviceBinder.AddMethod(__Method_UpdateVehicleAttributes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesRequest, global::Google.Maps.FleetEngine.V1.UpdateVehicleAttributesResponse>(serviceImpl.UpdateVehicleAttributes));
      serviceBinder.AddMethod(__Method_ListVehicles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Maps.FleetEngine.V1.ListVehiclesRequest, global::Google.Maps.FleetEngine.V1.ListVehiclesResponse>(serviceImpl.ListVehicles));
      serviceBinder.AddMethod(__Method_SearchVehicles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Maps.FleetEngine.V1.SearchVehiclesRequest, global::Google.Maps.FleetEngine.V1.SearchVehiclesResponse>(serviceImpl.SearchVehicles));
    }

  }
}
#endregion
