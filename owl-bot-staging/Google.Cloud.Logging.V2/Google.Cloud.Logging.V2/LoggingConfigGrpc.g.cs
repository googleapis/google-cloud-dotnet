// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/logging/v2/logging_config.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Logging.V2 {
  /// <summary>
  /// Service for configuring sinks used to route log entries.
  /// </summary>
  public static partial class ConfigServiceV2
  {
    static readonly string __ServiceName = "google.logging.v2.ConfigServiceV2";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListBucketsRequest> __Marshaller_google_logging_v2_ListBucketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListBucketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListBucketsResponse> __Marshaller_google_logging_v2_ListBucketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListBucketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.GetBucketRequest> __Marshaller_google_logging_v2_GetBucketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.GetBucketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.LogBucket> __Marshaller_google_logging_v2_LogBucket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.LogBucket.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.CreateBucketRequest> __Marshaller_google_logging_v2_CreateBucketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.CreateBucketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.UpdateBucketRequest> __Marshaller_google_logging_v2_UpdateBucketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.UpdateBucketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.DeleteBucketRequest> __Marshaller_google_logging_v2_DeleteBucketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.DeleteBucketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.UndeleteBucketRequest> __Marshaller_google_logging_v2_UndeleteBucketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.UndeleteBucketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListViewsRequest> __Marshaller_google_logging_v2_ListViewsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListViewsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListViewsResponse> __Marshaller_google_logging_v2_ListViewsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListViewsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.GetViewRequest> __Marshaller_google_logging_v2_GetViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.GetViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.LogView> __Marshaller_google_logging_v2_LogView = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.LogView.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.CreateViewRequest> __Marshaller_google_logging_v2_CreateViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.CreateViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.UpdateViewRequest> __Marshaller_google_logging_v2_UpdateViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.UpdateViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.DeleteViewRequest> __Marshaller_google_logging_v2_DeleteViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.DeleteViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListSinksRequest> __Marshaller_google_logging_v2_ListSinksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListSinksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListSinksResponse> __Marshaller_google_logging_v2_ListSinksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListSinksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.GetSinkRequest> __Marshaller_google_logging_v2_GetSinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.GetSinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.LogSink> __Marshaller_google_logging_v2_LogSink = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.LogSink.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.CreateSinkRequest> __Marshaller_google_logging_v2_CreateSinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.CreateSinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.UpdateSinkRequest> __Marshaller_google_logging_v2_UpdateSinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.UpdateSinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.DeleteSinkRequest> __Marshaller_google_logging_v2_DeleteSinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.DeleteSinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.CreateLinkRequest> __Marshaller_google_logging_v2_CreateLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.CreateLinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.DeleteLinkRequest> __Marshaller_google_logging_v2_DeleteLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.DeleteLinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListLinksRequest> __Marshaller_google_logging_v2_ListLinksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListLinksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListLinksResponse> __Marshaller_google_logging_v2_ListLinksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListLinksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.GetLinkRequest> __Marshaller_google_logging_v2_GetLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.GetLinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.Link> __Marshaller_google_logging_v2_Link = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.Link.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListExclusionsRequest> __Marshaller_google_logging_v2_ListExclusionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListExclusionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.ListExclusionsResponse> __Marshaller_google_logging_v2_ListExclusionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.ListExclusionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.GetExclusionRequest> __Marshaller_google_logging_v2_GetExclusionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.GetExclusionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.LogExclusion> __Marshaller_google_logging_v2_LogExclusion = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.LogExclusion.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.CreateExclusionRequest> __Marshaller_google_logging_v2_CreateExclusionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.CreateExclusionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.UpdateExclusionRequest> __Marshaller_google_logging_v2_UpdateExclusionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.UpdateExclusionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.DeleteExclusionRequest> __Marshaller_google_logging_v2_DeleteExclusionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.DeleteExclusionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.GetCmekSettingsRequest> __Marshaller_google_logging_v2_GetCmekSettingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.GetCmekSettingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.CmekSettings> __Marshaller_google_logging_v2_CmekSettings = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.CmekSettings.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest> __Marshaller_google_logging_v2_UpdateCmekSettingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.GetSettingsRequest> __Marshaller_google_logging_v2_GetSettingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.GetSettingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.Settings> __Marshaller_google_logging_v2_Settings = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.Settings.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.UpdateSettingsRequest> __Marshaller_google_logging_v2_UpdateSettingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.UpdateSettingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Logging.V2.CopyLogEntriesRequest> __Marshaller_google_logging_v2_CopyLogEntriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Logging.V2.CopyLogEntriesRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.ListBucketsRequest, global::Google.Cloud.Logging.V2.ListBucketsResponse> __Method_ListBuckets = new grpc::Method<global::Google.Cloud.Logging.V2.ListBucketsRequest, global::Google.Cloud.Logging.V2.ListBucketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBuckets",
        __Marshaller_google_logging_v2_ListBucketsRequest,
        __Marshaller_google_logging_v2_ListBucketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.GetBucketRequest, global::Google.Cloud.Logging.V2.LogBucket> __Method_GetBucket = new grpc::Method<global::Google.Cloud.Logging.V2.GetBucketRequest, global::Google.Cloud.Logging.V2.LogBucket>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBucket",
        __Marshaller_google_logging_v2_GetBucketRequest,
        __Marshaller_google_logging_v2_LogBucket);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.CreateBucketRequest, global::Google.LongRunning.Operation> __Method_CreateBucketAsync = new grpc::Method<global::Google.Cloud.Logging.V2.CreateBucketRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBucketAsync",
        __Marshaller_google_logging_v2_CreateBucketRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UpdateBucketRequest, global::Google.LongRunning.Operation> __Method_UpdateBucketAsync = new grpc::Method<global::Google.Cloud.Logging.V2.UpdateBucketRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBucketAsync",
        __Marshaller_google_logging_v2_UpdateBucketRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.CreateBucketRequest, global::Google.Cloud.Logging.V2.LogBucket> __Method_CreateBucket = new grpc::Method<global::Google.Cloud.Logging.V2.CreateBucketRequest, global::Google.Cloud.Logging.V2.LogBucket>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBucket",
        __Marshaller_google_logging_v2_CreateBucketRequest,
        __Marshaller_google_logging_v2_LogBucket);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UpdateBucketRequest, global::Google.Cloud.Logging.V2.LogBucket> __Method_UpdateBucket = new grpc::Method<global::Google.Cloud.Logging.V2.UpdateBucketRequest, global::Google.Cloud.Logging.V2.LogBucket>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBucket",
        __Marshaller_google_logging_v2_UpdateBucketRequest,
        __Marshaller_google_logging_v2_LogBucket);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.DeleteBucketRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteBucket = new grpc::Method<global::Google.Cloud.Logging.V2.DeleteBucketRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBucket",
        __Marshaller_google_logging_v2_DeleteBucketRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UndeleteBucketRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UndeleteBucket = new grpc::Method<global::Google.Cloud.Logging.V2.UndeleteBucketRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteBucket",
        __Marshaller_google_logging_v2_UndeleteBucketRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.ListViewsRequest, global::Google.Cloud.Logging.V2.ListViewsResponse> __Method_ListViews = new grpc::Method<global::Google.Cloud.Logging.V2.ListViewsRequest, global::Google.Cloud.Logging.V2.ListViewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListViews",
        __Marshaller_google_logging_v2_ListViewsRequest,
        __Marshaller_google_logging_v2_ListViewsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.GetViewRequest, global::Google.Cloud.Logging.V2.LogView> __Method_GetView = new grpc::Method<global::Google.Cloud.Logging.V2.GetViewRequest, global::Google.Cloud.Logging.V2.LogView>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetView",
        __Marshaller_google_logging_v2_GetViewRequest,
        __Marshaller_google_logging_v2_LogView);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.CreateViewRequest, global::Google.Cloud.Logging.V2.LogView> __Method_CreateView = new grpc::Method<global::Google.Cloud.Logging.V2.CreateViewRequest, global::Google.Cloud.Logging.V2.LogView>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateView",
        __Marshaller_google_logging_v2_CreateViewRequest,
        __Marshaller_google_logging_v2_LogView);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UpdateViewRequest, global::Google.Cloud.Logging.V2.LogView> __Method_UpdateView = new grpc::Method<global::Google.Cloud.Logging.V2.UpdateViewRequest, global::Google.Cloud.Logging.V2.LogView>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateView",
        __Marshaller_google_logging_v2_UpdateViewRequest,
        __Marshaller_google_logging_v2_LogView);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.DeleteViewRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteView = new grpc::Method<global::Google.Cloud.Logging.V2.DeleteViewRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteView",
        __Marshaller_google_logging_v2_DeleteViewRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.ListSinksRequest, global::Google.Cloud.Logging.V2.ListSinksResponse> __Method_ListSinks = new grpc::Method<global::Google.Cloud.Logging.V2.ListSinksRequest, global::Google.Cloud.Logging.V2.ListSinksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSinks",
        __Marshaller_google_logging_v2_ListSinksRequest,
        __Marshaller_google_logging_v2_ListSinksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.GetSinkRequest, global::Google.Cloud.Logging.V2.LogSink> __Method_GetSink = new grpc::Method<global::Google.Cloud.Logging.V2.GetSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSink",
        __Marshaller_google_logging_v2_GetSinkRequest,
        __Marshaller_google_logging_v2_LogSink);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.CreateSinkRequest, global::Google.Cloud.Logging.V2.LogSink> __Method_CreateSink = new grpc::Method<global::Google.Cloud.Logging.V2.CreateSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSink",
        __Marshaller_google_logging_v2_CreateSinkRequest,
        __Marshaller_google_logging_v2_LogSink);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UpdateSinkRequest, global::Google.Cloud.Logging.V2.LogSink> __Method_UpdateSink = new grpc::Method<global::Google.Cloud.Logging.V2.UpdateSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSink",
        __Marshaller_google_logging_v2_UpdateSinkRequest,
        __Marshaller_google_logging_v2_LogSink);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSink = new grpc::Method<global::Google.Cloud.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSink",
        __Marshaller_google_logging_v2_DeleteSinkRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.CreateLinkRequest, global::Google.LongRunning.Operation> __Method_CreateLink = new grpc::Method<global::Google.Cloud.Logging.V2.CreateLinkRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateLink",
        __Marshaller_google_logging_v2_CreateLinkRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.DeleteLinkRequest, global::Google.LongRunning.Operation> __Method_DeleteLink = new grpc::Method<global::Google.Cloud.Logging.V2.DeleteLinkRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLink",
        __Marshaller_google_logging_v2_DeleteLinkRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.ListLinksRequest, global::Google.Cloud.Logging.V2.ListLinksResponse> __Method_ListLinks = new grpc::Method<global::Google.Cloud.Logging.V2.ListLinksRequest, global::Google.Cloud.Logging.V2.ListLinksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLinks",
        __Marshaller_google_logging_v2_ListLinksRequest,
        __Marshaller_google_logging_v2_ListLinksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.GetLinkRequest, global::Google.Cloud.Logging.V2.Link> __Method_GetLink = new grpc::Method<global::Google.Cloud.Logging.V2.GetLinkRequest, global::Google.Cloud.Logging.V2.Link>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLink",
        __Marshaller_google_logging_v2_GetLinkRequest,
        __Marshaller_google_logging_v2_Link);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.ListExclusionsRequest, global::Google.Cloud.Logging.V2.ListExclusionsResponse> __Method_ListExclusions = new grpc::Method<global::Google.Cloud.Logging.V2.ListExclusionsRequest, global::Google.Cloud.Logging.V2.ListExclusionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExclusions",
        __Marshaller_google_logging_v2_ListExclusionsRequest,
        __Marshaller_google_logging_v2_ListExclusionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.GetExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion> __Method_GetExclusion = new grpc::Method<global::Google.Cloud.Logging.V2.GetExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetExclusion",
        __Marshaller_google_logging_v2_GetExclusionRequest,
        __Marshaller_google_logging_v2_LogExclusion);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.CreateExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion> __Method_CreateExclusion = new grpc::Method<global::Google.Cloud.Logging.V2.CreateExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateExclusion",
        __Marshaller_google_logging_v2_CreateExclusionRequest,
        __Marshaller_google_logging_v2_LogExclusion);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UpdateExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion> __Method_UpdateExclusion = new grpc::Method<global::Google.Cloud.Logging.V2.UpdateExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateExclusion",
        __Marshaller_google_logging_v2_UpdateExclusionRequest,
        __Marshaller_google_logging_v2_LogExclusion);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.DeleteExclusionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteExclusion = new grpc::Method<global::Google.Cloud.Logging.V2.DeleteExclusionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteExclusion",
        __Marshaller_google_logging_v2_DeleteExclusionRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.GetCmekSettingsRequest, global::Google.Cloud.Logging.V2.CmekSettings> __Method_GetCmekSettings = new grpc::Method<global::Google.Cloud.Logging.V2.GetCmekSettingsRequest, global::Google.Cloud.Logging.V2.CmekSettings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCmekSettings",
        __Marshaller_google_logging_v2_GetCmekSettingsRequest,
        __Marshaller_google_logging_v2_CmekSettings);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest, global::Google.Cloud.Logging.V2.CmekSettings> __Method_UpdateCmekSettings = new grpc::Method<global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest, global::Google.Cloud.Logging.V2.CmekSettings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateCmekSettings",
        __Marshaller_google_logging_v2_UpdateCmekSettingsRequest,
        __Marshaller_google_logging_v2_CmekSettings);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.GetSettingsRequest, global::Google.Cloud.Logging.V2.Settings> __Method_GetSettings = new grpc::Method<global::Google.Cloud.Logging.V2.GetSettingsRequest, global::Google.Cloud.Logging.V2.Settings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSettings",
        __Marshaller_google_logging_v2_GetSettingsRequest,
        __Marshaller_google_logging_v2_Settings);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.UpdateSettingsRequest, global::Google.Cloud.Logging.V2.Settings> __Method_UpdateSettings = new grpc::Method<global::Google.Cloud.Logging.V2.UpdateSettingsRequest, global::Google.Cloud.Logging.V2.Settings>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSettings",
        __Marshaller_google_logging_v2_UpdateSettingsRequest,
        __Marshaller_google_logging_v2_Settings);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Logging.V2.CopyLogEntriesRequest, global::Google.LongRunning.Operation> __Method_CopyLogEntries = new grpc::Method<global::Google.Cloud.Logging.V2.CopyLogEntriesRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyLogEntries",
        __Marshaller_google_logging_v2_CopyLogEntriesRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Logging.V2.LoggingConfigReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ConfigServiceV2</summary>
    [grpc::BindServiceMethod(typeof(ConfigServiceV2), "BindService")]
    public abstract partial class ConfigServiceV2Base
    {
      /// <summary>
      /// Lists log buckets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.ListBucketsResponse> ListBuckets(global::Google.Cloud.Logging.V2.ListBucketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a log bucket.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogBucket> GetBucket(global::Google.Cloud.Logging.V2.GetBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a log bucket asynchronously that can be used to store log entries.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateBucketAsync(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a log bucket asynchronously.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateBucketAsync(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a log bucket that can be used to store log entries. After a bucket
      /// has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogBucket> CreateBucket(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a log bucket.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogBucket> UpdateBucket(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a log bucket.
      ///
      /// Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
      /// After 7 days, the bucket will be purged and all log entries in the bucket
      /// will be permanently deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBucket(global::Google.Cloud.Logging.V2.DeleteBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Undeletes a log bucket. A bucket that has been deleted can be undeleted
      /// within the grace period of 7 days.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UndeleteBucket(global::Google.Cloud.Logging.V2.UndeleteBucketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists views on a log bucket.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.ListViewsResponse> ListViews(global::Google.Cloud.Logging.V2.ListViewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a view on a log bucket..
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogView> GetView(global::Google.Cloud.Logging.V2.GetViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a view over log entries in a log bucket. A bucket may contain a
      /// maximum of 30 views.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogView> CreateView(global::Google.Cloud.Logging.V2.CreateViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a view on a log bucket. This method replaces the following fields
      /// in the existing view with values from the new view: `filter`.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can update the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogView> UpdateView(global::Google.Cloud.Logging.V2.UpdateViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a view on a log bucket.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can delete the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteView(global::Google.Cloud.Logging.V2.DeleteViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.ListSinksResponse> ListSinks(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogSink> GetSink(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a sink that exports specified log entries to a destination. The
      /// export of newly-ingested log entries begins immediately, unless the sink's
      /// `writer_identity` is not permitted to write to the destination. A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogSink> CreateSink(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a sink. This method replaces the following fields in the existing
      /// sink with values from the new sink: `destination`, and `filter`.
      ///
      /// The updated sink might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogSink> UpdateSink(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSink(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Asynchronously creates a linked dataset in BigQuery which makes it possible
      /// to use BigQuery to read the logs stored in the log bucket. A log bucket may
      /// currently only contain one link.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateLink(global::Google.Cloud.Logging.V2.CreateLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a link. This will also delete the corresponding BigQuery linked
      /// dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteLink(global::Google.Cloud.Logging.V2.DeleteLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists links.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.ListLinksResponse> ListLinks(global::Google.Cloud.Logging.V2.ListLinksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a link.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.Link> GetLink(global::Google.Cloud.Logging.V2.GetLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all the exclusions on the _Default sink in a parent resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.ListExclusionsResponse> ListExclusions(global::Google.Cloud.Logging.V2.ListExclusionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the description of an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogExclusion> GetExclusion(global::Google.Cloud.Logging.V2.GetExclusionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new exclusion in the _Default sink in a specified parent
      /// resource. Only log entries belonging to that resource can be excluded. You
      /// can have up to 10 exclusions in a resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogExclusion> CreateExclusion(global::Google.Cloud.Logging.V2.CreateExclusionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Changes one or more properties of an existing exclusion in the _Default
      /// sink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.LogExclusion> UpdateExclusion(global::Google.Cloud.Logging.V2.UpdateExclusionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteExclusion(global::Google.Cloud.Logging.V2.DeleteExclusionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the Logging CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can be configured for Google Cloud projects,
      /// folders, organizations and billing accounts. Once configured for an
      /// organization, it applies to all projects and folders in the Google Cloud
      /// organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.CmekSettings> GetCmekSettings(global::Google.Cloud.Logging.V2.GetCmekSettingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the Log Router CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can currently only be configured for Google
      /// Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.CmekSettings> UpdateCmekSettings(global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can be get for Google Cloud projects,
      /// folders, organizations and billing accounts. Currently it can only be
      /// configured for organizations. Once configured for an organization, it
      /// applies to all projects and folders in the Google Cloud organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.Settings> GetSettings(global::Google.Cloud.Logging.V2.GetSettingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can currently only be configured for
      /// Google Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled. 4) `location_id` is not supported by
      /// Logging. 5) `location_id` violate OrgPolicy.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Logging.V2.Settings> UpdateSettings(global::Google.Cloud.Logging.V2.UpdateSettingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Copies a set of log entries from a log bucket to a Cloud Storage bucket.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CopyLogEntries(global::Google.Cloud.Logging.V2.CopyLogEntriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ConfigServiceV2</summary>
    public partial class ConfigServiceV2Client : grpc::ClientBase<ConfigServiceV2Client>
    {
      /// <summary>Creates a new client for ConfigServiceV2</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ConfigServiceV2Client(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ConfigServiceV2 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ConfigServiceV2Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ConfigServiceV2Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ConfigServiceV2Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists log buckets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListBucketsResponse ListBuckets(global::Google.Cloud.Logging.V2.ListBucketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBuckets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists log buckets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListBucketsResponse ListBuckets(global::Google.Cloud.Logging.V2.ListBucketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBuckets, null, options, request);
      }
      /// <summary>
      /// Lists log buckets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListBucketsResponse> ListBucketsAsync(global::Google.Cloud.Logging.V2.ListBucketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBucketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists log buckets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListBucketsResponse> ListBucketsAsync(global::Google.Cloud.Logging.V2.ListBucketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBuckets, null, options, request);
      }
      /// <summary>
      /// Gets a log bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogBucket GetBucket(global::Google.Cloud.Logging.V2.GetBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBucket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a log bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogBucket GetBucket(global::Google.Cloud.Logging.V2.GetBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBucket, null, options, request);
      }
      /// <summary>
      /// Gets a log bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogBucket> GetBucketAsync(global::Google.Cloud.Logging.V2.GetBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBucketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a log bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogBucket> GetBucketAsync(global::Google.Cloud.Logging.V2.GetBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBucket, null, options, request);
      }
      /// <summary>
      /// Creates a log bucket asynchronously that can be used to store log entries.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateBucketAsync(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBucketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a log bucket asynchronously that can be used to store log entries.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateBucketAsync(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBucketAsync, null, options, request);
      }
      /// <summary>
      /// Creates a log bucket asynchronously that can be used to store log entries.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateBucketAsyncAsync(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBucketAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a log bucket asynchronously that can be used to store log entries.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateBucketAsyncAsync(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBucketAsync, null, options, request);
      }
      /// <summary>
      /// Updates a log bucket asynchronously.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateBucketAsync(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBucketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a log bucket asynchronously.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateBucketAsync(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBucketAsync, null, options, request);
      }
      /// <summary>
      /// Updates a log bucket asynchronously.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateBucketAsyncAsync(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBucketAsyncAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a log bucket asynchronously.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateBucketAsyncAsync(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBucketAsync, null, options, request);
      }
      /// <summary>
      /// Creates a log bucket that can be used to store log entries. After a bucket
      /// has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogBucket CreateBucket(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBucket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a log bucket that can be used to store log entries. After a bucket
      /// has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogBucket CreateBucket(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBucket, null, options, request);
      }
      /// <summary>
      /// Creates a log bucket that can be used to store log entries. After a bucket
      /// has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogBucket> CreateBucketAsync(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBucketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a log bucket that can be used to store log entries. After a bucket
      /// has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogBucket> CreateBucketAsync(global::Google.Cloud.Logging.V2.CreateBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBucket, null, options, request);
      }
      /// <summary>
      /// Updates a log bucket.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogBucket UpdateBucket(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBucket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a log bucket.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogBucket UpdateBucket(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBucket, null, options, request);
      }
      /// <summary>
      /// Updates a log bucket.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogBucket> UpdateBucketAsync(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBucketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a log bucket.
      ///
      /// If the bucket has a `lifecycle_state` of `DELETE_REQUESTED`, then
      /// `FAILED_PRECONDITION` will be returned.
      ///
      /// After a bucket has been created, the bucket's location cannot be changed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogBucket> UpdateBucketAsync(global::Google.Cloud.Logging.V2.UpdateBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBucket, null, options, request);
      }
      /// <summary>
      /// Deletes a log bucket.
      ///
      /// Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
      /// After 7 days, the bucket will be purged and all log entries in the bucket
      /// will be permanently deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBucket(global::Google.Cloud.Logging.V2.DeleteBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBucket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a log bucket.
      ///
      /// Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
      /// After 7 days, the bucket will be purged and all log entries in the bucket
      /// will be permanently deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBucket(global::Google.Cloud.Logging.V2.DeleteBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBucket, null, options, request);
      }
      /// <summary>
      /// Deletes a log bucket.
      ///
      /// Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
      /// After 7 days, the bucket will be purged and all log entries in the bucket
      /// will be permanently deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBucketAsync(global::Google.Cloud.Logging.V2.DeleteBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBucketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a log bucket.
      ///
      /// Changes the bucket's `lifecycle_state` to the `DELETE_REQUESTED` state.
      /// After 7 days, the bucket will be purged and all log entries in the bucket
      /// will be permanently deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBucketAsync(global::Google.Cloud.Logging.V2.DeleteBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBucket, null, options, request);
      }
      /// <summary>
      /// Undeletes a log bucket. A bucket that has been deleted can be undeleted
      /// within the grace period of 7 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UndeleteBucket(global::Google.Cloud.Logging.V2.UndeleteBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteBucket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeletes a log bucket. A bucket that has been deleted can be undeleted
      /// within the grace period of 7 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UndeleteBucket(global::Google.Cloud.Logging.V2.UndeleteBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteBucket, null, options, request);
      }
      /// <summary>
      /// Undeletes a log bucket. A bucket that has been deleted can be undeleted
      /// within the grace period of 7 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UndeleteBucketAsync(global::Google.Cloud.Logging.V2.UndeleteBucketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteBucketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Undeletes a log bucket. A bucket that has been deleted can be undeleted
      /// within the grace period of 7 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UndeleteBucketAsync(global::Google.Cloud.Logging.V2.UndeleteBucketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteBucket, null, options, request);
      }
      /// <summary>
      /// Lists views on a log bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListViewsResponse ListViews(global::Google.Cloud.Logging.V2.ListViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListViews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists views on a log bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListViewsResponse ListViews(global::Google.Cloud.Logging.V2.ListViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListViews, null, options, request);
      }
      /// <summary>
      /// Lists views on a log bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListViewsResponse> ListViewsAsync(global::Google.Cloud.Logging.V2.ListViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListViewsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists views on a log bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListViewsResponse> ListViewsAsync(global::Google.Cloud.Logging.V2.ListViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListViews, null, options, request);
      }
      /// <summary>
      /// Gets a view on a log bucket..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogView GetView(global::Google.Cloud.Logging.V2.GetViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a view on a log bucket..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogView GetView(global::Google.Cloud.Logging.V2.GetViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetView, null, options, request);
      }
      /// <summary>
      /// Gets a view on a log bucket..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogView> GetViewAsync(global::Google.Cloud.Logging.V2.GetViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a view on a log bucket..
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogView> GetViewAsync(global::Google.Cloud.Logging.V2.GetViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetView, null, options, request);
      }
      /// <summary>
      /// Creates a view over log entries in a log bucket. A bucket may contain a
      /// maximum of 30 views.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogView CreateView(global::Google.Cloud.Logging.V2.CreateViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a view over log entries in a log bucket. A bucket may contain a
      /// maximum of 30 views.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogView CreateView(global::Google.Cloud.Logging.V2.CreateViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateView, null, options, request);
      }
      /// <summary>
      /// Creates a view over log entries in a log bucket. A bucket may contain a
      /// maximum of 30 views.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogView> CreateViewAsync(global::Google.Cloud.Logging.V2.CreateViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a view over log entries in a log bucket. A bucket may contain a
      /// maximum of 30 views.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogView> CreateViewAsync(global::Google.Cloud.Logging.V2.CreateViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateView, null, options, request);
      }
      /// <summary>
      /// Updates a view on a log bucket. This method replaces the following fields
      /// in the existing view with values from the new view: `filter`.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can update the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogView UpdateView(global::Google.Cloud.Logging.V2.UpdateViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a view on a log bucket. This method replaces the following fields
      /// in the existing view with values from the new view: `filter`.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can update the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogView UpdateView(global::Google.Cloud.Logging.V2.UpdateViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateView, null, options, request);
      }
      /// <summary>
      /// Updates a view on a log bucket. This method replaces the following fields
      /// in the existing view with values from the new view: `filter`.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can update the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogView> UpdateViewAsync(global::Google.Cloud.Logging.V2.UpdateViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a view on a log bucket. This method replaces the following fields
      /// in the existing view with values from the new view: `filter`.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can update the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogView> UpdateViewAsync(global::Google.Cloud.Logging.V2.UpdateViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateView, null, options, request);
      }
      /// <summary>
      /// Deletes a view on a log bucket.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can delete the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteView(global::Google.Cloud.Logging.V2.DeleteViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a view on a log bucket.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can delete the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteView(global::Google.Cloud.Logging.V2.DeleteViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteView, null, options, request);
      }
      /// <summary>
      /// Deletes a view on a log bucket.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can delete the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteViewAsync(global::Google.Cloud.Logging.V2.DeleteViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a view on a log bucket.
      /// If an `UNAVAILABLE` error is returned, this indicates that system is not in
      /// a state where it can delete the view. If this occurs, please try again in a
      /// few minutes.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteViewAsync(global::Google.Cloud.Logging.V2.DeleteViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteView, null, options, request);
      }
      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListSinksResponse ListSinks(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSinks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListSinksResponse ListSinks(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSinks, null, options, request);
      }
      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSinksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists sinks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Cloud.Logging.V2.ListSinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSinks, null, options, request);
      }
      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogSink GetSink(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogSink GetSink(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSink, null, options, request);
      }
      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> GetSinkAsync(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> GetSinkAsync(global::Google.Cloud.Logging.V2.GetSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSink, null, options, request);
      }
      /// <summary>
      /// Creates a sink that exports specified log entries to a destination. The
      /// export of newly-ingested log entries begins immediately, unless the sink's
      /// `writer_identity` is not permitted to write to the destination. A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogSink CreateSink(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a sink that exports specified log entries to a destination. The
      /// export of newly-ingested log entries begins immediately, unless the sink's
      /// `writer_identity` is not permitted to write to the destination. A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogSink CreateSink(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSink, null, options, request);
      }
      /// <summary>
      /// Creates a sink that exports specified log entries to a destination. The
      /// export of newly-ingested log entries begins immediately, unless the sink's
      /// `writer_identity` is not permitted to write to the destination. A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> CreateSinkAsync(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a sink that exports specified log entries to a destination. The
      /// export of newly-ingested log entries begins immediately, unless the sink's
      /// `writer_identity` is not permitted to write to the destination. A sink can
      /// export log entries only from the resource owning the sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> CreateSinkAsync(global::Google.Cloud.Logging.V2.CreateSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSink, null, options, request);
      }
      /// <summary>
      /// Updates a sink. This method replaces the following fields in the existing
      /// sink with values from the new sink: `destination`, and `filter`.
      ///
      /// The updated sink might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogSink UpdateSink(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a sink. This method replaces the following fields in the existing
      /// sink with values from the new sink: `destination`, and `filter`.
      ///
      /// The updated sink might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogSink UpdateSink(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSink, null, options, request);
      }
      /// <summary>
      /// Updates a sink. This method replaces the following fields in the existing
      /// sink with values from the new sink: `destination`, and `filter`.
      ///
      /// The updated sink might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a sink. This method replaces the following fields in the existing
      /// sink with values from the new sink: `destination`, and `filter`.
      ///
      /// The updated sink might also have a new `writer_identity`; see the
      /// `unique_writer_identity` field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Cloud.Logging.V2.UpdateSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSink, null, options, request);
      }
      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSink, null, options, request);
      }
      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a sink. If the sink has a unique `writer_identity`, then that
      /// service account is also deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Cloud.Logging.V2.DeleteSinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSink, null, options, request);
      }
      /// <summary>
      /// Asynchronously creates a linked dataset in BigQuery which makes it possible
      /// to use BigQuery to read the logs stored in the log bucket. A log bucket may
      /// currently only contain one link.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateLink(global::Google.Cloud.Logging.V2.CreateLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Asynchronously creates a linked dataset in BigQuery which makes it possible
      /// to use BigQuery to read the logs stored in the log bucket. A log bucket may
      /// currently only contain one link.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateLink(global::Google.Cloud.Logging.V2.CreateLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateLink, null, options, request);
      }
      /// <summary>
      /// Asynchronously creates a linked dataset in BigQuery which makes it possible
      /// to use BigQuery to read the logs stored in the log bucket. A log bucket may
      /// currently only contain one link.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateLinkAsync(global::Google.Cloud.Logging.V2.CreateLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Asynchronously creates a linked dataset in BigQuery which makes it possible
      /// to use BigQuery to read the logs stored in the log bucket. A log bucket may
      /// currently only contain one link.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateLinkAsync(global::Google.Cloud.Logging.V2.CreateLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateLink, null, options, request);
      }
      /// <summary>
      /// Deletes a link. This will also delete the corresponding BigQuery linked
      /// dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteLink(global::Google.Cloud.Logging.V2.DeleteLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a link. This will also delete the corresponding BigQuery linked
      /// dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteLink(global::Google.Cloud.Logging.V2.DeleteLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLink, null, options, request);
      }
      /// <summary>
      /// Deletes a link. This will also delete the corresponding BigQuery linked
      /// dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteLinkAsync(global::Google.Cloud.Logging.V2.DeleteLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a link. This will also delete the corresponding BigQuery linked
      /// dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteLinkAsync(global::Google.Cloud.Logging.V2.DeleteLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLink, null, options, request);
      }
      /// <summary>
      /// Lists links.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListLinksResponse ListLinks(global::Google.Cloud.Logging.V2.ListLinksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLinks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists links.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListLinksResponse ListLinks(global::Google.Cloud.Logging.V2.ListLinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLinks, null, options, request);
      }
      /// <summary>
      /// Lists links.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListLinksResponse> ListLinksAsync(global::Google.Cloud.Logging.V2.ListLinksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLinksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists links.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListLinksResponse> ListLinksAsync(global::Google.Cloud.Logging.V2.ListLinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLinks, null, options, request);
      }
      /// <summary>
      /// Gets a link.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.Link GetLink(global::Google.Cloud.Logging.V2.GetLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a link.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.Link GetLink(global::Google.Cloud.Logging.V2.GetLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLink, null, options, request);
      }
      /// <summary>
      /// Gets a link.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.Link> GetLinkAsync(global::Google.Cloud.Logging.V2.GetLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a link.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.Link> GetLinkAsync(global::Google.Cloud.Logging.V2.GetLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLink, null, options, request);
      }
      /// <summary>
      /// Lists all the exclusions on the _Default sink in a parent resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListExclusionsResponse ListExclusions(global::Google.Cloud.Logging.V2.ListExclusionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExclusions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the exclusions on the _Default sink in a parent resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.ListExclusionsResponse ListExclusions(global::Google.Cloud.Logging.V2.ListExclusionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExclusions, null, options, request);
      }
      /// <summary>
      /// Lists all the exclusions on the _Default sink in a parent resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListExclusionsResponse> ListExclusionsAsync(global::Google.Cloud.Logging.V2.ListExclusionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExclusionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the exclusions on the _Default sink in a parent resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.ListExclusionsResponse> ListExclusionsAsync(global::Google.Cloud.Logging.V2.ListExclusionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExclusions, null, options, request);
      }
      /// <summary>
      /// Gets the description of an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogExclusion GetExclusion(global::Google.Cloud.Logging.V2.GetExclusionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExclusion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the description of an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogExclusion GetExclusion(global::Google.Cloud.Logging.V2.GetExclusionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetExclusion, null, options, request);
      }
      /// <summary>
      /// Gets the description of an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogExclusion> GetExclusionAsync(global::Google.Cloud.Logging.V2.GetExclusionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetExclusionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the description of an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogExclusion> GetExclusionAsync(global::Google.Cloud.Logging.V2.GetExclusionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetExclusion, null, options, request);
      }
      /// <summary>
      /// Creates a new exclusion in the _Default sink in a specified parent
      /// resource. Only log entries belonging to that resource can be excluded. You
      /// can have up to 10 exclusions in a resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogExclusion CreateExclusion(global::Google.Cloud.Logging.V2.CreateExclusionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateExclusion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new exclusion in the _Default sink in a specified parent
      /// resource. Only log entries belonging to that resource can be excluded. You
      /// can have up to 10 exclusions in a resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogExclusion CreateExclusion(global::Google.Cloud.Logging.V2.CreateExclusionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateExclusion, null, options, request);
      }
      /// <summary>
      /// Creates a new exclusion in the _Default sink in a specified parent
      /// resource. Only log entries belonging to that resource can be excluded. You
      /// can have up to 10 exclusions in a resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogExclusion> CreateExclusionAsync(global::Google.Cloud.Logging.V2.CreateExclusionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateExclusionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new exclusion in the _Default sink in a specified parent
      /// resource. Only log entries belonging to that resource can be excluded. You
      /// can have up to 10 exclusions in a resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogExclusion> CreateExclusionAsync(global::Google.Cloud.Logging.V2.CreateExclusionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateExclusion, null, options, request);
      }
      /// <summary>
      /// Changes one or more properties of an existing exclusion in the _Default
      /// sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogExclusion UpdateExclusion(global::Google.Cloud.Logging.V2.UpdateExclusionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateExclusion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes one or more properties of an existing exclusion in the _Default
      /// sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.LogExclusion UpdateExclusion(global::Google.Cloud.Logging.V2.UpdateExclusionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateExclusion, null, options, request);
      }
      /// <summary>
      /// Changes one or more properties of an existing exclusion in the _Default
      /// sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogExclusion> UpdateExclusionAsync(global::Google.Cloud.Logging.V2.UpdateExclusionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateExclusionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes one or more properties of an existing exclusion in the _Default
      /// sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.LogExclusion> UpdateExclusionAsync(global::Google.Cloud.Logging.V2.UpdateExclusionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateExclusion, null, options, request);
      }
      /// <summary>
      /// Deletes an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteExclusion(global::Google.Cloud.Logging.V2.DeleteExclusionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteExclusion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteExclusion(global::Google.Cloud.Logging.V2.DeleteExclusionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteExclusion, null, options, request);
      }
      /// <summary>
      /// Deletes an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteExclusionAsync(global::Google.Cloud.Logging.V2.DeleteExclusionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteExclusionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an exclusion in the _Default sink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteExclusionAsync(global::Google.Cloud.Logging.V2.DeleteExclusionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteExclusion, null, options, request);
      }
      /// <summary>
      /// Gets the Logging CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can be configured for Google Cloud projects,
      /// folders, organizations and billing accounts. Once configured for an
      /// organization, it applies to all projects and folders in the Google Cloud
      /// organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.CmekSettings GetCmekSettings(global::Google.Cloud.Logging.V2.GetCmekSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCmekSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the Logging CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can be configured for Google Cloud projects,
      /// folders, organizations and billing accounts. Once configured for an
      /// organization, it applies to all projects and folders in the Google Cloud
      /// organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.CmekSettings GetCmekSettings(global::Google.Cloud.Logging.V2.GetCmekSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCmekSettings, null, options, request);
      }
      /// <summary>
      /// Gets the Logging CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can be configured for Google Cloud projects,
      /// folders, organizations and billing accounts. Once configured for an
      /// organization, it applies to all projects and folders in the Google Cloud
      /// organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.CmekSettings> GetCmekSettingsAsync(global::Google.Cloud.Logging.V2.GetCmekSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCmekSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the Logging CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can be configured for Google Cloud projects,
      /// folders, organizations and billing accounts. Once configured for an
      /// organization, it applies to all projects and folders in the Google Cloud
      /// organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.CmekSettings> GetCmekSettingsAsync(global::Google.Cloud.Logging.V2.GetCmekSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCmekSettings, null, options, request);
      }
      /// <summary>
      /// Updates the Log Router CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can currently only be configured for Google
      /// Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.CmekSettings UpdateCmekSettings(global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCmekSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Log Router CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can currently only be configured for Google
      /// Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.CmekSettings UpdateCmekSettings(global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateCmekSettings, null, options, request);
      }
      /// <summary>
      /// Updates the Log Router CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can currently only be configured for Google
      /// Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.CmekSettings> UpdateCmekSettingsAsync(global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateCmekSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Log Router CMEK settings for the given resource.
      ///
      /// Note: CMEK for the Log Router can currently only be configured for Google
      /// Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateCmekSettings][google.logging.v2.ConfigServiceV2.UpdateCmekSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.CmekSettings> UpdateCmekSettingsAsync(global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateCmekSettings, null, options, request);
      }
      /// <summary>
      /// Gets the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can be get for Google Cloud projects,
      /// folders, organizations and billing accounts. Currently it can only be
      /// configured for organizations. Once configured for an organization, it
      /// applies to all projects and folders in the Google Cloud organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.Settings GetSettings(global::Google.Cloud.Logging.V2.GetSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can be get for Google Cloud projects,
      /// folders, organizations and billing accounts. Currently it can only be
      /// configured for organizations. Once configured for an organization, it
      /// applies to all projects and folders in the Google Cloud organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.Settings GetSettings(global::Google.Cloud.Logging.V2.GetSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSettings, null, options, request);
      }
      /// <summary>
      /// Gets the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can be get for Google Cloud projects,
      /// folders, organizations and billing accounts. Currently it can only be
      /// configured for organizations. Once configured for an organization, it
      /// applies to all projects and folders in the Google Cloud organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.Settings> GetSettingsAsync(global::Google.Cloud.Logging.V2.GetSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can be get for Google Cloud projects,
      /// folders, organizations and billing accounts. Currently it can only be
      /// configured for organizations. Once configured for an organization, it
      /// applies to all projects and folders in the Google Cloud organization.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.Settings> GetSettingsAsync(global::Google.Cloud.Logging.V2.GetSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSettings, null, options, request);
      }
      /// <summary>
      /// Updates the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can currently only be configured for
      /// Google Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled. 4) `location_id` is not supported by
      /// Logging. 5) `location_id` violate OrgPolicy.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.Settings UpdateSettings(global::Google.Cloud.Logging.V2.UpdateSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSettings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can currently only be configured for
      /// Google Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled. 4) `location_id` is not supported by
      /// Logging. 5) `location_id` violate OrgPolicy.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Logging.V2.Settings UpdateSettings(global::Google.Cloud.Logging.V2.UpdateSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSettings, null, options, request);
      }
      /// <summary>
      /// Updates the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can currently only be configured for
      /// Google Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled. 4) `location_id` is not supported by
      /// Logging. 5) `location_id` violate OrgPolicy.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.Settings> UpdateSettingsAsync(global::Google.Cloud.Logging.V2.UpdateSettingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSettingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the Log Router settings for the given resource.
      ///
      /// Note: Settings for the Log Router can currently only be configured for
      /// Google Cloud organizations. Once configured, it applies to all projects and
      /// folders in the Google Cloud organization.
      ///
      /// [UpdateSettings][google.logging.v2.ConfigServiceV2.UpdateSettings]
      /// will fail if 1) `kms_key_name` is invalid, or 2) the associated service
      /// account does not have the required
      /// `roles/cloudkms.cryptoKeyEncrypterDecrypter` role assigned for the key, or
      /// 3) access to the key is disabled. 4) `location_id` is not supported by
      /// Logging. 5) `location_id` violate OrgPolicy.
      ///
      /// See [Enabling CMEK for Log
      /// Router](https://cloud.google.com/logging/docs/routing/managed-encryption)
      /// for more information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Logging.V2.Settings> UpdateSettingsAsync(global::Google.Cloud.Logging.V2.UpdateSettingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSettings, null, options, request);
      }
      /// <summary>
      /// Copies a set of log entries from a log bucket to a Cloud Storage bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CopyLogEntries(global::Google.Cloud.Logging.V2.CopyLogEntriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyLogEntries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies a set of log entries from a log bucket to a Cloud Storage bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CopyLogEntries(global::Google.Cloud.Logging.V2.CopyLogEntriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyLogEntries, null, options, request);
      }
      /// <summary>
      /// Copies a set of log entries from a log bucket to a Cloud Storage bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CopyLogEntriesAsync(global::Google.Cloud.Logging.V2.CopyLogEntriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyLogEntriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copies a set of log entries from a log bucket to a Cloud Storage bucket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CopyLogEntriesAsync(global::Google.Cloud.Logging.V2.CopyLogEntriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyLogEntries, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ConfigServiceV2Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new ConfigServiceV2Client(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ConfigServiceV2Base serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListBuckets, serviceImpl.ListBuckets)
          .AddMethod(__Method_GetBucket, serviceImpl.GetBucket)
          .AddMethod(__Method_CreateBucketAsync, serviceImpl.CreateBucketAsync)
          .AddMethod(__Method_UpdateBucketAsync, serviceImpl.UpdateBucketAsync)
          .AddMethod(__Method_CreateBucket, serviceImpl.CreateBucket)
          .AddMethod(__Method_UpdateBucket, serviceImpl.UpdateBucket)
          .AddMethod(__Method_DeleteBucket, serviceImpl.DeleteBucket)
          .AddMethod(__Method_UndeleteBucket, serviceImpl.UndeleteBucket)
          .AddMethod(__Method_ListViews, serviceImpl.ListViews)
          .AddMethod(__Method_GetView, serviceImpl.GetView)
          .AddMethod(__Method_CreateView, serviceImpl.CreateView)
          .AddMethod(__Method_UpdateView, serviceImpl.UpdateView)
          .AddMethod(__Method_DeleteView, serviceImpl.DeleteView)
          .AddMethod(__Method_ListSinks, serviceImpl.ListSinks)
          .AddMethod(__Method_GetSink, serviceImpl.GetSink)
          .AddMethod(__Method_CreateSink, serviceImpl.CreateSink)
          .AddMethod(__Method_UpdateSink, serviceImpl.UpdateSink)
          .AddMethod(__Method_DeleteSink, serviceImpl.DeleteSink)
          .AddMethod(__Method_CreateLink, serviceImpl.CreateLink)
          .AddMethod(__Method_DeleteLink, serviceImpl.DeleteLink)
          .AddMethod(__Method_ListLinks, serviceImpl.ListLinks)
          .AddMethod(__Method_GetLink, serviceImpl.GetLink)
          .AddMethod(__Method_ListExclusions, serviceImpl.ListExclusions)
          .AddMethod(__Method_GetExclusion, serviceImpl.GetExclusion)
          .AddMethod(__Method_CreateExclusion, serviceImpl.CreateExclusion)
          .AddMethod(__Method_UpdateExclusion, serviceImpl.UpdateExclusion)
          .AddMethod(__Method_DeleteExclusion, serviceImpl.DeleteExclusion)
          .AddMethod(__Method_GetCmekSettings, serviceImpl.GetCmekSettings)
          .AddMethod(__Method_UpdateCmekSettings, serviceImpl.UpdateCmekSettings)
          .AddMethod(__Method_GetSettings, serviceImpl.GetSettings)
          .AddMethod(__Method_UpdateSettings, serviceImpl.UpdateSettings)
          .AddMethod(__Method_CopyLogEntries, serviceImpl.CopyLogEntries).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ConfigServiceV2Base serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListBuckets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.ListBucketsRequest, global::Google.Cloud.Logging.V2.ListBucketsResponse>(serviceImpl.ListBuckets));
      serviceBinder.AddMethod(__Method_GetBucket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.GetBucketRequest, global::Google.Cloud.Logging.V2.LogBucket>(serviceImpl.GetBucket));
      serviceBinder.AddMethod(__Method_CreateBucketAsync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.CreateBucketRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateBucketAsync));
      serviceBinder.AddMethod(__Method_UpdateBucketAsync, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.UpdateBucketRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateBucketAsync));
      serviceBinder.AddMethod(__Method_CreateBucket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.CreateBucketRequest, global::Google.Cloud.Logging.V2.LogBucket>(serviceImpl.CreateBucket));
      serviceBinder.AddMethod(__Method_UpdateBucket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.UpdateBucketRequest, global::Google.Cloud.Logging.V2.LogBucket>(serviceImpl.UpdateBucket));
      serviceBinder.AddMethod(__Method_DeleteBucket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.DeleteBucketRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteBucket));
      serviceBinder.AddMethod(__Method_UndeleteBucket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.UndeleteBucketRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.UndeleteBucket));
      serviceBinder.AddMethod(__Method_ListViews, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.ListViewsRequest, global::Google.Cloud.Logging.V2.ListViewsResponse>(serviceImpl.ListViews));
      serviceBinder.AddMethod(__Method_GetView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.GetViewRequest, global::Google.Cloud.Logging.V2.LogView>(serviceImpl.GetView));
      serviceBinder.AddMethod(__Method_CreateView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.CreateViewRequest, global::Google.Cloud.Logging.V2.LogView>(serviceImpl.CreateView));
      serviceBinder.AddMethod(__Method_UpdateView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.UpdateViewRequest, global::Google.Cloud.Logging.V2.LogView>(serviceImpl.UpdateView));
      serviceBinder.AddMethod(__Method_DeleteView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.DeleteViewRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteView));
      serviceBinder.AddMethod(__Method_ListSinks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.ListSinksRequest, global::Google.Cloud.Logging.V2.ListSinksResponse>(serviceImpl.ListSinks));
      serviceBinder.AddMethod(__Method_GetSink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.GetSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(serviceImpl.GetSink));
      serviceBinder.AddMethod(__Method_CreateSink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.CreateSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(serviceImpl.CreateSink));
      serviceBinder.AddMethod(__Method_UpdateSink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.UpdateSinkRequest, global::Google.Cloud.Logging.V2.LogSink>(serviceImpl.UpdateSink));
      serviceBinder.AddMethod(__Method_DeleteSink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteSink));
      serviceBinder.AddMethod(__Method_CreateLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.CreateLinkRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateLink));
      serviceBinder.AddMethod(__Method_DeleteLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.DeleteLinkRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteLink));
      serviceBinder.AddMethod(__Method_ListLinks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.ListLinksRequest, global::Google.Cloud.Logging.V2.ListLinksResponse>(serviceImpl.ListLinks));
      serviceBinder.AddMethod(__Method_GetLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.GetLinkRequest, global::Google.Cloud.Logging.V2.Link>(serviceImpl.GetLink));
      serviceBinder.AddMethod(__Method_ListExclusions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.ListExclusionsRequest, global::Google.Cloud.Logging.V2.ListExclusionsResponse>(serviceImpl.ListExclusions));
      serviceBinder.AddMethod(__Method_GetExclusion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.GetExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion>(serviceImpl.GetExclusion));
      serviceBinder.AddMethod(__Method_CreateExclusion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.CreateExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion>(serviceImpl.CreateExclusion));
      serviceBinder.AddMethod(__Method_UpdateExclusion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.UpdateExclusionRequest, global::Google.Cloud.Logging.V2.LogExclusion>(serviceImpl.UpdateExclusion));
      serviceBinder.AddMethod(__Method_DeleteExclusion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.DeleteExclusionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteExclusion));
      serviceBinder.AddMethod(__Method_GetCmekSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.GetCmekSettingsRequest, global::Google.Cloud.Logging.V2.CmekSettings>(serviceImpl.GetCmekSettings));
      serviceBinder.AddMethod(__Method_UpdateCmekSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.UpdateCmekSettingsRequest, global::Google.Cloud.Logging.V2.CmekSettings>(serviceImpl.UpdateCmekSettings));
      serviceBinder.AddMethod(__Method_GetSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.GetSettingsRequest, global::Google.Cloud.Logging.V2.Settings>(serviceImpl.GetSettings));
      serviceBinder.AddMethod(__Method_UpdateSettings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.UpdateSettingsRequest, global::Google.Cloud.Logging.V2.Settings>(serviceImpl.UpdateSettings));
      serviceBinder.AddMethod(__Method_CopyLogEntries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Logging.V2.CopyLogEntriesRequest, global::Google.LongRunning.Operation>(serviceImpl.CopyLogEntries));
    }

  }
}
#endregion
