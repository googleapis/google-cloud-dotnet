// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/privilegedaccessmanager/v1/privilegedaccessmanager.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.PrivilegedAccessManager.V1 {
  /// <summary>
  /// This API allows customers to manage temporary, request based privileged
  /// access to their resources.
  ///
  /// It defines the following resource model:
  ///
  /// * A collection of `Entitlement` resources. An entitlement allows configuring
  ///   (among other things):
  ///
  ///   * Some kind of privileged access that users can request.
  ///   * A set of users called _requesters_ who can request this access.
  ///   * A maximum duration for which the access can be requested.
  ///   * An optional approval workflow which must be satisfied before access is
  ///     granted.
  ///
  /// * A collection of `Grant` resources. A grant is a request by a requester to
  ///   get the privileged access specified in an entitlement for some duration.
  ///
  ///   After the approval workflow as specified in the entitlement is satisfied,
  ///   the specified access is given to the requester. The access is automatically
  ///   taken back after the requested duration is over.
  /// </summary>
  public static partial class PrivilegedAccessManager
  {
    static readonly string __ServiceName = "google.cloud.privilegedaccessmanager.v1.PrivilegedAccessManager";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_CheckOnboardingStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse> __Marshaller_google_cloud_privilegedaccessmanager_v1_CheckOnboardingStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_ListEntitlementsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse> __Marshaller_google_cloud_privilegedaccessmanager_v1_ListEntitlementsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_SearchEntitlementsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse> __Marshaller_google_cloud_privilegedaccessmanager_v1_SearchEntitlementsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_GetEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement> __Marshaller_google_cloud_privilegedaccessmanager_v1_Entitlement = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_CreateEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_DeleteEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_UpdateEntitlementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_ListGrantsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse> __Marshaller_google_cloud_privilegedaccessmanager_v1_ListGrantsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_SearchGrantsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse> __Marshaller_google_cloud_privilegedaccessmanager_v1_SearchGrantsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_GetGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> __Marshaller_google_cloud_privilegedaccessmanager_v1_Grant = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.Grant.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_CreateGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_ApproveGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_DenyGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest> __Marshaller_google_cloud_privilegedaccessmanager_v1_RevokeGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest, global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse> __Method_CheckOnboardingStatus = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest, global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckOnboardingStatus",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_CheckOnboardingStatusRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_CheckOnboardingStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse> __Method_ListEntitlements = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListEntitlements",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_ListEntitlementsRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_ListEntitlementsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse> __Method_SearchEntitlements = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchEntitlements",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_SearchEntitlementsRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_SearchEntitlementsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement> __Method_GetEntitlement = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEntitlement",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_GetEntitlementRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_Entitlement);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest, global::Google.LongRunning.Operation> __Method_CreateEntitlement = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateEntitlement",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_CreateEntitlementRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest, global::Google.LongRunning.Operation> __Method_DeleteEntitlement = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteEntitlement",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_DeleteEntitlementRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest, global::Google.LongRunning.Operation> __Method_UpdateEntitlement = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEntitlement",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_UpdateEntitlementRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse> __Method_ListGrants = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListGrants",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_ListGrantsRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_ListGrantsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse> __Method_SearchGrants = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchGrants",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_SearchGrantsRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_SearchGrantsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant> __Method_GetGrant = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGrant",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_GetGrantRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_Grant);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant> __Method_CreateGrant = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGrant",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_CreateGrantRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_Grant);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant> __Method_ApproveGrant = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ApproveGrant",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_ApproveGrantRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_Grant);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant> __Method_DenyGrant = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DenyGrant",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_DenyGrantRequest,
        __Marshaller_google_cloud_privilegedaccessmanager_v1_Grant);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest, global::Google.LongRunning.Operation> __Method_RevokeGrant = new grpc::Method<global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RevokeGrant",
        __Marshaller_google_cloud_privilegedaccessmanager_v1_RevokeGrantRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.PrivilegedAccessManager.V1.PrivilegedaccessmanagerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PrivilegedAccessManager</summary>
    [grpc::BindServiceMethod(typeof(PrivilegedAccessManager), "BindService")]
    public abstract partial class PrivilegedAccessManagerBase
    {
      /// <summary>
      /// `CheckOnboardingStatus` reports the onboarding status for a
      /// project/folder/organization. Any findings reported by this API need to be
      /// fixed before PAM can be used on the resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse> CheckOnboardingStatus(global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists entitlements in a given project/folder/organization and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse> ListEntitlements(global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `SearchEntitlements` returns entitlements on which the caller has the
      /// specified access.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse> SearchEntitlements(global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single entitlement.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement> GetEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new entitlement in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single entitlement. This method can only be called when there
      /// are no in-progress (`ACTIVE`/`ACTIVATING`/`REVOKING`) grants under the
      /// entitlement.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the entitlement specified in the request. Updated fields in the
      /// entitlement need to be specified in an update mask. The changes made to an
      /// entitlement are applicable only on future grants of the entitlement.
      /// However, if new approvers are added or existing approvers are removed from
      /// the approval workflow, the changes are effective on existing grants.
      ///
      /// The following fields are not supported for updates:
      ///
      ///  * All immutable fields
      ///  * Entitlement name
      ///  * Resource name
      ///  * Resource type
      ///  * Adding an approval workflow in an entitlement which previously had no
      ///    approval workflow.
      ///  * Deleting the approval workflow from an entitlement.
      ///  * Adding or deleting a step in the approval workflow (only one step is
      ///    supported)
      ///
      /// Note that updates are allowed on the list of approvers in an approval
      /// workflow step.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists grants for a given entitlement.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse> ListGrants(global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `SearchGrants` returns grants that are related to the calling user in the
      /// specified way.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse> SearchGrants(global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get details of a single grant.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> GetGrant(global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new grant in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> CreateGrant(global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `ApproveGrant` is used to approve a grant. This method can only be called
      /// on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
      /// be undone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> ApproveGrant(global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `DenyGrant` is used to deny a grant. This method can only be called on a
      /// grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
      /// undone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> DenyGrant(global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `RevokeGrant` is used to immediately revoke access for a grant. This method
      /// can be called when the grant is in a non-terminal state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RevokeGrant(global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PrivilegedAccessManager</summary>
    public partial class PrivilegedAccessManagerClient : grpc::ClientBase<PrivilegedAccessManagerClient>
    {
      /// <summary>Creates a new client for PrivilegedAccessManager</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PrivilegedAccessManagerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PrivilegedAccessManager that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PrivilegedAccessManagerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PrivilegedAccessManagerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PrivilegedAccessManagerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// `CheckOnboardingStatus` reports the onboarding status for a
      /// project/folder/organization. Any findings reported by this API need to be
      /// fixed before PAM can be used on the resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse CheckOnboardingStatus(global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckOnboardingStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `CheckOnboardingStatus` reports the onboarding status for a
      /// project/folder/organization. Any findings reported by this API need to be
      /// fixed before PAM can be used on the resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse CheckOnboardingStatus(global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckOnboardingStatus, null, options, request);
      }
      /// <summary>
      /// `CheckOnboardingStatus` reports the onboarding status for a
      /// project/folder/organization. Any findings reported by this API need to be
      /// fixed before PAM can be used on the resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse> CheckOnboardingStatusAsync(global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckOnboardingStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `CheckOnboardingStatus` reports the onboarding status for a
      /// project/folder/organization. Any findings reported by this API need to be
      /// fixed before PAM can be used on the resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse> CheckOnboardingStatusAsync(global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckOnboardingStatus, null, options, request);
      }
      /// <summary>
      /// Lists entitlements in a given project/folder/organization and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse ListEntitlements(global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEntitlements(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists entitlements in a given project/folder/organization and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse ListEntitlements(global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListEntitlements, null, options, request);
      }
      /// <summary>
      /// Lists entitlements in a given project/folder/organization and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse> ListEntitlementsAsync(global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListEntitlementsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists entitlements in a given project/folder/organization and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse> ListEntitlementsAsync(global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListEntitlements, null, options, request);
      }
      /// <summary>
      /// `SearchEntitlements` returns entitlements on which the caller has the
      /// specified access.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse SearchEntitlements(global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchEntitlements(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `SearchEntitlements` returns entitlements on which the caller has the
      /// specified access.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse SearchEntitlements(global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchEntitlements, null, options, request);
      }
      /// <summary>
      /// `SearchEntitlements` returns entitlements on which the caller has the
      /// specified access.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse> SearchEntitlementsAsync(global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchEntitlementsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `SearchEntitlements` returns entitlements on which the caller has the
      /// specified access.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse> SearchEntitlementsAsync(global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchEntitlements, null, options, request);
      }
      /// <summary>
      /// Gets details of a single entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement GetEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement GetEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEntitlement, null, options, request);
      }
      /// <summary>
      /// Gets details of a single entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement> GetEntitlementAsync(global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement> GetEntitlementAsync(global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEntitlement, null, options, request);
      }
      /// <summary>
      /// Creates a new entitlement in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new entitlement in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateEntitlement, null, options, request);
      }
      /// <summary>
      /// Creates a new entitlement in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateEntitlementAsync(global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new entitlement in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateEntitlementAsync(global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateEntitlement, null, options, request);
      }
      /// <summary>
      /// Deletes a single entitlement. This method can only be called when there
      /// are no in-progress (`ACTIVE`/`ACTIVATING`/`REVOKING`) grants under the
      /// entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single entitlement. This method can only be called when there
      /// are no in-progress (`ACTIVE`/`ACTIVATING`/`REVOKING`) grants under the
      /// entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteEntitlement, null, options, request);
      }
      /// <summary>
      /// Deletes a single entitlement. This method can only be called when there
      /// are no in-progress (`ACTIVE`/`ACTIVATING`/`REVOKING`) grants under the
      /// entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteEntitlementAsync(global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single entitlement. This method can only be called when there
      /// are no in-progress (`ACTIVE`/`ACTIVATING`/`REVOKING`) grants under the
      /// entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteEntitlementAsync(global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteEntitlement, null, options, request);
      }
      /// <summary>
      /// Updates the entitlement specified in the request. Updated fields in the
      /// entitlement need to be specified in an update mask. The changes made to an
      /// entitlement are applicable only on future grants of the entitlement.
      /// However, if new approvers are added or existing approvers are removed from
      /// the approval workflow, the changes are effective on existing grants.
      ///
      /// The following fields are not supported for updates:
      ///
      ///  * All immutable fields
      ///  * Entitlement name
      ///  * Resource name
      ///  * Resource type
      ///  * Adding an approval workflow in an entitlement which previously had no
      ///    approval workflow.
      ///  * Deleting the approval workflow from an entitlement.
      ///  * Adding or deleting a step in the approval workflow (only one step is
      ///    supported)
      ///
      /// Note that updates are allowed on the list of approvers in an approval
      /// workflow step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEntitlement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the entitlement specified in the request. Updated fields in the
      /// entitlement need to be specified in an update mask. The changes made to an
      /// entitlement are applicable only on future grants of the entitlement.
      /// However, if new approvers are added or existing approvers are removed from
      /// the approval workflow, the changes are effective on existing grants.
      ///
      /// The following fields are not supported for updates:
      ///
      ///  * All immutable fields
      ///  * Entitlement name
      ///  * Resource name
      ///  * Resource type
      ///  * Adding an approval workflow in an entitlement which previously had no
      ///    approval workflow.
      ///  * Deleting the approval workflow from an entitlement.
      ///  * Adding or deleting a step in the approval workflow (only one step is
      ///    supported)
      ///
      /// Note that updates are allowed on the list of approvers in an approval
      /// workflow step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateEntitlement(global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEntitlement, null, options, request);
      }
      /// <summary>
      /// Updates the entitlement specified in the request. Updated fields in the
      /// entitlement need to be specified in an update mask. The changes made to an
      /// entitlement are applicable only on future grants of the entitlement.
      /// However, if new approvers are added or existing approvers are removed from
      /// the approval workflow, the changes are effective on existing grants.
      ///
      /// The following fields are not supported for updates:
      ///
      ///  * All immutable fields
      ///  * Entitlement name
      ///  * Resource name
      ///  * Resource type
      ///  * Adding an approval workflow in an entitlement which previously had no
      ///    approval workflow.
      ///  * Deleting the approval workflow from an entitlement.
      ///  * Adding or deleting a step in the approval workflow (only one step is
      ///    supported)
      ///
      /// Note that updates are allowed on the list of approvers in an approval
      /// workflow step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateEntitlementAsync(global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEntitlementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the entitlement specified in the request. Updated fields in the
      /// entitlement need to be specified in an update mask. The changes made to an
      /// entitlement are applicable only on future grants of the entitlement.
      /// However, if new approvers are added or existing approvers are removed from
      /// the approval workflow, the changes are effective on existing grants.
      ///
      /// The following fields are not supported for updates:
      ///
      ///  * All immutable fields
      ///  * Entitlement name
      ///  * Resource name
      ///  * Resource type
      ///  * Adding an approval workflow in an entitlement which previously had no
      ///    approval workflow.
      ///  * Deleting the approval workflow from an entitlement.
      ///  * Adding or deleting a step in the approval workflow (only one step is
      ///    supported)
      ///
      /// Note that updates are allowed on the list of approvers in an approval
      /// workflow step.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateEntitlementAsync(global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEntitlement, null, options, request);
      }
      /// <summary>
      /// Lists grants for a given entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse ListGrants(global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGrants(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists grants for a given entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse ListGrants(global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListGrants, null, options, request);
      }
      /// <summary>
      /// Lists grants for a given entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse> ListGrantsAsync(global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGrantsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists grants for a given entitlement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse> ListGrantsAsync(global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListGrants, null, options, request);
      }
      /// <summary>
      /// `SearchGrants` returns grants that are related to the calling user in the
      /// specified way.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse SearchGrants(global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGrants(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `SearchGrants` returns grants that are related to the calling user in the
      /// specified way.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse SearchGrants(global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchGrants, null, options, request);
      }
      /// <summary>
      /// `SearchGrants` returns grants that are related to the calling user in the
      /// specified way.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse> SearchGrantsAsync(global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchGrantsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `SearchGrants` returns grants that are related to the calling user in the
      /// specified way.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse> SearchGrantsAsync(global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchGrants, null, options, request);
      }
      /// <summary>
      /// Get details of a single grant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Grant GetGrant(global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single grant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Grant GetGrant(global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGrant, null, options, request);
      }
      /// <summary>
      /// Get details of a single grant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> GetGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get details of a single grant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> GetGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGrant, null, options, request);
      }
      /// <summary>
      /// Creates a new grant in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Grant CreateGrant(global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new grant in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Grant CreateGrant(global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGrant, null, options, request);
      }
      /// <summary>
      /// Creates a new grant in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> CreateGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new grant in a given project/folder/organization and
      /// location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> CreateGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGrant, null, options, request);
      }
      /// <summary>
      /// `ApproveGrant` is used to approve a grant. This method can only be called
      /// on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
      /// be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Grant ApproveGrant(global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApproveGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `ApproveGrant` is used to approve a grant. This method can only be called
      /// on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
      /// be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Grant ApproveGrant(global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ApproveGrant, null, options, request);
      }
      /// <summary>
      /// `ApproveGrant` is used to approve a grant. This method can only be called
      /// on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
      /// be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> ApproveGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApproveGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `ApproveGrant` is used to approve a grant. This method can only be called
      /// on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
      /// be undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> ApproveGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ApproveGrant, null, options, request);
      }
      /// <summary>
      /// `DenyGrant` is used to deny a grant. This method can only be called on a
      /// grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
      /// undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Grant DenyGrant(global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenyGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `DenyGrant` is used to deny a grant. This method can only be called on a
      /// grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
      /// undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.PrivilegedAccessManager.V1.Grant DenyGrant(global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DenyGrant, null, options, request);
      }
      /// <summary>
      /// `DenyGrant` is used to deny a grant. This method can only be called on a
      /// grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
      /// undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> DenyGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenyGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `DenyGrant` is used to deny a grant. This method can only be called on a
      /// grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
      /// undone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.PrivilegedAccessManager.V1.Grant> DenyGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DenyGrant, null, options, request);
      }
      /// <summary>
      /// `RevokeGrant` is used to immediately revoke access for a grant. This method
      /// can be called when the grant is in a non-terminal state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RevokeGrant(global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `RevokeGrant` is used to immediately revoke access for a grant. This method
      /// can be called when the grant is in a non-terminal state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RevokeGrant(global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RevokeGrant, null, options, request);
      }
      /// <summary>
      /// `RevokeGrant` is used to immediately revoke access for a grant. This method
      /// can be called when the grant is in a non-terminal state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RevokeGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RevokeGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `RevokeGrant` is used to immediately revoke access for a grant. This method
      /// can be called when the grant is in a non-terminal state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RevokeGrantAsync(global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RevokeGrant, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PrivilegedAccessManagerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PrivilegedAccessManagerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PrivilegedAccessManagerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CheckOnboardingStatus, serviceImpl.CheckOnboardingStatus)
          .AddMethod(__Method_ListEntitlements, serviceImpl.ListEntitlements)
          .AddMethod(__Method_SearchEntitlements, serviceImpl.SearchEntitlements)
          .AddMethod(__Method_GetEntitlement, serviceImpl.GetEntitlement)
          .AddMethod(__Method_CreateEntitlement, serviceImpl.CreateEntitlement)
          .AddMethod(__Method_DeleteEntitlement, serviceImpl.DeleteEntitlement)
          .AddMethod(__Method_UpdateEntitlement, serviceImpl.UpdateEntitlement)
          .AddMethod(__Method_ListGrants, serviceImpl.ListGrants)
          .AddMethod(__Method_SearchGrants, serviceImpl.SearchGrants)
          .AddMethod(__Method_GetGrant, serviceImpl.GetGrant)
          .AddMethod(__Method_CreateGrant, serviceImpl.CreateGrant)
          .AddMethod(__Method_ApproveGrant, serviceImpl.ApproveGrant)
          .AddMethod(__Method_DenyGrant, serviceImpl.DenyGrant)
          .AddMethod(__Method_RevokeGrant, serviceImpl.RevokeGrant).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PrivilegedAccessManagerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CheckOnboardingStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusRequest, global::Google.Cloud.PrivilegedAccessManager.V1.CheckOnboardingStatusResponse>(serviceImpl.CheckOnboardingStatus));
      serviceBinder.AddMethod(__Method_ListEntitlements, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.ListEntitlementsResponse>(serviceImpl.ListEntitlements));
      serviceBinder.AddMethod(__Method_SearchEntitlements, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.SearchEntitlementsResponse>(serviceImpl.SearchEntitlements));
      serviceBinder.AddMethod(__Method_GetEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.GetEntitlementRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Entitlement>(serviceImpl.GetEntitlement));
      serviceBinder.AddMethod(__Method_CreateEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.CreateEntitlementRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateEntitlement));
      serviceBinder.AddMethod(__Method_DeleteEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.DeleteEntitlementRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteEntitlement));
      serviceBinder.AddMethod(__Method_UpdateEntitlement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.UpdateEntitlementRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateEntitlement));
      serviceBinder.AddMethod(__Method_ListGrants, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.ListGrantsResponse>(serviceImpl.ListGrants));
      serviceBinder.AddMethod(__Method_SearchGrants, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsRequest, global::Google.Cloud.PrivilegedAccessManager.V1.SearchGrantsResponse>(serviceImpl.SearchGrants));
      serviceBinder.AddMethod(__Method_GetGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.GetGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant>(serviceImpl.GetGrant));
      serviceBinder.AddMethod(__Method_CreateGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.CreateGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant>(serviceImpl.CreateGrant));
      serviceBinder.AddMethod(__Method_ApproveGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.ApproveGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant>(serviceImpl.ApproveGrant));
      serviceBinder.AddMethod(__Method_DenyGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.DenyGrantRequest, global::Google.Cloud.PrivilegedAccessManager.V1.Grant>(serviceImpl.DenyGrant));
      serviceBinder.AddMethod(__Method_RevokeGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.PrivilegedAccessManager.V1.RevokeGrantRequest, global::Google.LongRunning.Operation>(serviceImpl.RevokeGrant));
    }

  }
}
#endregion
