// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/firestore/v1/firestore.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Firestore.V1 {
  /// <summary>
  /// The Cloud Firestore service.
  ///
  /// Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
  /// document database that simplifies storing, syncing, and querying data for
  /// your mobile, web, and IoT apps at global scale. Its client libraries provide
  /// live synchronization and offline support, while its security features and
  /// integrations with Firebase and Google Cloud Platform accelerate building
  /// truly serverless apps.
  /// </summary>
  public static partial class Firestore
  {
    static readonly string __ServiceName = "google.firestore.v1.Firestore";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.GetDocumentRequest> __Marshaller_google_firestore_v1_GetDocumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.GetDocumentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.Document> __Marshaller_google_firestore_v1_Document = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.Document.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.ListDocumentsRequest> __Marshaller_google_firestore_v1_ListDocumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.ListDocumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.ListDocumentsResponse> __Marshaller_google_firestore_v1_ListDocumentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.ListDocumentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.UpdateDocumentRequest> __Marshaller_google_firestore_v1_UpdateDocumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.UpdateDocumentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.DeleteDocumentRequest> __Marshaller_google_firestore_v1_DeleteDocumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.DeleteDocumentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.BatchGetDocumentsRequest> __Marshaller_google_firestore_v1_BatchGetDocumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.BatchGetDocumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.BatchGetDocumentsResponse> __Marshaller_google_firestore_v1_BatchGetDocumentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.BatchGetDocumentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.BeginTransactionRequest> __Marshaller_google_firestore_v1_BeginTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.BeginTransactionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.BeginTransactionResponse> __Marshaller_google_firestore_v1_BeginTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.BeginTransactionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.CommitRequest> __Marshaller_google_firestore_v1_CommitRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.CommitRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.CommitResponse> __Marshaller_google_firestore_v1_CommitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.CommitResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.RollbackRequest> __Marshaller_google_firestore_v1_RollbackRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.RollbackRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.RunQueryRequest> __Marshaller_google_firestore_v1_RunQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.RunQueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.RunQueryResponse> __Marshaller_google_firestore_v1_RunQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.RunQueryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.RunAggregationQueryRequest> __Marshaller_google_firestore_v1_RunAggregationQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.RunAggregationQueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.RunAggregationQueryResponse> __Marshaller_google_firestore_v1_RunAggregationQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.RunAggregationQueryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.PartitionQueryRequest> __Marshaller_google_firestore_v1_PartitionQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.PartitionQueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.PartitionQueryResponse> __Marshaller_google_firestore_v1_PartitionQueryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.PartitionQueryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.WriteRequest> __Marshaller_google_firestore_v1_WriteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.WriteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.WriteResponse> __Marshaller_google_firestore_v1_WriteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.WriteResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.ListenRequest> __Marshaller_google_firestore_v1_ListenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.ListenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.ListenResponse> __Marshaller_google_firestore_v1_ListenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.ListenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest> __Marshaller_google_firestore_v1_ListCollectionIdsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse> __Marshaller_google_firestore_v1_ListCollectionIdsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.BatchWriteRequest> __Marshaller_google_firestore_v1_BatchWriteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.BatchWriteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.BatchWriteResponse> __Marshaller_google_firestore_v1_BatchWriteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.BatchWriteResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Firestore.V1.CreateDocumentRequest> __Marshaller_google_firestore_v1_CreateDocumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Firestore.V1.CreateDocumentRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.GetDocumentRequest, global::Google.Cloud.Firestore.V1.Document> __Method_GetDocument = new grpc::Method<global::Google.Cloud.Firestore.V1.GetDocumentRequest, global::Google.Cloud.Firestore.V1.Document>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDocument",
        __Marshaller_google_firestore_v1_GetDocumentRequest,
        __Marshaller_google_firestore_v1_Document);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.ListDocumentsRequest, global::Google.Cloud.Firestore.V1.ListDocumentsResponse> __Method_ListDocuments = new grpc::Method<global::Google.Cloud.Firestore.V1.ListDocumentsRequest, global::Google.Cloud.Firestore.V1.ListDocumentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDocuments",
        __Marshaller_google_firestore_v1_ListDocumentsRequest,
        __Marshaller_google_firestore_v1_ListDocumentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.UpdateDocumentRequest, global::Google.Cloud.Firestore.V1.Document> __Method_UpdateDocument = new grpc::Method<global::Google.Cloud.Firestore.V1.UpdateDocumentRequest, global::Google.Cloud.Firestore.V1.Document>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDocument",
        __Marshaller_google_firestore_v1_UpdateDocumentRequest,
        __Marshaller_google_firestore_v1_Document);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.DeleteDocumentRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDocument = new grpc::Method<global::Google.Cloud.Firestore.V1.DeleteDocumentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDocument",
        __Marshaller_google_firestore_v1_DeleteDocumentRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.BatchGetDocumentsRequest, global::Google.Cloud.Firestore.V1.BatchGetDocumentsResponse> __Method_BatchGetDocuments = new grpc::Method<global::Google.Cloud.Firestore.V1.BatchGetDocumentsRequest, global::Google.Cloud.Firestore.V1.BatchGetDocumentsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "BatchGetDocuments",
        __Marshaller_google_firestore_v1_BatchGetDocumentsRequest,
        __Marshaller_google_firestore_v1_BatchGetDocumentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.BeginTransactionRequest, global::Google.Cloud.Firestore.V1.BeginTransactionResponse> __Method_BeginTransaction = new grpc::Method<global::Google.Cloud.Firestore.V1.BeginTransactionRequest, global::Google.Cloud.Firestore.V1.BeginTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BeginTransaction",
        __Marshaller_google_firestore_v1_BeginTransactionRequest,
        __Marshaller_google_firestore_v1_BeginTransactionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.CommitRequest, global::Google.Cloud.Firestore.V1.CommitResponse> __Method_Commit = new grpc::Method<global::Google.Cloud.Firestore.V1.CommitRequest, global::Google.Cloud.Firestore.V1.CommitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Commit",
        __Marshaller_google_firestore_v1_CommitRequest,
        __Marshaller_google_firestore_v1_CommitResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.RollbackRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Rollback = new grpc::Method<global::Google.Cloud.Firestore.V1.RollbackRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Rollback",
        __Marshaller_google_firestore_v1_RollbackRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.RunQueryRequest, global::Google.Cloud.Firestore.V1.RunQueryResponse> __Method_RunQuery = new grpc::Method<global::Google.Cloud.Firestore.V1.RunQueryRequest, global::Google.Cloud.Firestore.V1.RunQueryResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RunQuery",
        __Marshaller_google_firestore_v1_RunQueryRequest,
        __Marshaller_google_firestore_v1_RunQueryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.RunAggregationQueryRequest, global::Google.Cloud.Firestore.V1.RunAggregationQueryResponse> __Method_RunAggregationQuery = new grpc::Method<global::Google.Cloud.Firestore.V1.RunAggregationQueryRequest, global::Google.Cloud.Firestore.V1.RunAggregationQueryResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "RunAggregationQuery",
        __Marshaller_google_firestore_v1_RunAggregationQueryRequest,
        __Marshaller_google_firestore_v1_RunAggregationQueryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.PartitionQueryRequest, global::Google.Cloud.Firestore.V1.PartitionQueryResponse> __Method_PartitionQuery = new grpc::Method<global::Google.Cloud.Firestore.V1.PartitionQueryRequest, global::Google.Cloud.Firestore.V1.PartitionQueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PartitionQuery",
        __Marshaller_google_firestore_v1_PartitionQueryRequest,
        __Marshaller_google_firestore_v1_PartitionQueryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.WriteRequest, global::Google.Cloud.Firestore.V1.WriteResponse> __Method_Write = new grpc::Method<global::Google.Cloud.Firestore.V1.WriteRequest, global::Google.Cloud.Firestore.V1.WriteResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Write",
        __Marshaller_google_firestore_v1_WriteRequest,
        __Marshaller_google_firestore_v1_WriteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.ListenRequest, global::Google.Cloud.Firestore.V1.ListenResponse> __Method_Listen = new grpc::Method<global::Google.Cloud.Firestore.V1.ListenRequest, global::Google.Cloud.Firestore.V1.ListenResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Listen",
        __Marshaller_google_firestore_v1_ListenRequest,
        __Marshaller_google_firestore_v1_ListenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest, global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse> __Method_ListCollectionIds = new grpc::Method<global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest, global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCollectionIds",
        __Marshaller_google_firestore_v1_ListCollectionIdsRequest,
        __Marshaller_google_firestore_v1_ListCollectionIdsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.BatchWriteRequest, global::Google.Cloud.Firestore.V1.BatchWriteResponse> __Method_BatchWrite = new grpc::Method<global::Google.Cloud.Firestore.V1.BatchWriteRequest, global::Google.Cloud.Firestore.V1.BatchWriteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchWrite",
        __Marshaller_google_firestore_v1_BatchWriteRequest,
        __Marshaller_google_firestore_v1_BatchWriteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Firestore.V1.CreateDocumentRequest, global::Google.Cloud.Firestore.V1.Document> __Method_CreateDocument = new grpc::Method<global::Google.Cloud.Firestore.V1.CreateDocumentRequest, global::Google.Cloud.Firestore.V1.Document>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDocument",
        __Marshaller_google_firestore_v1_CreateDocumentRequest,
        __Marshaller_google_firestore_v1_Document);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Firestore.V1.FirestoreReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Firestore</summary>
    [grpc::BindServiceMethod(typeof(Firestore), "BindService")]
    public abstract partial class FirestoreBase
    {
      /// <summary>
      /// Gets a single document.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.Document> GetDocument(global::Google.Cloud.Firestore.V1.GetDocumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists documents.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.ListDocumentsResponse> ListDocuments(global::Google.Cloud.Firestore.V1.ListDocumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates or inserts a document.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.Document> UpdateDocument(global::Google.Cloud.Firestore.V1.UpdateDocumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a document.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDocument(global::Google.Cloud.Firestore.V1.DeleteDocumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets multiple documents.
      ///
      /// Documents returned by this method are not guaranteed to be returned in the
      /// same order that they were requested.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task BatchGetDocuments(global::Google.Cloud.Firestore.V1.BatchGetDocumentsRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Firestore.V1.BatchGetDocumentsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts a new transaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.BeginTransactionResponse> BeginTransaction(global::Google.Cloud.Firestore.V1.BeginTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Commits a transaction, while optionally updating documents.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.CommitResponse> Commit(global::Google.Cloud.Firestore.V1.CommitRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Rolls back a transaction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Rollback(global::Google.Cloud.Firestore.V1.RollbackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Runs a query.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task RunQuery(global::Google.Cloud.Firestore.V1.RunQueryRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Firestore.V1.RunQueryResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Runs an aggregation query.
      ///
      /// Rather than producing [Document][google.firestore.v1.Document] results like
      /// [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
      /// allows running an aggregation to produce a series of
      /// [AggregationResult][google.firestore.v1.AggregationResult] server-side.
      ///
      /// High-Level Example:
      ///
      /// ```
      /// -- Return the number of documents in table given a filter.
      /// SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
      /// ```
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task RunAggregationQuery(global::Google.Cloud.Firestore.V1.RunAggregationQueryRequest request, grpc::IServerStreamWriter<global::Google.Cloud.Firestore.V1.RunAggregationQueryResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Partitions a query by returning partition cursors that can be used to run
      /// the query in parallel. The returned partition cursors are split points that
      /// can be used by RunQuery as starting/end points for the query results.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.PartitionQueryResponse> PartitionQuery(global::Google.Cloud.Firestore.V1.PartitionQueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Streams batches of document updates and deletes, in order. This method is
      /// only available via gRPC or WebChannel (not REST).
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Write(grpc::IAsyncStreamReader<global::Google.Cloud.Firestore.V1.WriteRequest> requestStream, grpc::IServerStreamWriter<global::Google.Cloud.Firestore.V1.WriteResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Listens to changes. This method is only available via gRPC or WebChannel
      /// (not REST).
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task Listen(grpc::IAsyncStreamReader<global::Google.Cloud.Firestore.V1.ListenRequest> requestStream, grpc::IServerStreamWriter<global::Google.Cloud.Firestore.V1.ListenResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all the collection IDs underneath a document.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse> ListCollectionIds(global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Applies a batch of write operations.
      ///
      /// The BatchWrite method does not apply the write operations atomically
      /// and can apply them out of order. Method does not allow more than one write
      /// per document. Each write succeeds or fails independently. See the
      /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
      /// success status of each write.
      ///
      /// If you require an atomically applied set of writes, use
      /// [Commit][google.firestore.v1.Firestore.Commit] instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.BatchWriteResponse> BatchWrite(global::Google.Cloud.Firestore.V1.BatchWriteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new document.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Firestore.V1.Document> CreateDocument(global::Google.Cloud.Firestore.V1.CreateDocumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Firestore</summary>
    public partial class FirestoreClient : grpc::ClientBase<FirestoreClient>
    {
      /// <summary>Creates a new client for Firestore</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FirestoreClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Firestore that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FirestoreClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FirestoreClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FirestoreClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets a single document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.Document GetDocument(global::Google.Cloud.Firestore.V1.GetDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDocument(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.Document GetDocument(global::Google.Cloud.Firestore.V1.GetDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDocument, null, options, request);
      }
      /// <summary>
      /// Gets a single document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.Document> GetDocumentAsync(global::Google.Cloud.Firestore.V1.GetDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDocumentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a single document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.Document> GetDocumentAsync(global::Google.Cloud.Firestore.V1.GetDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDocument, null, options, request);
      }
      /// <summary>
      /// Lists documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.ListDocumentsResponse ListDocuments(global::Google.Cloud.Firestore.V1.ListDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDocuments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.ListDocumentsResponse ListDocuments(global::Google.Cloud.Firestore.V1.ListDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDocuments, null, options, request);
      }
      /// <summary>
      /// Lists documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.ListDocumentsResponse> ListDocumentsAsync(global::Google.Cloud.Firestore.V1.ListDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDocumentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.ListDocumentsResponse> ListDocumentsAsync(global::Google.Cloud.Firestore.V1.ListDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDocuments, null, options, request);
      }
      /// <summary>
      /// Updates or inserts a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.Document UpdateDocument(global::Google.Cloud.Firestore.V1.UpdateDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDocument(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates or inserts a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.Document UpdateDocument(global::Google.Cloud.Firestore.V1.UpdateDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDocument, null, options, request);
      }
      /// <summary>
      /// Updates or inserts a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.Document> UpdateDocumentAsync(global::Google.Cloud.Firestore.V1.UpdateDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDocumentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates or inserts a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.Document> UpdateDocumentAsync(global::Google.Cloud.Firestore.V1.UpdateDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDocument, null, options, request);
      }
      /// <summary>
      /// Deletes a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDocument(global::Google.Cloud.Firestore.V1.DeleteDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDocument(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDocument(global::Google.Cloud.Firestore.V1.DeleteDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDocument, null, options, request);
      }
      /// <summary>
      /// Deletes a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDocumentAsync(global::Google.Cloud.Firestore.V1.DeleteDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDocumentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDocumentAsync(global::Google.Cloud.Firestore.V1.DeleteDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDocument, null, options, request);
      }
      /// <summary>
      /// Gets multiple documents.
      ///
      /// Documents returned by this method are not guaranteed to be returned in the
      /// same order that they were requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Firestore.V1.BatchGetDocumentsResponse> BatchGetDocuments(global::Google.Cloud.Firestore.V1.BatchGetDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchGetDocuments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets multiple documents.
      ///
      /// Documents returned by this method are not guaranteed to be returned in the
      /// same order that they were requested.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Firestore.V1.BatchGetDocumentsResponse> BatchGetDocuments(global::Google.Cloud.Firestore.V1.BatchGetDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_BatchGetDocuments, null, options, request);
      }
      /// <summary>
      /// Starts a new transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.BeginTransactionResponse BeginTransaction(global::Google.Cloud.Firestore.V1.BeginTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts a new transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.BeginTransactionResponse BeginTransaction(global::Google.Cloud.Firestore.V1.BeginTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BeginTransaction, null, options, request);
      }
      /// <summary>
      /// Starts a new transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.BeginTransactionResponse> BeginTransactionAsync(global::Google.Cloud.Firestore.V1.BeginTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BeginTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts a new transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.BeginTransactionResponse> BeginTransactionAsync(global::Google.Cloud.Firestore.V1.BeginTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BeginTransaction, null, options, request);
      }
      /// <summary>
      /// Commits a transaction, while optionally updating documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.CommitResponse Commit(global::Google.Cloud.Firestore.V1.CommitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Commit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commits a transaction, while optionally updating documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.CommitResponse Commit(global::Google.Cloud.Firestore.V1.CommitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Commit, null, options, request);
      }
      /// <summary>
      /// Commits a transaction, while optionally updating documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.CommitResponse> CommitAsync(global::Google.Cloud.Firestore.V1.CommitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Commits a transaction, while optionally updating documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.CommitResponse> CommitAsync(global::Google.Cloud.Firestore.V1.CommitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Commit, null, options, request);
      }
      /// <summary>
      /// Rolls back a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Rollback(global::Google.Cloud.Firestore.V1.RollbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Rollback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rolls back a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Rollback(global::Google.Cloud.Firestore.V1.RollbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Rollback, null, options, request);
      }
      /// <summary>
      /// Rolls back a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RollbackAsync(global::Google.Cloud.Firestore.V1.RollbackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rolls back a transaction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> RollbackAsync(global::Google.Cloud.Firestore.V1.RollbackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Rollback, null, options, request);
      }
      /// <summary>
      /// Runs a query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Firestore.V1.RunQueryResponse> RunQuery(global::Google.Cloud.Firestore.V1.RunQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Runs a query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Firestore.V1.RunQueryResponse> RunQuery(global::Google.Cloud.Firestore.V1.RunQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RunQuery, null, options, request);
      }
      /// <summary>
      /// Runs an aggregation query.
      ///
      /// Rather than producing [Document][google.firestore.v1.Document] results like
      /// [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
      /// allows running an aggregation to produce a series of
      /// [AggregationResult][google.firestore.v1.AggregationResult] server-side.
      ///
      /// High-Level Example:
      ///
      /// ```
      /// -- Return the number of documents in table given a filter.
      /// SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
      /// ```
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Firestore.V1.RunAggregationQueryResponse> RunAggregationQuery(global::Google.Cloud.Firestore.V1.RunAggregationQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunAggregationQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Runs an aggregation query.
      ///
      /// Rather than producing [Document][google.firestore.v1.Document] results like
      /// [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
      /// allows running an aggregation to produce a series of
      /// [AggregationResult][google.firestore.v1.AggregationResult] server-side.
      ///
      /// High-Level Example:
      ///
      /// ```
      /// -- Return the number of documents in table given a filter.
      /// SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
      /// ```
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Google.Cloud.Firestore.V1.RunAggregationQueryResponse> RunAggregationQuery(global::Google.Cloud.Firestore.V1.RunAggregationQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_RunAggregationQuery, null, options, request);
      }
      /// <summary>
      /// Partitions a query by returning partition cursors that can be used to run
      /// the query in parallel. The returned partition cursors are split points that
      /// can be used by RunQuery as starting/end points for the query results.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.PartitionQueryResponse PartitionQuery(global::Google.Cloud.Firestore.V1.PartitionQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PartitionQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Partitions a query by returning partition cursors that can be used to run
      /// the query in parallel. The returned partition cursors are split points that
      /// can be used by RunQuery as starting/end points for the query results.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.PartitionQueryResponse PartitionQuery(global::Google.Cloud.Firestore.V1.PartitionQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PartitionQuery, null, options, request);
      }
      /// <summary>
      /// Partitions a query by returning partition cursors that can be used to run
      /// the query in parallel. The returned partition cursors are split points that
      /// can be used by RunQuery as starting/end points for the query results.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.PartitionQueryResponse> PartitionQueryAsync(global::Google.Cloud.Firestore.V1.PartitionQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PartitionQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Partitions a query by returning partition cursors that can be used to run
      /// the query in parallel. The returned partition cursors are split points that
      /// can be used by RunQuery as starting/end points for the query results.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.PartitionQueryResponse> PartitionQueryAsync(global::Google.Cloud.Firestore.V1.PartitionQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PartitionQuery, null, options, request);
      }
      /// <summary>
      /// Streams batches of document updates and deletes, in order. This method is
      /// only available via gRPC or WebChannel (not REST).
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.Firestore.V1.WriteRequest, global::Google.Cloud.Firestore.V1.WriteResponse> Write(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Write(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Streams batches of document updates and deletes, in order. This method is
      /// only available via gRPC or WebChannel (not REST).
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.Firestore.V1.WriteRequest, global::Google.Cloud.Firestore.V1.WriteResponse> Write(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Write, null, options);
      }
      /// <summary>
      /// Listens to changes. This method is only available via gRPC or WebChannel
      /// (not REST).
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.Firestore.V1.ListenRequest, global::Google.Cloud.Firestore.V1.ListenResponse> Listen(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Listen(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Listens to changes. This method is only available via gRPC or WebChannel
      /// (not REST).
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.Firestore.V1.ListenRequest, global::Google.Cloud.Firestore.V1.ListenResponse> Listen(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Listen, null, options);
      }
      /// <summary>
      /// Lists all the collection IDs underneath a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse ListCollectionIds(global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectionIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the collection IDs underneath a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse ListCollectionIds(global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCollectionIds, null, options, request);
      }
      /// <summary>
      /// Lists all the collection IDs underneath a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse> ListCollectionIdsAsync(global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCollectionIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all the collection IDs underneath a document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse> ListCollectionIdsAsync(global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCollectionIds, null, options, request);
      }
      /// <summary>
      /// Applies a batch of write operations.
      ///
      /// The BatchWrite method does not apply the write operations atomically
      /// and can apply them out of order. Method does not allow more than one write
      /// per document. Each write succeeds or fails independently. See the
      /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
      /// success status of each write.
      ///
      /// If you require an atomically applied set of writes, use
      /// [Commit][google.firestore.v1.Firestore.Commit] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.BatchWriteResponse BatchWrite(global::Google.Cloud.Firestore.V1.BatchWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchWrite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Applies a batch of write operations.
      ///
      /// The BatchWrite method does not apply the write operations atomically
      /// and can apply them out of order. Method does not allow more than one write
      /// per document. Each write succeeds or fails independently. See the
      /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
      /// success status of each write.
      ///
      /// If you require an atomically applied set of writes, use
      /// [Commit][google.firestore.v1.Firestore.Commit] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.BatchWriteResponse BatchWrite(global::Google.Cloud.Firestore.V1.BatchWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchWrite, null, options, request);
      }
      /// <summary>
      /// Applies a batch of write operations.
      ///
      /// The BatchWrite method does not apply the write operations atomically
      /// and can apply them out of order. Method does not allow more than one write
      /// per document. Each write succeeds or fails independently. See the
      /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
      /// success status of each write.
      ///
      /// If you require an atomically applied set of writes, use
      /// [Commit][google.firestore.v1.Firestore.Commit] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.BatchWriteResponse> BatchWriteAsync(global::Google.Cloud.Firestore.V1.BatchWriteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchWriteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Applies a batch of write operations.
      ///
      /// The BatchWrite method does not apply the write operations atomically
      /// and can apply them out of order. Method does not allow more than one write
      /// per document. Each write succeeds or fails independently. See the
      /// [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
      /// success status of each write.
      ///
      /// If you require an atomically applied set of writes, use
      /// [Commit][google.firestore.v1.Firestore.Commit] instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.BatchWriteResponse> BatchWriteAsync(global::Google.Cloud.Firestore.V1.BatchWriteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchWrite, null, options, request);
      }
      /// <summary>
      /// Creates a new document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.Document CreateDocument(global::Google.Cloud.Firestore.V1.CreateDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDocument(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Firestore.V1.Document CreateDocument(global::Google.Cloud.Firestore.V1.CreateDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDocument, null, options, request);
      }
      /// <summary>
      /// Creates a new document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.Document> CreateDocumentAsync(global::Google.Cloud.Firestore.V1.CreateDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDocumentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Firestore.V1.Document> CreateDocumentAsync(global::Google.Cloud.Firestore.V1.CreateDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDocument, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override FirestoreClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FirestoreClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(FirestoreBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDocument, serviceImpl.GetDocument)
          .AddMethod(__Method_ListDocuments, serviceImpl.ListDocuments)
          .AddMethod(__Method_UpdateDocument, serviceImpl.UpdateDocument)
          .AddMethod(__Method_DeleteDocument, serviceImpl.DeleteDocument)
          .AddMethod(__Method_BatchGetDocuments, serviceImpl.BatchGetDocuments)
          .AddMethod(__Method_BeginTransaction, serviceImpl.BeginTransaction)
          .AddMethod(__Method_Commit, serviceImpl.Commit)
          .AddMethod(__Method_Rollback, serviceImpl.Rollback)
          .AddMethod(__Method_RunQuery, serviceImpl.RunQuery)
          .AddMethod(__Method_RunAggregationQuery, serviceImpl.RunAggregationQuery)
          .AddMethod(__Method_PartitionQuery, serviceImpl.PartitionQuery)
          .AddMethod(__Method_Write, serviceImpl.Write)
          .AddMethod(__Method_Listen, serviceImpl.Listen)
          .AddMethod(__Method_ListCollectionIds, serviceImpl.ListCollectionIds)
          .AddMethod(__Method_BatchWrite, serviceImpl.BatchWrite)
          .AddMethod(__Method_CreateDocument, serviceImpl.CreateDocument).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FirestoreBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetDocument, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.GetDocumentRequest, global::Google.Cloud.Firestore.V1.Document>(serviceImpl.GetDocument));
      serviceBinder.AddMethod(__Method_ListDocuments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.ListDocumentsRequest, global::Google.Cloud.Firestore.V1.ListDocumentsResponse>(serviceImpl.ListDocuments));
      serviceBinder.AddMethod(__Method_UpdateDocument, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.UpdateDocumentRequest, global::Google.Cloud.Firestore.V1.Document>(serviceImpl.UpdateDocument));
      serviceBinder.AddMethod(__Method_DeleteDocument, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.DeleteDocumentRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDocument));
      serviceBinder.AddMethod(__Method_BatchGetDocuments, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Firestore.V1.BatchGetDocumentsRequest, global::Google.Cloud.Firestore.V1.BatchGetDocumentsResponse>(serviceImpl.BatchGetDocuments));
      serviceBinder.AddMethod(__Method_BeginTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.BeginTransactionRequest, global::Google.Cloud.Firestore.V1.BeginTransactionResponse>(serviceImpl.BeginTransaction));
      serviceBinder.AddMethod(__Method_Commit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.CommitRequest, global::Google.Cloud.Firestore.V1.CommitResponse>(serviceImpl.Commit));
      serviceBinder.AddMethod(__Method_Rollback, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.RollbackRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Rollback));
      serviceBinder.AddMethod(__Method_RunQuery, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Firestore.V1.RunQueryRequest, global::Google.Cloud.Firestore.V1.RunQueryResponse>(serviceImpl.RunQuery));
      serviceBinder.AddMethod(__Method_RunAggregationQuery, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Google.Cloud.Firestore.V1.RunAggregationQueryRequest, global::Google.Cloud.Firestore.V1.RunAggregationQueryResponse>(serviceImpl.RunAggregationQuery));
      serviceBinder.AddMethod(__Method_PartitionQuery, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.PartitionQueryRequest, global::Google.Cloud.Firestore.V1.PartitionQueryResponse>(serviceImpl.PartitionQuery));
      serviceBinder.AddMethod(__Method_Write, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Cloud.Firestore.V1.WriteRequest, global::Google.Cloud.Firestore.V1.WriteResponse>(serviceImpl.Write));
      serviceBinder.AddMethod(__Method_Listen, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Cloud.Firestore.V1.ListenRequest, global::Google.Cloud.Firestore.V1.ListenResponse>(serviceImpl.Listen));
      serviceBinder.AddMethod(__Method_ListCollectionIds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.ListCollectionIdsRequest, global::Google.Cloud.Firestore.V1.ListCollectionIdsResponse>(serviceImpl.ListCollectionIds));
      serviceBinder.AddMethod(__Method_BatchWrite, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.BatchWriteRequest, global::Google.Cloud.Firestore.V1.BatchWriteResponse>(serviceImpl.BatchWrite));
      serviceBinder.AddMethod(__Method_CreateDocument, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Firestore.V1.CreateDocumentRequest, global::Google.Cloud.Firestore.V1.Document>(serviceImpl.CreateDocument));
    }

  }
}
#endregion
