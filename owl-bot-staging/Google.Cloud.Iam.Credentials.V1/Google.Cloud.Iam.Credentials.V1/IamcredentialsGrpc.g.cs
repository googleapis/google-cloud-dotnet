// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/iam/credentials/v1/iamcredentials.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Iam.Credentials.V1 {
  /// <summary>
  /// A service account is a special type of Google account that belongs to your
  /// application or a virtual machine (VM), instead of to an individual end user.
  /// Your application assumes the identity of the service account to call Google
  /// APIs, so that the users aren't directly involved.
  ///
  /// Service account credentials are used to temporarily assume the identity
  /// of the service account. Supported credential types include OAuth 2.0 access
  /// tokens, OpenID Connect ID tokens, self-signed JSON Web Tokens (JWTs), and
  /// more.
  /// </summary>
  public static partial class IAMCredentials
  {
    static readonly string __ServiceName = "google.iam.credentials.v1.IAMCredentials";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest> __Marshaller_google_iam_credentials_v1_GenerateAccessTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse> __Marshaller_google_iam_credentials_v1_GenerateAccessTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest> __Marshaller_google_iam_credentials_v1_GenerateIdTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse> __Marshaller_google_iam_credentials_v1_GenerateIdTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest> __Marshaller_google_iam_credentials_v1_SignBlobRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse> __Marshaller_google_iam_credentials_v1_SignBlobResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest> __Marshaller_google_iam_credentials_v1_SignJwtRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse> __Marshaller_google_iam_credentials_v1_SignJwtResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest, global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse> __Method_GenerateAccessToken = new grpc::Method<global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest, global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAccessToken",
        __Marshaller_google_iam_credentials_v1_GenerateAccessTokenRequest,
        __Marshaller_google_iam_credentials_v1_GenerateAccessTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest, global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse> __Method_GenerateIdToken = new grpc::Method<global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest, global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateIdToken",
        __Marshaller_google_iam_credentials_v1_GenerateIdTokenRequest,
        __Marshaller_google_iam_credentials_v1_GenerateIdTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest, global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse> __Method_SignBlob = new grpc::Method<global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest, global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignBlob",
        __Marshaller_google_iam_credentials_v1_SignBlobRequest,
        __Marshaller_google_iam_credentials_v1_SignBlobResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest, global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse> __Method_SignJwt = new grpc::Method<global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest, global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignJwt",
        __Marshaller_google_iam_credentials_v1_SignJwtRequest,
        __Marshaller_google_iam_credentials_v1_SignJwtResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Iam.Credentials.V1.IamcredentialsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IAMCredentials</summary>
    [grpc::BindServiceMethod(typeof(IAMCredentials), "BindService")]
    public abstract partial class IAMCredentialsBase
    {
      /// <summary>
      /// Generates an OAuth 2.0 access token for a service account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse> GenerateAccessToken(global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates an OpenID Connect ID token for a service account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse> GenerateIdToken(global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Signs a blob using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse> SignBlob(global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Signs a JWT using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse> SignJwt(global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IAMCredentials</summary>
    public partial class IAMCredentialsClient : grpc::ClientBase<IAMCredentialsClient>
    {
      /// <summary>Creates a new client for IAMCredentials</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IAMCredentialsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IAMCredentials that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public IAMCredentialsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IAMCredentialsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected IAMCredentialsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Generates an OAuth 2.0 access token for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse GenerateAccessToken(global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an OAuth 2.0 access token for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse GenerateAccessToken(global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAccessToken, null, options, request);
      }
      /// <summary>
      /// Generates an OAuth 2.0 access token for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse> GenerateAccessTokenAsync(global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an OAuth 2.0 access token for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse> GenerateAccessTokenAsync(global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAccessToken, null, options, request);
      }
      /// <summary>
      /// Generates an OpenID Connect ID token for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse GenerateIdToken(global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateIdToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an OpenID Connect ID token for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse GenerateIdToken(global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateIdToken, null, options, request);
      }
      /// <summary>
      /// Generates an OpenID Connect ID token for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse> GenerateIdTokenAsync(global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateIdTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an OpenID Connect ID token for a service account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse> GenerateIdTokenAsync(global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateIdToken, null, options, request);
      }
      /// <summary>
      /// Signs a blob using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse SignBlob(global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignBlob(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signs a blob using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse SignBlob(global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignBlob, null, options, request);
      }
      /// <summary>
      /// Signs a blob using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse> SignBlobAsync(global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignBlobAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signs a blob using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse> SignBlobAsync(global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignBlob, null, options, request);
      }
      /// <summary>
      /// Signs a JWT using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse SignJwt(global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignJwt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signs a JWT using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse SignJwt(global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignJwt, null, options, request);
      }
      /// <summary>
      /// Signs a JWT using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse> SignJwtAsync(global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignJwtAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signs a JWT using a service account's system-managed private key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse> SignJwtAsync(global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignJwt, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override IAMCredentialsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IAMCredentialsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(IAMCredentialsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GenerateAccessToken, serviceImpl.GenerateAccessToken)
          .AddMethod(__Method_GenerateIdToken, serviceImpl.GenerateIdToken)
          .AddMethod(__Method_SignBlob, serviceImpl.SignBlob)
          .AddMethod(__Method_SignJwt, serviceImpl.SignJwt).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, IAMCredentialsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GenerateAccessToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenRequest, global::Google.Cloud.Iam.Credentials.V1.GenerateAccessTokenResponse>(serviceImpl.GenerateAccessToken));
      serviceBinder.AddMethod(__Method_GenerateIdToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenRequest, global::Google.Cloud.Iam.Credentials.V1.GenerateIdTokenResponse>(serviceImpl.GenerateIdToken));
      serviceBinder.AddMethod(__Method_SignBlob, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Credentials.V1.SignBlobRequest, global::Google.Cloud.Iam.Credentials.V1.SignBlobResponse>(serviceImpl.SignBlob));
      serviceBinder.AddMethod(__Method_SignJwt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.Credentials.V1.SignJwtRequest, global::Google.Cloud.Iam.Credentials.V1.SignJwtResponse>(serviceImpl.SignJwt));
    }

  }
}
#endregion
