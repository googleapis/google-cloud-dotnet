// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/shopping/merchant/datasources/v1beta/datasources.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Shopping.Merchant.DataSources.V1Beta {
  /// <summary>
  /// Service to manage primary, supplemental, inventory and other data sources.
  /// See more in the [Merchant
  /// Center](https://support.google.com/merchants/answer/7439058) help article.
  /// </summary>
  public static partial class DataSourcesService
  {
    static readonly string __ServiceName = "google.shopping.merchant.datasources.v1beta.DataSourcesService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest> __Marshaller_google_shopping_merchant_datasources_v1beta_GetDataSourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> __Marshaller_google_shopping_merchant_datasources_v1beta_DataSource = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest> __Marshaller_google_shopping_merchant_datasources_v1beta_ListDataSourcesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse> __Marshaller_google_shopping_merchant_datasources_v1beta_ListDataSourcesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest> __Marshaller_google_shopping_merchant_datasources_v1beta_CreateDataSourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest> __Marshaller_google_shopping_merchant_datasources_v1beta_UpdateDataSourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest> __Marshaller_google_shopping_merchant_datasources_v1beta_DeleteDataSourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest> __Marshaller_google_shopping_merchant_datasources_v1beta_FetchDataSourceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> __Method_GetDataSource = new grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataSource",
        __Marshaller_google_shopping_merchant_datasources_v1beta_GetDataSourceRequest,
        __Marshaller_google_shopping_merchant_datasources_v1beta_DataSource);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse> __Method_ListDataSources = new grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDataSources",
        __Marshaller_google_shopping_merchant_datasources_v1beta_ListDataSourcesRequest,
        __Marshaller_google_shopping_merchant_datasources_v1beta_ListDataSourcesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> __Method_CreateDataSource = new grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDataSource",
        __Marshaller_google_shopping_merchant_datasources_v1beta_CreateDataSourceRequest,
        __Marshaller_google_shopping_merchant_datasources_v1beta_DataSource);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> __Method_UpdateDataSource = new grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDataSource",
        __Marshaller_google_shopping_merchant_datasources_v1beta_UpdateDataSourceRequest,
        __Marshaller_google_shopping_merchant_datasources_v1beta_DataSource);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDataSource = new grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDataSource",
        __Marshaller_google_shopping_merchant_datasources_v1beta_DeleteDataSourceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_FetchDataSource = new grpc::Method<global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchDataSource",
        __Marshaller_google_shopping_merchant_datasources_v1beta_FetchDataSourceRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Shopping.Merchant.DataSources.V1Beta.DatasourcesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataSourcesService</summary>
    [grpc::BindServiceMethod(typeof(DataSourcesService), "BindService")]
    public abstract partial class DataSourcesServiceBase
    {
      /// <summary>
      /// Retrieves the data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> GetDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the configurations for data sources for the given account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse> ListDataSources(global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates the new data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> CreateDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the existing data source configuration. The fields that are
      /// set in the update mask but not provided in the resource will be deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> UpdateDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a data source from your Merchant Center account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Performs the data fetch immediately (even outside fetch schedule) on a
      /// data source from your Merchant Center Account. If you need to call
      /// this method more than once per day, you should use the Products service to
      /// update your product data instead.
      /// This method only works on data sources with a file input set.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> FetchDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataSourcesService</summary>
    public partial class DataSourcesServiceClient : grpc::ClientBase<DataSourcesServiceClient>
    {
      /// <summary>Creates a new client for DataSourcesService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataSourcesServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataSourcesService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataSourcesServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataSourcesServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataSourcesServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves the data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource GetDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataSource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource GetDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataSource, null, options, request);
      }
      /// <summary>
      /// Retrieves the data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> GetDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataSourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> GetDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataSource, null, options, request);
      }
      /// <summary>
      /// Lists the configurations for data sources for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse ListDataSources(global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataSources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the configurations for data sources for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse ListDataSources(global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDataSources, null, options, request);
      }
      /// <summary>
      /// Lists the configurations for data sources for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse> ListDataSourcesAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataSourcesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the configurations for data sources for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse> ListDataSourcesAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDataSources, null, options, request);
      }
      /// <summary>
      /// Creates the new data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource CreateDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataSource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates the new data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource CreateDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDataSource, null, options, request);
      }
      /// <summary>
      /// Creates the new data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> CreateDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataSourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates the new data source configuration for the given account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> CreateDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDataSource, null, options, request);
      }
      /// <summary>
      /// Updates the existing data source configuration. The fields that are
      /// set in the update mask but not provided in the resource will be deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource UpdateDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataSource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the existing data source configuration. The fields that are
      /// set in the update mask but not provided in the resource will be deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource UpdateDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDataSource, null, options, request);
      }
      /// <summary>
      /// Updates the existing data source configuration. The fields that are
      /// set in the update mask but not provided in the resource will be deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> UpdateDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataSourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the existing data source configuration. The fields that are
      /// set in the update mask but not provided in the resource will be deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource> UpdateDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDataSource, null, options, request);
      }
      /// <summary>
      /// Deletes a data source from your Merchant Center account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataSource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a data source from your Merchant Center account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDataSource, null, options, request);
      }
      /// <summary>
      /// Deletes a data source from your Merchant Center account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataSourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a data source from your Merchant Center account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDataSource, null, options, request);
      }
      /// <summary>
      /// Performs the data fetch immediately (even outside fetch schedule) on a
      /// data source from your Merchant Center Account. If you need to call
      /// this method more than once per day, you should use the Products service to
      /// update your product data instead.
      /// This method only works on data sources with a file input set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty FetchDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchDataSource(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs the data fetch immediately (even outside fetch schedule) on a
      /// data source from your Merchant Center Account. If you need to call
      /// this method more than once per day, you should use the Products service to
      /// update your product data instead.
      /// This method only works on data sources with a file input set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty FetchDataSource(global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchDataSource, null, options, request);
      }
      /// <summary>
      /// Performs the data fetch immediately (even outside fetch schedule) on a
      /// data source from your Merchant Center Account. If you need to call
      /// this method more than once per day, you should use the Products service to
      /// update your product data instead.
      /// This method only works on data sources with a file input set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> FetchDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchDataSourceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs the data fetch immediately (even outside fetch schedule) on a
      /// data source from your Merchant Center Account. If you need to call
      /// this method more than once per day, you should use the Products service to
      /// update your product data instead.
      /// This method only works on data sources with a file input set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> FetchDataSourceAsync(global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchDataSource, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DataSourcesServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataSourcesServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DataSourcesServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDataSource, serviceImpl.GetDataSource)
          .AddMethod(__Method_ListDataSources, serviceImpl.ListDataSources)
          .AddMethod(__Method_CreateDataSource, serviceImpl.CreateDataSource)
          .AddMethod(__Method_UpdateDataSource, serviceImpl.UpdateDataSource)
          .AddMethod(__Method_DeleteDataSource, serviceImpl.DeleteDataSource)
          .AddMethod(__Method_FetchDataSource, serviceImpl.FetchDataSource).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataSourcesServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetDataSource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.DataSources.V1Beta.GetDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource>(serviceImpl.GetDataSource));
      serviceBinder.AddMethod(__Method_ListDataSources, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.ListDataSourcesResponse>(serviceImpl.ListDataSources));
      serviceBinder.AddMethod(__Method_CreateDataSource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.DataSources.V1Beta.CreateDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource>(serviceImpl.CreateDataSource));
      serviceBinder.AddMethod(__Method_UpdateDataSource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.DataSources.V1Beta.UpdateDataSourceRequest, global::Google.Shopping.Merchant.DataSources.V1Beta.DataSource>(serviceImpl.UpdateDataSource));
      serviceBinder.AddMethod(__Method_DeleteDataSource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.DataSources.V1Beta.DeleteDataSourceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDataSource));
      serviceBinder.AddMethod(__Method_FetchDataSource, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.DataSources.V1Beta.FetchDataSourceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.FetchDataSource));
    }

  }
}
#endregion
