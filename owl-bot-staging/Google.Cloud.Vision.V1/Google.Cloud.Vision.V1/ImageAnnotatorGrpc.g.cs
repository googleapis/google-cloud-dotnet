// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/vision/v1/image_annotator.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Vision.V1 {
  /// <summary>
  /// Service that performs Google Cloud Vision API detection tasks over client
  /// images, such as face, landmark, logo, label, and text detection. The
  /// ImageAnnotator service returns detected entities from the images.
  /// </summary>
  public static partial class ImageAnnotator
  {
    static readonly string __ServiceName = "google.cloud.vision.v1.ImageAnnotator";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest> __Marshaller_google_cloud_vision_v1_BatchAnnotateImagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> __Marshaller_google_cloud_vision_v1_BatchAnnotateImagesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest> __Marshaller_google_cloud_vision_v1_BatchAnnotateFilesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse> __Marshaller_google_cloud_vision_v1_BatchAnnotateFilesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest> __Marshaller_google_cloud_vision_v1_AsyncBatchAnnotateImagesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest> __Marshaller_google_cloud_vision_v1_AsyncBatchAnnotateFilesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest, global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> __Method_BatchAnnotateImages = new grpc::Method<global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest, global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchAnnotateImages",
        __Marshaller_google_cloud_vision_v1_BatchAnnotateImagesRequest,
        __Marshaller_google_cloud_vision_v1_BatchAnnotateImagesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest, global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse> __Method_BatchAnnotateFiles = new grpc::Method<global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest, global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchAnnotateFiles",
        __Marshaller_google_cloud_vision_v1_BatchAnnotateFilesRequest,
        __Marshaller_google_cloud_vision_v1_BatchAnnotateFilesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest, global::Google.LongRunning.Operation> __Method_AsyncBatchAnnotateImages = new grpc::Method<global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AsyncBatchAnnotateImages",
        __Marshaller_google_cloud_vision_v1_AsyncBatchAnnotateImagesRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest, global::Google.LongRunning.Operation> __Method_AsyncBatchAnnotateFiles = new grpc::Method<global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AsyncBatchAnnotateFiles",
        __Marshaller_google_cloud_vision_v1_AsyncBatchAnnotateFilesRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Vision.V1.ImageAnnotatorReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ImageAnnotator</summary>
    [grpc::BindServiceMethod(typeof(ImageAnnotator), "BindService")]
    public abstract partial class ImageAnnotatorBase
    {
      /// <summary>
      /// Run image detection and annotation for a batch of images.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> BatchAnnotateImages(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Service that performs image detection and annotation for a batch of files.
      /// Now only "application/pdf", "image/tiff" and "image/gif" are supported.
      ///
      /// This service will extract at most 5 (customers can specify which 5 in
      /// AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
      /// file provided and perform detection and annotation for each image
      /// extracted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse> BatchAnnotateFiles(global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Run asynchronous image detection and annotation for a list of images.
      ///
      /// Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
      ///
      /// This service will write image annotation outputs to json files in customer
      /// GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> AsyncBatchAnnotateImages(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Run asynchronous image detection and annotation for a list of generic
      /// files, such as PDF files, which may contain multiple pages and multiple
      /// images per page. Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> AsyncBatchAnnotateFiles(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ImageAnnotator</summary>
    public partial class ImageAnnotatorClient : grpc::ClientBase<ImageAnnotatorClient>
    {
      /// <summary>Creates a new client for ImageAnnotator</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ImageAnnotatorClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ImageAnnotator that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ImageAnnotatorClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ImageAnnotatorClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ImageAnnotatorClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Run image detection and annotation for a batch of images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse BatchAnnotateImages(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchAnnotateImages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run image detection and annotation for a batch of images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse BatchAnnotateImages(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchAnnotateImages, null, options, request);
      }
      /// <summary>
      /// Run image detection and annotation for a batch of images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> BatchAnnotateImagesAsync(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchAnnotateImagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run image detection and annotation for a batch of images.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse> BatchAnnotateImagesAsync(global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchAnnotateImages, null, options, request);
      }
      /// <summary>
      /// Service that performs image detection and annotation for a batch of files.
      /// Now only "application/pdf", "image/tiff" and "image/gif" are supported.
      ///
      /// This service will extract at most 5 (customers can specify which 5 in
      /// AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
      /// file provided and perform detection and annotation for each image
      /// extracted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse BatchAnnotateFiles(global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchAnnotateFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Service that performs image detection and annotation for a batch of files.
      /// Now only "application/pdf", "image/tiff" and "image/gif" are supported.
      ///
      /// This service will extract at most 5 (customers can specify which 5 in
      /// AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
      /// file provided and perform detection and annotation for each image
      /// extracted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse BatchAnnotateFiles(global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchAnnotateFiles, null, options, request);
      }
      /// <summary>
      /// Service that performs image detection and annotation for a batch of files.
      /// Now only "application/pdf", "image/tiff" and "image/gif" are supported.
      ///
      /// This service will extract at most 5 (customers can specify which 5 in
      /// AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
      /// file provided and perform detection and annotation for each image
      /// extracted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse> BatchAnnotateFilesAsync(global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchAnnotateFilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Service that performs image detection and annotation for a batch of files.
      /// Now only "application/pdf", "image/tiff" and "image/gif" are supported.
      ///
      /// This service will extract at most 5 (customers can specify which 5 in
      /// AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each
      /// file provided and perform detection and annotation for each image
      /// extracted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse> BatchAnnotateFilesAsync(global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchAnnotateFiles, null, options, request);
      }
      /// <summary>
      /// Run asynchronous image detection and annotation for a list of images.
      ///
      /// Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
      ///
      /// This service will write image annotation outputs to json files in customer
      /// GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AsyncBatchAnnotateImages(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AsyncBatchAnnotateImages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run asynchronous image detection and annotation for a list of images.
      ///
      /// Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
      ///
      /// This service will write image annotation outputs to json files in customer
      /// GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AsyncBatchAnnotateImages(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AsyncBatchAnnotateImages, null, options, request);
      }
      /// <summary>
      /// Run asynchronous image detection and annotation for a list of images.
      ///
      /// Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
      ///
      /// This service will write image annotation outputs to json files in customer
      /// GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AsyncBatchAnnotateImagesAsync(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AsyncBatchAnnotateImagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run asynchronous image detection and annotation for a list of images.
      ///
      /// Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results).
      ///
      /// This service will write image annotation outputs to json files in customer
      /// GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AsyncBatchAnnotateImagesAsync(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AsyncBatchAnnotateImages, null, options, request);
      }
      /// <summary>
      /// Run asynchronous image detection and annotation for a list of generic
      /// files, such as PDF files, which may contain multiple pages and multiple
      /// images per page. Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AsyncBatchAnnotateFiles(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AsyncBatchAnnotateFiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run asynchronous image detection and annotation for a list of generic
      /// files, such as PDF files, which may contain multiple pages and multiple
      /// images per page. Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AsyncBatchAnnotateFiles(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AsyncBatchAnnotateFiles, null, options, request);
      }
      /// <summary>
      /// Run asynchronous image detection and annotation for a list of generic
      /// files, such as PDF files, which may contain multiple pages and multiple
      /// images per page. Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AsyncBatchAnnotateFilesAsync(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AsyncBatchAnnotateFilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Run asynchronous image detection and annotation for a list of generic
      /// files, such as PDF files, which may contain multiple pages and multiple
      /// images per page. Progress and results can be retrieved through the
      /// `google.longrunning.Operations` interface.
      /// `Operation.metadata` contains `OperationMetadata` (metadata).
      /// `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AsyncBatchAnnotateFilesAsync(global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AsyncBatchAnnotateFiles, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ImageAnnotatorClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ImageAnnotatorClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ImageAnnotatorBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_BatchAnnotateImages, serviceImpl.BatchAnnotateImages)
          .AddMethod(__Method_BatchAnnotateFiles, serviceImpl.BatchAnnotateFiles)
          .AddMethod(__Method_AsyncBatchAnnotateImages, serviceImpl.AsyncBatchAnnotateImages)
          .AddMethod(__Method_AsyncBatchAnnotateFiles, serviceImpl.AsyncBatchAnnotateFiles).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ImageAnnotatorBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_BatchAnnotateImages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Vision.V1.BatchAnnotateImagesRequest, global::Google.Cloud.Vision.V1.BatchAnnotateImagesResponse>(serviceImpl.BatchAnnotateImages));
      serviceBinder.AddMethod(__Method_BatchAnnotateFiles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Vision.V1.BatchAnnotateFilesRequest, global::Google.Cloud.Vision.V1.BatchAnnotateFilesResponse>(serviceImpl.BatchAnnotateFiles));
      serviceBinder.AddMethod(__Method_AsyncBatchAnnotateImages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Vision.V1.AsyncBatchAnnotateImagesRequest, global::Google.LongRunning.Operation>(serviceImpl.AsyncBatchAnnotateImages));
      serviceBinder.AddMethod(__Method_AsyncBatchAnnotateFiles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Vision.V1.AsyncBatchAnnotateFilesRequest, global::Google.LongRunning.Operation>(serviceImpl.AsyncBatchAnnotateFiles));
    }

  }
}
#endregion
