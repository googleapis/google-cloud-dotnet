// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/functions/v2beta/functions.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Functions.V2Beta {
  /// <summary>
  /// Google Cloud Functions is used to deploy functions that are executed by
  /// Google in response to various events. Data connected with that event is
  /// passed to a function as the input data.
  ///
  /// A **function** is a resource which describes a function that should be
  /// executed and how it is triggered.
  /// </summary>
  public static partial class FunctionService
  {
    static readonly string __ServiceName = "google.cloud.functions.v2beta.FunctionService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.GetFunctionRequest> __Marshaller_google_cloud_functions_v2beta_GetFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.GetFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.Function> __Marshaller_google_cloud_functions_v2beta_Function = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.Function.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest> __Marshaller_google_cloud_functions_v2beta_ListFunctionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse> __Marshaller_google_cloud_functions_v2beta_ListFunctionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest> __Marshaller_google_cloud_functions_v2beta_CreateFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest> __Marshaller_google_cloud_functions_v2beta_UpdateFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest> __Marshaller_google_cloud_functions_v2beta_DeleteFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest> __Marshaller_google_cloud_functions_v2beta_GenerateUploadUrlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse> __Marshaller_google_cloud_functions_v2beta_GenerateUploadUrlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest> __Marshaller_google_cloud_functions_v2beta_GenerateDownloadUrlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse> __Marshaller_google_cloud_functions_v2beta_GenerateDownloadUrlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest> __Marshaller_google_cloud_functions_v2beta_ListRuntimesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse> __Marshaller_google_cloud_functions_v2beta_ListRuntimesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V2Beta.GetFunctionRequest, global::Google.Cloud.Functions.V2Beta.Function> __Method_GetFunction = new grpc::Method<global::Google.Cloud.Functions.V2Beta.GetFunctionRequest, global::Google.Cloud.Functions.V2Beta.Function>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFunction",
        __Marshaller_google_cloud_functions_v2beta_GetFunctionRequest,
        __Marshaller_google_cloud_functions_v2beta_Function);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest, global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse> __Method_ListFunctions = new grpc::Method<global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest, global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFunctions",
        __Marshaller_google_cloud_functions_v2beta_ListFunctionsRequest,
        __Marshaller_google_cloud_functions_v2beta_ListFunctionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest, global::Google.LongRunning.Operation> __Method_CreateFunction = new grpc::Method<global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateFunction",
        __Marshaller_google_cloud_functions_v2beta_CreateFunctionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest, global::Google.LongRunning.Operation> __Method_UpdateFunction = new grpc::Method<global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateFunction",
        __Marshaller_google_cloud_functions_v2beta_UpdateFunctionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest, global::Google.LongRunning.Operation> __Method_DeleteFunction = new grpc::Method<global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFunction",
        __Marshaller_google_cloud_functions_v2beta_DeleteFunctionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest, global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse> __Method_GenerateUploadUrl = new grpc::Method<global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest, global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateUploadUrl",
        __Marshaller_google_cloud_functions_v2beta_GenerateUploadUrlRequest,
        __Marshaller_google_cloud_functions_v2beta_GenerateUploadUrlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest, global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse> __Method_GenerateDownloadUrl = new grpc::Method<global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest, global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateDownloadUrl",
        __Marshaller_google_cloud_functions_v2beta_GenerateDownloadUrlRequest,
        __Marshaller_google_cloud_functions_v2beta_GenerateDownloadUrlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest, global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse> __Method_ListRuntimes = new grpc::Method<global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest, global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRuntimes",
        __Marshaller_google_cloud_functions_v2beta_ListRuntimesRequest,
        __Marshaller_google_cloud_functions_v2beta_ListRuntimesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Functions.V2Beta.FunctionsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FunctionService</summary>
    [grpc::BindServiceMethod(typeof(FunctionService), "BindService")]
    public abstract partial class FunctionServiceBase
    {
      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V2Beta.Function> GetFunction(global::Google.Cloud.Functions.V2Beta.GetFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse> ListFunctions(global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateFunction(global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateFunction(global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteFunction(global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, specify this header:
      ///
      /// * `content-type: application/zip`
      ///
      /// Do not specify this header:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse> GenerateUploadUrl(global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// 30 minutes of generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse> GenerateDownloadUrl(global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of runtimes that are supported for the requested project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse> ListRuntimes(global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FunctionService</summary>
    public partial class FunctionServiceClient : grpc::ClientBase<FunctionServiceClient>
    {
      /// <summary>Creates a new client for FunctionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FunctionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FunctionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FunctionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FunctionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FunctionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.Function GetFunction(global::Google.Cloud.Functions.V2Beta.GetFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.Function GetFunction(global::Google.Cloud.Functions.V2Beta.GetFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFunction, null, options, request);
      }
      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.Function> GetFunctionAsync(global::Google.Cloud.Functions.V2Beta.GetFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.Function> GetFunctionAsync(global::Google.Cloud.Functions.V2Beta.GetFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFunction, null, options, request);
      }
      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse ListFunctions(global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFunctions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse ListFunctions(global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFunctions, null, options, request);
      }
      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse> ListFunctionsAsync(global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFunctionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse> ListFunctionsAsync(global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFunctions, null, options, request);
      }
      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateFunction(global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateFunction(global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateFunction, null, options, request);
      }
      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateFunctionAsync(global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateFunctionAsync(global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateFunction, null, options, request);
      }
      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateFunction(global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateFunction(global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateFunction, null, options, request);
      }
      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateFunctionAsync(global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateFunctionAsync(global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateFunction, null, options, request);
      }
      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteFunction(global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteFunction(global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFunction, null, options, request);
      }
      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteFunctionAsync(global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteFunctionAsync(global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFunction, null, options, request);
      }
      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, specify this header:
      ///
      /// * `content-type: application/zip`
      ///
      /// Do not specify this header:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse GenerateUploadUrl(global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateUploadUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, specify this header:
      ///
      /// * `content-type: application/zip`
      ///
      /// Do not specify this header:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse GenerateUploadUrl(global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateUploadUrl, null, options, request);
      }
      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, specify this header:
      ///
      /// * `content-type: application/zip`
      ///
      /// Do not specify this header:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse> GenerateUploadUrlAsync(global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateUploadUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, specify this header:
      ///
      /// * `content-type: application/zip`
      ///
      /// Do not specify this header:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse> GenerateUploadUrlAsync(global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateUploadUrl, null, options, request);
      }
      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// 30 minutes of generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse GenerateDownloadUrl(global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateDownloadUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// 30 minutes of generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse GenerateDownloadUrl(global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateDownloadUrl, null, options, request);
      }
      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// 30 minutes of generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse> GenerateDownloadUrlAsync(global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateDownloadUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// 30 minutes of generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse> GenerateDownloadUrlAsync(global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateDownloadUrl, null, options, request);
      }
      /// <summary>
      /// Returns a list of runtimes that are supported for the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse ListRuntimes(global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRuntimes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of runtimes that are supported for the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse ListRuntimes(global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRuntimes, null, options, request);
      }
      /// <summary>
      /// Returns a list of runtimes that are supported for the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse> ListRuntimesAsync(global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRuntimesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of runtimes that are supported for the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse> ListRuntimesAsync(global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRuntimes, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override FunctionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FunctionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(FunctionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetFunction, serviceImpl.GetFunction)
          .AddMethod(__Method_ListFunctions, serviceImpl.ListFunctions)
          .AddMethod(__Method_CreateFunction, serviceImpl.CreateFunction)
          .AddMethod(__Method_UpdateFunction, serviceImpl.UpdateFunction)
          .AddMethod(__Method_DeleteFunction, serviceImpl.DeleteFunction)
          .AddMethod(__Method_GenerateUploadUrl, serviceImpl.GenerateUploadUrl)
          .AddMethod(__Method_GenerateDownloadUrl, serviceImpl.GenerateDownloadUrl)
          .AddMethod(__Method_ListRuntimes, serviceImpl.ListRuntimes).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FunctionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V2Beta.GetFunctionRequest, global::Google.Cloud.Functions.V2Beta.Function>(serviceImpl.GetFunction));
      serviceBinder.AddMethod(__Method_ListFunctions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V2Beta.ListFunctionsRequest, global::Google.Cloud.Functions.V2Beta.ListFunctionsResponse>(serviceImpl.ListFunctions));
      serviceBinder.AddMethod(__Method_CreateFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V2Beta.CreateFunctionRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateFunction));
      serviceBinder.AddMethod(__Method_UpdateFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V2Beta.UpdateFunctionRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateFunction));
      serviceBinder.AddMethod(__Method_DeleteFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V2Beta.DeleteFunctionRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteFunction));
      serviceBinder.AddMethod(__Method_GenerateUploadUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlRequest, global::Google.Cloud.Functions.V2Beta.GenerateUploadUrlResponse>(serviceImpl.GenerateUploadUrl));
      serviceBinder.AddMethod(__Method_GenerateDownloadUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlRequest, global::Google.Cloud.Functions.V2Beta.GenerateDownloadUrlResponse>(serviceImpl.GenerateDownloadUrl));
      serviceBinder.AddMethod(__Method_ListRuntimes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V2Beta.ListRuntimesRequest, global::Google.Cloud.Functions.V2Beta.ListRuntimesResponse>(serviceImpl.ListRuntimes));
    }

  }
}
#endregion
