// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/eventarc/publishing/v1/publisher.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Eventarc.Publishing.V1 {
  /// <summary>
  /// Eventarc processes events generated by an event provider and delivers them to
  /// a subscriber.
  ///
  /// An event provider is a software-as-a-service (SaaS) system or
  /// product that can generate and deliver events through Eventarc.
  ///
  /// A third-party event provider is an event provider from outside of Google.
  ///
  /// A partner is a third-party event provider that is integrated with Eventarc.
  ///
  /// A subscriber is a GCP customer interested in receiving events.
  ///
  /// Channel is a first-class Eventarc resource that is created and managed
  /// by the subscriber in their GCP project. A Channel represents a subscriber's
  /// intent to receive events from an event provider. A Channel is associated with
  /// exactly one event provider.
  ///
  /// ChannelConnection is a first-class Eventarc resource that
  /// is created and managed by the partner in their GCP project. A
  /// ChannelConnection represents a connection between a partner and a
  /// subscriber's Channel. A ChannelConnection has a one-to-one mapping with a
  /// Channel.
  ///
  /// Publisher allows an event provider to publish events to Eventarc.
  /// </summary>
  public static partial class Publisher
  {
    static readonly string __ServiceName = "google.cloud.eventarc.publishing.v1.Publisher";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest> __Marshaller_google_cloud_eventarc_publishing_v1_PublishChannelConnectionEventsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse> __Marshaller_google_cloud_eventarc_publishing_v1_PublishChannelConnectionEventsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest> __Marshaller_google_cloud_eventarc_publishing_v1_PublishEventsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse> __Marshaller_google_cloud_eventarc_publishing_v1_PublishEventsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest> __Marshaller_google_cloud_eventarc_publishing_v1_PublishRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse> __Marshaller_google_cloud_eventarc_publishing_v1_PublishResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse> __Method_PublishChannelConnectionEvents = new grpc::Method<global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PublishChannelConnectionEvents",
        __Marshaller_google_cloud_eventarc_publishing_v1_PublishChannelConnectionEventsRequest,
        __Marshaller_google_cloud_eventarc_publishing_v1_PublishChannelConnectionEventsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse> __Method_PublishEvents = new grpc::Method<global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PublishEvents",
        __Marshaller_google_cloud_eventarc_publishing_v1_PublishEventsRequest,
        __Marshaller_google_cloud_eventarc_publishing_v1_PublishEventsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse> __Method_Publish = new grpc::Method<global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Publish",
        __Marshaller_google_cloud_eventarc_publishing_v1_PublishRequest,
        __Marshaller_google_cloud_eventarc_publishing_v1_PublishResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Eventarc.Publishing.V1.PublisherReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Publisher</summary>
    [grpc::BindServiceMethod(typeof(Publisher), "BindService")]
    public abstract partial class PublisherBase
    {
      /// <summary>
      /// Publish events to a ChannelConnection in a partner's project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse> PublishChannelConnectionEvents(global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Publish events to a subscriber's channel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse> PublishEvents(global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Publish events to a message bus.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse> Publish(global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Publisher</summary>
    public partial class PublisherClient : grpc::ClientBase<PublisherClient>
    {
      /// <summary>Creates a new client for Publisher</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PublisherClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Publisher that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PublisherClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PublisherClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PublisherClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Publish events to a ChannelConnection in a partner's project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse PublishChannelConnectionEvents(global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishChannelConnectionEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish events to a ChannelConnection in a partner's project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse PublishChannelConnectionEvents(global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PublishChannelConnectionEvents, null, options, request);
      }
      /// <summary>
      /// Publish events to a ChannelConnection in a partner's project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse> PublishChannelConnectionEventsAsync(global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishChannelConnectionEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish events to a ChannelConnection in a partner's project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse> PublishChannelConnectionEventsAsync(global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PublishChannelConnectionEvents, null, options, request);
      }
      /// <summary>
      /// Publish events to a subscriber's channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse PublishEvents(global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish events to a subscriber's channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse PublishEvents(global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PublishEvents, null, options, request);
      }
      /// <summary>
      /// Publish events to a subscriber's channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse> PublishEventsAsync(global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish events to a subscriber's channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse> PublishEventsAsync(global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PublishEvents, null, options, request);
      }
      /// <summary>
      /// Publish events to a message bus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse Publish(global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Publish(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish events to a message bus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse Publish(global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Publish, null, options, request);
      }
      /// <summary>
      /// Publish events to a message bus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse> PublishAsync(global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PublishAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Publish events to a message bus.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse> PublishAsync(global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Publish, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PublisherClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PublisherClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PublisherBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PublishChannelConnectionEvents, serviceImpl.PublishChannelConnectionEvents)
          .AddMethod(__Method_PublishEvents, serviceImpl.PublishEvents)
          .AddMethod(__Method_Publish, serviceImpl.Publish).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PublisherBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PublishChannelConnectionEvents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishChannelConnectionEventsResponse>(serviceImpl.PublishChannelConnectionEvents));
      serviceBinder.AddMethod(__Method_PublishEvents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishEventsResponse>(serviceImpl.PublishEvents));
      serviceBinder.AddMethod(__Method_Publish, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Eventarc.Publishing.V1.PublishRequest, global::Google.Cloud.Eventarc.Publishing.V1.PublishResponse>(serviceImpl.Publish));
    }

  }
}
#endregion
