// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/functions/v1/functions.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Functions.V1 {
  /// <summary>
  /// A service that application uses to manipulate triggers and functions.
  /// </summary>
  public static partial class CloudFunctionsService
  {
    static readonly string __ServiceName = "google.cloud.functions.v1.CloudFunctionsService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.ListFunctionsRequest> __Marshaller_google_cloud_functions_v1_ListFunctionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.ListFunctionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.ListFunctionsResponse> __Marshaller_google_cloud_functions_v1_ListFunctionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.ListFunctionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.GetFunctionRequest> __Marshaller_google_cloud_functions_v1_GetFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.GetFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.CloudFunction> __Marshaller_google_cloud_functions_v1_CloudFunction = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.CloudFunction.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.CreateFunctionRequest> __Marshaller_google_cloud_functions_v1_CreateFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.CreateFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.UpdateFunctionRequest> __Marshaller_google_cloud_functions_v1_UpdateFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.UpdateFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.DeleteFunctionRequest> __Marshaller_google_cloud_functions_v1_DeleteFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.DeleteFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.CallFunctionRequest> __Marshaller_google_cloud_functions_v1_CallFunctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.CallFunctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.CallFunctionResponse> __Marshaller_google_cloud_functions_v1_CallFunctionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.CallFunctionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest> __Marshaller_google_cloud_functions_v1_GenerateUploadUrlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse> __Marshaller_google_cloud_functions_v1_GenerateUploadUrlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest> __Marshaller_google_cloud_functions_v1_GenerateDownloadUrlRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse> __Marshaller_google_cloud_functions_v1_GenerateDownloadUrlResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V1.ListFunctionsRequest, global::Google.Cloud.Functions.V1.ListFunctionsResponse> __Method_ListFunctions = new grpc::Method<global::Google.Cloud.Functions.V1.ListFunctionsRequest, global::Google.Cloud.Functions.V1.ListFunctionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFunctions",
        __Marshaller_google_cloud_functions_v1_ListFunctionsRequest,
        __Marshaller_google_cloud_functions_v1_ListFunctionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V1.GetFunctionRequest, global::Google.Cloud.Functions.V1.CloudFunction> __Method_GetFunction = new grpc::Method<global::Google.Cloud.Functions.V1.GetFunctionRequest, global::Google.Cloud.Functions.V1.CloudFunction>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFunction",
        __Marshaller_google_cloud_functions_v1_GetFunctionRequest,
        __Marshaller_google_cloud_functions_v1_CloudFunction);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V1.CreateFunctionRequest, global::Google.LongRunning.Operation> __Method_CreateFunction = new grpc::Method<global::Google.Cloud.Functions.V1.CreateFunctionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateFunction",
        __Marshaller_google_cloud_functions_v1_CreateFunctionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V1.UpdateFunctionRequest, global::Google.LongRunning.Operation> __Method_UpdateFunction = new grpc::Method<global::Google.Cloud.Functions.V1.UpdateFunctionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateFunction",
        __Marshaller_google_cloud_functions_v1_UpdateFunctionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V1.DeleteFunctionRequest, global::Google.LongRunning.Operation> __Method_DeleteFunction = new grpc::Method<global::Google.Cloud.Functions.V1.DeleteFunctionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteFunction",
        __Marshaller_google_cloud_functions_v1_DeleteFunctionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V1.CallFunctionRequest, global::Google.Cloud.Functions.V1.CallFunctionResponse> __Method_CallFunction = new grpc::Method<global::Google.Cloud.Functions.V1.CallFunctionRequest, global::Google.Cloud.Functions.V1.CallFunctionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CallFunction",
        __Marshaller_google_cloud_functions_v1_CallFunctionRequest,
        __Marshaller_google_cloud_functions_v1_CallFunctionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest, global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse> __Method_GenerateUploadUrl = new grpc::Method<global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest, global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateUploadUrl",
        __Marshaller_google_cloud_functions_v1_GenerateUploadUrlRequest,
        __Marshaller_google_cloud_functions_v1_GenerateUploadUrlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest, global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse> __Method_GenerateDownloadUrl = new grpc::Method<global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest, global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateDownloadUrl",
        __Marshaller_google_cloud_functions_v1_GenerateDownloadUrlRequest,
        __Marshaller_google_cloud_functions_v1_GenerateDownloadUrlResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Functions.V1.FunctionsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CloudFunctionsService</summary>
    [grpc::BindServiceMethod(typeof(CloudFunctionsService), "BindService")]
    public abstract partial class CloudFunctionsServiceBase
    {
      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V1.ListFunctionsResponse> ListFunctions(global::Google.Cloud.Functions.V1.ListFunctionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V1.CloudFunction> GetFunction(global::Google.Cloud.Functions.V1.GetFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateFunction(global::Google.Cloud.Functions.V1.CreateFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateFunction(global::Google.Cloud.Functions.V1.UpdateFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteFunction(global::Google.Cloud.Functions.V1.DeleteFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Synchronously invokes a deployed Cloud Function. To be used for testing
      /// purposes as very limited traffic is allowed. For more information on
      /// the actual limits, refer to
      /// [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V1.CallFunctionResponse> CallFunction(global::Google.Cloud.Functions.V1.CallFunctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * Source file size should not exceed 100MB limit.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, these two headers need to be specified:
      ///
      /// * `content-type: application/zip`
      /// * `x-goog-content-length-range: 0,104857600`
      ///
      /// And this header SHOULD NOT be specified:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse> GenerateUploadUrl(global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// minutes after generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse> GenerateDownloadUrl(global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the IAM access control policy on the specified function.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the IAM access control policy for a function.
      /// Returns an empty policy if the function exists and does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Tests the specified permissions against the IAM access control policy
      /// for a function.
      /// If the function does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CloudFunctionsService</summary>
    public partial class CloudFunctionsServiceClient : grpc::ClientBase<CloudFunctionsServiceClient>
    {
      /// <summary>Creates a new client for CloudFunctionsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudFunctionsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CloudFunctionsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudFunctionsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudFunctionsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudFunctionsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.ListFunctionsResponse ListFunctions(global::Google.Cloud.Functions.V1.ListFunctionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFunctions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.ListFunctionsResponse ListFunctions(global::Google.Cloud.Functions.V1.ListFunctionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFunctions, null, options, request);
      }
      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.ListFunctionsResponse> ListFunctionsAsync(global::Google.Cloud.Functions.V1.ListFunctionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFunctionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of functions that belong to the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.ListFunctionsResponse> ListFunctionsAsync(global::Google.Cloud.Functions.V1.ListFunctionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFunctions, null, options, request);
      }
      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.CloudFunction GetFunction(global::Google.Cloud.Functions.V1.GetFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.CloudFunction GetFunction(global::Google.Cloud.Functions.V1.GetFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFunction, null, options, request);
      }
      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.CloudFunction> GetFunctionAsync(global::Google.Cloud.Functions.V1.GetFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a function with the given name from the requested project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.CloudFunction> GetFunctionAsync(global::Google.Cloud.Functions.V1.GetFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFunction, null, options, request);
      }
      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateFunction(global::Google.Cloud.Functions.V1.CreateFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateFunction(global::Google.Cloud.Functions.V1.CreateFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateFunction, null, options, request);
      }
      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateFunctionAsync(global::Google.Cloud.Functions.V1.CreateFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new function. If a function with the given name already exists in
      /// the specified project, the long running operation will return
      /// `ALREADY_EXISTS` error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateFunctionAsync(global::Google.Cloud.Functions.V1.CreateFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateFunction, null, options, request);
      }
      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateFunction(global::Google.Cloud.Functions.V1.UpdateFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateFunction(global::Google.Cloud.Functions.V1.UpdateFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateFunction, null, options, request);
      }
      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateFunctionAsync(global::Google.Cloud.Functions.V1.UpdateFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates existing function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateFunctionAsync(global::Google.Cloud.Functions.V1.UpdateFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateFunction, null, options, request);
      }
      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteFunction(global::Google.Cloud.Functions.V1.DeleteFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteFunction(global::Google.Cloud.Functions.V1.DeleteFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteFunction, null, options, request);
      }
      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteFunctionAsync(global::Google.Cloud.Functions.V1.DeleteFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a function with the given name from the specified project. If the
      /// given function is used by some trigger, the trigger will be updated to
      /// remove this function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteFunctionAsync(global::Google.Cloud.Functions.V1.DeleteFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteFunction, null, options, request);
      }
      /// <summary>
      /// Synchronously invokes a deployed Cloud Function. To be used for testing
      /// purposes as very limited traffic is allowed. For more information on
      /// the actual limits, refer to
      /// [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.CallFunctionResponse CallFunction(global::Google.Cloud.Functions.V1.CallFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallFunction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Synchronously invokes a deployed Cloud Function. To be used for testing
      /// purposes as very limited traffic is allowed. For more information on
      /// the actual limits, refer to
      /// [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.CallFunctionResponse CallFunction(global::Google.Cloud.Functions.V1.CallFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CallFunction, null, options, request);
      }
      /// <summary>
      /// Synchronously invokes a deployed Cloud Function. To be used for testing
      /// purposes as very limited traffic is allowed. For more information on
      /// the actual limits, refer to
      /// [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.CallFunctionResponse> CallFunctionAsync(global::Google.Cloud.Functions.V1.CallFunctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CallFunctionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Synchronously invokes a deployed Cloud Function. To be used for testing
      /// purposes as very limited traffic is allowed. For more information on
      /// the actual limits, refer to
      /// [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.CallFunctionResponse> CallFunctionAsync(global::Google.Cloud.Functions.V1.CallFunctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CallFunction, null, options, request);
      }
      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * Source file size should not exceed 100MB limit.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, these two headers need to be specified:
      ///
      /// * `content-type: application/zip`
      /// * `x-goog-content-length-range: 0,104857600`
      ///
      /// And this header SHOULD NOT be specified:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse GenerateUploadUrl(global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateUploadUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * Source file size should not exceed 100MB limit.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, these two headers need to be specified:
      ///
      /// * `content-type: application/zip`
      /// * `x-goog-content-length-range: 0,104857600`
      ///
      /// And this header SHOULD NOT be specified:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse GenerateUploadUrl(global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateUploadUrl, null, options, request);
      }
      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * Source file size should not exceed 100MB limit.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, these two headers need to be specified:
      ///
      /// * `content-type: application/zip`
      /// * `x-goog-content-length-range: 0,104857600`
      ///
      /// And this header SHOULD NOT be specified:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse> GenerateUploadUrlAsync(global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateUploadUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signed URL for uploading a function source code.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls.
      /// Once the function source code upload is complete, the used signed
      /// URL should be provided in CreateFunction or UpdateFunction request
      /// as a reference to the function source code.
      ///
      /// When uploading source code to the generated signed URL, please follow
      /// these restrictions:
      ///
      /// * Source file type should be a zip file.
      /// * Source file size should not exceed 100MB limit.
      /// * No credentials should be attached - the signed URLs provide access to the
      ///   target bucket using internal service identity; if credentials were
      ///   attached, the identity from the credentials would be used, but that
      ///   identity does not have permissions to upload files to the URL.
      ///
      /// When making a HTTP PUT request, these two headers need to be specified:
      ///
      /// * `content-type: application/zip`
      /// * `x-goog-content-length-range: 0,104857600`
      ///
      /// And this header SHOULD NOT be specified:
      ///
      /// * `Authorization: Bearer YOUR_TOKEN`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse> GenerateUploadUrlAsync(global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateUploadUrl, null, options, request);
      }
      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// minutes after generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse GenerateDownloadUrl(global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateDownloadUrl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// minutes after generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse GenerateDownloadUrl(global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateDownloadUrl, null, options, request);
      }
      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// minutes after generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse> GenerateDownloadUrlAsync(global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateDownloadUrlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a signed URL for downloading deployed function source code.
      /// The URL is only valid for a limited period and should be used within
      /// minutes after generation.
      /// For more information about the signed URL usage see:
      /// https://cloud.google.com/storage/docs/access-control/signed-urls
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse> GenerateDownloadUrlAsync(global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateDownloadUrl, null, options, request);
      }
      /// <summary>
      /// Sets the IAM access control policy on the specified function.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the IAM access control policy on the specified function.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the IAM access control policy on the specified function.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the IAM access control policy on the specified function.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the IAM access control policy for a function.
      /// Returns an empty policy if the function exists and does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the IAM access control policy for a function.
      /// Returns an empty policy if the function exists and does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the IAM access control policy for a function.
      /// Returns an empty policy if the function exists and does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the IAM access control policy for a function.
      /// Returns an empty policy if the function exists and does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Tests the specified permissions against the IAM access control policy
      /// for a function.
      /// If the function does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tests the specified permissions against the IAM access control policy
      /// for a function.
      /// If the function does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Tests the specified permissions against the IAM access control policy
      /// for a function.
      /// If the function does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Tests the specified permissions against the IAM access control policy
      /// for a function.
      /// If the function does not exist, this will return an empty set of
      /// permissions, not a NOT_FOUND error.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CloudFunctionsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CloudFunctionsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CloudFunctionsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListFunctions, serviceImpl.ListFunctions)
          .AddMethod(__Method_GetFunction, serviceImpl.GetFunction)
          .AddMethod(__Method_CreateFunction, serviceImpl.CreateFunction)
          .AddMethod(__Method_UpdateFunction, serviceImpl.UpdateFunction)
          .AddMethod(__Method_DeleteFunction, serviceImpl.DeleteFunction)
          .AddMethod(__Method_CallFunction, serviceImpl.CallFunction)
          .AddMethod(__Method_GenerateUploadUrl, serviceImpl.GenerateUploadUrl)
          .AddMethod(__Method_GenerateDownloadUrl, serviceImpl.GenerateDownloadUrl)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CloudFunctionsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListFunctions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V1.ListFunctionsRequest, global::Google.Cloud.Functions.V1.ListFunctionsResponse>(serviceImpl.ListFunctions));
      serviceBinder.AddMethod(__Method_GetFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V1.GetFunctionRequest, global::Google.Cloud.Functions.V1.CloudFunction>(serviceImpl.GetFunction));
      serviceBinder.AddMethod(__Method_CreateFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V1.CreateFunctionRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateFunction));
      serviceBinder.AddMethod(__Method_UpdateFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V1.UpdateFunctionRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateFunction));
      serviceBinder.AddMethod(__Method_DeleteFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V1.DeleteFunctionRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteFunction));
      serviceBinder.AddMethod(__Method_CallFunction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V1.CallFunctionRequest, global::Google.Cloud.Functions.V1.CallFunctionResponse>(serviceImpl.CallFunction));
      serviceBinder.AddMethod(__Method_GenerateUploadUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V1.GenerateUploadUrlRequest, global::Google.Cloud.Functions.V1.GenerateUploadUrlResponse>(serviceImpl.GenerateUploadUrl));
      serviceBinder.AddMethod(__Method_GenerateDownloadUrl, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Functions.V1.GenerateDownloadUrlRequest, global::Google.Cloud.Functions.V1.GenerateDownloadUrlResponse>(serviceImpl.GenerateDownloadUrl));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
}
#endregion
