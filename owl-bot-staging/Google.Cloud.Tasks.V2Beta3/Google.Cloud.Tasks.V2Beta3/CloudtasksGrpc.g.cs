// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/tasks/v2beta3/cloudtasks.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Tasks.V2Beta3 {
  /// <summary>
  /// Cloud Tasks allows developers to manage the execution of background
  /// work in their applications.
  /// </summary>
  public static partial class CloudTasks
  {
    static readonly string __ServiceName = "google.cloud.tasks.v2beta3.CloudTasks";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest> __Marshaller_google_cloud_tasks_v2beta3_ListQueuesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse> __Marshaller_google_cloud_tasks_v2beta3_ListQueuesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest> __Marshaller_google_cloud_tasks_v2beta3_GetQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.Queue> __Marshaller_google_cloud_tasks_v2beta3_Queue = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.Queue.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest> __Marshaller_google_cloud_tasks_v2beta3_CreateQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest> __Marshaller_google_cloud_tasks_v2beta3_UpdateQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest> __Marshaller_google_cloud_tasks_v2beta3_DeleteQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest> __Marshaller_google_cloud_tasks_v2beta3_PurgeQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest> __Marshaller_google_cloud_tasks_v2beta3_PauseQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest> __Marshaller_google_cloud_tasks_v2beta3_ResumeQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest> __Marshaller_google_cloud_tasks_v2beta3_ListTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse> __Marshaller_google_cloud_tasks_v2beta3_ListTasksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest> __Marshaller_google_cloud_tasks_v2beta3_GetTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.Task> __Marshaller_google_cloud_tasks_v2beta3_Task = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.Task.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest> __Marshaller_google_cloud_tasks_v2beta3_CreateTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest> __Marshaller_google_cloud_tasks_v2beta3_DeleteTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest> __Marshaller_google_cloud_tasks_v2beta3_RunTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest, global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse> __Method_ListQueues = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest, global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListQueues",
        __Marshaller_google_cloud_tasks_v2beta3_ListQueuesRequest,
        __Marshaller_google_cloud_tasks_v2beta3_ListQueuesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue> __Method_GetQueue = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueue",
        __Marshaller_google_cloud_tasks_v2beta3_GetQueueRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Queue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue> __Method_CreateQueue = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateQueue",
        __Marshaller_google_cloud_tasks_v2beta3_CreateQueueRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Queue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue> __Method_UpdateQueue = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateQueue",
        __Marshaller_google_cloud_tasks_v2beta3_UpdateQueueRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Queue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteQueue = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteQueue",
        __Marshaller_google_cloud_tasks_v2beta3_DeleteQueueRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue> __Method_PurgeQueue = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PurgeQueue",
        __Marshaller_google_cloud_tasks_v2beta3_PurgeQueueRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Queue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue> __Method_PauseQueue = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PauseQueue",
        __Marshaller_google_cloud_tasks_v2beta3_PauseQueueRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Queue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue> __Method_ResumeQueue = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResumeQueue",
        __Marshaller_google_cloud_tasks_v2beta3_ResumeQueueRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Queue);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest, global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse> __Method_ListTasks = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest, global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTasks",
        __Marshaller_google_cloud_tasks_v2beta3_ListTasksRequest,
        __Marshaller_google_cloud_tasks_v2beta3_ListTasksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task> __Method_GetTask = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTask",
        __Marshaller_google_cloud_tasks_v2beta3_GetTaskRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Task);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task> __Method_CreateTask = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTask",
        __Marshaller_google_cloud_tasks_v2beta3_CreateTaskRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Task);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTask = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTask",
        __Marshaller_google_cloud_tasks_v2beta3_DeleteTaskRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task> __Method_RunTask = new grpc::Method<global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RunTask",
        __Marshaller_google_cloud_tasks_v2beta3_RunTaskRequest,
        __Marshaller_google_cloud_tasks_v2beta3_Task);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Tasks.V2Beta3.CloudtasksReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CloudTasks</summary>
    [grpc::BindServiceMethod(typeof(CloudTasks), "BindService")]
    public abstract partial class CloudTasksBase
    {
      /// <summary>
      /// Lists queues.
      ///
      /// Queues are returned in lexicographical order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse> ListQueues(global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a queue.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Queue> GetQueue(global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a queue.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Queue> CreateQueue(global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a queue.
      ///
      /// This method creates the queue if it does not exist and updates
      /// the queue if it does exist.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Queue> UpdateQueue(global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a queue.
      ///
      /// This command will delete the queue even if it has tasks in it.
      ///
      /// Note: If you delete a queue, a queue with the same name can't be created
      /// for 7 days.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteQueue(global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Purges a queue by deleting all of its tasks.
      ///
      /// All tasks created before this method is called are permanently deleted.
      ///
      /// Purge operations can take up to one minute to take effect. Tasks
      /// might be dispatched before the purge takes effect. A purge is irreversible.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Queue> PurgeQueue(global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Pauses the queue.
      ///
      /// If a queue is paused then the system will stop dispatching tasks
      /// until the queue is resumed via
      /// [ResumeQueue][google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue]. Tasks can
      /// still be added when the queue is paused. A queue is paused if its
      /// [state][google.cloud.tasks.v2beta3.Queue.state] is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Queue> PauseQueue(global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resume a queue.
      ///
      /// This method resumes a queue after it has been
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED] or
      /// [DISABLED][google.cloud.tasks.v2beta3.Queue.State.DISABLED]. The state of a
      /// queue is stored in the queue's
      /// [state][google.cloud.tasks.v2beta3.Queue.state]; after calling this method
      /// it will be set to
      /// [RUNNING][google.cloud.tasks.v2beta3.Queue.State.RUNNING].
      ///
      /// WARNING: Resuming many high-QPS queues at the same time can
      /// lead to target overloading. If you are resuming high-QPS
      /// queues, follow the 500/50/5 pattern described in
      /// [Managing Cloud Tasks Scaling
      /// Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Queue> ResumeQueue(global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Returns an empty policy if the
      /// resource exists and does not have a policy set.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.getIamPolicy`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Replaces any existing policy.
      ///
      /// Note: The Cloud Console does not check queue-level IAM permissions yet.
      /// Project-level permissions are required to use the Cloud Console.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.setIamPolicy`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that a caller has on a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. If the resource does not exist,
      /// this will return an empty set of permissions, not a
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
      ///
      /// Note: This operation is designed to be used for building permission-aware
      /// UIs and command-line tools, not for authorization checking. This operation
      /// may "fail open" without warning.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the tasks in a queue.
      ///
      /// By default, only the [BASIC][google.cloud.tasks.v2beta3.Task.View.BASIC]
      /// view is retrieved due to performance considerations;
      /// [response_view][google.cloud.tasks.v2beta3.ListTasksRequest.response_view]
      /// controls the subset of information which is returned.
      ///
      /// The tasks may be returned in any order. The ordering may change at any
      /// time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse> ListTasks(global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a task.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Task> GetTask(global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a task and adds it to a queue.
      ///
      /// Tasks cannot be updated after creation; there is no UpdateTask command.
      ///
      /// * The maximum task size is 100KB.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Task> CreateTask(global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a task.
      ///
      /// A task can be deleted if it is scheduled or dispatched. A task
      /// cannot be deleted if it has executed successfully or permanently
      /// failed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTask(global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Forces a task to run now.
      ///
      /// When this method is called, Cloud Tasks will dispatch the task, even if
      /// the task is already running, the queue has reached its
      /// [RateLimits][google.cloud.tasks.v2beta3.RateLimits] or is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      ///
      /// This command is meant to be used for manual debugging. For
      /// example, [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] can be
      /// used to retry a failed task after a fix has been made or to manually force
      /// a task to be dispatched now.
      ///
      /// The dispatched task is returned. That is, the task that is returned
      /// contains the [status][Task.status] after the task is dispatched but
      /// before the task is received by its target.
      ///
      /// If Cloud Tasks receives a successful response from the task's
      /// target, then the task will be deleted; otherwise the task's
      /// [schedule_time][google.cloud.tasks.v2beta3.Task.schedule_time] will be
      /// reset to the time that
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] was called plus
      /// the retry delay specified in the queue's
      /// [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig].
      ///
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] returns
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
      /// task that has already succeeded or permanently failed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Tasks.V2Beta3.Task> RunTask(global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CloudTasks</summary>
    public partial class CloudTasksClient : grpc::ClientBase<CloudTasksClient>
    {
      /// <summary>Creates a new client for CloudTasks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudTasksClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CloudTasks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudTasksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudTasksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudTasksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists queues.
      ///
      /// Queues are returned in lexicographical order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse ListQueues(global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListQueues(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists queues.
      ///
      /// Queues are returned in lexicographical order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse ListQueues(global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListQueues, null, options, request);
      }
      /// <summary>
      /// Lists queues.
      ///
      /// Queues are returned in lexicographical order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse> ListQueuesAsync(global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListQueuesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists queues.
      ///
      /// Queues are returned in lexicographical order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse> ListQueuesAsync(global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListQueues, null, options, request);
      }
      /// <summary>
      /// Gets a queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue GetQueue(global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue GetQueue(global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueue, null, options, request);
      }
      /// <summary>
      /// Gets a queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> GetQueueAsync(global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> GetQueueAsync(global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueue, null, options, request);
      }
      /// <summary>
      /// Creates a queue.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue CreateQueue(global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a queue.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue CreateQueue(global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateQueue, null, options, request);
      }
      /// <summary>
      /// Creates a queue.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> CreateQueueAsync(global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a queue.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> CreateQueueAsync(global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateQueue, null, options, request);
      }
      /// <summary>
      /// Updates a queue.
      ///
      /// This method creates the queue if it does not exist and updates
      /// the queue if it does exist.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue UpdateQueue(global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a queue.
      ///
      /// This method creates the queue if it does not exist and updates
      /// the queue if it does exist.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue UpdateQueue(global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateQueue, null, options, request);
      }
      /// <summary>
      /// Updates a queue.
      ///
      /// This method creates the queue if it does not exist and updates
      /// the queue if it does exist.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> UpdateQueueAsync(global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a queue.
      ///
      /// This method creates the queue if it does not exist and updates
      /// the queue if it does exist.
      ///
      /// Queues created with this method allow tasks to live for a maximum of 31
      /// days. After a task is 31 days old, the task will be deleted regardless of
      /// whether it was dispatched or not.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> UpdateQueueAsync(global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateQueue, null, options, request);
      }
      /// <summary>
      /// Deletes a queue.
      ///
      /// This command will delete the queue even if it has tasks in it.
      ///
      /// Note: If you delete a queue, a queue with the same name can't be created
      /// for 7 days.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteQueue(global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a queue.
      ///
      /// This command will delete the queue even if it has tasks in it.
      ///
      /// Note: If you delete a queue, a queue with the same name can't be created
      /// for 7 days.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteQueue(global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteQueue, null, options, request);
      }
      /// <summary>
      /// Deletes a queue.
      ///
      /// This command will delete the queue even if it has tasks in it.
      ///
      /// Note: If you delete a queue, a queue with the same name can't be created
      /// for 7 days.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteQueueAsync(global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a queue.
      ///
      /// This command will delete the queue even if it has tasks in it.
      ///
      /// Note: If you delete a queue, a queue with the same name can't be created
      /// for 7 days.
      ///
      /// WARNING: Using this method may have unintended side effects if you are
      /// using an App Engine `queue.yaml` or `queue.xml` file to manage your queues.
      /// Read
      /// [Overview of Queue Management and
      /// queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using
      /// this method.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteQueueAsync(global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteQueue, null, options, request);
      }
      /// <summary>
      /// Purges a queue by deleting all of its tasks.
      ///
      /// All tasks created before this method is called are permanently deleted.
      ///
      /// Purge operations can take up to one minute to take effect. Tasks
      /// might be dispatched before the purge takes effect. A purge is irreversible.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue PurgeQueue(global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PurgeQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Purges a queue by deleting all of its tasks.
      ///
      /// All tasks created before this method is called are permanently deleted.
      ///
      /// Purge operations can take up to one minute to take effect. Tasks
      /// might be dispatched before the purge takes effect. A purge is irreversible.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue PurgeQueue(global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PurgeQueue, null, options, request);
      }
      /// <summary>
      /// Purges a queue by deleting all of its tasks.
      ///
      /// All tasks created before this method is called are permanently deleted.
      ///
      /// Purge operations can take up to one minute to take effect. Tasks
      /// might be dispatched before the purge takes effect. A purge is irreversible.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> PurgeQueueAsync(global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PurgeQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Purges a queue by deleting all of its tasks.
      ///
      /// All tasks created before this method is called are permanently deleted.
      ///
      /// Purge operations can take up to one minute to take effect. Tasks
      /// might be dispatched before the purge takes effect. A purge is irreversible.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> PurgeQueueAsync(global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PurgeQueue, null, options, request);
      }
      /// <summary>
      /// Pauses the queue.
      ///
      /// If a queue is paused then the system will stop dispatching tasks
      /// until the queue is resumed via
      /// [ResumeQueue][google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue]. Tasks can
      /// still be added when the queue is paused. A queue is paused if its
      /// [state][google.cloud.tasks.v2beta3.Queue.state] is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue PauseQueue(global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pauses the queue.
      ///
      /// If a queue is paused then the system will stop dispatching tasks
      /// until the queue is resumed via
      /// [ResumeQueue][google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue]. Tasks can
      /// still be added when the queue is paused. A queue is paused if its
      /// [state][google.cloud.tasks.v2beta3.Queue.state] is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue PauseQueue(global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PauseQueue, null, options, request);
      }
      /// <summary>
      /// Pauses the queue.
      ///
      /// If a queue is paused then the system will stop dispatching tasks
      /// until the queue is resumed via
      /// [ResumeQueue][google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue]. Tasks can
      /// still be added when the queue is paused. A queue is paused if its
      /// [state][google.cloud.tasks.v2beta3.Queue.state] is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> PauseQueueAsync(global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pauses the queue.
      ///
      /// If a queue is paused then the system will stop dispatching tasks
      /// until the queue is resumed via
      /// [ResumeQueue][google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue]. Tasks can
      /// still be added when the queue is paused. A queue is paused if its
      /// [state][google.cloud.tasks.v2beta3.Queue.state] is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> PauseQueueAsync(global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PauseQueue, null, options, request);
      }
      /// <summary>
      /// Resume a queue.
      ///
      /// This method resumes a queue after it has been
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED] or
      /// [DISABLED][google.cloud.tasks.v2beta3.Queue.State.DISABLED]. The state of a
      /// queue is stored in the queue's
      /// [state][google.cloud.tasks.v2beta3.Queue.state]; after calling this method
      /// it will be set to
      /// [RUNNING][google.cloud.tasks.v2beta3.Queue.State.RUNNING].
      ///
      /// WARNING: Resuming many high-QPS queues at the same time can
      /// lead to target overloading. If you are resuming high-QPS
      /// queues, follow the 500/50/5 pattern described in
      /// [Managing Cloud Tasks Scaling
      /// Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue ResumeQueue(global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResumeQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resume a queue.
      ///
      /// This method resumes a queue after it has been
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED] or
      /// [DISABLED][google.cloud.tasks.v2beta3.Queue.State.DISABLED]. The state of a
      /// queue is stored in the queue's
      /// [state][google.cloud.tasks.v2beta3.Queue.state]; after calling this method
      /// it will be set to
      /// [RUNNING][google.cloud.tasks.v2beta3.Queue.State.RUNNING].
      ///
      /// WARNING: Resuming many high-QPS queues at the same time can
      /// lead to target overloading. If you are resuming high-QPS
      /// queues, follow the 500/50/5 pattern described in
      /// [Managing Cloud Tasks Scaling
      /// Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Queue ResumeQueue(global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResumeQueue, null, options, request);
      }
      /// <summary>
      /// Resume a queue.
      ///
      /// This method resumes a queue after it has been
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED] or
      /// [DISABLED][google.cloud.tasks.v2beta3.Queue.State.DISABLED]. The state of a
      /// queue is stored in the queue's
      /// [state][google.cloud.tasks.v2beta3.Queue.state]; after calling this method
      /// it will be set to
      /// [RUNNING][google.cloud.tasks.v2beta3.Queue.State.RUNNING].
      ///
      /// WARNING: Resuming many high-QPS queues at the same time can
      /// lead to target overloading. If you are resuming high-QPS
      /// queues, follow the 500/50/5 pattern described in
      /// [Managing Cloud Tasks Scaling
      /// Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> ResumeQueueAsync(global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResumeQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resume a queue.
      ///
      /// This method resumes a queue after it has been
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED] or
      /// [DISABLED][google.cloud.tasks.v2beta3.Queue.State.DISABLED]. The state of a
      /// queue is stored in the queue's
      /// [state][google.cloud.tasks.v2beta3.Queue.state]; after calling this method
      /// it will be set to
      /// [RUNNING][google.cloud.tasks.v2beta3.Queue.State.RUNNING].
      ///
      /// WARNING: Resuming many high-QPS queues at the same time can
      /// lead to target overloading. If you are resuming high-QPS
      /// queues, follow the 500/50/5 pattern described in
      /// [Managing Cloud Tasks Scaling
      /// Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Queue> ResumeQueueAsync(global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResumeQueue, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Returns an empty policy if the
      /// resource exists and does not have a policy set.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.getIamPolicy`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Returns an empty policy if the
      /// resource exists and does not have a policy set.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.getIamPolicy`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Returns an empty policy if the
      /// resource exists and does not have a policy set.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.getIamPolicy`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Returns an empty policy if the
      /// resource exists and does not have a policy set.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.getIamPolicy`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Replaces any existing policy.
      ///
      /// Note: The Cloud Console does not check queue-level IAM permissions yet.
      /// Project-level permissions are required to use the Cloud Console.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.setIamPolicy`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Replaces any existing policy.
      ///
      /// Note: The Cloud Console does not check queue-level IAM permissions yet.
      /// Project-level permissions are required to use the Cloud Console.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.setIamPolicy`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Replaces any existing policy.
      ///
      /// Note: The Cloud Console does not check queue-level IAM permissions yet.
      /// Project-level permissions are required to use the Cloud Console.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.setIamPolicy`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy for a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. Replaces any existing policy.
      ///
      /// Note: The Cloud Console does not check queue-level IAM permissions yet.
      /// Project-level permissions are required to use the Cloud Console.
      ///
      /// Authorization requires the following
      /// [Google IAM](https://cloud.google.com/iam) permission on the specified
      /// resource parent:
      ///
      /// * `cloudtasks.queues.setIamPolicy`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. If the resource does not exist,
      /// this will return an empty set of permissions, not a
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
      ///
      /// Note: This operation is designed to be used for building permission-aware
      /// UIs and command-line tools, not for authorization checking. This operation
      /// may "fail open" without warning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. If the resource does not exist,
      /// this will return an empty set of permissions, not a
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
      ///
      /// Note: This operation is designed to be used for building permission-aware
      /// UIs and command-line tools, not for authorization checking. This operation
      /// may "fail open" without warning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that a caller has on a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. If the resource does not exist,
      /// this will return an empty set of permissions, not a
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
      ///
      /// Note: This operation is designed to be used for building permission-aware
      /// UIs and command-line tools, not for authorization checking. This operation
      /// may "fail open" without warning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that a caller has on a
      /// [Queue][google.cloud.tasks.v2beta3.Queue]. If the resource does not exist,
      /// this will return an empty set of permissions, not a
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] error.
      ///
      /// Note: This operation is designed to be used for building permission-aware
      /// UIs and command-line tools, not for authorization checking. This operation
      /// may "fail open" without warning.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Lists the tasks in a queue.
      ///
      /// By default, only the [BASIC][google.cloud.tasks.v2beta3.Task.View.BASIC]
      /// view is retrieved due to performance considerations;
      /// [response_view][google.cloud.tasks.v2beta3.ListTasksRequest.response_view]
      /// controls the subset of information which is returned.
      ///
      /// The tasks may be returned in any order. The ordering may change at any
      /// time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse ListTasks(global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the tasks in a queue.
      ///
      /// By default, only the [BASIC][google.cloud.tasks.v2beta3.Task.View.BASIC]
      /// view is retrieved due to performance considerations;
      /// [response_view][google.cloud.tasks.v2beta3.ListTasksRequest.response_view]
      /// controls the subset of information which is returned.
      ///
      /// The tasks may be returned in any order. The ordering may change at any
      /// time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse ListTasks(global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTasks, null, options, request);
      }
      /// <summary>
      /// Lists the tasks in a queue.
      ///
      /// By default, only the [BASIC][google.cloud.tasks.v2beta3.Task.View.BASIC]
      /// view is retrieved due to performance considerations;
      /// [response_view][google.cloud.tasks.v2beta3.ListTasksRequest.response_view]
      /// controls the subset of information which is returned.
      ///
      /// The tasks may be returned in any order. The ordering may change at any
      /// time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse> ListTasksAsync(global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the tasks in a queue.
      ///
      /// By default, only the [BASIC][google.cloud.tasks.v2beta3.Task.View.BASIC]
      /// view is retrieved due to performance considerations;
      /// [response_view][google.cloud.tasks.v2beta3.ListTasksRequest.response_view]
      /// controls the subset of information which is returned.
      ///
      /// The tasks may be returned in any order. The ordering may change at any
      /// time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse> ListTasksAsync(global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTasks, null, options, request);
      }
      /// <summary>
      /// Gets a task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Task GetTask(global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Task GetTask(global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      /// Gets a task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Task> GetTaskAsync(global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Task> GetTaskAsync(global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      /// Creates a task and adds it to a queue.
      ///
      /// Tasks cannot be updated after creation; there is no UpdateTask command.
      ///
      /// * The maximum task size is 100KB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Task CreateTask(global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a task and adds it to a queue.
      ///
      /// Tasks cannot be updated after creation; there is no UpdateTask command.
      ///
      /// * The maximum task size is 100KB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Task CreateTask(global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTask, null, options, request);
      }
      /// <summary>
      /// Creates a task and adds it to a queue.
      ///
      /// Tasks cannot be updated after creation; there is no UpdateTask command.
      ///
      /// * The maximum task size is 100KB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Task> CreateTaskAsync(global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a task and adds it to a queue.
      ///
      /// Tasks cannot be updated after creation; there is no UpdateTask command.
      ///
      /// * The maximum task size is 100KB.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Task> CreateTaskAsync(global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTask, null, options, request);
      }
      /// <summary>
      /// Deletes a task.
      ///
      /// A task can be deleted if it is scheduled or dispatched. A task
      /// cannot be deleted if it has executed successfully or permanently
      /// failed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTask(global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a task.
      ///
      /// A task can be deleted if it is scheduled or dispatched. A task
      /// cannot be deleted if it has executed successfully or permanently
      /// failed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTask(global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTask, null, options, request);
      }
      /// <summary>
      /// Deletes a task.
      ///
      /// A task can be deleted if it is scheduled or dispatched. A task
      /// cannot be deleted if it has executed successfully or permanently
      /// failed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTaskAsync(global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a task.
      ///
      /// A task can be deleted if it is scheduled or dispatched. A task
      /// cannot be deleted if it has executed successfully or permanently
      /// failed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTaskAsync(global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTask, null, options, request);
      }
      /// <summary>
      /// Forces a task to run now.
      ///
      /// When this method is called, Cloud Tasks will dispatch the task, even if
      /// the task is already running, the queue has reached its
      /// [RateLimits][google.cloud.tasks.v2beta3.RateLimits] or is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      ///
      /// This command is meant to be used for manual debugging. For
      /// example, [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] can be
      /// used to retry a failed task after a fix has been made or to manually force
      /// a task to be dispatched now.
      ///
      /// The dispatched task is returned. That is, the task that is returned
      /// contains the [status][Task.status] after the task is dispatched but
      /// before the task is received by its target.
      ///
      /// If Cloud Tasks receives a successful response from the task's
      /// target, then the task will be deleted; otherwise the task's
      /// [schedule_time][google.cloud.tasks.v2beta3.Task.schedule_time] will be
      /// reset to the time that
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] was called plus
      /// the retry delay specified in the queue's
      /// [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig].
      ///
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] returns
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
      /// task that has already succeeded or permanently failed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Task RunTask(global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Forces a task to run now.
      ///
      /// When this method is called, Cloud Tasks will dispatch the task, even if
      /// the task is already running, the queue has reached its
      /// [RateLimits][google.cloud.tasks.v2beta3.RateLimits] or is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      ///
      /// This command is meant to be used for manual debugging. For
      /// example, [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] can be
      /// used to retry a failed task after a fix has been made or to manually force
      /// a task to be dispatched now.
      ///
      /// The dispatched task is returned. That is, the task that is returned
      /// contains the [status][Task.status] after the task is dispatched but
      /// before the task is received by its target.
      ///
      /// If Cloud Tasks receives a successful response from the task's
      /// target, then the task will be deleted; otherwise the task's
      /// [schedule_time][google.cloud.tasks.v2beta3.Task.schedule_time] will be
      /// reset to the time that
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] was called plus
      /// the retry delay specified in the queue's
      /// [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig].
      ///
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] returns
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
      /// task that has already succeeded or permanently failed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Tasks.V2Beta3.Task RunTask(global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunTask, null, options, request);
      }
      /// <summary>
      /// Forces a task to run now.
      ///
      /// When this method is called, Cloud Tasks will dispatch the task, even if
      /// the task is already running, the queue has reached its
      /// [RateLimits][google.cloud.tasks.v2beta3.RateLimits] or is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      ///
      /// This command is meant to be used for manual debugging. For
      /// example, [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] can be
      /// used to retry a failed task after a fix has been made or to manually force
      /// a task to be dispatched now.
      ///
      /// The dispatched task is returned. That is, the task that is returned
      /// contains the [status][Task.status] after the task is dispatched but
      /// before the task is received by its target.
      ///
      /// If Cloud Tasks receives a successful response from the task's
      /// target, then the task will be deleted; otherwise the task's
      /// [schedule_time][google.cloud.tasks.v2beta3.Task.schedule_time] will be
      /// reset to the time that
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] was called plus
      /// the retry delay specified in the queue's
      /// [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig].
      ///
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] returns
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
      /// task that has already succeeded or permanently failed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Task> RunTaskAsync(global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Forces a task to run now.
      ///
      /// When this method is called, Cloud Tasks will dispatch the task, even if
      /// the task is already running, the queue has reached its
      /// [RateLimits][google.cloud.tasks.v2beta3.RateLimits] or is
      /// [PAUSED][google.cloud.tasks.v2beta3.Queue.State.PAUSED].
      ///
      /// This command is meant to be used for manual debugging. For
      /// example, [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] can be
      /// used to retry a failed task after a fix has been made or to manually force
      /// a task to be dispatched now.
      ///
      /// The dispatched task is returned. That is, the task that is returned
      /// contains the [status][Task.status] after the task is dispatched but
      /// before the task is received by its target.
      ///
      /// If Cloud Tasks receives a successful response from the task's
      /// target, then the task will be deleted; otherwise the task's
      /// [schedule_time][google.cloud.tasks.v2beta3.Task.schedule_time] will be
      /// reset to the time that
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] was called plus
      /// the retry delay specified in the queue's
      /// [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig].
      ///
      /// [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask] returns
      /// [NOT_FOUND][google.rpc.Code.NOT_FOUND] when it is called on a
      /// task that has already succeeded or permanently failed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Tasks.V2Beta3.Task> RunTaskAsync(global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunTask, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CloudTasksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CloudTasksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CloudTasksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListQueues, serviceImpl.ListQueues)
          .AddMethod(__Method_GetQueue, serviceImpl.GetQueue)
          .AddMethod(__Method_CreateQueue, serviceImpl.CreateQueue)
          .AddMethod(__Method_UpdateQueue, serviceImpl.UpdateQueue)
          .AddMethod(__Method_DeleteQueue, serviceImpl.DeleteQueue)
          .AddMethod(__Method_PurgeQueue, serviceImpl.PurgeQueue)
          .AddMethod(__Method_PauseQueue, serviceImpl.PauseQueue)
          .AddMethod(__Method_ResumeQueue, serviceImpl.ResumeQueue)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions)
          .AddMethod(__Method_ListTasks, serviceImpl.ListTasks)
          .AddMethod(__Method_GetTask, serviceImpl.GetTask)
          .AddMethod(__Method_CreateTask, serviceImpl.CreateTask)
          .AddMethod(__Method_DeleteTask, serviceImpl.DeleteTask)
          .AddMethod(__Method_RunTask, serviceImpl.RunTask).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CloudTasksBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListQueues, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.ListQueuesRequest, global::Google.Cloud.Tasks.V2Beta3.ListQueuesResponse>(serviceImpl.ListQueues));
      serviceBinder.AddMethod(__Method_GetQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.GetQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(serviceImpl.GetQueue));
      serviceBinder.AddMethod(__Method_CreateQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.CreateQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(serviceImpl.CreateQueue));
      serviceBinder.AddMethod(__Method_UpdateQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.UpdateQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(serviceImpl.UpdateQueue));
      serviceBinder.AddMethod(__Method_DeleteQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.DeleteQueueRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteQueue));
      serviceBinder.AddMethod(__Method_PurgeQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.PurgeQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(serviceImpl.PurgeQueue));
      serviceBinder.AddMethod(__Method_PauseQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.PauseQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(serviceImpl.PauseQueue));
      serviceBinder.AddMethod(__Method_ResumeQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.ResumeQueueRequest, global::Google.Cloud.Tasks.V2Beta3.Queue>(serviceImpl.ResumeQueue));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(serviceImpl.TestIamPermissions));
      serviceBinder.AddMethod(__Method_ListTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.ListTasksRequest, global::Google.Cloud.Tasks.V2Beta3.ListTasksResponse>(serviceImpl.ListTasks));
      serviceBinder.AddMethod(__Method_GetTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.GetTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task>(serviceImpl.GetTask));
      serviceBinder.AddMethod(__Method_CreateTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.CreateTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task>(serviceImpl.CreateTask));
      serviceBinder.AddMethod(__Method_DeleteTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.DeleteTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteTask));
      serviceBinder.AddMethod(__Method_RunTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Tasks.V2Beta3.RunTaskRequest, global::Google.Cloud.Tasks.V2Beta3.Task>(serviceImpl.RunTask));
    }

  }
}
#endregion
