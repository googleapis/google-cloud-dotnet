// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gkehub/v1beta1/membership.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.GkeHub.V1Beta1 {
  /// <summary>
  /// The GKE Hub MembershipService handles the registration of many Kubernetes
  /// clusters to Google Cloud, represented with the
  /// [Membership][google.cloud.gkehub.v1beta1.Membership] resource.
  ///
  /// GKE Hub is currently available in the global region and all regions in
  /// https://cloud.google.com/compute/docs/regions-zones.
  ///
  /// **Membership management may be non-trivial:** it is recommended to use one
  /// of the Google-provided client libraries or tools where possible when working
  /// with Membership resources.
  /// </summary>
  public static partial class GkeHubMembershipService
  {
    static readonly string __ServiceName = "google.cloud.gkehub.v1beta1.GkeHubMembershipService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest> __Marshaller_google_cloud_gkehub_v1beta1_ListMembershipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse> __Marshaller_google_cloud_gkehub_v1beta1_ListMembershipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest> __Marshaller_google_cloud_gkehub_v1beta1_GetMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.Membership> __Marshaller_google_cloud_gkehub_v1beta1_Membership = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.Membership.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest> __Marshaller_google_cloud_gkehub_v1beta1_CreateMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest> __Marshaller_google_cloud_gkehub_v1beta1_DeleteMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest> __Marshaller_google_cloud_gkehub_v1beta1_UpdateMembershipRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest> __Marshaller_google_cloud_gkehub_v1beta1_GenerateConnectManifestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse> __Marshaller_google_cloud_gkehub_v1beta1_GenerateConnectManifestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest> __Marshaller_google_cloud_gkehub_v1beta1_ValidateExclusivityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse> __Marshaller_google_cloud_gkehub_v1beta1_ValidateExclusivityResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest> __Marshaller_google_cloud_gkehub_v1beta1_GenerateExclusivityManifestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse> __Marshaller_google_cloud_gkehub_v1beta1_GenerateExclusivityManifestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest, global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse> __Method_ListMemberships = new grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest, global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListMemberships",
        __Marshaller_google_cloud_gkehub_v1beta1_ListMembershipsRequest,
        __Marshaller_google_cloud_gkehub_v1beta1_ListMembershipsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest, global::Google.Cloud.GkeHub.V1Beta1.Membership> __Method_GetMembership = new grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest, global::Google.Cloud.GkeHub.V1Beta1.Membership>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMembership",
        __Marshaller_google_cloud_gkehub_v1beta1_GetMembershipRequest,
        __Marshaller_google_cloud_gkehub_v1beta1_Membership);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest, global::Google.LongRunning.Operation> __Method_CreateMembership = new grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMembership",
        __Marshaller_google_cloud_gkehub_v1beta1_CreateMembershipRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest, global::Google.LongRunning.Operation> __Method_DeleteMembership = new grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteMembership",
        __Marshaller_google_cloud_gkehub_v1beta1_DeleteMembershipRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest, global::Google.LongRunning.Operation> __Method_UpdateMembership = new grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateMembership",
        __Marshaller_google_cloud_gkehub_v1beta1_UpdateMembershipRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest, global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse> __Method_GenerateConnectManifest = new grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest, global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateConnectManifest",
        __Marshaller_google_cloud_gkehub_v1beta1_GenerateConnectManifestRequest,
        __Marshaller_google_cloud_gkehub_v1beta1_GenerateConnectManifestResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest, global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse> __Method_ValidateExclusivity = new grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest, global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateExclusivity",
        __Marshaller_google_cloud_gkehub_v1beta1_ValidateExclusivityRequest,
        __Marshaller_google_cloud_gkehub_v1beta1_ValidateExclusivityResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest, global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse> __Method_GenerateExclusivityManifest = new grpc::Method<global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest, global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateExclusivityManifest",
        __Marshaller_google_cloud_gkehub_v1beta1_GenerateExclusivityManifestRequest,
        __Marshaller_google_cloud_gkehub_v1beta1_GenerateExclusivityManifestResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.GkeHub.V1Beta1.MembershipReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GkeHubMembershipService</summary>
    [grpc::BindServiceMethod(typeof(GkeHubMembershipService), "BindService")]
    public abstract partial class GkeHubMembershipServiceBase
    {
      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse> ListMemberships(global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Beta1.Membership> GetMembership(global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateMembership(global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteMembership(global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateMembership(global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse> GenerateConnectManifest(global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ValidateExclusivity validates the state of exclusivity in the cluster.
      /// The validation does not depend on an existing Hub membership resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse> ValidateExclusivity(global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GenerateExclusivityManifest generates the manifests to update the
      /// exclusivity artifacts in the cluster if needed.
      ///
      /// Exclusivity artifacts include the Membership custom resource definition
      /// (CRD) and the singleton Membership custom resource (CR). Combined with
      /// ValidateExclusivity, exclusivity artifacts guarantee that a Kubernetes
      /// cluster is only registered to a single GKE Hub.
      ///
      /// The Membership CRD is versioned, and may require conversion when the GKE
      /// Hub API server begins serving a newer version of the CRD and
      /// corresponding CR. The response will be the converted CRD and CR if there
      /// are any differences between the versions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse> GenerateExclusivityManifest(global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GkeHubMembershipService</summary>
    public partial class GkeHubMembershipServiceClient : grpc::ClientBase<GkeHubMembershipServiceClient>
    {
      /// <summary>Creates a new client for GkeHubMembershipService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GkeHubMembershipServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GkeHubMembershipService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GkeHubMembershipServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GkeHubMembershipServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GkeHubMembershipServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse ListMemberships(global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMemberships(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse ListMemberships(global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListMemberships, null, options, request);
      }
      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse> ListMembershipsAsync(global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMembershipsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Memberships in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse> ListMembershipsAsync(global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListMemberships, null, options, request);
      }
      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.Membership GetMembership(global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.Membership GetMembership(global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMembership, null, options, request);
      }
      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.Membership> GetMembershipAsync(global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the details of a Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.Membership> GetMembershipAsync(global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMembership, null, options, request);
      }
      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateMembership(global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateMembership(global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMembership, null, options, request);
      }
      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateMembershipAsync(global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To register other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateMembershipAsync(global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMembership, null, options, request);
      }
      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteMembership(global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteMembership(global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteMembership, null, options, request);
      }
      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteMembershipAsync(global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a Membership.
      ///
      /// **This is currently only supported for GKE clusters on Google Cloud**.
      /// To unregister other clusters, follow the instructions at
      /// https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteMembershipAsync(global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteMembership, null, options, request);
      }
      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateMembership(global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMembership(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateMembership(global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateMembership, null, options, request);
      }
      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateMembershipAsync(global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateMembershipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing Membership.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateMembershipAsync(global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateMembership, null, options, request);
      }
      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse GenerateConnectManifest(global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateConnectManifest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse GenerateConnectManifest(global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateConnectManifest, null, options, request);
      }
      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse> GenerateConnectManifestAsync(global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateConnectManifestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates the manifest for deployment of the GKE connect agent.
      ///
      /// **This method is used internally by Google-provided libraries.**
      /// Most clients should not need to call this method directly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse> GenerateConnectManifestAsync(global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateConnectManifest, null, options, request);
      }
      /// <summary>
      /// ValidateExclusivity validates the state of exclusivity in the cluster.
      /// The validation does not depend on an existing Hub membership resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse ValidateExclusivity(global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateExclusivity(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ValidateExclusivity validates the state of exclusivity in the cluster.
      /// The validation does not depend on an existing Hub membership resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse ValidateExclusivity(global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateExclusivity, null, options, request);
      }
      /// <summary>
      /// ValidateExclusivity validates the state of exclusivity in the cluster.
      /// The validation does not depend on an existing Hub membership resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse> ValidateExclusivityAsync(global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ValidateExclusivityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ValidateExclusivity validates the state of exclusivity in the cluster.
      /// The validation does not depend on an existing Hub membership resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse> ValidateExclusivityAsync(global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateExclusivity, null, options, request);
      }
      /// <summary>
      /// GenerateExclusivityManifest generates the manifests to update the
      /// exclusivity artifacts in the cluster if needed.
      ///
      /// Exclusivity artifacts include the Membership custom resource definition
      /// (CRD) and the singleton Membership custom resource (CR). Combined with
      /// ValidateExclusivity, exclusivity artifacts guarantee that a Kubernetes
      /// cluster is only registered to a single GKE Hub.
      ///
      /// The Membership CRD is versioned, and may require conversion when the GKE
      /// Hub API server begins serving a newer version of the CRD and
      /// corresponding CR. The response will be the converted CRD and CR if there
      /// are any differences between the versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse GenerateExclusivityManifest(global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateExclusivityManifest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GenerateExclusivityManifest generates the manifests to update the
      /// exclusivity artifacts in the cluster if needed.
      ///
      /// Exclusivity artifacts include the Membership custom resource definition
      /// (CRD) and the singleton Membership custom resource (CR). Combined with
      /// ValidateExclusivity, exclusivity artifacts guarantee that a Kubernetes
      /// cluster is only registered to a single GKE Hub.
      ///
      /// The Membership CRD is versioned, and may require conversion when the GKE
      /// Hub API server begins serving a newer version of the CRD and
      /// corresponding CR. The response will be the converted CRD and CR if there
      /// are any differences between the versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse GenerateExclusivityManifest(global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateExclusivityManifest, null, options, request);
      }
      /// <summary>
      /// GenerateExclusivityManifest generates the manifests to update the
      /// exclusivity artifacts in the cluster if needed.
      ///
      /// Exclusivity artifacts include the Membership custom resource definition
      /// (CRD) and the singleton Membership custom resource (CR). Combined with
      /// ValidateExclusivity, exclusivity artifacts guarantee that a Kubernetes
      /// cluster is only registered to a single GKE Hub.
      ///
      /// The Membership CRD is versioned, and may require conversion when the GKE
      /// Hub API server begins serving a newer version of the CRD and
      /// corresponding CR. The response will be the converted CRD and CR if there
      /// are any differences between the versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse> GenerateExclusivityManifestAsync(global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateExclusivityManifestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GenerateExclusivityManifest generates the manifests to update the
      /// exclusivity artifacts in the cluster if needed.
      ///
      /// Exclusivity artifacts include the Membership custom resource definition
      /// (CRD) and the singleton Membership custom resource (CR). Combined with
      /// ValidateExclusivity, exclusivity artifacts guarantee that a Kubernetes
      /// cluster is only registered to a single GKE Hub.
      ///
      /// The Membership CRD is versioned, and may require conversion when the GKE
      /// Hub API server begins serving a newer version of the CRD and
      /// corresponding CR. The response will be the converted CRD and CR if there
      /// are any differences between the versions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse> GenerateExclusivityManifestAsync(global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateExclusivityManifest, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override GkeHubMembershipServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GkeHubMembershipServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(GkeHubMembershipServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListMemberships, serviceImpl.ListMemberships)
          .AddMethod(__Method_GetMembership, serviceImpl.GetMembership)
          .AddMethod(__Method_CreateMembership, serviceImpl.CreateMembership)
          .AddMethod(__Method_DeleteMembership, serviceImpl.DeleteMembership)
          .AddMethod(__Method_UpdateMembership, serviceImpl.UpdateMembership)
          .AddMethod(__Method_GenerateConnectManifest, serviceImpl.GenerateConnectManifest)
          .AddMethod(__Method_ValidateExclusivity, serviceImpl.ValidateExclusivity)
          .AddMethod(__Method_GenerateExclusivityManifest, serviceImpl.GenerateExclusivityManifest).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GkeHubMembershipServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListMemberships, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsRequest, global::Google.Cloud.GkeHub.V1Beta1.ListMembershipsResponse>(serviceImpl.ListMemberships));
      serviceBinder.AddMethod(__Method_GetMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Beta1.GetMembershipRequest, global::Google.Cloud.GkeHub.V1Beta1.Membership>(serviceImpl.GetMembership));
      serviceBinder.AddMethod(__Method_CreateMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Beta1.CreateMembershipRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateMembership));
      serviceBinder.AddMethod(__Method_DeleteMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Beta1.DeleteMembershipRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteMembership));
      serviceBinder.AddMethod(__Method_UpdateMembership, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Beta1.UpdateMembershipRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateMembership));
      serviceBinder.AddMethod(__Method_GenerateConnectManifest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestRequest, global::Google.Cloud.GkeHub.V1Beta1.GenerateConnectManifestResponse>(serviceImpl.GenerateConnectManifest));
      serviceBinder.AddMethod(__Method_ValidateExclusivity, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityRequest, global::Google.Cloud.GkeHub.V1Beta1.ValidateExclusivityResponse>(serviceImpl.ValidateExclusivity));
      serviceBinder.AddMethod(__Method_GenerateExclusivityManifest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestRequest, global::Google.Cloud.GkeHub.V1Beta1.GenerateExclusivityManifestResponse>(serviceImpl.GenerateExclusivityManifest));
    }

  }
}
#endregion
