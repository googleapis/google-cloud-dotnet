// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/longrunning/operations.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.LongRunning {
  /// <summary>
  /// Manages long-running operations with an API service.
  ///
  /// When an API method normally takes long time to complete, it can be designed
  /// to return [Operation][google.longrunning.Operation] to the client, and the
  /// client can use this interface to receive the real response asynchronously by
  /// polling the operation resource, or pass the operation resource to another API
  /// (such as Pub/Sub API) to receive the response.  Any API service that returns
  /// long-running operations should implement the `Operations` interface so
  /// developers can have a consistent client experience.
  /// </summary>
  public static partial class Operations
  {
    static readonly string __ServiceName = "google.longrunning.Operations";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.ListOperationsRequest> __Marshaller_google_longrunning_ListOperationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.ListOperationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.ListOperationsResponse> __Marshaller_google_longrunning_ListOperationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.ListOperationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.GetOperationRequest> __Marshaller_google_longrunning_GetOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.GetOperationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.DeleteOperationRequest> __Marshaller_google_longrunning_DeleteOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.DeleteOperationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.CancelOperationRequest> __Marshaller_google_longrunning_CancelOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.CancelOperationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.WaitOperationRequest> __Marshaller_google_longrunning_WaitOperationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.WaitOperationRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.LongRunning.ListOperationsRequest, global::Google.LongRunning.ListOperationsResponse> __Method_ListOperations = new grpc::Method<global::Google.LongRunning.ListOperationsRequest, global::Google.LongRunning.ListOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOperations",
        __Marshaller_google_longrunning_ListOperationsRequest,
        __Marshaller_google_longrunning_ListOperationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.LongRunning.GetOperationRequest, global::Google.LongRunning.Operation> __Method_GetOperation = new grpc::Method<global::Google.LongRunning.GetOperationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOperation",
        __Marshaller_google_longrunning_GetOperationRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.LongRunning.DeleteOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteOperation = new grpc::Method<global::Google.LongRunning.DeleteOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOperation",
        __Marshaller_google_longrunning_DeleteOperationRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.LongRunning.CancelOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CancelOperation = new grpc::Method<global::Google.LongRunning.CancelOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelOperation",
        __Marshaller_google_longrunning_CancelOperationRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.LongRunning.WaitOperationRequest, global::Google.LongRunning.Operation> __Method_WaitOperation = new grpc::Method<global::Google.LongRunning.WaitOperationRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WaitOperation",
        __Marshaller_google_longrunning_WaitOperationRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.LongRunning.OperationsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Operations</summary>
    [grpc::BindServiceMethod(typeof(Operations), "BindService")]
    public abstract partial class OperationsBase
    {
      /// <summary>
      /// Lists operations that match the specified filter in the request. If the
      /// server doesn't support this method, it returns `UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.ListOperationsResponse> ListOperations(global::Google.LongRunning.ListOperationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the latest state of a long-running operation.  Clients can use this
      /// method to poll the operation result at intervals as recommended by the API
      /// service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> GetOperation(global::Google.LongRunning.GetOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a long-running operation. This method indicates that the client is
      /// no longer interested in the operation result. It does not cancel the
      /// operation. If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOperation(global::Google.LongRunning.DeleteOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts asynchronous cancellation on a long-running operation.  The server
      /// makes a best effort to cancel the operation, but success is not
      /// guaranteed.  If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
      /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
      /// other methods to check whether the cancellation succeeded or whether the
      /// operation completed despite cancellation. On successful cancellation,
      /// the operation is not deleted; instead, it becomes an operation with
      /// an [Operation.error][google.longrunning.Operation.error] value with a
      /// [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
      /// `Code.CANCELLED`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperation(global::Google.LongRunning.CancelOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Waits until the specified long-running operation is done or reaches at most
      /// a specified timeout, returning the latest state.  If the operation is
      /// already done, the latest state is immediately returned.  If the timeout
      /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
      /// timeout is used.  If the server does not support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// Note that this method is on a best-effort basis.  It may return the latest
      /// state before the specified timeout (including immediately), meaning even an
      /// immediate response is no guarantee that the operation is done.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> WaitOperation(global::Google.LongRunning.WaitOperationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Operations</summary>
    public partial class OperationsClient : grpc::ClientBase<OperationsClient>
    {
      /// <summary>Creates a new client for Operations</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OperationsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Operations that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OperationsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OperationsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OperationsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists operations that match the specified filter in the request. If the
      /// server doesn't support this method, it returns `UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.ListOperationsResponse ListOperations(global::Google.LongRunning.ListOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists operations that match the specified filter in the request. If the
      /// server doesn't support this method, it returns `UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.ListOperationsResponse ListOperations(global::Google.LongRunning.ListOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOperations, null, options, request);
      }
      /// <summary>
      /// Lists operations that match the specified filter in the request. If the
      /// server doesn't support this method, it returns `UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.ListOperationsResponse> ListOperationsAsync(global::Google.LongRunning.ListOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists operations that match the specified filter in the request. If the
      /// server doesn't support this method, it returns `UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.ListOperationsResponse> ListOperationsAsync(global::Google.LongRunning.ListOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOperations, null, options, request);
      }
      /// <summary>
      /// Gets the latest state of a long-running operation.  Clients can use this
      /// method to poll the operation result at intervals as recommended by the API
      /// service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation GetOperation(global::Google.LongRunning.GetOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the latest state of a long-running operation.  Clients can use this
      /// method to poll the operation result at intervals as recommended by the API
      /// service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation GetOperation(global::Google.LongRunning.GetOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOperation, null, options, request);
      }
      /// <summary>
      /// Gets the latest state of a long-running operation.  Clients can use this
      /// method to poll the operation result at intervals as recommended by the API
      /// service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetOperationAsync(global::Google.LongRunning.GetOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the latest state of a long-running operation.  Clients can use this
      /// method to poll the operation result at intervals as recommended by the API
      /// service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> GetOperationAsync(global::Google.LongRunning.GetOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOperation, null, options, request);
      }
      /// <summary>
      /// Deletes a long-running operation. This method indicates that the client is
      /// no longer interested in the operation result. It does not cancel the
      /// operation. If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOperation(global::Google.LongRunning.DeleteOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a long-running operation. This method indicates that the client is
      /// no longer interested in the operation result. It does not cancel the
      /// operation. If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOperation(global::Google.LongRunning.DeleteOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOperation, null, options, request);
      }
      /// <summary>
      /// Deletes a long-running operation. This method indicates that the client is
      /// no longer interested in the operation result. It does not cancel the
      /// operation. If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOperationAsync(global::Google.LongRunning.DeleteOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a long-running operation. This method indicates that the client is
      /// no longer interested in the operation result. It does not cancel the
      /// operation. If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOperationAsync(global::Google.LongRunning.DeleteOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOperation, null, options, request);
      }
      /// <summary>
      /// Starts asynchronous cancellation on a long-running operation.  The server
      /// makes a best effort to cancel the operation, but success is not
      /// guaranteed.  If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
      /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
      /// other methods to check whether the cancellation succeeded or whether the
      /// operation completed despite cancellation. On successful cancellation,
      /// the operation is not deleted; instead, it becomes an operation with
      /// an [Operation.error][google.longrunning.Operation.error] value with a
      /// [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
      /// `Code.CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelOperation(global::Google.LongRunning.CancelOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts asynchronous cancellation on a long-running operation.  The server
      /// makes a best effort to cancel the operation, but success is not
      /// guaranteed.  If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
      /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
      /// other methods to check whether the cancellation succeeded or whether the
      /// operation completed despite cancellation. On successful cancellation,
      /// the operation is not deleted; instead, it becomes an operation with
      /// an [Operation.error][google.longrunning.Operation.error] value with a
      /// [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
      /// `Code.CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelOperation(global::Google.LongRunning.CancelOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelOperation, null, options, request);
      }
      /// <summary>
      /// Starts asynchronous cancellation on a long-running operation.  The server
      /// makes a best effort to cancel the operation, but success is not
      /// guaranteed.  If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
      /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
      /// other methods to check whether the cancellation succeeded or whether the
      /// operation completed despite cancellation. On successful cancellation,
      /// the operation is not deleted; instead, it becomes an operation with
      /// an [Operation.error][google.longrunning.Operation.error] value with a
      /// [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
      /// `Code.CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperationAsync(global::Google.LongRunning.CancelOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts asynchronous cancellation on a long-running operation.  The server
      /// makes a best effort to cancel the operation, but success is not
      /// guaranteed.  If the server doesn't support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
      /// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
      /// other methods to check whether the cancellation succeeded or whether the
      /// operation completed despite cancellation. On successful cancellation,
      /// the operation is not deleted; instead, it becomes an operation with
      /// an [Operation.error][google.longrunning.Operation.error] value with a
      /// [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
      /// `Code.CANCELLED`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelOperationAsync(global::Google.LongRunning.CancelOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelOperation, null, options, request);
      }
      /// <summary>
      /// Waits until the specified long-running operation is done or reaches at most
      /// a specified timeout, returning the latest state.  If the operation is
      /// already done, the latest state is immediately returned.  If the timeout
      /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
      /// timeout is used.  If the server does not support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// Note that this method is on a best-effort basis.  It may return the latest
      /// state before the specified timeout (including immediately), meaning even an
      /// immediate response is no guarantee that the operation is done.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation WaitOperation(global::Google.LongRunning.WaitOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitOperation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits until the specified long-running operation is done or reaches at most
      /// a specified timeout, returning the latest state.  If the operation is
      /// already done, the latest state is immediately returned.  If the timeout
      /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
      /// timeout is used.  If the server does not support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// Note that this method is on a best-effort basis.  It may return the latest
      /// state before the specified timeout (including immediately), meaning even an
      /// immediate response is no guarantee that the operation is done.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation WaitOperation(global::Google.LongRunning.WaitOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WaitOperation, null, options, request);
      }
      /// <summary>
      /// Waits until the specified long-running operation is done or reaches at most
      /// a specified timeout, returning the latest state.  If the operation is
      /// already done, the latest state is immediately returned.  If the timeout
      /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
      /// timeout is used.  If the server does not support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// Note that this method is on a best-effort basis.  It may return the latest
      /// state before the specified timeout (including immediately), meaning even an
      /// immediate response is no guarantee that the operation is done.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> WaitOperationAsync(global::Google.LongRunning.WaitOperationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitOperationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Waits until the specified long-running operation is done or reaches at most
      /// a specified timeout, returning the latest state.  If the operation is
      /// already done, the latest state is immediately returned.  If the timeout
      /// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
      /// timeout is used.  If the server does not support this method, it returns
      /// `google.rpc.Code.UNIMPLEMENTED`.
      /// Note that this method is on a best-effort basis.  It may return the latest
      /// state before the specified timeout (including immediately), meaning even an
      /// immediate response is no guarantee that the operation is done.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> WaitOperationAsync(global::Google.LongRunning.WaitOperationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WaitOperation, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override OperationsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OperationsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(OperationsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListOperations, serviceImpl.ListOperations)
          .AddMethod(__Method_GetOperation, serviceImpl.GetOperation)
          .AddMethod(__Method_DeleteOperation, serviceImpl.DeleteOperation)
          .AddMethod(__Method_CancelOperation, serviceImpl.CancelOperation)
          .AddMethod(__Method_WaitOperation, serviceImpl.WaitOperation).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OperationsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListOperations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.LongRunning.ListOperationsRequest, global::Google.LongRunning.ListOperationsResponse>(serviceImpl.ListOperations));
      serviceBinder.AddMethod(__Method_GetOperation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.LongRunning.GetOperationRequest, global::Google.LongRunning.Operation>(serviceImpl.GetOperation));
      serviceBinder.AddMethod(__Method_DeleteOperation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.LongRunning.DeleteOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteOperation));
      serviceBinder.AddMethod(__Method_CancelOperation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.LongRunning.CancelOperationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CancelOperation));
      serviceBinder.AddMethod(__Method_WaitOperation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.LongRunning.WaitOperationRequest, global::Google.LongRunning.Operation>(serviceImpl.WaitOperation));
    }

  }
}
#endregion
