// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/shell/v1/cloudshell.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Shell.V1 {
  /// <summary>
  /// API for interacting with Google Cloud Shell. Each user of Cloud Shell has at
  /// least one environment, which has the ID "default". Environment consists of a
  /// Docker image defining what is installed on the environment and a home
  /// directory containing the user's data that will remain across sessions.
  /// Clients use this API to start and fetch information about their environment,
  /// which can then be used to connect to that environment via a separate SSH
  /// client.
  /// </summary>
  public static partial class CloudShellService
  {
    static readonly string __ServiceName = "google.cloud.shell.v1.CloudShellService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Shell.V1.GetEnvironmentRequest> __Marshaller_google_cloud_shell_v1_GetEnvironmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Shell.V1.GetEnvironmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Shell.V1.Environment> __Marshaller_google_cloud_shell_v1_Environment = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Shell.V1.Environment.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Shell.V1.StartEnvironmentRequest> __Marshaller_google_cloud_shell_v1_StartEnvironmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Shell.V1.StartEnvironmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest> __Marshaller_google_cloud_shell_v1_AuthorizeEnvironmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Shell.V1.AddPublicKeyRequest> __Marshaller_google_cloud_shell_v1_AddPublicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Shell.V1.AddPublicKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Shell.V1.RemovePublicKeyRequest> __Marshaller_google_cloud_shell_v1_RemovePublicKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Shell.V1.RemovePublicKeyRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Shell.V1.GetEnvironmentRequest, global::Google.Cloud.Shell.V1.Environment> __Method_GetEnvironment = new grpc::Method<global::Google.Cloud.Shell.V1.GetEnvironmentRequest, global::Google.Cloud.Shell.V1.Environment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEnvironment",
        __Marshaller_google_cloud_shell_v1_GetEnvironmentRequest,
        __Marshaller_google_cloud_shell_v1_Environment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Shell.V1.StartEnvironmentRequest, global::Google.LongRunning.Operation> __Method_StartEnvironment = new grpc::Method<global::Google.Cloud.Shell.V1.StartEnvironmentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartEnvironment",
        __Marshaller_google_cloud_shell_v1_StartEnvironmentRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest, global::Google.LongRunning.Operation> __Method_AuthorizeEnvironment = new grpc::Method<global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthorizeEnvironment",
        __Marshaller_google_cloud_shell_v1_AuthorizeEnvironmentRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Shell.V1.AddPublicKeyRequest, global::Google.LongRunning.Operation> __Method_AddPublicKey = new grpc::Method<global::Google.Cloud.Shell.V1.AddPublicKeyRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddPublicKey",
        __Marshaller_google_cloud_shell_v1_AddPublicKeyRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Shell.V1.RemovePublicKeyRequest, global::Google.LongRunning.Operation> __Method_RemovePublicKey = new grpc::Method<global::Google.Cloud.Shell.V1.RemovePublicKeyRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemovePublicKey",
        __Marshaller_google_cloud_shell_v1_RemovePublicKeyRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Shell.V1.CloudshellReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CloudShellService</summary>
    [grpc::BindServiceMethod(typeof(CloudShellService), "BindService")]
    public abstract partial class CloudShellServiceBase
    {
      /// <summary>
      /// Gets an environment. Returns NOT_FOUND if the environment does not exist.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Shell.V1.Environment> GetEnvironment(global::Google.Cloud.Shell.V1.GetEnvironmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts an existing environment, allowing clients to connect to it. The
      /// returned operation will contain an instance of StartEnvironmentMetadata in
      /// its metadata field. Users can wait for the environment to start by polling
      /// this operation via GetOperation. Once the environment has finished starting
      /// and is ready to accept connections, the operation will contain a
      /// StartEnvironmentResponse in its response field.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> StartEnvironment(global::Google.Cloud.Shell.V1.StartEnvironmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sends OAuth credentials to a running environment on behalf of a user. When
      /// this completes, the environment will be authorized to run various Google
      /// Cloud command line tools without requiring the user to manually
      /// authenticate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> AuthorizeEnvironment(global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds a public SSH key to an environment, allowing clients with the
      /// corresponding private key to connect to that environment via SSH. If a key
      /// with the same content already exists, this will error with ALREADY_EXISTS.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> AddPublicKey(global::Google.Cloud.Shell.V1.AddPublicKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a public SSH key from an environment. Clients will no longer be
      /// able to connect to the environment using the corresponding private key.
      /// If a key with the same content is not present, this will error with
      /// NOT_FOUND.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RemovePublicKey(global::Google.Cloud.Shell.V1.RemovePublicKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CloudShellService</summary>
    public partial class CloudShellServiceClient : grpc::ClientBase<CloudShellServiceClient>
    {
      /// <summary>Creates a new client for CloudShellService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudShellServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CloudShellService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudShellServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudShellServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudShellServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets an environment. Returns NOT_FOUND if the environment does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Shell.V1.Environment GetEnvironment(global::Google.Cloud.Shell.V1.GetEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnvironment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an environment. Returns NOT_FOUND if the environment does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Shell.V1.Environment GetEnvironment(global::Google.Cloud.Shell.V1.GetEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEnvironment, null, options, request);
      }
      /// <summary>
      /// Gets an environment. Returns NOT_FOUND if the environment does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Shell.V1.Environment> GetEnvironmentAsync(global::Google.Cloud.Shell.V1.GetEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEnvironmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets an environment. Returns NOT_FOUND if the environment does not exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Shell.V1.Environment> GetEnvironmentAsync(global::Google.Cloud.Shell.V1.GetEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEnvironment, null, options, request);
      }
      /// <summary>
      /// Starts an existing environment, allowing clients to connect to it. The
      /// returned operation will contain an instance of StartEnvironmentMetadata in
      /// its metadata field. Users can wait for the environment to start by polling
      /// this operation via GetOperation. Once the environment has finished starting
      /// and is ready to accept connections, the operation will contain a
      /// StartEnvironmentResponse in its response field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation StartEnvironment(global::Google.Cloud.Shell.V1.StartEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartEnvironment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts an existing environment, allowing clients to connect to it. The
      /// returned operation will contain an instance of StartEnvironmentMetadata in
      /// its metadata field. Users can wait for the environment to start by polling
      /// this operation via GetOperation. Once the environment has finished starting
      /// and is ready to accept connections, the operation will contain a
      /// StartEnvironmentResponse in its response field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation StartEnvironment(global::Google.Cloud.Shell.V1.StartEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartEnvironment, null, options, request);
      }
      /// <summary>
      /// Starts an existing environment, allowing clients to connect to it. The
      /// returned operation will contain an instance of StartEnvironmentMetadata in
      /// its metadata field. Users can wait for the environment to start by polling
      /// this operation via GetOperation. Once the environment has finished starting
      /// and is ready to accept connections, the operation will contain a
      /// StartEnvironmentResponse in its response field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> StartEnvironmentAsync(global::Google.Cloud.Shell.V1.StartEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartEnvironmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts an existing environment, allowing clients to connect to it. The
      /// returned operation will contain an instance of StartEnvironmentMetadata in
      /// its metadata field. Users can wait for the environment to start by polling
      /// this operation via GetOperation. Once the environment has finished starting
      /// and is ready to accept connections, the operation will contain a
      /// StartEnvironmentResponse in its response field.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> StartEnvironmentAsync(global::Google.Cloud.Shell.V1.StartEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartEnvironment, null, options, request);
      }
      /// <summary>
      /// Sends OAuth credentials to a running environment on behalf of a user. When
      /// this completes, the environment will be authorized to run various Google
      /// Cloud command line tools without requiring the user to manually
      /// authenticate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AuthorizeEnvironment(global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthorizeEnvironment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends OAuth credentials to a running environment on behalf of a user. When
      /// this completes, the environment will be authorized to run various Google
      /// Cloud command line tools without requiring the user to manually
      /// authenticate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AuthorizeEnvironment(global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthorizeEnvironment, null, options, request);
      }
      /// <summary>
      /// Sends OAuth credentials to a running environment on behalf of a user. When
      /// this completes, the environment will be authorized to run various Google
      /// Cloud command line tools without requiring the user to manually
      /// authenticate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AuthorizeEnvironmentAsync(global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthorizeEnvironmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sends OAuth credentials to a running environment on behalf of a user. When
      /// this completes, the environment will be authorized to run various Google
      /// Cloud command line tools without requiring the user to manually
      /// authenticate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AuthorizeEnvironmentAsync(global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthorizeEnvironment, null, options, request);
      }
      /// <summary>
      /// Adds a public SSH key to an environment, allowing clients with the
      /// corresponding private key to connect to that environment via SSH. If a key
      /// with the same content already exists, this will error with ALREADY_EXISTS.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AddPublicKey(global::Google.Cloud.Shell.V1.AddPublicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPublicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a public SSH key to an environment, allowing clients with the
      /// corresponding private key to connect to that environment via SSH. If a key
      /// with the same content already exists, this will error with ALREADY_EXISTS.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation AddPublicKey(global::Google.Cloud.Shell.V1.AddPublicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddPublicKey, null, options, request);
      }
      /// <summary>
      /// Adds a public SSH key to an environment, allowing clients with the
      /// corresponding private key to connect to that environment via SSH. If a key
      /// with the same content already exists, this will error with ALREADY_EXISTS.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AddPublicKeyAsync(global::Google.Cloud.Shell.V1.AddPublicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddPublicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a public SSH key to an environment, allowing clients with the
      /// corresponding private key to connect to that environment via SSH. If a key
      /// with the same content already exists, this will error with ALREADY_EXISTS.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> AddPublicKeyAsync(global::Google.Cloud.Shell.V1.AddPublicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddPublicKey, null, options, request);
      }
      /// <summary>
      /// Removes a public SSH key from an environment. Clients will no longer be
      /// able to connect to the environment using the corresponding private key.
      /// If a key with the same content is not present, this will error with
      /// NOT_FOUND.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RemovePublicKey(global::Google.Cloud.Shell.V1.RemovePublicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePublicKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a public SSH key from an environment. Clients will no longer be
      /// able to connect to the environment using the corresponding private key.
      /// If a key with the same content is not present, this will error with
      /// NOT_FOUND.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RemovePublicKey(global::Google.Cloud.Shell.V1.RemovePublicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemovePublicKey, null, options, request);
      }
      /// <summary>
      /// Removes a public SSH key from an environment. Clients will no longer be
      /// able to connect to the environment using the corresponding private key.
      /// If a key with the same content is not present, this will error with
      /// NOT_FOUND.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RemovePublicKeyAsync(global::Google.Cloud.Shell.V1.RemovePublicKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemovePublicKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a public SSH key from an environment. Clients will no longer be
      /// able to connect to the environment using the corresponding private key.
      /// If a key with the same content is not present, this will error with
      /// NOT_FOUND.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RemovePublicKeyAsync(global::Google.Cloud.Shell.V1.RemovePublicKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemovePublicKey, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CloudShellServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CloudShellServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CloudShellServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetEnvironment, serviceImpl.GetEnvironment)
          .AddMethod(__Method_StartEnvironment, serviceImpl.StartEnvironment)
          .AddMethod(__Method_AuthorizeEnvironment, serviceImpl.AuthorizeEnvironment)
          .AddMethod(__Method_AddPublicKey, serviceImpl.AddPublicKey)
          .AddMethod(__Method_RemovePublicKey, serviceImpl.RemovePublicKey).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CloudShellServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetEnvironment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Shell.V1.GetEnvironmentRequest, global::Google.Cloud.Shell.V1.Environment>(serviceImpl.GetEnvironment));
      serviceBinder.AddMethod(__Method_StartEnvironment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Shell.V1.StartEnvironmentRequest, global::Google.LongRunning.Operation>(serviceImpl.StartEnvironment));
      serviceBinder.AddMethod(__Method_AuthorizeEnvironment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Shell.V1.AuthorizeEnvironmentRequest, global::Google.LongRunning.Operation>(serviceImpl.AuthorizeEnvironment));
      serviceBinder.AddMethod(__Method_AddPublicKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Shell.V1.AddPublicKeyRequest, global::Google.LongRunning.Operation>(serviceImpl.AddPublicKey));
      serviceBinder.AddMethod(__Method_RemovePublicKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Shell.V1.RemovePublicKeyRequest, global::Google.LongRunning.Operation>(serviceImpl.RemovePublicKey));
    }

  }
}
#endregion
