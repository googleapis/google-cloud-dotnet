// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/datacatalog/v1/policytagmanagerserialization.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.DataCatalog.V1 {
  /// <summary>
  /// Policy Tag Manager Serialization API service allows you to manipulate
  /// your policy tags and taxonomies in a serialized format.
  ///
  /// Taxonomy is a hierarchical group of policy tags.
  /// </summary>
  public static partial class PolicyTagManagerSerialization
  {
    static readonly string __ServiceName = "google.cloud.datacatalog.v1.PolicyTagManagerSerialization";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest> __Marshaller_google_cloud_datacatalog_v1_ReplaceTaxonomyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataCatalog.V1.Taxonomy> __Marshaller_google_cloud_datacatalog_v1_Taxonomy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataCatalog.V1.Taxonomy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest> __Marshaller_google_cloud_datacatalog_v1_ImportTaxonomiesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse> __Marshaller_google_cloud_datacatalog_v1_ImportTaxonomiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest> __Marshaller_google_cloud_datacatalog_v1_ExportTaxonomiesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse> __Marshaller_google_cloud_datacatalog_v1_ExportTaxonomiesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest, global::Google.Cloud.DataCatalog.V1.Taxonomy> __Method_ReplaceTaxonomy = new grpc::Method<global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest, global::Google.Cloud.DataCatalog.V1.Taxonomy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReplaceTaxonomy",
        __Marshaller_google_cloud_datacatalog_v1_ReplaceTaxonomyRequest,
        __Marshaller_google_cloud_datacatalog_v1_Taxonomy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest, global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse> __Method_ImportTaxonomies = new grpc::Method<global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest, global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportTaxonomies",
        __Marshaller_google_cloud_datacatalog_v1_ImportTaxonomiesRequest,
        __Marshaller_google_cloud_datacatalog_v1_ImportTaxonomiesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest, global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse> __Method_ExportTaxonomies = new grpc::Method<global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest, global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExportTaxonomies",
        __Marshaller_google_cloud_datacatalog_v1_ExportTaxonomiesRequest,
        __Marshaller_google_cloud_datacatalog_v1_ExportTaxonomiesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.DataCatalog.V1.PolicytagmanagerserializationReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PolicyTagManagerSerialization</summary>
    [grpc::BindServiceMethod(typeof(PolicyTagManagerSerialization), "BindService")]
    public abstract partial class PolicyTagManagerSerializationBase
    {
      /// <summary>
      /// Replaces (updates) a taxonomy and all its policy tags.
      ///
      /// The taxonomy and its entire hierarchy of policy tags must be
      /// represented literally by `SerializedTaxonomy` and the nested
      /// `SerializedPolicyTag` messages.
      ///
      /// This operation automatically does the following:
      ///
      /// - Deletes the existing policy tags that are missing from the
      ///   `SerializedPolicyTag`.
      /// - Creates policy tags that don't have resource names. They are considered
      ///   new.
      /// - Updates policy tags with valid resources names accordingly.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DataCatalog.V1.Taxonomy> ReplaceTaxonomy(global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates new taxonomies (including their policy tags) in a given project
      /// by importing from inlined or cross-regional sources.
      ///
      /// For a cross-regional source, new taxonomies are created by copying
      /// from a source in another region.
      ///
      /// For an inlined source, taxonomies and policy tags are created in bulk using
      /// nested protocol buffer structures.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse> ImportTaxonomies(global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Exports taxonomies in the requested type and returns them,
      /// including their policy tags. The requested taxonomies must belong to the
      /// same project.
      ///
      /// This method generates `SerializedTaxonomy` protocol buffers with nested
      /// policy tags that can be used as input for `ImportTaxonomies` calls.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse> ExportTaxonomies(global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PolicyTagManagerSerialization</summary>
    public partial class PolicyTagManagerSerializationClient : grpc::ClientBase<PolicyTagManagerSerializationClient>
    {
      /// <summary>Creates a new client for PolicyTagManagerSerialization</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PolicyTagManagerSerializationClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PolicyTagManagerSerialization that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PolicyTagManagerSerializationClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PolicyTagManagerSerializationClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PolicyTagManagerSerializationClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Replaces (updates) a taxonomy and all its policy tags.
      ///
      /// The taxonomy and its entire hierarchy of policy tags must be
      /// represented literally by `SerializedTaxonomy` and the nested
      /// `SerializedPolicyTag` messages.
      ///
      /// This operation automatically does the following:
      ///
      /// - Deletes the existing policy tags that are missing from the
      ///   `SerializedPolicyTag`.
      /// - Creates policy tags that don't have resource names. They are considered
      ///   new.
      /// - Updates policy tags with valid resources names accordingly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataCatalog.V1.Taxonomy ReplaceTaxonomy(global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceTaxonomy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replaces (updates) a taxonomy and all its policy tags.
      ///
      /// The taxonomy and its entire hierarchy of policy tags must be
      /// represented literally by `SerializedTaxonomy` and the nested
      /// `SerializedPolicyTag` messages.
      ///
      /// This operation automatically does the following:
      ///
      /// - Deletes the existing policy tags that are missing from the
      ///   `SerializedPolicyTag`.
      /// - Creates policy tags that don't have resource names. They are considered
      ///   new.
      /// - Updates policy tags with valid resources names accordingly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataCatalog.V1.Taxonomy ReplaceTaxonomy(global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReplaceTaxonomy, null, options, request);
      }
      /// <summary>
      /// Replaces (updates) a taxonomy and all its policy tags.
      ///
      /// The taxonomy and its entire hierarchy of policy tags must be
      /// represented literally by `SerializedTaxonomy` and the nested
      /// `SerializedPolicyTag` messages.
      ///
      /// This operation automatically does the following:
      ///
      /// - Deletes the existing policy tags that are missing from the
      ///   `SerializedPolicyTag`.
      /// - Creates policy tags that don't have resource names. They are considered
      ///   new.
      /// - Updates policy tags with valid resources names accordingly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataCatalog.V1.Taxonomy> ReplaceTaxonomyAsync(global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReplaceTaxonomyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Replaces (updates) a taxonomy and all its policy tags.
      ///
      /// The taxonomy and its entire hierarchy of policy tags must be
      /// represented literally by `SerializedTaxonomy` and the nested
      /// `SerializedPolicyTag` messages.
      ///
      /// This operation automatically does the following:
      ///
      /// - Deletes the existing policy tags that are missing from the
      ///   `SerializedPolicyTag`.
      /// - Creates policy tags that don't have resource names. They are considered
      ///   new.
      /// - Updates policy tags with valid resources names accordingly.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataCatalog.V1.Taxonomy> ReplaceTaxonomyAsync(global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReplaceTaxonomy, null, options, request);
      }
      /// <summary>
      /// Creates new taxonomies (including their policy tags) in a given project
      /// by importing from inlined or cross-regional sources.
      ///
      /// For a cross-regional source, new taxonomies are created by copying
      /// from a source in another region.
      ///
      /// For an inlined source, taxonomies and policy tags are created in bulk using
      /// nested protocol buffer structures.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse ImportTaxonomies(global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportTaxonomies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new taxonomies (including their policy tags) in a given project
      /// by importing from inlined or cross-regional sources.
      ///
      /// For a cross-regional source, new taxonomies are created by copying
      /// from a source in another region.
      ///
      /// For an inlined source, taxonomies and policy tags are created in bulk using
      /// nested protocol buffer structures.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse ImportTaxonomies(global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportTaxonomies, null, options, request);
      }
      /// <summary>
      /// Creates new taxonomies (including their policy tags) in a given project
      /// by importing from inlined or cross-regional sources.
      ///
      /// For a cross-regional source, new taxonomies are created by copying
      /// from a source in another region.
      ///
      /// For an inlined source, taxonomies and policy tags are created in bulk using
      /// nested protocol buffer structures.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse> ImportTaxonomiesAsync(global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportTaxonomiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new taxonomies (including their policy tags) in a given project
      /// by importing from inlined or cross-regional sources.
      ///
      /// For a cross-regional source, new taxonomies are created by copying
      /// from a source in another region.
      ///
      /// For an inlined source, taxonomies and policy tags are created in bulk using
      /// nested protocol buffer structures.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse> ImportTaxonomiesAsync(global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportTaxonomies, null, options, request);
      }
      /// <summary>
      /// Exports taxonomies in the requested type and returns them,
      /// including their policy tags. The requested taxonomies must belong to the
      /// same project.
      ///
      /// This method generates `SerializedTaxonomy` protocol buffers with nested
      /// policy tags that can be used as input for `ImportTaxonomies` calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse ExportTaxonomies(global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportTaxonomies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports taxonomies in the requested type and returns them,
      /// including their policy tags. The requested taxonomies must belong to the
      /// same project.
      ///
      /// This method generates `SerializedTaxonomy` protocol buffers with nested
      /// policy tags that can be used as input for `ImportTaxonomies` calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse ExportTaxonomies(global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExportTaxonomies, null, options, request);
      }
      /// <summary>
      /// Exports taxonomies in the requested type and returns them,
      /// including their policy tags. The requested taxonomies must belong to the
      /// same project.
      ///
      /// This method generates `SerializedTaxonomy` protocol buffers with nested
      /// policy tags that can be used as input for `ImportTaxonomies` calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse> ExportTaxonomiesAsync(global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExportTaxonomiesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exports taxonomies in the requested type and returns them,
      /// including their policy tags. The requested taxonomies must belong to the
      /// same project.
      ///
      /// This method generates `SerializedTaxonomy` protocol buffers with nested
      /// policy tags that can be used as input for `ImportTaxonomies` calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse> ExportTaxonomiesAsync(global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExportTaxonomies, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PolicyTagManagerSerializationClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PolicyTagManagerSerializationClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PolicyTagManagerSerializationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReplaceTaxonomy, serviceImpl.ReplaceTaxonomy)
          .AddMethod(__Method_ImportTaxonomies, serviceImpl.ImportTaxonomies)
          .AddMethod(__Method_ExportTaxonomies, serviceImpl.ExportTaxonomies).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PolicyTagManagerSerializationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ReplaceTaxonomy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DataCatalog.V1.ReplaceTaxonomyRequest, global::Google.Cloud.DataCatalog.V1.Taxonomy>(serviceImpl.ReplaceTaxonomy));
      serviceBinder.AddMethod(__Method_ImportTaxonomies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesRequest, global::Google.Cloud.DataCatalog.V1.ImportTaxonomiesResponse>(serviceImpl.ImportTaxonomies));
      serviceBinder.AddMethod(__Method_ExportTaxonomies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesRequest, global::Google.Cloud.DataCatalog.V1.ExportTaxonomiesResponse>(serviceImpl.ExportTaxonomies));
    }

  }
}
#endregion
