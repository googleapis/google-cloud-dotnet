// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/documentai/v1beta3/document_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.DocumentAI.V1Beta3 {
  /// <summary>
  /// Service to call Cloud DocumentAI to manage document collection (dataset).
  /// </summary>
  public static partial class DocumentService
  {
    static readonly string __ServiceName = "google.cloud.documentai.v1beta3.DocumentService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest> __Marshaller_google_cloud_documentai_v1beta3_UpdateDatasetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest> __Marshaller_google_cloud_documentai_v1beta3_ImportDocumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest> __Marshaller_google_cloud_documentai_v1beta3_GetDocumentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse> __Marshaller_google_cloud_documentai_v1beta3_GetDocumentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest> __Marshaller_google_cloud_documentai_v1beta3_ListDocumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse> __Marshaller_google_cloud_documentai_v1beta3_ListDocumentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest> __Marshaller_google_cloud_documentai_v1beta3_BatchDeleteDocumentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest> __Marshaller_google_cloud_documentai_v1beta3_GetDatasetSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> __Marshaller_google_cloud_documentai_v1beta3_DatasetSchema = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest> __Marshaller_google_cloud_documentai_v1beta3_UpdateDatasetSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest, global::Google.LongRunning.Operation> __Method_UpdateDataset = new grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDataset",
        __Marshaller_google_cloud_documentai_v1beta3_UpdateDatasetRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest, global::Google.LongRunning.Operation> __Method_ImportDocuments = new grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportDocuments",
        __Marshaller_google_cloud_documentai_v1beta3_ImportDocumentsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest, global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse> __Method_GetDocument = new grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest, global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDocument",
        __Marshaller_google_cloud_documentai_v1beta3_GetDocumentRequest,
        __Marshaller_google_cloud_documentai_v1beta3_GetDocumentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest, global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse> __Method_ListDocuments = new grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest, global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDocuments",
        __Marshaller_google_cloud_documentai_v1beta3_ListDocumentsRequest,
        __Marshaller_google_cloud_documentai_v1beta3_ListDocumentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest, global::Google.LongRunning.Operation> __Method_BatchDeleteDocuments = new grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchDeleteDocuments",
        __Marshaller_google_cloud_documentai_v1beta3_BatchDeleteDocumentsRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest, global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> __Method_GetDatasetSchema = new grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest, global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDatasetSchema",
        __Marshaller_google_cloud_documentai_v1beta3_GetDatasetSchemaRequest,
        __Marshaller_google_cloud_documentai_v1beta3_DatasetSchema);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest, global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> __Method_UpdateDatasetSchema = new grpc::Method<global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest, global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDatasetSchema",
        __Marshaller_google_cloud_documentai_v1beta3_UpdateDatasetSchemaRequest,
        __Marshaller_google_cloud_documentai_v1beta3_DatasetSchema);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.DocumentAI.V1Beta3.DocumentServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DocumentService</summary>
    [grpc::BindServiceMethod(typeof(DocumentService), "BindService")]
    public abstract partial class DocumentServiceBase
    {
      /// <summary>
      /// Updates metadata associated with a dataset.
      /// Note that this method requires the
      /// `documentai.googleapis.com/datasets.update` permission on the project,
      /// which is highly privileged. A user or service account with this permission
      /// can create new processors that can interact with any gcs bucket in your
      /// project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateDataset(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Import documents into a dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ImportDocuments(global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns relevant fields present in the requested document.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse> GetDocument(global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of documents present in the dataset.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse> ListDocuments(global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a set of documents.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> BatchDeleteDocuments(global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the `DatasetSchema` of a `Dataset`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> GetDatasetSchema(global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a `DatasetSchema`.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> UpdateDatasetSchema(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DocumentService</summary>
    public partial class DocumentServiceClient : grpc::ClientBase<DocumentServiceClient>
    {
      /// <summary>Creates a new client for DocumentService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DocumentServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DocumentService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DocumentServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DocumentServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DocumentServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Updates metadata associated with a dataset.
      /// Note that this method requires the
      /// `documentai.googleapis.com/datasets.update` permission on the project,
      /// which is highly privileged. A user or service account with this permission
      /// can create new processors that can interact with any gcs bucket in your
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDataset(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates metadata associated with a dataset.
      /// Note that this method requires the
      /// `documentai.googleapis.com/datasets.update` permission on the project,
      /// which is highly privileged. A user or service account with this permission
      /// can create new processors that can interact with any gcs bucket in your
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateDataset(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDataset, null, options, request);
      }
      /// <summary>
      /// Updates metadata associated with a dataset.
      /// Note that this method requires the
      /// `documentai.googleapis.com/datasets.update` permission on the project,
      /// which is highly privileged. A user or service account with this permission
      /// can create new processors that can interact with any gcs bucket in your
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatasetAsync(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatasetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates metadata associated with a dataset.
      /// Note that this method requires the
      /// `documentai.googleapis.com/datasets.update` permission on the project,
      /// which is highly privileged. A user or service account with this permission
      /// can create new processors that can interact with any gcs bucket in your
      /// project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateDatasetAsync(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDataset, null, options, request);
      }
      /// <summary>
      /// Import documents into a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ImportDocuments(global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportDocuments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Import documents into a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ImportDocuments(global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportDocuments, null, options, request);
      }
      /// <summary>
      /// Import documents into a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportDocumentsAsync(global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportDocumentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Import documents into a dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportDocumentsAsync(global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportDocuments, null, options, request);
      }
      /// <summary>
      /// Returns relevant fields present in the requested document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse GetDocument(global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDocument(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns relevant fields present in the requested document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse GetDocument(global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDocument, null, options, request);
      }
      /// <summary>
      /// Returns relevant fields present in the requested document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse> GetDocumentAsync(global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDocumentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns relevant fields present in the requested document.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse> GetDocumentAsync(global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDocument, null, options, request);
      }
      /// <summary>
      /// Returns a list of documents present in the dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse ListDocuments(global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDocuments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of documents present in the dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse ListDocuments(global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDocuments, null, options, request);
      }
      /// <summary>
      /// Returns a list of documents present in the dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse> ListDocumentsAsync(global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDocumentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of documents present in the dataset.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse> ListDocumentsAsync(global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDocuments, null, options, request);
      }
      /// <summary>
      /// Deletes a set of documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BatchDeleteDocuments(global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeleteDocuments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a set of documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BatchDeleteDocuments(global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchDeleteDocuments, null, options, request);
      }
      /// <summary>
      /// Deletes a set of documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BatchDeleteDocumentsAsync(global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchDeleteDocumentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a set of documents.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BatchDeleteDocumentsAsync(global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchDeleteDocuments, null, options, request);
      }
      /// <summary>
      /// Gets the `DatasetSchema` of a `Dataset`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema GetDatasetSchema(global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the `DatasetSchema` of a `Dataset`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema GetDatasetSchema(global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDatasetSchema, null, options, request);
      }
      /// <summary>
      /// Gets the `DatasetSchema` of a `Dataset`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> GetDatasetSchemaAsync(global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDatasetSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the `DatasetSchema` of a `Dataset`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> GetDatasetSchemaAsync(global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDatasetSchema, null, options, request);
      }
      /// <summary>
      /// Updates a `DatasetSchema`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema UpdateDatasetSchema(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatasetSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a `DatasetSchema`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema UpdateDatasetSchema(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDatasetSchema, null, options, request);
      }
      /// <summary>
      /// Updates a `DatasetSchema`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> UpdateDatasetSchemaAsync(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDatasetSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a `DatasetSchema`.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema> UpdateDatasetSchemaAsync(global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDatasetSchema, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DocumentServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DocumentServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DocumentServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UpdateDataset, serviceImpl.UpdateDataset)
          .AddMethod(__Method_ImportDocuments, serviceImpl.ImportDocuments)
          .AddMethod(__Method_GetDocument, serviceImpl.GetDocument)
          .AddMethod(__Method_ListDocuments, serviceImpl.ListDocuments)
          .AddMethod(__Method_BatchDeleteDocuments, serviceImpl.BatchDeleteDocuments)
          .AddMethod(__Method_GetDatasetSchema, serviceImpl.GetDatasetSchema)
          .AddMethod(__Method_UpdateDatasetSchema, serviceImpl.UpdateDatasetSchema).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DocumentServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_UpdateDataset, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateDataset));
      serviceBinder.AddMethod(__Method_ImportDocuments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DocumentAI.V1Beta3.ImportDocumentsRequest, global::Google.LongRunning.Operation>(serviceImpl.ImportDocuments));
      serviceBinder.AddMethod(__Method_GetDocument, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentRequest, global::Google.Cloud.DocumentAI.V1Beta3.GetDocumentResponse>(serviceImpl.GetDocument));
      serviceBinder.AddMethod(__Method_ListDocuments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsRequest, global::Google.Cloud.DocumentAI.V1Beta3.ListDocumentsResponse>(serviceImpl.ListDocuments));
      serviceBinder.AddMethod(__Method_BatchDeleteDocuments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DocumentAI.V1Beta3.BatchDeleteDocumentsRequest, global::Google.LongRunning.Operation>(serviceImpl.BatchDeleteDocuments));
      serviceBinder.AddMethod(__Method_GetDatasetSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DocumentAI.V1Beta3.GetDatasetSchemaRequest, global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema>(serviceImpl.GetDatasetSchema));
      serviceBinder.AddMethod(__Method_UpdateDatasetSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DocumentAI.V1Beta3.UpdateDatasetSchemaRequest, global::Google.Cloud.DocumentAI.V1Beta3.DatasetSchema>(serviceImpl.UpdateDatasetSchema));
    }

  }
}
#endregion
