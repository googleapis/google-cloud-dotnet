// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/developerconnect/v1/developer_connect.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.DeveloperConnect.V1 {
  /// <summary>
  /// Service describing handlers for resources
  /// </summary>
  public static partial class DeveloperConnect
  {
    static readonly string __ServiceName = "google.cloud.developerconnect.v1.DeveloperConnect";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest> __Marshaller_google_cloud_developerconnect_v1_ListConnectionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse> __Marshaller_google_cloud_developerconnect_v1_ListConnectionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest> __Marshaller_google_cloud_developerconnect_v1_GetConnectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.Connection> __Marshaller_google_cloud_developerconnect_v1_Connection = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.Connection.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest> __Marshaller_google_cloud_developerconnect_v1_CreateConnectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest> __Marshaller_google_cloud_developerconnect_v1_UpdateConnectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest> __Marshaller_google_cloud_developerconnect_v1_DeleteConnectionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest> __Marshaller_google_cloud_developerconnect_v1_CreateGitRepositoryLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest> __Marshaller_google_cloud_developerconnect_v1_DeleteGitRepositoryLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest> __Marshaller_google_cloud_developerconnect_v1_ListGitRepositoryLinksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse> __Marshaller_google_cloud_developerconnect_v1_ListGitRepositoryLinksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest> __Marshaller_google_cloud_developerconnect_v1_GetGitRepositoryLinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink> __Marshaller_google_cloud_developerconnect_v1_GitRepositoryLink = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest> __Marshaller_google_cloud_developerconnect_v1_FetchReadWriteTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse> __Marshaller_google_cloud_developerconnect_v1_FetchReadWriteTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest> __Marshaller_google_cloud_developerconnect_v1_FetchReadTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse> __Marshaller_google_cloud_developerconnect_v1_FetchReadTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest> __Marshaller_google_cloud_developerconnect_v1_FetchLinkableGitRepositoriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse> __Marshaller_google_cloud_developerconnect_v1_FetchLinkableGitRepositoriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest> __Marshaller_google_cloud_developerconnect_v1_FetchGitHubInstallationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse> __Marshaller_google_cloud_developerconnect_v1_FetchGitHubInstallationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest> __Marshaller_google_cloud_developerconnect_v1_FetchGitRefsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse> __Marshaller_google_cloud_developerconnect_v1_FetchGitRefsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest, global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse> __Method_ListConnections = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest, global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConnections",
        __Marshaller_google_cloud_developerconnect_v1_ListConnectionsRequest,
        __Marshaller_google_cloud_developerconnect_v1_ListConnectionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest, global::Google.Cloud.DeveloperConnect.V1.Connection> __Method_GetConnection = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest, global::Google.Cloud.DeveloperConnect.V1.Connection>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnection",
        __Marshaller_google_cloud_developerconnect_v1_GetConnectionRequest,
        __Marshaller_google_cloud_developerconnect_v1_Connection);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest, global::Google.LongRunning.Operation> __Method_CreateConnection = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateConnection",
        __Marshaller_google_cloud_developerconnect_v1_CreateConnectionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest, global::Google.LongRunning.Operation> __Method_UpdateConnection = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateConnection",
        __Marshaller_google_cloud_developerconnect_v1_UpdateConnectionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest, global::Google.LongRunning.Operation> __Method_DeleteConnection = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConnection",
        __Marshaller_google_cloud_developerconnect_v1_DeleteConnectionRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest, global::Google.LongRunning.Operation> __Method_CreateGitRepositoryLink = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGitRepositoryLink",
        __Marshaller_google_cloud_developerconnect_v1_CreateGitRepositoryLinkRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest, global::Google.LongRunning.Operation> __Method_DeleteGitRepositoryLink = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteGitRepositoryLink",
        __Marshaller_google_cloud_developerconnect_v1_DeleteGitRepositoryLinkRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest, global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse> __Method_ListGitRepositoryLinks = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest, global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListGitRepositoryLinks",
        __Marshaller_google_cloud_developerconnect_v1_ListGitRepositoryLinksRequest,
        __Marshaller_google_cloud_developerconnect_v1_ListGitRepositoryLinksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest, global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink> __Method_GetGitRepositoryLink = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest, global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetGitRepositoryLink",
        __Marshaller_google_cloud_developerconnect_v1_GetGitRepositoryLinkRequest,
        __Marshaller_google_cloud_developerconnect_v1_GitRepositoryLink);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest, global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse> __Method_FetchReadWriteToken = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest, global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchReadWriteToken",
        __Marshaller_google_cloud_developerconnect_v1_FetchReadWriteTokenRequest,
        __Marshaller_google_cloud_developerconnect_v1_FetchReadWriteTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest, global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse> __Method_FetchReadToken = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest, global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchReadToken",
        __Marshaller_google_cloud_developerconnect_v1_FetchReadTokenRequest,
        __Marshaller_google_cloud_developerconnect_v1_FetchReadTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest, global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse> __Method_FetchLinkableGitRepositories = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest, global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchLinkableGitRepositories",
        __Marshaller_google_cloud_developerconnect_v1_FetchLinkableGitRepositoriesRequest,
        __Marshaller_google_cloud_developerconnect_v1_FetchLinkableGitRepositoriesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest, global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse> __Method_FetchGitHubInstallations = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest, global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchGitHubInstallations",
        __Marshaller_google_cloud_developerconnect_v1_FetchGitHubInstallationsRequest,
        __Marshaller_google_cloud_developerconnect_v1_FetchGitHubInstallationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest, global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse> __Method_FetchGitRefs = new grpc::Method<global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest, global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchGitRefs",
        __Marshaller_google_cloud_developerconnect_v1_FetchGitRefsRequest,
        __Marshaller_google_cloud_developerconnect_v1_FetchGitRefsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.DeveloperConnect.V1.DeveloperConnectReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DeveloperConnect</summary>
    [grpc::BindServiceMethod(typeof(DeveloperConnect), "BindService")]
    public abstract partial class DeveloperConnectBase
    {
      /// <summary>
      /// Lists Connections in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse> ListConnections(global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single Connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.Connection> GetConnection(global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new Connection in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateConnection(global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the parameters of a single Connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateConnection(global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single Connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteConnection(global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
      /// Connect will configure the Git Repository to send webhook events to
      /// Developer Connect. Connections that use Firebase GitHub Application will
      /// have events forwarded to the Firebase service. All other Connections will
      /// have events forwarded to Cloud Build.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists GitRepositoryLinks in a given project, location, and connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse> ListGitRepositoryLinks(global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink> GetGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetches read/write token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse> FetchReadWriteToken(global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetches read token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse> FetchReadToken(global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FetchLinkableGitRepositories returns a list of git repositories from an SCM
      /// that are available to be added to a Connection.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse> FetchLinkableGitRepositories(global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FetchGitHubInstallations returns the list of GitHub Installations that
      /// are available to be added to a Connection.
      /// For github.com, only installations accessible to the authorizer token
      /// are returned. For GitHub Enterprise, all installations are returned.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse> FetchGitHubInstallations(global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetch the list of branches or tags for a given repository.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse> FetchGitRefs(global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DeveloperConnect</summary>
    public partial class DeveloperConnectClient : grpc::ClientBase<DeveloperConnectClient>
    {
      /// <summary>Creates a new client for DeveloperConnect</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DeveloperConnectClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DeveloperConnect that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DeveloperConnectClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DeveloperConnectClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DeveloperConnectClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists Connections in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse ListConnections(global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConnections(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Connections in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse ListConnections(global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConnections, null, options, request);
      }
      /// <summary>
      /// Lists Connections in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse> ListConnectionsAsync(global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConnectionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Connections in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse> ListConnectionsAsync(global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConnections, null, options, request);
      }
      /// <summary>
      /// Gets details of a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.Connection GetConnection(global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.Connection GetConnection(global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnection, null, options, request);
      }
      /// <summary>
      /// Gets details of a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.Connection> GetConnectionAsync(global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.Connection> GetConnectionAsync(global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnection, null, options, request);
      }
      /// <summary>
      /// Creates a new Connection in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateConnection(global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Connection in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateConnection(global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateConnection, null, options, request);
      }
      /// <summary>
      /// Creates a new Connection in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateConnectionAsync(global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Connection in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateConnectionAsync(global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateConnection, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateConnection(global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateConnection(global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateConnection, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateConnectionAsync(global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateConnectionAsync(global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateConnection, null, options, request);
      }
      /// <summary>
      /// Deletes a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteConnection(global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteConnection(global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConnection, null, options, request);
      }
      /// <summary>
      /// Deletes a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteConnectionAsync(global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteConnectionAsync(global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConnection, null, options, request);
      }
      /// <summary>
      /// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
      /// Connect will configure the Git Repository to send webhook events to
      /// Developer Connect. Connections that use Firebase GitHub Application will
      /// have events forwarded to the Firebase service. All other Connections will
      /// have events forwarded to Cloud Build.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGitRepositoryLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
      /// Connect will configure the Git Repository to send webhook events to
      /// Developer Connect. Connections that use Firebase GitHub Application will
      /// have events forwarded to the Firebase service. All other Connections will
      /// have events forwarded to Cloud Build.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGitRepositoryLink, null, options, request);
      }
      /// <summary>
      /// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
      /// Connect will configure the Git Repository to send webhook events to
      /// Developer Connect. Connections that use Firebase GitHub Application will
      /// have events forwarded to the Firebase service. All other Connections will
      /// have events forwarded to Cloud Build.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateGitRepositoryLinkAsync(global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGitRepositoryLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
      /// Connect will configure the Git Repository to send webhook events to
      /// Developer Connect. Connections that use Firebase GitHub Application will
      /// have events forwarded to the Firebase service. All other Connections will
      /// have events forwarded to Cloud Build.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateGitRepositoryLinkAsync(global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGitRepositoryLink, null, options, request);
      }
      /// <summary>
      /// Deletes a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGitRepositoryLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteGitRepositoryLink, null, options, request);
      }
      /// <summary>
      /// Deletes a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteGitRepositoryLinkAsync(global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteGitRepositoryLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteGitRepositoryLinkAsync(global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteGitRepositoryLink, null, options, request);
      }
      /// <summary>
      /// Lists GitRepositoryLinks in a given project, location, and connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse ListGitRepositoryLinks(global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGitRepositoryLinks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists GitRepositoryLinks in a given project, location, and connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse ListGitRepositoryLinks(global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListGitRepositoryLinks, null, options, request);
      }
      /// <summary>
      /// Lists GitRepositoryLinks in a given project, location, and connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse> ListGitRepositoryLinksAsync(global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListGitRepositoryLinksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists GitRepositoryLinks in a given project, location, and connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse> ListGitRepositoryLinksAsync(global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListGitRepositoryLinks, null, options, request);
      }
      /// <summary>
      /// Gets details of a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink GetGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGitRepositoryLink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink GetGitRepositoryLink(global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetGitRepositoryLink, null, options, request);
      }
      /// <summary>
      /// Gets details of a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink> GetGitRepositoryLinkAsync(global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetGitRepositoryLinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a single GitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink> GetGitRepositoryLinkAsync(global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetGitRepositoryLink, null, options, request);
      }
      /// <summary>
      /// Fetches read/write token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse FetchReadWriteToken(global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchReadWriteToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches read/write token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse FetchReadWriteToken(global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchReadWriteToken, null, options, request);
      }
      /// <summary>
      /// Fetches read/write token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse> FetchReadWriteTokenAsync(global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchReadWriteTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches read/write token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse> FetchReadWriteTokenAsync(global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchReadWriteToken, null, options, request);
      }
      /// <summary>
      /// Fetches read token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse FetchReadToken(global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchReadToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches read token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse FetchReadToken(global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchReadToken, null, options, request);
      }
      /// <summary>
      /// Fetches read token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse> FetchReadTokenAsync(global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchReadTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches read token of a given gitRepositoryLink.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse> FetchReadTokenAsync(global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchReadToken, null, options, request);
      }
      /// <summary>
      /// FetchLinkableGitRepositories returns a list of git repositories from an SCM
      /// that are available to be added to a Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse FetchLinkableGitRepositories(global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchLinkableGitRepositories(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FetchLinkableGitRepositories returns a list of git repositories from an SCM
      /// that are available to be added to a Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse FetchLinkableGitRepositories(global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchLinkableGitRepositories, null, options, request);
      }
      /// <summary>
      /// FetchLinkableGitRepositories returns a list of git repositories from an SCM
      /// that are available to be added to a Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse> FetchLinkableGitRepositoriesAsync(global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchLinkableGitRepositoriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FetchLinkableGitRepositories returns a list of git repositories from an SCM
      /// that are available to be added to a Connection.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse> FetchLinkableGitRepositoriesAsync(global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchLinkableGitRepositories, null, options, request);
      }
      /// <summary>
      /// FetchGitHubInstallations returns the list of GitHub Installations that
      /// are available to be added to a Connection.
      /// For github.com, only installations accessible to the authorizer token
      /// are returned. For GitHub Enterprise, all installations are returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse FetchGitHubInstallations(global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchGitHubInstallations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FetchGitHubInstallations returns the list of GitHub Installations that
      /// are available to be added to a Connection.
      /// For github.com, only installations accessible to the authorizer token
      /// are returned. For GitHub Enterprise, all installations are returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse FetchGitHubInstallations(global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchGitHubInstallations, null, options, request);
      }
      /// <summary>
      /// FetchGitHubInstallations returns the list of GitHub Installations that
      /// are available to be added to a Connection.
      /// For github.com, only installations accessible to the authorizer token
      /// are returned. For GitHub Enterprise, all installations are returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse> FetchGitHubInstallationsAsync(global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchGitHubInstallationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FetchGitHubInstallations returns the list of GitHub Installations that
      /// are available to be added to a Connection.
      /// For github.com, only installations accessible to the authorizer token
      /// are returned. For GitHub Enterprise, all installations are returned.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse> FetchGitHubInstallationsAsync(global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchGitHubInstallations, null, options, request);
      }
      /// <summary>
      /// Fetch the list of branches or tags for a given repository.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse FetchGitRefs(global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchGitRefs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch the list of branches or tags for a given repository.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse FetchGitRefs(global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchGitRefs, null, options, request);
      }
      /// <summary>
      /// Fetch the list of branches or tags for a given repository.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse> FetchGitRefsAsync(global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchGitRefsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetch the list of branches or tags for a given repository.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse> FetchGitRefsAsync(global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchGitRefs, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DeveloperConnectClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DeveloperConnectClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DeveloperConnectBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListConnections, serviceImpl.ListConnections)
          .AddMethod(__Method_GetConnection, serviceImpl.GetConnection)
          .AddMethod(__Method_CreateConnection, serviceImpl.CreateConnection)
          .AddMethod(__Method_UpdateConnection, serviceImpl.UpdateConnection)
          .AddMethod(__Method_DeleteConnection, serviceImpl.DeleteConnection)
          .AddMethod(__Method_CreateGitRepositoryLink, serviceImpl.CreateGitRepositoryLink)
          .AddMethod(__Method_DeleteGitRepositoryLink, serviceImpl.DeleteGitRepositoryLink)
          .AddMethod(__Method_ListGitRepositoryLinks, serviceImpl.ListGitRepositoryLinks)
          .AddMethod(__Method_GetGitRepositoryLink, serviceImpl.GetGitRepositoryLink)
          .AddMethod(__Method_FetchReadWriteToken, serviceImpl.FetchReadWriteToken)
          .AddMethod(__Method_FetchReadToken, serviceImpl.FetchReadToken)
          .AddMethod(__Method_FetchLinkableGitRepositories, serviceImpl.FetchLinkableGitRepositories)
          .AddMethod(__Method_FetchGitHubInstallations, serviceImpl.FetchGitHubInstallations)
          .AddMethod(__Method_FetchGitRefs, serviceImpl.FetchGitRefs).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DeveloperConnectBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListConnections, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.ListConnectionsRequest, global::Google.Cloud.DeveloperConnect.V1.ListConnectionsResponse>(serviceImpl.ListConnections));
      serviceBinder.AddMethod(__Method_GetConnection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.GetConnectionRequest, global::Google.Cloud.DeveloperConnect.V1.Connection>(serviceImpl.GetConnection));
      serviceBinder.AddMethod(__Method_CreateConnection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.CreateConnectionRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateConnection));
      serviceBinder.AddMethod(__Method_UpdateConnection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.UpdateConnectionRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateConnection));
      serviceBinder.AddMethod(__Method_DeleteConnection, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.DeleteConnectionRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteConnection));
      serviceBinder.AddMethod(__Method_CreateGitRepositoryLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.CreateGitRepositoryLinkRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateGitRepositoryLink));
      serviceBinder.AddMethod(__Method_DeleteGitRepositoryLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.DeleteGitRepositoryLinkRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteGitRepositoryLink));
      serviceBinder.AddMethod(__Method_ListGitRepositoryLinks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksRequest, global::Google.Cloud.DeveloperConnect.V1.ListGitRepositoryLinksResponse>(serviceImpl.ListGitRepositoryLinks));
      serviceBinder.AddMethod(__Method_GetGitRepositoryLink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.GetGitRepositoryLinkRequest, global::Google.Cloud.DeveloperConnect.V1.GitRepositoryLink>(serviceImpl.GetGitRepositoryLink));
      serviceBinder.AddMethod(__Method_FetchReadWriteToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenRequest, global::Google.Cloud.DeveloperConnect.V1.FetchReadWriteTokenResponse>(serviceImpl.FetchReadWriteToken));
      serviceBinder.AddMethod(__Method_FetchReadToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenRequest, global::Google.Cloud.DeveloperConnect.V1.FetchReadTokenResponse>(serviceImpl.FetchReadToken));
      serviceBinder.AddMethod(__Method_FetchLinkableGitRepositories, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesRequest, global::Google.Cloud.DeveloperConnect.V1.FetchLinkableGitRepositoriesResponse>(serviceImpl.FetchLinkableGitRepositories));
      serviceBinder.AddMethod(__Method_FetchGitHubInstallations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsRequest, global::Google.Cloud.DeveloperConnect.V1.FetchGitHubInstallationsResponse>(serviceImpl.FetchGitHubInstallations));
      serviceBinder.AddMethod(__Method_FetchGitRefs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsRequest, global::Google.Cloud.DeveloperConnect.V1.FetchGitRefsResponse>(serviceImpl.FetchGitRefs));
    }

  }
}
#endregion
