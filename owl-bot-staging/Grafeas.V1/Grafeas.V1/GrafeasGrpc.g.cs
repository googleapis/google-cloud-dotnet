// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: grafeas/v1/grafeas.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Grafeas.V1 {
  /// <summary>
  /// [Grafeas](https://grafeas.io) API.
  ///
  /// Retrieves analysis results of Cloud components such as Docker container
  /// images.
  ///
  /// Analysis results are stored as a series of occurrences. An `Occurrence`
  /// contains information about a specific analysis instance on a resource. An
  /// occurrence refers to a `Note`. A note contains details describing the
  /// analysis and is generally stored in a separate project, called a `Provider`.
  /// Multiple occurrences can refer to the same note.
  ///
  /// For example, an SSL vulnerability could affect multiple images. In this case,
  /// there would be one note for the vulnerability and an occurrence for each
  /// image with the vulnerability referring to that note.
  /// </summary>
  public static partial class Grafeas
  {
    static readonly string __ServiceName = "grafeas.v1.Grafeas";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.GetOccurrenceRequest> __Marshaller_grafeas_v1_GetOccurrenceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.GetOccurrenceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.Occurrence> __Marshaller_grafeas_v1_Occurrence = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.Occurrence.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.ListOccurrencesRequest> __Marshaller_grafeas_v1_ListOccurrencesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.ListOccurrencesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.ListOccurrencesResponse> __Marshaller_grafeas_v1_ListOccurrencesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.ListOccurrencesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.DeleteOccurrenceRequest> __Marshaller_grafeas_v1_DeleteOccurrenceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.DeleteOccurrenceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.CreateOccurrenceRequest> __Marshaller_grafeas_v1_CreateOccurrenceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.CreateOccurrenceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.BatchCreateOccurrencesRequest> __Marshaller_grafeas_v1_BatchCreateOccurrencesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.BatchCreateOccurrencesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.BatchCreateOccurrencesResponse> __Marshaller_grafeas_v1_BatchCreateOccurrencesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.BatchCreateOccurrencesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.UpdateOccurrenceRequest> __Marshaller_grafeas_v1_UpdateOccurrenceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.UpdateOccurrenceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.GetOccurrenceNoteRequest> __Marshaller_grafeas_v1_GetOccurrenceNoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.GetOccurrenceNoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.Note> __Marshaller_grafeas_v1_Note = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.Note.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.GetNoteRequest> __Marshaller_grafeas_v1_GetNoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.GetNoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.ListNotesRequest> __Marshaller_grafeas_v1_ListNotesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.ListNotesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.ListNotesResponse> __Marshaller_grafeas_v1_ListNotesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.ListNotesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.DeleteNoteRequest> __Marshaller_grafeas_v1_DeleteNoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.DeleteNoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.CreateNoteRequest> __Marshaller_grafeas_v1_CreateNoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.CreateNoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.BatchCreateNotesRequest> __Marshaller_grafeas_v1_BatchCreateNotesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.BatchCreateNotesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.BatchCreateNotesResponse> __Marshaller_grafeas_v1_BatchCreateNotesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.BatchCreateNotesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.UpdateNoteRequest> __Marshaller_grafeas_v1_UpdateNoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.UpdateNoteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.ListNoteOccurrencesRequest> __Marshaller_grafeas_v1_ListNoteOccurrencesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.ListNoteOccurrencesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Grafeas.V1.ListNoteOccurrencesResponse> __Marshaller_grafeas_v1_ListNoteOccurrencesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Grafeas.V1.ListNoteOccurrencesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.GetOccurrenceRequest, global::Grafeas.V1.Occurrence> __Method_GetOccurrence = new grpc::Method<global::Grafeas.V1.GetOccurrenceRequest, global::Grafeas.V1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOccurrence",
        __Marshaller_grafeas_v1_GetOccurrenceRequest,
        __Marshaller_grafeas_v1_Occurrence);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.ListOccurrencesRequest, global::Grafeas.V1.ListOccurrencesResponse> __Method_ListOccurrences = new grpc::Method<global::Grafeas.V1.ListOccurrencesRequest, global::Grafeas.V1.ListOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOccurrences",
        __Marshaller_grafeas_v1_ListOccurrencesRequest,
        __Marshaller_grafeas_v1_ListOccurrencesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteOccurrence = new grpc::Method<global::Grafeas.V1.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOccurrence",
        __Marshaller_grafeas_v1_DeleteOccurrenceRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.CreateOccurrenceRequest, global::Grafeas.V1.Occurrence> __Method_CreateOccurrence = new grpc::Method<global::Grafeas.V1.CreateOccurrenceRequest, global::Grafeas.V1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOccurrence",
        __Marshaller_grafeas_v1_CreateOccurrenceRequest,
        __Marshaller_grafeas_v1_Occurrence);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.BatchCreateOccurrencesRequest, global::Grafeas.V1.BatchCreateOccurrencesResponse> __Method_BatchCreateOccurrences = new grpc::Method<global::Grafeas.V1.BatchCreateOccurrencesRequest, global::Grafeas.V1.BatchCreateOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateOccurrences",
        __Marshaller_grafeas_v1_BatchCreateOccurrencesRequest,
        __Marshaller_grafeas_v1_BatchCreateOccurrencesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.UpdateOccurrenceRequest, global::Grafeas.V1.Occurrence> __Method_UpdateOccurrence = new grpc::Method<global::Grafeas.V1.UpdateOccurrenceRequest, global::Grafeas.V1.Occurrence>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOccurrence",
        __Marshaller_grafeas_v1_UpdateOccurrenceRequest,
        __Marshaller_grafeas_v1_Occurrence);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.GetOccurrenceNoteRequest, global::Grafeas.V1.Note> __Method_GetOccurrenceNote = new grpc::Method<global::Grafeas.V1.GetOccurrenceNoteRequest, global::Grafeas.V1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOccurrenceNote",
        __Marshaller_grafeas_v1_GetOccurrenceNoteRequest,
        __Marshaller_grafeas_v1_Note);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.GetNoteRequest, global::Grafeas.V1.Note> __Method_GetNote = new grpc::Method<global::Grafeas.V1.GetNoteRequest, global::Grafeas.V1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNote",
        __Marshaller_grafeas_v1_GetNoteRequest,
        __Marshaller_grafeas_v1_Note);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.ListNotesRequest, global::Grafeas.V1.ListNotesResponse> __Method_ListNotes = new grpc::Method<global::Grafeas.V1.ListNotesRequest, global::Grafeas.V1.ListNotesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNotes",
        __Marshaller_grafeas_v1_ListNotesRequest,
        __Marshaller_grafeas_v1_ListNotesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteNote = new grpc::Method<global::Grafeas.V1.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNote",
        __Marshaller_grafeas_v1_DeleteNoteRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.CreateNoteRequest, global::Grafeas.V1.Note> __Method_CreateNote = new grpc::Method<global::Grafeas.V1.CreateNoteRequest, global::Grafeas.V1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNote",
        __Marshaller_grafeas_v1_CreateNoteRequest,
        __Marshaller_grafeas_v1_Note);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.BatchCreateNotesRequest, global::Grafeas.V1.BatchCreateNotesResponse> __Method_BatchCreateNotes = new grpc::Method<global::Grafeas.V1.BatchCreateNotesRequest, global::Grafeas.V1.BatchCreateNotesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateNotes",
        __Marshaller_grafeas_v1_BatchCreateNotesRequest,
        __Marshaller_grafeas_v1_BatchCreateNotesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.UpdateNoteRequest, global::Grafeas.V1.Note> __Method_UpdateNote = new grpc::Method<global::Grafeas.V1.UpdateNoteRequest, global::Grafeas.V1.Note>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNote",
        __Marshaller_grafeas_v1_UpdateNoteRequest,
        __Marshaller_grafeas_v1_Note);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Grafeas.V1.ListNoteOccurrencesRequest, global::Grafeas.V1.ListNoteOccurrencesResponse> __Method_ListNoteOccurrences = new grpc::Method<global::Grafeas.V1.ListNoteOccurrencesRequest, global::Grafeas.V1.ListNoteOccurrencesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNoteOccurrences",
        __Marshaller_grafeas_v1_ListNoteOccurrencesRequest,
        __Marshaller_grafeas_v1_ListNoteOccurrencesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Grafeas.V1.GrafeasReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Grafeas</summary>
    [grpc::BindServiceMethod(typeof(Grafeas), "BindService")]
    public abstract partial class GrafeasBase
    {
      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.Occurrence> GetOccurrence(global::Grafeas.V1.GetOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.ListOccurrencesResponse> ListOccurrences(global::Grafeas.V1.ListOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrence(global::Grafeas.V1.DeleteOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.Occurrence> CreateOccurrence(global::Grafeas.V1.CreateOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.BatchCreateOccurrencesResponse> BatchCreateOccurrences(global::Grafeas.V1.BatchCreateOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.Occurrence> UpdateOccurrence(global::Grafeas.V1.UpdateOccurrenceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.Note> GetOccurrenceNote(global::Grafeas.V1.GetOccurrenceNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.Note> GetNote(global::Grafeas.V1.GetNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.ListNotesResponse> ListNotes(global::Grafeas.V1.ListNotesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNote(global::Grafeas.V1.DeleteNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.Note> CreateNote(global::Grafeas.V1.CreateNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.BatchCreateNotesResponse> BatchCreateNotes(global::Grafeas.V1.BatchCreateNotesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.Note> UpdateNote(global::Grafeas.V1.UpdateNoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Grafeas.V1.ListNoteOccurrencesResponse> ListNoteOccurrences(global::Grafeas.V1.ListNoteOccurrencesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Grafeas</summary>
    public partial class GrafeasClient : grpc::ClientBase<GrafeasClient>
    {
      /// <summary>Creates a new client for Grafeas</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GrafeasClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Grafeas that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GrafeasClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GrafeasClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GrafeasClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Occurrence GetOccurrence(global::Grafeas.V1.GetOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Occurrence GetOccurrence(global::Grafeas.V1.GetOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOccurrence, null, options, request);
      }
      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Occurrence> GetOccurrenceAsync(global::Grafeas.V1.GetOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Occurrence> GetOccurrenceAsync(global::Grafeas.V1.GetOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOccurrence, null, options, request);
      }
      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.ListOccurrencesResponse ListOccurrences(global::Grafeas.V1.ListOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.ListOccurrencesResponse ListOccurrences(global::Grafeas.V1.ListOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOccurrences, null, options, request);
      }
      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.ListOccurrencesResponse> ListOccurrencesAsync(global::Grafeas.V1.ListOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists occurrences for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.ListOccurrencesResponse> ListOccurrencesAsync(global::Grafeas.V1.ListOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOccurrences, null, options, request);
      }
      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOccurrence(global::Grafeas.V1.DeleteOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteOccurrence(global::Grafeas.V1.DeleteOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOccurrence, null, options, request);
      }
      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrenceAsync(global::Grafeas.V1.DeleteOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified occurrence. For example, use this method to delete an
      /// occurrence when the occurrence is no longer applicable for the given
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteOccurrenceAsync(global::Grafeas.V1.DeleteOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Occurrence CreateOccurrence(global::Grafeas.V1.CreateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Occurrence CreateOccurrence(global::Grafeas.V1.CreateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Occurrence> CreateOccurrenceAsync(global::Grafeas.V1.CreateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Occurrence> CreateOccurrenceAsync(global::Grafeas.V1.CreateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOccurrence, null, options, request);
      }
      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.BatchCreateOccurrencesResponse BatchCreateOccurrences(global::Grafeas.V1.BatchCreateOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.BatchCreateOccurrencesResponse BatchCreateOccurrences(global::Grafeas.V1.BatchCreateOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateOccurrences, null, options, request);
      }
      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.BatchCreateOccurrencesResponse> BatchCreateOccurrencesAsync(global::Grafeas.V1.BatchCreateOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new occurrences in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.BatchCreateOccurrencesResponse> BatchCreateOccurrencesAsync(global::Grafeas.V1.BatchCreateOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateOccurrences, null, options, request);
      }
      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Occurrence UpdateOccurrence(global::Grafeas.V1.UpdateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOccurrence(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Occurrence UpdateOccurrence(global::Grafeas.V1.UpdateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOccurrence, null, options, request);
      }
      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Occurrence> UpdateOccurrenceAsync(global::Grafeas.V1.UpdateOccurrenceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOccurrenceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified occurrence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Occurrence> UpdateOccurrenceAsync(global::Grafeas.V1.UpdateOccurrenceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOccurrence, null, options, request);
      }
      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Note GetOccurrenceNote(global::Grafeas.V1.GetOccurrenceNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Note GetOccurrenceNote(global::Grafeas.V1.GetOccurrenceNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOccurrenceNote, null, options, request);
      }
      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Note> GetOccurrenceNoteAsync(global::Grafeas.V1.GetOccurrenceNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOccurrenceNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the note attached to the specified occurrence. Consumer projects can
      /// use this method to get a note that belongs to a provider project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Note> GetOccurrenceNoteAsync(global::Grafeas.V1.GetOccurrenceNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOccurrenceNote, null, options, request);
      }
      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Note GetNote(global::Grafeas.V1.GetNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Note GetNote(global::Grafeas.V1.GetNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNote, null, options, request);
      }
      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Note> GetNoteAsync(global::Grafeas.V1.GetNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Note> GetNoteAsync(global::Grafeas.V1.GetNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNote, null, options, request);
      }
      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.ListNotesResponse ListNotes(global::Grafeas.V1.ListNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.ListNotesResponse ListNotes(global::Grafeas.V1.ListNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNotes, null, options, request);
      }
      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.ListNotesResponse> ListNotesAsync(global::Grafeas.V1.ListNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists notes for the specified project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.ListNotesResponse> ListNotesAsync(global::Grafeas.V1.ListNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNotes, null, options, request);
      }
      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNote(global::Grafeas.V1.DeleteNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNote(global::Grafeas.V1.DeleteNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNoteAsync(global::Grafeas.V1.DeleteNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNoteAsync(global::Grafeas.V1.DeleteNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNote, null, options, request);
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Note CreateNote(global::Grafeas.V1.CreateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Note CreateNote(global::Grafeas.V1.CreateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNote, null, options, request);
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Note> CreateNoteAsync(global::Grafeas.V1.CreateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Note> CreateNoteAsync(global::Grafeas.V1.CreateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNote, null, options, request);
      }
      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.BatchCreateNotesResponse BatchCreateNotes(global::Grafeas.V1.BatchCreateNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateNotes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.BatchCreateNotesResponse BatchCreateNotes(global::Grafeas.V1.BatchCreateNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateNotes, null, options, request);
      }
      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.BatchCreateNotesResponse> BatchCreateNotesAsync(global::Grafeas.V1.BatchCreateNotesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateNotesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new notes in batch.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.BatchCreateNotesResponse> BatchCreateNotesAsync(global::Grafeas.V1.BatchCreateNotesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateNotes, null, options, request);
      }
      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Note UpdateNote(global::Grafeas.V1.UpdateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.Note UpdateNote(global::Grafeas.V1.UpdateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Note> UpdateNoteAsync(global::Grafeas.V1.UpdateNoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.Note> UpdateNoteAsync(global::Grafeas.V1.UpdateNoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNote, null, options, request);
      }
      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.ListNoteOccurrencesResponse ListNoteOccurrences(global::Grafeas.V1.ListNoteOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNoteOccurrences(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Grafeas.V1.ListNoteOccurrencesResponse ListNoteOccurrences(global::Grafeas.V1.ListNoteOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNoteOccurrences, null, options, request);
      }
      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.ListNoteOccurrencesResponse> ListNoteOccurrencesAsync(global::Grafeas.V1.ListNoteOccurrencesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNoteOccurrencesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists occurrences referencing the specified note. Provider projects can use
      /// this method to get all occurrences across consumer projects referencing the
      /// specified note.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Grafeas.V1.ListNoteOccurrencesResponse> ListNoteOccurrencesAsync(global::Grafeas.V1.ListNoteOccurrencesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNoteOccurrences, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override GrafeasClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrafeasClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(GrafeasBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetOccurrence, serviceImpl.GetOccurrence)
          .AddMethod(__Method_ListOccurrences, serviceImpl.ListOccurrences)
          .AddMethod(__Method_DeleteOccurrence, serviceImpl.DeleteOccurrence)
          .AddMethod(__Method_CreateOccurrence, serviceImpl.CreateOccurrence)
          .AddMethod(__Method_BatchCreateOccurrences, serviceImpl.BatchCreateOccurrences)
          .AddMethod(__Method_UpdateOccurrence, serviceImpl.UpdateOccurrence)
          .AddMethod(__Method_GetOccurrenceNote, serviceImpl.GetOccurrenceNote)
          .AddMethod(__Method_GetNote, serviceImpl.GetNote)
          .AddMethod(__Method_ListNotes, serviceImpl.ListNotes)
          .AddMethod(__Method_DeleteNote, serviceImpl.DeleteNote)
          .AddMethod(__Method_CreateNote, serviceImpl.CreateNote)
          .AddMethod(__Method_BatchCreateNotes, serviceImpl.BatchCreateNotes)
          .AddMethod(__Method_UpdateNote, serviceImpl.UpdateNote)
          .AddMethod(__Method_ListNoteOccurrences, serviceImpl.ListNoteOccurrences).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GrafeasBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetOccurrence, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.GetOccurrenceRequest, global::Grafeas.V1.Occurrence>(serviceImpl.GetOccurrence));
      serviceBinder.AddMethod(__Method_ListOccurrences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.ListOccurrencesRequest, global::Grafeas.V1.ListOccurrencesResponse>(serviceImpl.ListOccurrences));
      serviceBinder.AddMethod(__Method_DeleteOccurrence, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.DeleteOccurrenceRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteOccurrence));
      serviceBinder.AddMethod(__Method_CreateOccurrence, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.CreateOccurrenceRequest, global::Grafeas.V1.Occurrence>(serviceImpl.CreateOccurrence));
      serviceBinder.AddMethod(__Method_BatchCreateOccurrences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.BatchCreateOccurrencesRequest, global::Grafeas.V1.BatchCreateOccurrencesResponse>(serviceImpl.BatchCreateOccurrences));
      serviceBinder.AddMethod(__Method_UpdateOccurrence, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.UpdateOccurrenceRequest, global::Grafeas.V1.Occurrence>(serviceImpl.UpdateOccurrence));
      serviceBinder.AddMethod(__Method_GetOccurrenceNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.GetOccurrenceNoteRequest, global::Grafeas.V1.Note>(serviceImpl.GetOccurrenceNote));
      serviceBinder.AddMethod(__Method_GetNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.GetNoteRequest, global::Grafeas.V1.Note>(serviceImpl.GetNote));
      serviceBinder.AddMethod(__Method_ListNotes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.ListNotesRequest, global::Grafeas.V1.ListNotesResponse>(serviceImpl.ListNotes));
      serviceBinder.AddMethod(__Method_DeleteNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.DeleteNoteRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteNote));
      serviceBinder.AddMethod(__Method_CreateNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.CreateNoteRequest, global::Grafeas.V1.Note>(serviceImpl.CreateNote));
      serviceBinder.AddMethod(__Method_BatchCreateNotes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.BatchCreateNotesRequest, global::Grafeas.V1.BatchCreateNotesResponse>(serviceImpl.BatchCreateNotes));
      serviceBinder.AddMethod(__Method_UpdateNote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.UpdateNoteRequest, global::Grafeas.V1.Note>(serviceImpl.UpdateNote));
      serviceBinder.AddMethod(__Method_ListNoteOccurrences, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Grafeas.V1.ListNoteOccurrencesRequest, global::Grafeas.V1.ListNoteOccurrencesResponse>(serviceImpl.ListNoteOccurrences));
    }

  }
}
#endregion
