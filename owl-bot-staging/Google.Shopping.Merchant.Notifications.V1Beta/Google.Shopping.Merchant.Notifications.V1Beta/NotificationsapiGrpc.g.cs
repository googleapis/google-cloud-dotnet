// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/shopping/merchant/notifications/v1beta/notificationsapi.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Shopping.Merchant.Notifications.V1Beta {
  /// <summary>
  /// Service to manage notification subscriptions for merchants
  /// </summary>
  public static partial class NotificationsApiService
  {
    static readonly string __ServiceName = "google.shopping.merchant.notifications.v1beta.NotificationsApiService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest> __Marshaller_google_shopping_merchant_notifications_v1beta_GetNotificationSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> __Marshaller_google_shopping_merchant_notifications_v1beta_NotificationSubscription = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest> __Marshaller_google_shopping_merchant_notifications_v1beta_CreateNotificationSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest> __Marshaller_google_shopping_merchant_notifications_v1beta_UpdateNotificationSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest> __Marshaller_google_shopping_merchant_notifications_v1beta_DeleteNotificationSubscriptionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest> __Marshaller_google_shopping_merchant_notifications_v1beta_ListNotificationSubscriptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse> __Marshaller_google_shopping_merchant_notifications_v1beta_ListNotificationSubscriptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> __Method_GetNotificationSubscription = new grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNotificationSubscription",
        __Marshaller_google_shopping_merchant_notifications_v1beta_GetNotificationSubscriptionRequest,
        __Marshaller_google_shopping_merchant_notifications_v1beta_NotificationSubscription);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> __Method_CreateNotificationSubscription = new grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateNotificationSubscription",
        __Marshaller_google_shopping_merchant_notifications_v1beta_CreateNotificationSubscriptionRequest,
        __Marshaller_google_shopping_merchant_notifications_v1beta_NotificationSubscription);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> __Method_UpdateNotificationSubscription = new grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNotificationSubscription",
        __Marshaller_google_shopping_merchant_notifications_v1beta_UpdateNotificationSubscriptionRequest,
        __Marshaller_google_shopping_merchant_notifications_v1beta_NotificationSubscription);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteNotificationSubscription = new grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteNotificationSubscription",
        __Marshaller_google_shopping_merchant_notifications_v1beta_DeleteNotificationSubscriptionRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse> __Method_ListNotificationSubscriptions = new grpc::Method<global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNotificationSubscriptions",
        __Marshaller_google_shopping_merchant_notifications_v1beta_ListNotificationSubscriptionsRequest,
        __Marshaller_google_shopping_merchant_notifications_v1beta_ListNotificationSubscriptionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationsapiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NotificationsApiService</summary>
    [grpc::BindServiceMethod(typeof(NotificationsApiService), "BindService")]
    public abstract partial class NotificationsApiServiceBase
    {
      /// <summary>
      /// Gets notification subscriptions for an account.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> GetNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a notification subscription for a merchant. We will allow the
      /// following types of notification subscriptions to exist together (per
      /// merchant as a subscriber per event type):
      /// 1. Subscription for all managed accounts + subscription for self
      /// 2. Multiple "partial" subscriptions for managed accounts + subscription
      /// for self
      ///
      /// we will not allow (per merchant as a subscriber per event type):
      /// 1. multiple self subscriptions.
      /// 2. multiple "all managed accounts" subscriptions.
      /// 3. all and partial subscriptions at the same time.
      /// 4. multiple partial subscriptions for the same target account
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> CreateNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an existing notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> UpdateNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets all the notification subscriptions for a merchant.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse> ListNotificationSubscriptions(global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for NotificationsApiService</summary>
    public partial class NotificationsApiServiceClient : grpc::ClientBase<NotificationsApiServiceClient>
    {
      /// <summary>Creates a new client for NotificationsApiService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public NotificationsApiServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NotificationsApiService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public NotificationsApiServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected NotificationsApiServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected NotificationsApiServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Gets notification subscriptions for an account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription GetNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets notification subscriptions for an account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription GetNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNotificationSubscription, null, options, request);
      }
      /// <summary>
      /// Gets notification subscriptions for an account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> GetNotificationSubscriptionAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets notification subscriptions for an account.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> GetNotificationSubscriptionAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNotificationSubscription, null, options, request);
      }
      /// <summary>
      /// Creates a notification subscription for a merchant. We will allow the
      /// following types of notification subscriptions to exist together (per
      /// merchant as a subscriber per event type):
      /// 1. Subscription for all managed accounts + subscription for self
      /// 2. Multiple "partial" subscriptions for managed accounts + subscription
      /// for self
      ///
      /// we will not allow (per merchant as a subscriber per event type):
      /// 1. multiple self subscriptions.
      /// 2. multiple "all managed accounts" subscriptions.
      /// 3. all and partial subscriptions at the same time.
      /// 4. multiple partial subscriptions for the same target account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription CreateNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNotificationSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a notification subscription for a merchant. We will allow the
      /// following types of notification subscriptions to exist together (per
      /// merchant as a subscriber per event type):
      /// 1. Subscription for all managed accounts + subscription for self
      /// 2. Multiple "partial" subscriptions for managed accounts + subscription
      /// for self
      ///
      /// we will not allow (per merchant as a subscriber per event type):
      /// 1. multiple self subscriptions.
      /// 2. multiple "all managed accounts" subscriptions.
      /// 3. all and partial subscriptions at the same time.
      /// 4. multiple partial subscriptions for the same target account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription CreateNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateNotificationSubscription, null, options, request);
      }
      /// <summary>
      /// Creates a notification subscription for a merchant. We will allow the
      /// following types of notification subscriptions to exist together (per
      /// merchant as a subscriber per event type):
      /// 1. Subscription for all managed accounts + subscription for self
      /// 2. Multiple "partial" subscriptions for managed accounts + subscription
      /// for self
      ///
      /// we will not allow (per merchant as a subscriber per event type):
      /// 1. multiple self subscriptions.
      /// 2. multiple "all managed accounts" subscriptions.
      /// 3. all and partial subscriptions at the same time.
      /// 4. multiple partial subscriptions for the same target account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> CreateNotificationSubscriptionAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateNotificationSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a notification subscription for a merchant. We will allow the
      /// following types of notification subscriptions to exist together (per
      /// merchant as a subscriber per event type):
      /// 1. Subscription for all managed accounts + subscription for self
      /// 2. Multiple "partial" subscriptions for managed accounts + subscription
      /// for self
      ///
      /// we will not allow (per merchant as a subscriber per event type):
      /// 1. multiple self subscriptions.
      /// 2. multiple "all managed accounts" subscriptions.
      /// 3. all and partial subscriptions at the same time.
      /// 4. multiple partial subscriptions for the same target account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> CreateNotificationSubscriptionAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateNotificationSubscription, null, options, request);
      }
      /// <summary>
      /// Updates an existing notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription UpdateNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNotificationSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription UpdateNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNotificationSubscription, null, options, request);
      }
      /// <summary>
      /// Updates an existing notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> UpdateNotificationSubscriptionAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNotificationSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an existing notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription> UpdateNotificationSubscriptionAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNotificationSubscription, null, options, request);
      }
      /// <summary>
      /// Deletes a notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNotificationSubscription(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteNotificationSubscription(global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteNotificationSubscription, null, options, request);
      }
      /// <summary>
      /// Deletes a notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNotificationSubscriptionAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteNotificationSubscriptionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a notification subscription for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteNotificationSubscriptionAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteNotificationSubscription, null, options, request);
      }
      /// <summary>
      /// Gets all the notification subscriptions for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse ListNotificationSubscriptions(global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotificationSubscriptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets all the notification subscriptions for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse ListNotificationSubscriptions(global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNotificationSubscriptions, null, options, request);
      }
      /// <summary>
      /// Gets all the notification subscriptions for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse> ListNotificationSubscriptionsAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNotificationSubscriptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets all the notification subscriptions for a merchant.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse> ListNotificationSubscriptionsAsync(global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNotificationSubscriptions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override NotificationsApiServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NotificationsApiServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(NotificationsApiServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetNotificationSubscription, serviceImpl.GetNotificationSubscription)
          .AddMethod(__Method_CreateNotificationSubscription, serviceImpl.CreateNotificationSubscription)
          .AddMethod(__Method_UpdateNotificationSubscription, serviceImpl.UpdateNotificationSubscription)
          .AddMethod(__Method_DeleteNotificationSubscription, serviceImpl.DeleteNotificationSubscription)
          .AddMethod(__Method_ListNotificationSubscriptions, serviceImpl.ListNotificationSubscriptions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NotificationsApiServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetNotificationSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.Notifications.V1Beta.GetNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription>(serviceImpl.GetNotificationSubscription));
      serviceBinder.AddMethod(__Method_CreateNotificationSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.Notifications.V1Beta.CreateNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription>(serviceImpl.CreateNotificationSubscription));
      serviceBinder.AddMethod(__Method_UpdateNotificationSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.Notifications.V1Beta.UpdateNotificationSubscriptionRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.NotificationSubscription>(serviceImpl.UpdateNotificationSubscription));
      serviceBinder.AddMethod(__Method_DeleteNotificationSubscription, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.Notifications.V1Beta.DeleteNotificationSubscriptionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteNotificationSubscription));
      serviceBinder.AddMethod(__Method_ListNotificationSubscriptions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsRequest, global::Google.Shopping.Merchant.Notifications.V1Beta.ListNotificationSubscriptionsResponse>(serviceImpl.ListNotificationSubscriptions));
    }

  }
}
#endregion
