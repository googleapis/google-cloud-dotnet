// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gdchardwaremanagement/v1alpha/service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.GdcHardwareManagement.V1Alpha {
  /// <summary>
  /// The GDC Hardware Management service.
  /// </summary>
  public static partial class GDCHardwareManagement
  {
    static readonly string __ServiceName = "google.cloud.gdchardwaremanagement.v1alpha.GDCHardwareManagement";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetOrderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Order = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateOrderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateOrderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteOrderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_SubmitOrderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListSitesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListSitesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetSiteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Site = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateSiteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateSiteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteSiteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListHardwareGroupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListHardwareGroupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetHardwareGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_HardwareGroup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateHardwareGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateHardwareGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteHardwareGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListHardwareRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListHardwareResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetHardwareRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Hardware = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateHardwareRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateHardwareRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteHardwareRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListCommentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListCommentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetCommentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Comment = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateCommentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_RecordActionOnCommentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListChangeLogEntriesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListChangeLogEntriesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetChangeLogEntryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ChangeLogEntry = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListSkusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListSkusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetSkuRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Sku = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListZonesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListZonesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetZoneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Zone = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateZoneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateZoneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteZoneRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest> __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_SignalZoneStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse> __Method_ListOrders = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrders",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListOrdersRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order> __Method_GetOrder = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrder",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetOrderRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Order);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest, global::Google.LongRunning.Operation> __Method_CreateOrder = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOrder",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateOrderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest, global::Google.LongRunning.Operation> __Method_UpdateOrder = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOrder",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateOrderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest, global::Google.LongRunning.Operation> __Method_DeleteOrder = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrder",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteOrderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest, global::Google.LongRunning.Operation> __Method_SubmitOrder = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitOrder",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_SubmitOrderRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse> __Method_ListSites = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSites",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListSitesRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListSitesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site> __Method_GetSite = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSite",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetSiteRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Site);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest, global::Google.LongRunning.Operation> __Method_CreateSite = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSite",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateSiteRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest, global::Google.LongRunning.Operation> __Method_UpdateSite = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSite",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateSiteRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest, global::Google.LongRunning.Operation> __Method_DeleteSite = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSite",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteSiteRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse> __Method_ListHardwareGroups = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListHardwareGroups",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListHardwareGroupsRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListHardwareGroupsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup> __Method_GetHardwareGroup = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHardwareGroup",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetHardwareGroupRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_HardwareGroup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest, global::Google.LongRunning.Operation> __Method_CreateHardwareGroup = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateHardwareGroup",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateHardwareGroupRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest, global::Google.LongRunning.Operation> __Method_UpdateHardwareGroup = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateHardwareGroup",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateHardwareGroupRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest, global::Google.LongRunning.Operation> __Method_DeleteHardwareGroup = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteHardwareGroup",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteHardwareGroupRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse> __Method_ListHardware = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListHardware",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListHardwareRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListHardwareResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware> __Method_GetHardware = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHardware",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetHardwareRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Hardware);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest, global::Google.LongRunning.Operation> __Method_CreateHardware = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateHardware",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateHardwareRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest, global::Google.LongRunning.Operation> __Method_UpdateHardware = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateHardware",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateHardwareRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest, global::Google.LongRunning.Operation> __Method_DeleteHardware = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteHardware",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteHardwareRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse> __Method_ListComments = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListComments",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListCommentsRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListCommentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> __Method_GetComment = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetComment",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetCommentRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Comment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest, global::Google.LongRunning.Operation> __Method_CreateComment = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateComment",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateCommentRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> __Method_RecordActionOnComment = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecordActionOnComment",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_RecordActionOnCommentRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Comment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse> __Method_ListChangeLogEntries = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListChangeLogEntries",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListChangeLogEntriesRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListChangeLogEntriesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry> __Method_GetChangeLogEntry = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetChangeLogEntry",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetChangeLogEntryRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ChangeLogEntry);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse> __Method_ListSkus = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSkus",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListSkusRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListSkusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku> __Method_GetSku = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSku",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetSkuRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Sku);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse> __Method_ListZones = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListZones",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListZonesRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_ListZonesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone> __Method_GetZone = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetZone",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_GetZoneRequest,
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_Zone);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest, global::Google.LongRunning.Operation> __Method_CreateZone = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateZone",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_CreateZoneRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest, global::Google.LongRunning.Operation> __Method_UpdateZone = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateZone",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_UpdateZoneRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest, global::Google.LongRunning.Operation> __Method_DeleteZone = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteZone",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_DeleteZoneRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest, global::Google.LongRunning.Operation> __Method_SignalZoneState = new grpc::Method<global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignalZoneState",
        __Marshaller_google_cloud_gdchardwaremanagement_v1alpha_SignalZoneStateRequest,
        __Marshaller_google_longrunning_Operation);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.GdcHardwareManagement.V1Alpha.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GDCHardwareManagement</summary>
    [grpc::BindServiceMethod(typeof(GDCHardwareManagement), "BindService")]
    public abstract partial class GDCHardwareManagementBase
    {
      /// <summary>
      /// Lists orders in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse> ListOrders(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of an order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order> GetOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new order in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the parameters of an order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Submits an order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> SubmitOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists sites in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse> ListSites(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a site.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site> GetSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new site in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the parameters of a site.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a site.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists hardware groups in a given order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse> ListHardwareGroups(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a hardware group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup> GetHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new hardware group in a given order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the parameters of a hardware group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a hardware group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse> ListHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets hardware details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware> GetHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates new hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates hardware parameters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes hardware.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the comments on an order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse> ListComments(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the content of a comment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> GetComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new comment on an order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Record Action on a Comment. If the Action specified in the request is READ,
      /// the viewed time in the comment is set to the time the request was received.
      /// If the comment is already marked as read, subsequent calls will be ignored.
      /// If the Action is UNREAD, the viewed time is cleared from the comment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> RecordActionOnComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the changes made to an order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse> ListChangeLogEntries(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a change to an order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry> GetChangeLogEntry(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists SKUs for a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse> ListSkus(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of an SKU.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku> GetSku(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists zones in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse> ListZones(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets details of a zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone> GetZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new zone in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the parameters of a zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Signals the state of a zone.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> SignalZoneState(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GDCHardwareManagement</summary>
    public partial class GDCHardwareManagementClient : grpc::ClientBase<GDCHardwareManagementClient>
    {
      /// <summary>Creates a new client for GDCHardwareManagement</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GDCHardwareManagementClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GDCHardwareManagement that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GDCHardwareManagementClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GDCHardwareManagementClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GDCHardwareManagementClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists orders in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse ListOrders(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists orders in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse ListOrders(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrders, null, options, request);
      }
      /// <summary>
      /// Lists orders in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse> ListOrdersAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists orders in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse> ListOrdersAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrders, null, options, request);
      }
      /// <summary>
      /// Gets details of an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order GetOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order GetOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrder, null, options, request);
      }
      /// <summary>
      /// Gets details of an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order> GetOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order> GetOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrder, null, options, request);
      }
      /// <summary>
      /// Creates a new order in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new order in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOrder, null, options, request);
      }
      /// <summary>
      /// Creates a new order in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new order in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOrder, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOrder, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOrder, null, options, request);
      }
      /// <summary>
      /// Deletes an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrder, null, options, request);
      }
      /// <summary>
      /// Deletes an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrder, null, options, request);
      }
      /// <summary>
      /// Submits an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SubmitOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Submits an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SubmitOrder(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitOrder, null, options, request);
      }
      /// <summary>
      /// Submits an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SubmitOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Submits an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SubmitOrderAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitOrder, null, options, request);
      }
      /// <summary>
      /// Lists sites in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse ListSites(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSites(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists sites in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse ListSites(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSites, null, options, request);
      }
      /// <summary>
      /// Lists sites in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse> ListSitesAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSitesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists sites in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse> ListSitesAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSites, null, options, request);
      }
      /// <summary>
      /// Gets details of a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site GetSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site GetSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSite, null, options, request);
      }
      /// <summary>
      /// Gets details of a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site> GetSiteAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSiteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site> GetSiteAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSite, null, options, request);
      }
      /// <summary>
      /// Creates a new site in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new site in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSite, null, options, request);
      }
      /// <summary>
      /// Creates a new site in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateSiteAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSiteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new site in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateSiteAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSite, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSite, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateSiteAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSiteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateSiteAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSite, null, options, request);
      }
      /// <summary>
      /// Deletes a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSite(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteSite(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSite, null, options, request);
      }
      /// <summary>
      /// Deletes a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteSiteAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSiteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a site.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteSiteAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSite, null, options, request);
      }
      /// <summary>
      /// Lists hardware groups in a given order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse ListHardwareGroups(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListHardwareGroups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists hardware groups in a given order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse ListHardwareGroups(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListHardwareGroups, null, options, request);
      }
      /// <summary>
      /// Lists hardware groups in a given order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse> ListHardwareGroupsAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListHardwareGroupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists hardware groups in a given order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse> ListHardwareGroupsAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListHardwareGroups, null, options, request);
      }
      /// <summary>
      /// Gets details of a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup GetHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHardwareGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup GetHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHardwareGroup, null, options, request);
      }
      /// <summary>
      /// Gets details of a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup> GetHardwareGroupAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHardwareGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup> GetHardwareGroupAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHardwareGroup, null, options, request);
      }
      /// <summary>
      /// Creates a new hardware group in a given order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateHardwareGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new hardware group in a given order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateHardwareGroup, null, options, request);
      }
      /// <summary>
      /// Creates a new hardware group in a given order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateHardwareGroupAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateHardwareGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new hardware group in a given order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateHardwareGroupAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateHardwareGroup, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateHardwareGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateHardwareGroup, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateHardwareGroupAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateHardwareGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateHardwareGroupAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateHardwareGroup, null, options, request);
      }
      /// <summary>
      /// Deletes a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHardwareGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteHardwareGroup(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteHardwareGroup, null, options, request);
      }
      /// <summary>
      /// Deletes a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteHardwareGroupAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHardwareGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a hardware group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteHardwareGroupAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteHardwareGroup, null, options, request);
      }
      /// <summary>
      /// Lists hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse ListHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListHardware(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse ListHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListHardware, null, options, request);
      }
      /// <summary>
      /// Lists hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse> ListHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListHardwareAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse> ListHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListHardware, null, options, request);
      }
      /// <summary>
      /// Gets hardware details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware GetHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHardware(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets hardware details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware GetHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHardware, null, options, request);
      }
      /// <summary>
      /// Gets hardware details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware> GetHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetHardwareAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets hardware details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware> GetHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHardware, null, options, request);
      }
      /// <summary>
      /// Creates new hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateHardware(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateHardware, null, options, request);
      }
      /// <summary>
      /// Creates new hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateHardwareAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates new hardware in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateHardware, null, options, request);
      }
      /// <summary>
      /// Updates hardware parameters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateHardware(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates hardware parameters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateHardware, null, options, request);
      }
      /// <summary>
      /// Updates hardware parameters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateHardwareAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates hardware parameters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateHardware, null, options, request);
      }
      /// <summary>
      /// Deletes hardware.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHardware(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes hardware.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteHardware(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteHardware, null, options, request);
      }
      /// <summary>
      /// Deletes hardware.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteHardwareAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes hardware.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteHardwareAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteHardware, null, options, request);
      }
      /// <summary>
      /// Lists the comments on an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse ListComments(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListComments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the comments on an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse ListComments(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListComments, null, options, request);
      }
      /// <summary>
      /// Lists the comments on an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse> ListCommentsAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCommentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the comments on an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse> ListCommentsAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListComments, null, options, request);
      }
      /// <summary>
      /// Gets the content of a comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment GetComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetComment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the content of a comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment GetComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetComment, null, options, request);
      }
      /// <summary>
      /// Gets the content of a comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> GetCommentAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCommentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the content of a comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> GetCommentAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetComment, null, options, request);
      }
      /// <summary>
      /// Creates a new comment on an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateComment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new comment on an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateComment, null, options, request);
      }
      /// <summary>
      /// Creates a new comment on an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCommentAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCommentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new comment on an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateCommentAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateComment, null, options, request);
      }
      /// <summary>
      /// Record Action on a Comment. If the Action specified in the request is READ,
      /// the viewed time in the comment is set to the time the request was received.
      /// If the comment is already marked as read, subsequent calls will be ignored.
      /// If the Action is UNREAD, the viewed time is cleared from the comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment RecordActionOnComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordActionOnComment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Record Action on a Comment. If the Action specified in the request is READ,
      /// the viewed time in the comment is set to the time the request was received.
      /// If the comment is already marked as read, subsequent calls will be ignored.
      /// If the Action is UNREAD, the viewed time is cleared from the comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment RecordActionOnComment(global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordActionOnComment, null, options, request);
      }
      /// <summary>
      /// Record Action on a Comment. If the Action specified in the request is READ,
      /// the viewed time in the comment is set to the time the request was received.
      /// If the comment is already marked as read, subsequent calls will be ignored.
      /// If the Action is UNREAD, the viewed time is cleared from the comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> RecordActionOnCommentAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordActionOnCommentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Record Action on a Comment. If the Action specified in the request is READ,
      /// the viewed time in the comment is set to the time the request was received.
      /// If the comment is already marked as read, subsequent calls will be ignored.
      /// If the Action is UNREAD, the viewed time is cleared from the comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment> RecordActionOnCommentAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordActionOnComment, null, options, request);
      }
      /// <summary>
      /// Lists the changes made to an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse ListChangeLogEntries(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListChangeLogEntries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the changes made to an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse ListChangeLogEntries(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListChangeLogEntries, null, options, request);
      }
      /// <summary>
      /// Lists the changes made to an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse> ListChangeLogEntriesAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListChangeLogEntriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the changes made to an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse> ListChangeLogEntriesAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListChangeLogEntries, null, options, request);
      }
      /// <summary>
      /// Gets details of a change to an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry GetChangeLogEntry(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChangeLogEntry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a change to an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry GetChangeLogEntry(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetChangeLogEntry, null, options, request);
      }
      /// <summary>
      /// Gets details of a change to an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry> GetChangeLogEntryAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetChangeLogEntryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a change to an order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry> GetChangeLogEntryAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetChangeLogEntry, null, options, request);
      }
      /// <summary>
      /// Lists SKUs for a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse ListSkus(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSkus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists SKUs for a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse ListSkus(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSkus, null, options, request);
      }
      /// <summary>
      /// Lists SKUs for a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse> ListSkusAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSkusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists SKUs for a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse> ListSkusAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSkus, null, options, request);
      }
      /// <summary>
      /// Gets details of an SKU.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku GetSku(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSku(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of an SKU.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku GetSku(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSku, null, options, request);
      }
      /// <summary>
      /// Gets details of an SKU.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku> GetSkuAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSkuAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of an SKU.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku> GetSkuAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSku, null, options, request);
      }
      /// <summary>
      /// Lists zones in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse ListZones(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListZones(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists zones in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse ListZones(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListZones, null, options, request);
      }
      /// <summary>
      /// Lists zones in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse> ListZonesAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListZonesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists zones in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse> ListZonesAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListZones, null, options, request);
      }
      /// <summary>
      /// Gets details of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone GetZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetZone(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone GetZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetZone, null, options, request);
      }
      /// <summary>
      /// Gets details of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone> GetZoneAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetZoneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets details of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone> GetZoneAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetZone, null, options, request);
      }
      /// <summary>
      /// Creates a new zone in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateZone(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new zone in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateZone, null, options, request);
      }
      /// <summary>
      /// Creates a new zone in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateZoneAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateZoneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new zone in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateZoneAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateZone, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateZone(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateZone, null, options, request);
      }
      /// <summary>
      /// Updates the parameters of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateZoneAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateZoneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the parameters of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateZoneAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateZone, null, options, request);
      }
      /// <summary>
      /// Deletes a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteZone(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteZone(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteZone, null, options, request);
      }
      /// <summary>
      /// Deletes a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteZoneAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteZoneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteZoneAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteZone, null, options, request);
      }
      /// <summary>
      /// Signals the state of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SignalZoneState(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignalZoneState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signals the state of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SignalZoneState(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignalZoneState, null, options, request);
      }
      /// <summary>
      /// Signals the state of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SignalZoneStateAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignalZoneStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Signals the state of a zone.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SignalZoneStateAsync(global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignalZoneState, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override GDCHardwareManagementClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GDCHardwareManagementClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(GDCHardwareManagementBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListOrders, serviceImpl.ListOrders)
          .AddMethod(__Method_GetOrder, serviceImpl.GetOrder)
          .AddMethod(__Method_CreateOrder, serviceImpl.CreateOrder)
          .AddMethod(__Method_UpdateOrder, serviceImpl.UpdateOrder)
          .AddMethod(__Method_DeleteOrder, serviceImpl.DeleteOrder)
          .AddMethod(__Method_SubmitOrder, serviceImpl.SubmitOrder)
          .AddMethod(__Method_ListSites, serviceImpl.ListSites)
          .AddMethod(__Method_GetSite, serviceImpl.GetSite)
          .AddMethod(__Method_CreateSite, serviceImpl.CreateSite)
          .AddMethod(__Method_UpdateSite, serviceImpl.UpdateSite)
          .AddMethod(__Method_DeleteSite, serviceImpl.DeleteSite)
          .AddMethod(__Method_ListHardwareGroups, serviceImpl.ListHardwareGroups)
          .AddMethod(__Method_GetHardwareGroup, serviceImpl.GetHardwareGroup)
          .AddMethod(__Method_CreateHardwareGroup, serviceImpl.CreateHardwareGroup)
          .AddMethod(__Method_UpdateHardwareGroup, serviceImpl.UpdateHardwareGroup)
          .AddMethod(__Method_DeleteHardwareGroup, serviceImpl.DeleteHardwareGroup)
          .AddMethod(__Method_ListHardware, serviceImpl.ListHardware)
          .AddMethod(__Method_GetHardware, serviceImpl.GetHardware)
          .AddMethod(__Method_CreateHardware, serviceImpl.CreateHardware)
          .AddMethod(__Method_UpdateHardware, serviceImpl.UpdateHardware)
          .AddMethod(__Method_DeleteHardware, serviceImpl.DeleteHardware)
          .AddMethod(__Method_ListComments, serviceImpl.ListComments)
          .AddMethod(__Method_GetComment, serviceImpl.GetComment)
          .AddMethod(__Method_CreateComment, serviceImpl.CreateComment)
          .AddMethod(__Method_RecordActionOnComment, serviceImpl.RecordActionOnComment)
          .AddMethod(__Method_ListChangeLogEntries, serviceImpl.ListChangeLogEntries)
          .AddMethod(__Method_GetChangeLogEntry, serviceImpl.GetChangeLogEntry)
          .AddMethod(__Method_ListSkus, serviceImpl.ListSkus)
          .AddMethod(__Method_GetSku, serviceImpl.GetSku)
          .AddMethod(__Method_ListZones, serviceImpl.ListZones)
          .AddMethod(__Method_GetZone, serviceImpl.GetZone)
          .AddMethod(__Method_CreateZone, serviceImpl.CreateZone)
          .AddMethod(__Method_UpdateZone, serviceImpl.UpdateZone)
          .AddMethod(__Method_DeleteZone, serviceImpl.DeleteZone)
          .AddMethod(__Method_SignalZoneState, serviceImpl.SignalZoneState).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GDCHardwareManagementBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListOrdersResponse>(serviceImpl.ListOrders));
      serviceBinder.AddMethod(__Method_GetOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetOrderRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Order>(serviceImpl.GetOrder));
      serviceBinder.AddMethod(__Method_CreateOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateOrderRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateOrder));
      serviceBinder.AddMethod(__Method_UpdateOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateOrderRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateOrder));
      serviceBinder.AddMethod(__Method_DeleteOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteOrderRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteOrder));
      serviceBinder.AddMethod(__Method_SubmitOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.SubmitOrderRequest, global::Google.LongRunning.Operation>(serviceImpl.SubmitOrder));
      serviceBinder.AddMethod(__Method_ListSites, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSitesResponse>(serviceImpl.ListSites));
      serviceBinder.AddMethod(__Method_GetSite, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSiteRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Site>(serviceImpl.GetSite));
      serviceBinder.AddMethod(__Method_CreateSite, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateSiteRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateSite));
      serviceBinder.AddMethod(__Method_UpdateSite, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateSiteRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateSite));
      serviceBinder.AddMethod(__Method_DeleteSite, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteSiteRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteSite));
      serviceBinder.AddMethod(__Method_ListHardwareGroups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareGroupsResponse>(serviceImpl.ListHardwareGroups));
      serviceBinder.AddMethod(__Method_GetHardwareGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareGroupRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.HardwareGroup>(serviceImpl.GetHardwareGroup));
      serviceBinder.AddMethod(__Method_CreateHardwareGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareGroupRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateHardwareGroup));
      serviceBinder.AddMethod(__Method_UpdateHardwareGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareGroupRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateHardwareGroup));
      serviceBinder.AddMethod(__Method_DeleteHardwareGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareGroupRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteHardwareGroup));
      serviceBinder.AddMethod(__Method_ListHardware, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListHardwareResponse>(serviceImpl.ListHardware));
      serviceBinder.AddMethod(__Method_GetHardware, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetHardwareRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Hardware>(serviceImpl.GetHardware));
      serviceBinder.AddMethod(__Method_CreateHardware, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateHardwareRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateHardware));
      serviceBinder.AddMethod(__Method_UpdateHardware, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateHardwareRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateHardware));
      serviceBinder.AddMethod(__Method_DeleteHardware, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteHardwareRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteHardware));
      serviceBinder.AddMethod(__Method_ListComments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListCommentsResponse>(serviceImpl.ListComments));
      serviceBinder.AddMethod(__Method_GetComment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetCommentRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment>(serviceImpl.GetComment));
      serviceBinder.AddMethod(__Method_CreateComment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateCommentRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateComment));
      serviceBinder.AddMethod(__Method_RecordActionOnComment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.RecordActionOnCommentRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Comment>(serviceImpl.RecordActionOnComment));
      serviceBinder.AddMethod(__Method_ListChangeLogEntries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListChangeLogEntriesResponse>(serviceImpl.ListChangeLogEntries));
      serviceBinder.AddMethod(__Method_GetChangeLogEntry, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetChangeLogEntryRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ChangeLogEntry>(serviceImpl.GetChangeLogEntry));
      serviceBinder.AddMethod(__Method_ListSkus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListSkusResponse>(serviceImpl.ListSkus));
      serviceBinder.AddMethod(__Method_GetSku, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetSkuRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Sku>(serviceImpl.GetSku));
      serviceBinder.AddMethod(__Method_ListZones, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.ListZonesResponse>(serviceImpl.ListZones));
      serviceBinder.AddMethod(__Method_GetZone, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.GetZoneRequest, global::Google.Cloud.GdcHardwareManagement.V1Alpha.Zone>(serviceImpl.GetZone));
      serviceBinder.AddMethod(__Method_CreateZone, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.CreateZoneRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateZone));
      serviceBinder.AddMethod(__Method_UpdateZone, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.UpdateZoneRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateZone));
      serviceBinder.AddMethod(__Method_DeleteZone, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.DeleteZoneRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteZone));
      serviceBinder.AddMethod(__Method_SignalZoneState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GdcHardwareManagement.V1Alpha.SignalZoneStateRequest, global::Google.LongRunning.Operation>(serviceImpl.SignalZoneState));
    }

  }
}
#endregion
