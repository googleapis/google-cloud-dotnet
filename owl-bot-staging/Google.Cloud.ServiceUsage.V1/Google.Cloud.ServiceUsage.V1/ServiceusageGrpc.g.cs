// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/api/serviceusage/v1/serviceusage.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.ServiceUsage.V1 {
  /// <summary>
  /// Enables services that service consumers want to use on Google Cloud Platform,
  /// lists the available or enabled services, or disables services that service
  /// consumers no longer use.
  ///
  /// See [Service Usage API](https://cloud.google.com/service-usage/docs/overview)
  /// </summary>
  public static partial class ServiceUsage
  {
    static readonly string __ServiceName = "google.api.serviceusage.v1.ServiceUsage";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest> __Marshaller_google_api_serviceusage_v1_EnableServiceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest> __Marshaller_google_api_serviceusage_v1_DisableServiceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.GetServiceRequest> __Marshaller_google_api_serviceusage_v1_GetServiceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.GetServiceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.Service> __Marshaller_google_api_serviceusage_v1_Service = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.Service.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.ListServicesRequest> __Marshaller_google_api_serviceusage_v1_ListServicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.ListServicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.ListServicesResponse> __Marshaller_google_api_serviceusage_v1_ListServicesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.ListServicesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest> __Marshaller_google_api_serviceusage_v1_BatchEnableServicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest> __Marshaller_google_api_serviceusage_v1_BatchGetServicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse> __Marshaller_google_api_serviceusage_v1_BatchGetServicesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest, global::Google.LongRunning.Operation> __Method_EnableService = new grpc::Method<global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EnableService",
        __Marshaller_google_api_serviceusage_v1_EnableServiceRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest, global::Google.LongRunning.Operation> __Method_DisableService = new grpc::Method<global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DisableService",
        __Marshaller_google_api_serviceusage_v1_DisableServiceRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ServiceUsage.V1.GetServiceRequest, global::Google.Cloud.ServiceUsage.V1.Service> __Method_GetService = new grpc::Method<global::Google.Cloud.ServiceUsage.V1.GetServiceRequest, global::Google.Cloud.ServiceUsage.V1.Service>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetService",
        __Marshaller_google_api_serviceusage_v1_GetServiceRequest,
        __Marshaller_google_api_serviceusage_v1_Service);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ServiceUsage.V1.ListServicesRequest, global::Google.Cloud.ServiceUsage.V1.ListServicesResponse> __Method_ListServices = new grpc::Method<global::Google.Cloud.ServiceUsage.V1.ListServicesRequest, global::Google.Cloud.ServiceUsage.V1.ListServicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListServices",
        __Marshaller_google_api_serviceusage_v1_ListServicesRequest,
        __Marshaller_google_api_serviceusage_v1_ListServicesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest, global::Google.LongRunning.Operation> __Method_BatchEnableServices = new grpc::Method<global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchEnableServices",
        __Marshaller_google_api_serviceusage_v1_BatchEnableServicesRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest, global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse> __Method_BatchGetServices = new grpc::Method<global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest, global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchGetServices",
        __Marshaller_google_api_serviceusage_v1_BatchGetServicesRequest,
        __Marshaller_google_api_serviceusage_v1_BatchGetServicesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.ServiceUsage.V1.ServiceusageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ServiceUsage</summary>
    [grpc::BindServiceMethod(typeof(ServiceUsage), "BindService")]
    public abstract partial class ServiceUsageBase
    {
      /// <summary>
      /// Enable a service so that it can be used with a project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> EnableService(global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Disable a service so that it can no longer be used with a project.
      /// This prevents unintended usage that may cause unexpected billing
      /// charges or security leaks.
      ///
      /// It is not valid to call the disable method on a service that is not
      /// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
      /// the target service is not currently enabled.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DisableService(global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the service configuration and enabled state for a given service.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ServiceUsage.V1.Service> GetService(global::Google.Cloud.ServiceUsage.V1.GetServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List all services available to the specified project, and the current
      /// state of those services with respect to the project. The list includes
      /// all public services, all services for which the calling user has the
      /// `servicemanagement.services.bind` permission, and all services that have
      /// already been enabled on the project. The list can be filtered to
      /// only include services in a specific state, for example to only include
      /// services enabled on the project.
      ///
      /// WARNING: If you need to query enabled services frequently or across
      /// an organization, you should use
      /// [Cloud Asset Inventory
      /// API](https://cloud.google.com/asset-inventory/docs/apis), which provides
      /// higher throughput and richer filtering capability.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ServiceUsage.V1.ListServicesResponse> ListServices(global::Google.Cloud.ServiceUsage.V1.ListServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Enable multiple services on a project. The operation is atomic: if enabling
      /// any service fails, then the entire batch fails, and no state changes occur.
      /// To enable a single service, use the `EnableService` method instead.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> BatchEnableServices(global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the service configurations and enabled states for a given list of
      /// services.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse> BatchGetServices(global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServiceUsage</summary>
    public partial class ServiceUsageClient : grpc::ClientBase<ServiceUsageClient>
    {
      /// <summary>Creates a new client for ServiceUsage</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ServiceUsageClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServiceUsage that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ServiceUsageClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ServiceUsageClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ServiceUsageClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Enable a service so that it can be used with a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation EnableService(global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable a service so that it can be used with a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation EnableService(global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EnableService, null, options, request);
      }
      /// <summary>
      /// Enable a service so that it can be used with a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> EnableServiceAsync(global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EnableServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable a service so that it can be used with a project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> EnableServiceAsync(global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EnableService, null, options, request);
      }
      /// <summary>
      /// Disable a service so that it can no longer be used with a project.
      /// This prevents unintended usage that may cause unexpected billing
      /// charges or security leaks.
      ///
      /// It is not valid to call the disable method on a service that is not
      /// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
      /// the target service is not currently enabled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DisableService(global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a service so that it can no longer be used with a project.
      /// This prevents unintended usage that may cause unexpected billing
      /// charges or security leaks.
      ///
      /// It is not valid to call the disable method on a service that is not
      /// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
      /// the target service is not currently enabled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DisableService(global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DisableService, null, options, request);
      }
      /// <summary>
      /// Disable a service so that it can no longer be used with a project.
      /// This prevents unintended usage that may cause unexpected billing
      /// charges or security leaks.
      ///
      /// It is not valid to call the disable method on a service that is not
      /// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
      /// the target service is not currently enabled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DisableServiceAsync(global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisableServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Disable a service so that it can no longer be used with a project.
      /// This prevents unintended usage that may cause unexpected billing
      /// charges or security leaks.
      ///
      /// It is not valid to call the disable method on a service that is not
      /// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
      /// the target service is not currently enabled.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DisableServiceAsync(global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DisableService, null, options, request);
      }
      /// <summary>
      /// Returns the service configuration and enabled state for a given service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ServiceUsage.V1.Service GetService(global::Google.Cloud.ServiceUsage.V1.GetServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetService(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the service configuration and enabled state for a given service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ServiceUsage.V1.Service GetService(global::Google.Cloud.ServiceUsage.V1.GetServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetService, null, options, request);
      }
      /// <summary>
      /// Returns the service configuration and enabled state for a given service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ServiceUsage.V1.Service> GetServiceAsync(global::Google.Cloud.ServiceUsage.V1.GetServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the service configuration and enabled state for a given service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ServiceUsage.V1.Service> GetServiceAsync(global::Google.Cloud.ServiceUsage.V1.GetServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetService, null, options, request);
      }
      /// <summary>
      /// List all services available to the specified project, and the current
      /// state of those services with respect to the project. The list includes
      /// all public services, all services for which the calling user has the
      /// `servicemanagement.services.bind` permission, and all services that have
      /// already been enabled on the project. The list can be filtered to
      /// only include services in a specific state, for example to only include
      /// services enabled on the project.
      ///
      /// WARNING: If you need to query enabled services frequently or across
      /// an organization, you should use
      /// [Cloud Asset Inventory
      /// API](https://cloud.google.com/asset-inventory/docs/apis), which provides
      /// higher throughput and richer filtering capability.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ServiceUsage.V1.ListServicesResponse ListServices(global::Google.Cloud.ServiceUsage.V1.ListServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all services available to the specified project, and the current
      /// state of those services with respect to the project. The list includes
      /// all public services, all services for which the calling user has the
      /// `servicemanagement.services.bind` permission, and all services that have
      /// already been enabled on the project. The list can be filtered to
      /// only include services in a specific state, for example to only include
      /// services enabled on the project.
      ///
      /// WARNING: If you need to query enabled services frequently or across
      /// an organization, you should use
      /// [Cloud Asset Inventory
      /// API](https://cloud.google.com/asset-inventory/docs/apis), which provides
      /// higher throughput and richer filtering capability.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ServiceUsage.V1.ListServicesResponse ListServices(global::Google.Cloud.ServiceUsage.V1.ListServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListServices, null, options, request);
      }
      /// <summary>
      /// List all services available to the specified project, and the current
      /// state of those services with respect to the project. The list includes
      /// all public services, all services for which the calling user has the
      /// `servicemanagement.services.bind` permission, and all services that have
      /// already been enabled on the project. The list can be filtered to
      /// only include services in a specific state, for example to only include
      /// services enabled on the project.
      ///
      /// WARNING: If you need to query enabled services frequently or across
      /// an organization, you should use
      /// [Cloud Asset Inventory
      /// API](https://cloud.google.com/asset-inventory/docs/apis), which provides
      /// higher throughput and richer filtering capability.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ServiceUsage.V1.ListServicesResponse> ListServicesAsync(global::Google.Cloud.ServiceUsage.V1.ListServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListServicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all services available to the specified project, and the current
      /// state of those services with respect to the project. The list includes
      /// all public services, all services for which the calling user has the
      /// `servicemanagement.services.bind` permission, and all services that have
      /// already been enabled on the project. The list can be filtered to
      /// only include services in a specific state, for example to only include
      /// services enabled on the project.
      ///
      /// WARNING: If you need to query enabled services frequently or across
      /// an organization, you should use
      /// [Cloud Asset Inventory
      /// API](https://cloud.google.com/asset-inventory/docs/apis), which provides
      /// higher throughput and richer filtering capability.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ServiceUsage.V1.ListServicesResponse> ListServicesAsync(global::Google.Cloud.ServiceUsage.V1.ListServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListServices, null, options, request);
      }
      /// <summary>
      /// Enable multiple services on a project. The operation is atomic: if enabling
      /// any service fails, then the entire batch fails, and no state changes occur.
      /// To enable a single service, use the `EnableService` method instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BatchEnableServices(global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchEnableServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable multiple services on a project. The operation is atomic: if enabling
      /// any service fails, then the entire batch fails, and no state changes occur.
      /// To enable a single service, use the `EnableService` method instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation BatchEnableServices(global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchEnableServices, null, options, request);
      }
      /// <summary>
      /// Enable multiple services on a project. The operation is atomic: if enabling
      /// any service fails, then the entire batch fails, and no state changes occur.
      /// To enable a single service, use the `EnableService` method instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BatchEnableServicesAsync(global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchEnableServicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Enable multiple services on a project. The operation is atomic: if enabling
      /// any service fails, then the entire batch fails, and no state changes occur.
      /// To enable a single service, use the `EnableService` method instead.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> BatchEnableServicesAsync(global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchEnableServices, null, options, request);
      }
      /// <summary>
      /// Returns the service configurations and enabled states for a given list of
      /// services.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse BatchGetServices(global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchGetServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the service configurations and enabled states for a given list of
      /// services.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse BatchGetServices(global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchGetServices, null, options, request);
      }
      /// <summary>
      /// Returns the service configurations and enabled states for a given list of
      /// services.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse> BatchGetServicesAsync(global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchGetServicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the service configurations and enabled states for a given list of
      /// services.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse> BatchGetServicesAsync(global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchGetServices, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ServiceUsageClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceUsageClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ServiceUsageBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_EnableService, serviceImpl.EnableService)
          .AddMethod(__Method_DisableService, serviceImpl.DisableService)
          .AddMethod(__Method_GetService, serviceImpl.GetService)
          .AddMethod(__Method_ListServices, serviceImpl.ListServices)
          .AddMethod(__Method_BatchEnableServices, serviceImpl.BatchEnableServices)
          .AddMethod(__Method_BatchGetServices, serviceImpl.BatchGetServices).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServiceUsageBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_EnableService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ServiceUsage.V1.EnableServiceRequest, global::Google.LongRunning.Operation>(serviceImpl.EnableService));
      serviceBinder.AddMethod(__Method_DisableService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ServiceUsage.V1.DisableServiceRequest, global::Google.LongRunning.Operation>(serviceImpl.DisableService));
      serviceBinder.AddMethod(__Method_GetService, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ServiceUsage.V1.GetServiceRequest, global::Google.Cloud.ServiceUsage.V1.Service>(serviceImpl.GetService));
      serviceBinder.AddMethod(__Method_ListServices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ServiceUsage.V1.ListServicesRequest, global::Google.Cloud.ServiceUsage.V1.ListServicesResponse>(serviceImpl.ListServices));
      serviceBinder.AddMethod(__Method_BatchEnableServices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ServiceUsage.V1.BatchEnableServicesRequest, global::Google.LongRunning.Operation>(serviceImpl.BatchEnableServices));
      serviceBinder.AddMethod(__Method_BatchGetServices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ServiceUsage.V1.BatchGetServicesRequest, global::Google.Cloud.ServiceUsage.V1.BatchGetServicesResponse>(serviceImpl.BatchGetServices));
    }

  }
}
#endregion
