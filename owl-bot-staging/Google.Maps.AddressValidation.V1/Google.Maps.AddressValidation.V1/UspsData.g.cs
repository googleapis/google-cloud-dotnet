// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/addressvalidation/v1/usps_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Maps.AddressValidation.V1 {

  /// <summary>Holder for reflection information generated from google/maps/addressvalidation/v1/usps_data.proto</summary>
  public static partial class UspsDataReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/addressvalidation/v1/usps_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UspsDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjBnb29nbGUvbWFwcy9hZGRyZXNzdmFsaWRhdGlvbi92MS91c3BzX2RhdGEu",
            "cHJvdG8SIGdvb2dsZS5tYXBzLmFkZHJlc3N2YWxpZGF0aW9uLnYxItoBCgtV",
            "c3BzQWRkcmVzcxIaChJmaXJzdF9hZGRyZXNzX2xpbmUYASABKAkSDAoEZmly",
            "bRgCIAEoCRIbChNzZWNvbmRfYWRkcmVzc19saW5lGAMgASgJEhQKDHVyYmFu",
            "aXphdGlvbhgEIAEoCRIjChtjaXR5X3N0YXRlX3ppcF9hZGRyZXNzX2xpbmUY",
            "BSABKAkSDAoEY2l0eRgGIAEoCRINCgVzdGF0ZRgHIAEoCRIQCgh6aXBfY29k",
            "ZRgIIAEoCRIaChJ6aXBfY29kZV9leHRlbnNpb24YCSABKAkigggKCFVzcHNE",
            "YXRhEksKFHN0YW5kYXJkaXplZF9hZGRyZXNzGAEgASgLMi0uZ29vZ2xlLm1h",
            "cHMuYWRkcmVzc3ZhbGlkYXRpb24udjEuVXNwc0FkZHJlc3MSGwoTZGVsaXZl",
            "cnlfcG9pbnRfY29kZRgCIAEoCRIiChpkZWxpdmVyeV9wb2ludF9jaGVja19k",
            "aWdpdBgDIAEoCRIYChBkcHZfY29uZmlybWF0aW9uGAQgASgJEhQKDGRwdl9m",
            "b290bm90ZRgFIAEoCRIQCghkcHZfY21yYRgGIAEoCRISCgpkcHZfdmFjYW50",
            "GAcgASgJEhMKC2Rwdl9ub19zdGF0GAggASgJEh8KF2Rwdl9ub19zdGF0X3Jl",
            "YXNvbl9jb2RlGB0gASgFEhAKCGRwdl9kcm9wGB4gASgJEhUKDWRwdl90aHJv",
            "d2JhY2sYHyABKAkSHQoVZHB2X25vbl9kZWxpdmVyeV9kYXlzGCAgASgJEiQK",
            "HGRwdl9ub25fZGVsaXZlcnlfZGF5c192YWx1ZXMYISABKAUSHgoWZHB2X25v",
            "X3NlY3VyZV9sb2NhdGlvbhgiIAEoCRIQCghkcHZfcGJzYRgjIAEoCRIfChdk",
            "cHZfZG9vcl9ub3RfYWNjZXNzaWJsZRgkIAEoCRIiChpkcHZfZW5oYW5jZWRf",
            "ZGVsaXZlcnlfY29kZRglIAEoCRIVCg1jYXJyaWVyX3JvdXRlGAkgASgJEh8K",
            "F2NhcnJpZXJfcm91dGVfaW5kaWNhdG9yGAogASgJEhQKDGV3c19ub19tYXRj",
            "aBgLIAEoCBIYChBwb3N0X29mZmljZV9jaXR5GAwgASgJEhkKEXBvc3Rfb2Zm",
            "aWNlX3N0YXRlGA0gASgJEhgKEGFiYnJldmlhdGVkX2NpdHkYDiABKAkSGAoQ",
            "Zmlwc19jb3VudHlfY29kZRgPIAEoCRIOCgZjb3VudHkYECABKAkSEwoLZWxv",
            "dF9udW1iZXIYESABKAkSEQoJZWxvdF9mbGFnGBIgASgJEh0KFWxhY3NfbGlu",
            "a19yZXR1cm5fY29kZRgTIAEoCRIbChNsYWNzX2xpbmtfaW5kaWNhdG9yGBQg",
            "ASgJEh8KF3BvX2JveF9vbmx5X3Bvc3RhbF9jb2RlGBUgASgIEhoKEnN1aXRl",
            "bGlua19mb290bm90ZRgWIAEoCRIWCg5wbWJfZGVzaWduYXRvchgXIAEoCRIS",
            "CgpwbWJfbnVtYmVyGBggASgJEhsKE2FkZHJlc3NfcmVjb3JkX3R5cGUYGSAB",
            "KAkSFwoPZGVmYXVsdF9hZGRyZXNzGBogASgIEhUKDWVycm9yX21lc3NhZ2UY",
            "GyABKAkSFgoOY2Fzc19wcm9jZXNzZWQYHCABKAhCigIKJGNvbS5nb29nbGUu",
            "bWFwcy5hZGRyZXNzdmFsaWRhdGlvbi52MUINVXNwc0RhdGFQcm90b1ABWlhj",
            "bG91ZC5nb29nbGUuY29tL2dvL21hcHMvYWRkcmVzc3ZhbGlkYXRpb24vYXBp",
            "djEvYWRkcmVzc3ZhbGlkYXRpb25wYjthZGRyZXNzdmFsaWRhdGlvbnBi+AEB",
            "ogIHR01QQVZWMaoCIEdvb2dsZS5NYXBzLkFkZHJlc3NWYWxpZGF0aW9uLlYx",
            "ygIgR29vZ2xlXE1hcHNcQWRkcmVzc1ZhbGlkYXRpb25cVjHqAiNHb29nbGU6",
            "Ok1hcHM6OkFkZHJlc3NWYWxpZGF0aW9uOjpWMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.AddressValidation.V1.UspsAddress), global::Google.Maps.AddressValidation.V1.UspsAddress.Parser, new[]{ "FirstAddressLine", "Firm", "SecondAddressLine", "Urbanization", "CityStateZipAddressLine", "City", "State", "ZipCode", "ZipCodeExtension" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Maps.AddressValidation.V1.UspsData), global::Google.Maps.AddressValidation.V1.UspsData.Parser, new[]{ "StandardizedAddress", "DeliveryPointCode", "DeliveryPointCheckDigit", "DpvConfirmation", "DpvFootnote", "DpvCmra", "DpvVacant", "DpvNoStat", "DpvNoStatReasonCode", "DpvDrop", "DpvThrowback", "DpvNonDeliveryDays", "DpvNonDeliveryDaysValues", "DpvNoSecureLocation", "DpvPbsa", "DpvDoorNotAccessible", "DpvEnhancedDeliveryCode", "CarrierRoute", "CarrierRouteIndicator", "EwsNoMatch", "PostOfficeCity", "PostOfficeState", "AbbreviatedCity", "FipsCountyCode", "County", "ElotNumber", "ElotFlag", "LacsLinkReturnCode", "LacsLinkIndicator", "PoBoxOnlyPostalCode", "SuitelinkFootnote", "PmbDesignator", "PmbNumber", "AddressRecordType", "DefaultAddress", "ErrorMessage", "CassProcessed" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// USPS representation of a US address.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UspsAddress : pb::IMessage<UspsAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UspsAddress> _parser = new pb::MessageParser<UspsAddress>(() => new UspsAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UspsAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.AddressValidation.V1.UspsDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UspsAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UspsAddress(UspsAddress other) : this() {
      firstAddressLine_ = other.firstAddressLine_;
      firm_ = other.firm_;
      secondAddressLine_ = other.secondAddressLine_;
      urbanization_ = other.urbanization_;
      cityStateZipAddressLine_ = other.cityStateZipAddressLine_;
      city_ = other.city_;
      state_ = other.state_;
      zipCode_ = other.zipCode_;
      zipCodeExtension_ = other.zipCodeExtension_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UspsAddress Clone() {
      return new UspsAddress(this);
    }

    /// <summary>Field number for the "first_address_line" field.</summary>
    public const int FirstAddressLineFieldNumber = 1;
    private string firstAddressLine_ = "";
    /// <summary>
    /// First address line.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FirstAddressLine {
      get { return firstAddressLine_; }
      set {
        firstAddressLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firm" field.</summary>
    public const int FirmFieldNumber = 2;
    private string firm_ = "";
    /// <summary>
    /// Firm name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Firm {
      get { return firm_; }
      set {
        firm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_address_line" field.</summary>
    public const int SecondAddressLineFieldNumber = 3;
    private string secondAddressLine_ = "";
    /// <summary>
    /// Second address line.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SecondAddressLine {
      get { return secondAddressLine_; }
      set {
        secondAddressLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "urbanization" field.</summary>
    public const int UrbanizationFieldNumber = 4;
    private string urbanization_ = "";
    /// <summary>
    /// Puerto Rican urbanization name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Urbanization {
      get { return urbanization_; }
      set {
        urbanization_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "city_state_zip_address_line" field.</summary>
    public const int CityStateZipAddressLineFieldNumber = 5;
    private string cityStateZipAddressLine_ = "";
    /// <summary>
    /// City + state + postal code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CityStateZipAddressLine {
      get { return cityStateZipAddressLine_; }
      set {
        cityStateZipAddressLine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 6;
    private string city_ = "";
    /// <summary>
    /// City name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 7;
    private string state_ = "";
    /// <summary>
    /// 2 letter state code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zip_code" field.</summary>
    public const int ZipCodeFieldNumber = 8;
    private string zipCode_ = "";
    /// <summary>
    /// Postal code e.g. 10009.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ZipCode {
      get { return zipCode_; }
      set {
        zipCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zip_code_extension" field.</summary>
    public const int ZipCodeExtensionFieldNumber = 9;
    private string zipCodeExtension_ = "";
    /// <summary>
    /// 4-digit postal code extension e.g. 5023.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ZipCodeExtension {
      get { return zipCodeExtension_; }
      set {
        zipCodeExtension_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UspsAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UspsAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FirstAddressLine != other.FirstAddressLine) return false;
      if (Firm != other.Firm) return false;
      if (SecondAddressLine != other.SecondAddressLine) return false;
      if (Urbanization != other.Urbanization) return false;
      if (CityStateZipAddressLine != other.CityStateZipAddressLine) return false;
      if (City != other.City) return false;
      if (State != other.State) return false;
      if (ZipCode != other.ZipCode) return false;
      if (ZipCodeExtension != other.ZipCodeExtension) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FirstAddressLine.Length != 0) hash ^= FirstAddressLine.GetHashCode();
      if (Firm.Length != 0) hash ^= Firm.GetHashCode();
      if (SecondAddressLine.Length != 0) hash ^= SecondAddressLine.GetHashCode();
      if (Urbanization.Length != 0) hash ^= Urbanization.GetHashCode();
      if (CityStateZipAddressLine.Length != 0) hash ^= CityStateZipAddressLine.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (ZipCode.Length != 0) hash ^= ZipCode.GetHashCode();
      if (ZipCodeExtension.Length != 0) hash ^= ZipCodeExtension.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FirstAddressLine.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirstAddressLine);
      }
      if (Firm.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Firm);
      }
      if (SecondAddressLine.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SecondAddressLine);
      }
      if (Urbanization.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Urbanization);
      }
      if (CityStateZipAddressLine.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CityStateZipAddressLine);
      }
      if (City.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(City);
      }
      if (State.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(State);
      }
      if (ZipCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ZipCode);
      }
      if (ZipCodeExtension.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ZipCodeExtension);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FirstAddressLine.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FirstAddressLine);
      }
      if (Firm.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Firm);
      }
      if (SecondAddressLine.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SecondAddressLine);
      }
      if (Urbanization.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Urbanization);
      }
      if (CityStateZipAddressLine.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CityStateZipAddressLine);
      }
      if (City.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(City);
      }
      if (State.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(State);
      }
      if (ZipCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ZipCode);
      }
      if (ZipCodeExtension.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ZipCodeExtension);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FirstAddressLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstAddressLine);
      }
      if (Firm.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firm);
      }
      if (SecondAddressLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SecondAddressLine);
      }
      if (Urbanization.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Urbanization);
      }
      if (CityStateZipAddressLine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CityStateZipAddressLine);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (ZipCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZipCode);
      }
      if (ZipCodeExtension.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZipCodeExtension);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UspsAddress other) {
      if (other == null) {
        return;
      }
      if (other.FirstAddressLine.Length != 0) {
        FirstAddressLine = other.FirstAddressLine;
      }
      if (other.Firm.Length != 0) {
        Firm = other.Firm;
      }
      if (other.SecondAddressLine.Length != 0) {
        SecondAddressLine = other.SecondAddressLine;
      }
      if (other.Urbanization.Length != 0) {
        Urbanization = other.Urbanization;
      }
      if (other.CityStateZipAddressLine.Length != 0) {
        CityStateZipAddressLine = other.CityStateZipAddressLine;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.ZipCode.Length != 0) {
        ZipCode = other.ZipCode;
      }
      if (other.ZipCodeExtension.Length != 0) {
        ZipCodeExtension = other.ZipCodeExtension;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FirstAddressLine = input.ReadString();
            break;
          }
          case 18: {
            Firm = input.ReadString();
            break;
          }
          case 26: {
            SecondAddressLine = input.ReadString();
            break;
          }
          case 34: {
            Urbanization = input.ReadString();
            break;
          }
          case 42: {
            CityStateZipAddressLine = input.ReadString();
            break;
          }
          case 50: {
            City = input.ReadString();
            break;
          }
          case 58: {
            State = input.ReadString();
            break;
          }
          case 66: {
            ZipCode = input.ReadString();
            break;
          }
          case 74: {
            ZipCodeExtension = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FirstAddressLine = input.ReadString();
            break;
          }
          case 18: {
            Firm = input.ReadString();
            break;
          }
          case 26: {
            SecondAddressLine = input.ReadString();
            break;
          }
          case 34: {
            Urbanization = input.ReadString();
            break;
          }
          case 42: {
            CityStateZipAddressLine = input.ReadString();
            break;
          }
          case 50: {
            City = input.ReadString();
            break;
          }
          case 58: {
            State = input.ReadString();
            break;
          }
          case 66: {
            ZipCode = input.ReadString();
            break;
          }
          case 74: {
            ZipCodeExtension = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The USPS data for the address. `uspsData` is not guaranteed to be fully
  /// populated for every US or PR address sent to the Address Validation API. It's
  /// recommended to integrate the backup address fields in the response if you
  /// utilize uspsData as the primary part of the response.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UspsData : pb::IMessage<UspsData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UspsData> _parser = new pb::MessageParser<UspsData>(() => new UspsData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UspsData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Maps.AddressValidation.V1.UspsDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UspsData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UspsData(UspsData other) : this() {
      standardizedAddress_ = other.standardizedAddress_ != null ? other.standardizedAddress_.Clone() : null;
      deliveryPointCode_ = other.deliveryPointCode_;
      deliveryPointCheckDigit_ = other.deliveryPointCheckDigit_;
      dpvConfirmation_ = other.dpvConfirmation_;
      dpvFootnote_ = other.dpvFootnote_;
      dpvCmra_ = other.dpvCmra_;
      dpvVacant_ = other.dpvVacant_;
      dpvNoStat_ = other.dpvNoStat_;
      dpvNoStatReasonCode_ = other.dpvNoStatReasonCode_;
      dpvDrop_ = other.dpvDrop_;
      dpvThrowback_ = other.dpvThrowback_;
      dpvNonDeliveryDays_ = other.dpvNonDeliveryDays_;
      dpvNonDeliveryDaysValues_ = other.dpvNonDeliveryDaysValues_;
      dpvNoSecureLocation_ = other.dpvNoSecureLocation_;
      dpvPbsa_ = other.dpvPbsa_;
      dpvDoorNotAccessible_ = other.dpvDoorNotAccessible_;
      dpvEnhancedDeliveryCode_ = other.dpvEnhancedDeliveryCode_;
      carrierRoute_ = other.carrierRoute_;
      carrierRouteIndicator_ = other.carrierRouteIndicator_;
      ewsNoMatch_ = other.ewsNoMatch_;
      postOfficeCity_ = other.postOfficeCity_;
      postOfficeState_ = other.postOfficeState_;
      abbreviatedCity_ = other.abbreviatedCity_;
      fipsCountyCode_ = other.fipsCountyCode_;
      county_ = other.county_;
      elotNumber_ = other.elotNumber_;
      elotFlag_ = other.elotFlag_;
      lacsLinkReturnCode_ = other.lacsLinkReturnCode_;
      lacsLinkIndicator_ = other.lacsLinkIndicator_;
      poBoxOnlyPostalCode_ = other.poBoxOnlyPostalCode_;
      suitelinkFootnote_ = other.suitelinkFootnote_;
      pmbDesignator_ = other.pmbDesignator_;
      pmbNumber_ = other.pmbNumber_;
      addressRecordType_ = other.addressRecordType_;
      defaultAddress_ = other.defaultAddress_;
      errorMessage_ = other.errorMessage_;
      cassProcessed_ = other.cassProcessed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UspsData Clone() {
      return new UspsData(this);
    }

    /// <summary>Field number for the "standardized_address" field.</summary>
    public const int StandardizedAddressFieldNumber = 1;
    private global::Google.Maps.AddressValidation.V1.UspsAddress standardizedAddress_;
    /// <summary>
    /// USPS standardized address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Maps.AddressValidation.V1.UspsAddress StandardizedAddress {
      get { return standardizedAddress_; }
      set {
        standardizedAddress_ = value;
      }
    }

    /// <summary>Field number for the "delivery_point_code" field.</summary>
    public const int DeliveryPointCodeFieldNumber = 2;
    private string deliveryPointCode_ = "";
    /// <summary>
    /// 2 digit delivery point code
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeliveryPointCode {
      get { return deliveryPointCode_; }
      set {
        deliveryPointCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delivery_point_check_digit" field.</summary>
    public const int DeliveryPointCheckDigitFieldNumber = 3;
    private string deliveryPointCheckDigit_ = "";
    /// <summary>
    /// The delivery point check digit. This number is added to the end of the
    /// delivery_point_barcode for mechanically scanned mail. Adding all the
    /// digits of the delivery_point_barcode, delivery_point_check_digit, postal
    /// code, and ZIP+4 together should yield a number divisible by 10.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeliveryPointCheckDigit {
      get { return deliveryPointCheckDigit_; }
      set {
        deliveryPointCheckDigit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_confirmation" field.</summary>
    public const int DpvConfirmationFieldNumber = 4;
    private string dpvConfirmation_ = "";
    /// <summary>
    /// The possible values for DPV confirmation. Returns a single character or
    /// returns no value.
    ///
    /// * `N`: Primary and any secondary number information failed to
    /// DPV confirm.
    /// * `D`: Address was DPV confirmed for the primary number only, and the
    /// secondary number information was missing.
    /// * `S`: Address was DPV confirmed for the primary number only, and the
    /// secondary number information was present but not confirmed.
    /// * `Y`: Address was DPV confirmed for primary and any secondary numbers.
    /// * Empty: If the response does not contain a `dpv_confirmation` value, the
    /// address was not submitted for DPV confirmation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvConfirmation {
      get { return dpvConfirmation_; }
      set {
        dpvConfirmation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_footnote" field.</summary>
    public const int DpvFootnoteFieldNumber = 5;
    private string dpvFootnote_ = "";
    /// <summary>
    /// The footnotes from delivery point validation.
    /// Multiple footnotes may be strung together in the same string.
    ///
    /// * `AA`: Input address matched to the ZIP+4 file
    /// * `A1`: Input address was not matched to the ZIP+4 file
    /// * `BB`: Matched to DPV (all components)
    /// * `CC`: Secondary number not matched and not required
    /// * `C1`: Secondary number not matched but required
    /// * `N1`: High-rise address missing secondary number
    /// * `M1`: Primary number missing
    /// * `M3`: Primary number invalid
    /// * `P1`: Input address PO, RR or HC box number missing
    /// * `P3`: Input address PO, RR, or HC Box number invalid
    /// * `F1`: Input address matched to a military address
    /// * `G1`: Input address matched to a general delivery address
    /// * `U1`: Input address matched to a unique ZIP code
    /// * `PB`: Input address matched to PBSA record
    /// * `RR`: DPV confirmed address with PMB information
    /// * `R1`: DPV confirmed address without PMB information
    /// * `R7`: Carrier Route R777 or R779 record
    /// * `IA`: Informed Address identified
    /// * `TA`: Primary number matched by dropping a trailing alpha
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvFootnote {
      get { return dpvFootnote_; }
      set {
        dpvFootnote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_cmra" field.</summary>
    public const int DpvCmraFieldNumber = 6;
    private string dpvCmra_ = "";
    /// <summary>
    /// Indicates if the address is a CMRA (Commercial Mail Receiving Agency)--a
    /// private business receiving mail for clients. Returns a single character.
    ///
    /// * `Y`: The address is a CMRA
    /// * `N`: The address is not a CMRA
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvCmra {
      get { return dpvCmra_; }
      set {
        dpvCmra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_vacant" field.</summary>
    public const int DpvVacantFieldNumber = 7;
    private string dpvVacant_ = "";
    /// <summary>
    /// Is this place vacant?
    /// Returns a single character.
    ///
    /// * `Y`: The address is vacant
    /// * `N`: The address is not vacant
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvVacant {
      get { return dpvVacant_; }
      set {
        dpvVacant_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_no_stat" field.</summary>
    public const int DpvNoStatFieldNumber = 8;
    private string dpvNoStat_ = "";
    /// <summary>
    /// Is this a no stat address or an active address?
    /// No stat addresses are ones which are not continuously occupied or addresses
    /// that the USPS does not service. Returns a single character.
    ///
    /// * `Y`: The address is not active
    /// * `N`: The address is active
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvNoStat {
      get { return dpvNoStat_; }
      set {
        dpvNoStat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_no_stat_reason_code" field.</summary>
    public const int DpvNoStatReasonCodeFieldNumber = 29;
    private int dpvNoStatReasonCode_;
    /// <summary>
    /// Indicates the NoStat type. Returns a reason code as int.
    ///
    /// * `1`: IDA (Internal Drop Address) – Addresses that do not receive mail
    /// directly from the USPS but are delivered to a drop address that services
    /// them.
    /// * `2`: CDS - Addresses that have not yet become deliverable. For example, a
    /// new subdivision where lots and primary numbers have been determined, but no
    /// structure exists yet for occupancy.
    /// * `3`: Collision - Addresses that do not actually DPV confirm.
    /// * `4`: CMZ (College, Military and Other Types) - ZIP + 4 records USPS has
    /// incorporated into the data.
    /// * `5`: Regular - Indicates addresses not receiving delivery and the
    /// addresses are not counted as possible deliveries.
    /// * `6`: Secondary Required - The address requires secondary information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DpvNoStatReasonCode {
      get { return dpvNoStatReasonCode_; }
      set {
        dpvNoStatReasonCode_ = value;
      }
    }

    /// <summary>Field number for the "dpv_drop" field.</summary>
    public const int DpvDropFieldNumber = 30;
    private string dpvDrop_ = "";
    /// <summary>
    /// Flag indicates mail is delivered to a single receptable at a site.
    /// Returns a single character.
    ///
    /// * `Y`: The mail is delivered to a single receptable at a site.
    /// * `N`: The mail is not delivered to a single receptable at a site.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvDrop {
      get { return dpvDrop_; }
      set {
        dpvDrop_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_throwback" field.</summary>
    public const int DpvThrowbackFieldNumber = 31;
    private string dpvThrowback_ = "";
    /// <summary>
    /// Indicates that mail is not delivered to the street address.
    /// Returns a single character.
    ///
    /// * `Y`: The mail is not delivered to the street address.
    /// * `N`: The mail is delivered to the street address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvThrowback {
      get { return dpvThrowback_; }
      set {
        dpvThrowback_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_non_delivery_days" field.</summary>
    public const int DpvNonDeliveryDaysFieldNumber = 32;
    private string dpvNonDeliveryDays_ = "";
    /// <summary>
    /// Flag indicates mail delivery is not performed every day of the week.
    /// Returns a single character.
    ///
    /// * `Y`: The mail delivery is not performed every day of the week.
    /// * `N`: No indication the mail delivery is not performed every day of the
    /// week.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvNonDeliveryDays {
      get { return dpvNonDeliveryDays_; }
      set {
        dpvNonDeliveryDays_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_non_delivery_days_values" field.</summary>
    public const int DpvNonDeliveryDaysValuesFieldNumber = 33;
    private int dpvNonDeliveryDaysValues_;
    /// <summary>
    /// Integer identifying non-delivery days. It can be interrogated using bit
    /// flags:
    /// 0x40 – Sunday is a non-delivery day
    /// 0x20 – Monday is a non-delivery day
    /// 0x10 – Tuesday is a non-delivery day
    /// 0x08 – Wednesday is a non-delivery day
    /// 0x04 – Thursday is a non-delivery day
    /// 0x02 – Friday is a non-delivery day
    /// 0x01 – Saturday is a non-delivery day
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DpvNonDeliveryDaysValues {
      get { return dpvNonDeliveryDaysValues_; }
      set {
        dpvNonDeliveryDaysValues_ = value;
      }
    }

    /// <summary>Field number for the "dpv_no_secure_location" field.</summary>
    public const int DpvNoSecureLocationFieldNumber = 34;
    private string dpvNoSecureLocation_ = "";
    /// <summary>
    /// Flag indicates door is accessible, but package will not be left due to
    /// security concerns.
    /// Returns a single character.
    ///
    /// * `Y`: The package will not be left due to security concerns.
    /// * `N`: No indication the package will not be left due to security concerns.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvNoSecureLocation {
      get { return dpvNoSecureLocation_; }
      set {
        dpvNoSecureLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_pbsa" field.</summary>
    public const int DpvPbsaFieldNumber = 35;
    private string dpvPbsa_ = "";
    /// <summary>
    /// Indicates the address was matched to PBSA record.
    /// Returns a single character.
    ///
    /// * `Y`: The address was matched to PBSA record.
    /// * `N`: The address was not matched to PBSA record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvPbsa {
      get { return dpvPbsa_; }
      set {
        dpvPbsa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_door_not_accessible" field.</summary>
    public const int DpvDoorNotAccessibleFieldNumber = 36;
    private string dpvDoorNotAccessible_ = "";
    /// <summary>
    /// Flag indicates addresses where USPS cannot knock on a door to deliver mail.
    /// Returns a single character.
    ///
    /// * `Y`: The door is not accessible.
    /// * `N`: No indication the door is not accessible.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvDoorNotAccessible {
      get { return dpvDoorNotAccessible_; }
      set {
        dpvDoorNotAccessible_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dpv_enhanced_delivery_code" field.</summary>
    public const int DpvEnhancedDeliveryCodeFieldNumber = 37;
    private string dpvEnhancedDeliveryCode_ = "";
    /// <summary>
    /// Indicates that more than one DPV return code is valid for the address.
    /// Returns a single character.
    ///
    /// * `Y`: Address was DPV confirmed for primary and any secondary numbers.
    /// * `N`: Primary and any secondary number information failed to
    /// DPV confirm.
    /// * `S`: Address was DPV confirmed for the primary number only, and the
    /// secondary number information was present by not confirmed,  or a single
    /// trailing alpha on a primary number was dropped to make a DPV match and
    /// secondary information required.
    /// * `D`: Address was DPV confirmed for the primary number only, and the
    /// secondary number information was missing.
    /// * `R`: Address confirmed but assigned to phantom route R777 and R779 and
    /// USPS delivery is not provided.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DpvEnhancedDeliveryCode {
      get { return dpvEnhancedDeliveryCode_; }
      set {
        dpvEnhancedDeliveryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_route" field.</summary>
    public const int CarrierRouteFieldNumber = 9;
    private string carrierRoute_ = "";
    /// <summary>
    /// The carrier route code.
    /// A four character code consisting of a one letter prefix and a three digit
    /// route designator.
    ///
    /// Prefixes:
    ///
    /// * `C`: Carrier route (or city route)
    /// * `R`: Rural route
    /// * `H`: Highway Contract Route
    /// * `B`: Post Office Box Section
    /// * `G`: General delivery unit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CarrierRoute {
      get { return carrierRoute_; }
      set {
        carrierRoute_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_route_indicator" field.</summary>
    public const int CarrierRouteIndicatorFieldNumber = 10;
    private string carrierRouteIndicator_ = "";
    /// <summary>
    /// Carrier route rate sort indicator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CarrierRouteIndicator {
      get { return carrierRouteIndicator_; }
      set {
        carrierRouteIndicator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ews_no_match" field.</summary>
    public const int EwsNoMatchFieldNumber = 11;
    private bool ewsNoMatch_;
    /// <summary>
    /// The delivery address is matchable, but the EWS file indicates that an exact
    /// match will be available soon.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EwsNoMatch {
      get { return ewsNoMatch_; }
      set {
        ewsNoMatch_ = value;
      }
    }

    /// <summary>Field number for the "post_office_city" field.</summary>
    public const int PostOfficeCityFieldNumber = 12;
    private string postOfficeCity_ = "";
    /// <summary>
    /// Main post office city.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PostOfficeCity {
      get { return postOfficeCity_; }
      set {
        postOfficeCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "post_office_state" field.</summary>
    public const int PostOfficeStateFieldNumber = 13;
    private string postOfficeState_ = "";
    /// <summary>
    /// Main post office state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PostOfficeState {
      get { return postOfficeState_; }
      set {
        postOfficeState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "abbreviated_city" field.</summary>
    public const int AbbreviatedCityFieldNumber = 14;
    private string abbreviatedCity_ = "";
    /// <summary>
    /// Abbreviated city.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AbbreviatedCity {
      get { return abbreviatedCity_; }
      set {
        abbreviatedCity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fips_county_code" field.</summary>
    public const int FipsCountyCodeFieldNumber = 15;
    private string fipsCountyCode_ = "";
    /// <summary>
    /// FIPS county code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FipsCountyCode {
      get { return fipsCountyCode_; }
      set {
        fipsCountyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "county" field.</summary>
    public const int CountyFieldNumber = 16;
    private string county_ = "";
    /// <summary>
    /// County name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string County {
      get { return county_; }
      set {
        county_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elot_number" field.</summary>
    public const int ElotNumberFieldNumber = 17;
    private string elotNumber_ = "";
    /// <summary>
    /// Enhanced Line of Travel (eLOT) number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ElotNumber {
      get { return elotNumber_; }
      set {
        elotNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "elot_flag" field.</summary>
    public const int ElotFlagFieldNumber = 18;
    private string elotFlag_ = "";
    /// <summary>
    /// eLOT Ascending/Descending Flag (A/D).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ElotFlag {
      get { return elotFlag_; }
      set {
        elotFlag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lacs_link_return_code" field.</summary>
    public const int LacsLinkReturnCodeFieldNumber = 19;
    private string lacsLinkReturnCode_ = "";
    /// <summary>
    /// LACSLink return code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LacsLinkReturnCode {
      get { return lacsLinkReturnCode_; }
      set {
        lacsLinkReturnCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lacs_link_indicator" field.</summary>
    public const int LacsLinkIndicatorFieldNumber = 20;
    private string lacsLinkIndicator_ = "";
    /// <summary>
    /// LACSLink indicator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LacsLinkIndicator {
      get { return lacsLinkIndicator_; }
      set {
        lacsLinkIndicator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "po_box_only_postal_code" field.</summary>
    public const int PoBoxOnlyPostalCodeFieldNumber = 21;
    private bool poBoxOnlyPostalCode_;
    /// <summary>
    /// PO Box only postal code.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PoBoxOnlyPostalCode {
      get { return poBoxOnlyPostalCode_; }
      set {
        poBoxOnlyPostalCode_ = value;
      }
    }

    /// <summary>Field number for the "suitelink_footnote" field.</summary>
    public const int SuitelinkFootnoteFieldNumber = 22;
    private string suitelinkFootnote_ = "";
    /// <summary>
    /// Footnotes from matching a street or highrise record to suite information.
    /// If business name match is found, the secondary number is returned.
    ///
    /// * `A`: SuiteLink record match, business address improved.
    /// * `00`: No match, business address is not improved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SuitelinkFootnote {
      get { return suitelinkFootnote_; }
      set {
        suitelinkFootnote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pmb_designator" field.</summary>
    public const int PmbDesignatorFieldNumber = 23;
    private string pmbDesignator_ = "";
    /// <summary>
    /// PMB (Private Mail Box) unit designator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PmbDesignator {
      get { return pmbDesignator_; }
      set {
        pmbDesignator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pmb_number" field.</summary>
    public const int PmbNumberFieldNumber = 24;
    private string pmbNumber_ = "";
    /// <summary>
    /// PMB (Private Mail Box) number;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PmbNumber {
      get { return pmbNumber_; }
      set {
        pmbNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address_record_type" field.</summary>
    public const int AddressRecordTypeFieldNumber = 25;
    private string addressRecordType_ = "";
    /// <summary>
    /// Type of the address record that matches the input address.
    ///
    /// * `F`: FIRM. This is a match to a Firm Record, which is the finest level of
    /// match available for an address.
    /// * `G`: GENERAL DELIVERY. This is a match to a General Delivery record.
    /// * `H`: BUILDING / APARTMENT. This is a match to a Building or Apartment
    /// record.
    /// * `P`: POST OFFICE BOX. This is a match to a Post Office Box.
    /// * `R`: RURAL ROUTE or HIGHWAY CONTRACT: This is a match to either a Rural
    /// Route or a Highway Contract record, both of which may have associated Box
    /// Number ranges.
    /// * `S`: STREET RECORD: This is a match to a Street record containing a valid
    /// primary number range.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AddressRecordType {
      get { return addressRecordType_; }
      set {
        addressRecordType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_address" field.</summary>
    public const int DefaultAddressFieldNumber = 26;
    private bool defaultAddress_;
    /// <summary>
    /// Indicator that a default address was found, but more specific addresses
    /// exists.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DefaultAddress {
      get { return defaultAddress_; }
      set {
        defaultAddress_ = value;
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 27;
    private string errorMessage_ = "";
    /// <summary>
    /// Error message for USPS data retrieval. This is populated when USPS
    /// processing is suspended because of the detection of artificially created
    /// addresses.
    ///
    /// The USPS data fields might not be populated when this error is present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cass_processed" field.</summary>
    public const int CassProcessedFieldNumber = 28;
    private bool cassProcessed_;
    /// <summary>
    /// Indicator that the request has been CASS processed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CassProcessed {
      get { return cassProcessed_; }
      set {
        cassProcessed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UspsData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UspsData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StandardizedAddress, other.StandardizedAddress)) return false;
      if (DeliveryPointCode != other.DeliveryPointCode) return false;
      if (DeliveryPointCheckDigit != other.DeliveryPointCheckDigit) return false;
      if (DpvConfirmation != other.DpvConfirmation) return false;
      if (DpvFootnote != other.DpvFootnote) return false;
      if (DpvCmra != other.DpvCmra) return false;
      if (DpvVacant != other.DpvVacant) return false;
      if (DpvNoStat != other.DpvNoStat) return false;
      if (DpvNoStatReasonCode != other.DpvNoStatReasonCode) return false;
      if (DpvDrop != other.DpvDrop) return false;
      if (DpvThrowback != other.DpvThrowback) return false;
      if (DpvNonDeliveryDays != other.DpvNonDeliveryDays) return false;
      if (DpvNonDeliveryDaysValues != other.DpvNonDeliveryDaysValues) return false;
      if (DpvNoSecureLocation != other.DpvNoSecureLocation) return false;
      if (DpvPbsa != other.DpvPbsa) return false;
      if (DpvDoorNotAccessible != other.DpvDoorNotAccessible) return false;
      if (DpvEnhancedDeliveryCode != other.DpvEnhancedDeliveryCode) return false;
      if (CarrierRoute != other.CarrierRoute) return false;
      if (CarrierRouteIndicator != other.CarrierRouteIndicator) return false;
      if (EwsNoMatch != other.EwsNoMatch) return false;
      if (PostOfficeCity != other.PostOfficeCity) return false;
      if (PostOfficeState != other.PostOfficeState) return false;
      if (AbbreviatedCity != other.AbbreviatedCity) return false;
      if (FipsCountyCode != other.FipsCountyCode) return false;
      if (County != other.County) return false;
      if (ElotNumber != other.ElotNumber) return false;
      if (ElotFlag != other.ElotFlag) return false;
      if (LacsLinkReturnCode != other.LacsLinkReturnCode) return false;
      if (LacsLinkIndicator != other.LacsLinkIndicator) return false;
      if (PoBoxOnlyPostalCode != other.PoBoxOnlyPostalCode) return false;
      if (SuitelinkFootnote != other.SuitelinkFootnote) return false;
      if (PmbDesignator != other.PmbDesignator) return false;
      if (PmbNumber != other.PmbNumber) return false;
      if (AddressRecordType != other.AddressRecordType) return false;
      if (DefaultAddress != other.DefaultAddress) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (CassProcessed != other.CassProcessed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (standardizedAddress_ != null) hash ^= StandardizedAddress.GetHashCode();
      if (DeliveryPointCode.Length != 0) hash ^= DeliveryPointCode.GetHashCode();
      if (DeliveryPointCheckDigit.Length != 0) hash ^= DeliveryPointCheckDigit.GetHashCode();
      if (DpvConfirmation.Length != 0) hash ^= DpvConfirmation.GetHashCode();
      if (DpvFootnote.Length != 0) hash ^= DpvFootnote.GetHashCode();
      if (DpvCmra.Length != 0) hash ^= DpvCmra.GetHashCode();
      if (DpvVacant.Length != 0) hash ^= DpvVacant.GetHashCode();
      if (DpvNoStat.Length != 0) hash ^= DpvNoStat.GetHashCode();
      if (DpvNoStatReasonCode != 0) hash ^= DpvNoStatReasonCode.GetHashCode();
      if (DpvDrop.Length != 0) hash ^= DpvDrop.GetHashCode();
      if (DpvThrowback.Length != 0) hash ^= DpvThrowback.GetHashCode();
      if (DpvNonDeliveryDays.Length != 0) hash ^= DpvNonDeliveryDays.GetHashCode();
      if (DpvNonDeliveryDaysValues != 0) hash ^= DpvNonDeliveryDaysValues.GetHashCode();
      if (DpvNoSecureLocation.Length != 0) hash ^= DpvNoSecureLocation.GetHashCode();
      if (DpvPbsa.Length != 0) hash ^= DpvPbsa.GetHashCode();
      if (DpvDoorNotAccessible.Length != 0) hash ^= DpvDoorNotAccessible.GetHashCode();
      if (DpvEnhancedDeliveryCode.Length != 0) hash ^= DpvEnhancedDeliveryCode.GetHashCode();
      if (CarrierRoute.Length != 0) hash ^= CarrierRoute.GetHashCode();
      if (CarrierRouteIndicator.Length != 0) hash ^= CarrierRouteIndicator.GetHashCode();
      if (EwsNoMatch != false) hash ^= EwsNoMatch.GetHashCode();
      if (PostOfficeCity.Length != 0) hash ^= PostOfficeCity.GetHashCode();
      if (PostOfficeState.Length != 0) hash ^= PostOfficeState.GetHashCode();
      if (AbbreviatedCity.Length != 0) hash ^= AbbreviatedCity.GetHashCode();
      if (FipsCountyCode.Length != 0) hash ^= FipsCountyCode.GetHashCode();
      if (County.Length != 0) hash ^= County.GetHashCode();
      if (ElotNumber.Length != 0) hash ^= ElotNumber.GetHashCode();
      if (ElotFlag.Length != 0) hash ^= ElotFlag.GetHashCode();
      if (LacsLinkReturnCode.Length != 0) hash ^= LacsLinkReturnCode.GetHashCode();
      if (LacsLinkIndicator.Length != 0) hash ^= LacsLinkIndicator.GetHashCode();
      if (PoBoxOnlyPostalCode != false) hash ^= PoBoxOnlyPostalCode.GetHashCode();
      if (SuitelinkFootnote.Length != 0) hash ^= SuitelinkFootnote.GetHashCode();
      if (PmbDesignator.Length != 0) hash ^= PmbDesignator.GetHashCode();
      if (PmbNumber.Length != 0) hash ^= PmbNumber.GetHashCode();
      if (AddressRecordType.Length != 0) hash ^= AddressRecordType.GetHashCode();
      if (DefaultAddress != false) hash ^= DefaultAddress.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (CassProcessed != false) hash ^= CassProcessed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (standardizedAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StandardizedAddress);
      }
      if (DeliveryPointCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeliveryPointCode);
      }
      if (DeliveryPointCheckDigit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeliveryPointCheckDigit);
      }
      if (DpvConfirmation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DpvConfirmation);
      }
      if (DpvFootnote.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DpvFootnote);
      }
      if (DpvCmra.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DpvCmra);
      }
      if (DpvVacant.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DpvVacant);
      }
      if (DpvNoStat.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DpvNoStat);
      }
      if (CarrierRoute.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CarrierRoute);
      }
      if (CarrierRouteIndicator.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CarrierRouteIndicator);
      }
      if (EwsNoMatch != false) {
        output.WriteRawTag(88);
        output.WriteBool(EwsNoMatch);
      }
      if (PostOfficeCity.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PostOfficeCity);
      }
      if (PostOfficeState.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PostOfficeState);
      }
      if (AbbreviatedCity.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AbbreviatedCity);
      }
      if (FipsCountyCode.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(FipsCountyCode);
      }
      if (County.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(County);
      }
      if (ElotNumber.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ElotNumber);
      }
      if (ElotFlag.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ElotFlag);
      }
      if (LacsLinkReturnCode.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(LacsLinkReturnCode);
      }
      if (LacsLinkIndicator.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(LacsLinkIndicator);
      }
      if (PoBoxOnlyPostalCode != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(PoBoxOnlyPostalCode);
      }
      if (SuitelinkFootnote.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(SuitelinkFootnote);
      }
      if (PmbDesignator.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(PmbDesignator);
      }
      if (PmbNumber.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(PmbNumber);
      }
      if (AddressRecordType.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(AddressRecordType);
      }
      if (DefaultAddress != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(DefaultAddress);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(ErrorMessage);
      }
      if (CassProcessed != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(CassProcessed);
      }
      if (DpvNoStatReasonCode != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(DpvNoStatReasonCode);
      }
      if (DpvDrop.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(DpvDrop);
      }
      if (DpvThrowback.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(DpvThrowback);
      }
      if (DpvNonDeliveryDays.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(DpvNonDeliveryDays);
      }
      if (DpvNonDeliveryDaysValues != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(DpvNonDeliveryDaysValues);
      }
      if (DpvNoSecureLocation.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(DpvNoSecureLocation);
      }
      if (DpvPbsa.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(DpvPbsa);
      }
      if (DpvDoorNotAccessible.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(DpvDoorNotAccessible);
      }
      if (DpvEnhancedDeliveryCode.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(DpvEnhancedDeliveryCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (standardizedAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StandardizedAddress);
      }
      if (DeliveryPointCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeliveryPointCode);
      }
      if (DeliveryPointCheckDigit.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeliveryPointCheckDigit);
      }
      if (DpvConfirmation.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DpvConfirmation);
      }
      if (DpvFootnote.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DpvFootnote);
      }
      if (DpvCmra.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DpvCmra);
      }
      if (DpvVacant.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DpvVacant);
      }
      if (DpvNoStat.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DpvNoStat);
      }
      if (CarrierRoute.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(CarrierRoute);
      }
      if (CarrierRouteIndicator.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(CarrierRouteIndicator);
      }
      if (EwsNoMatch != false) {
        output.WriteRawTag(88);
        output.WriteBool(EwsNoMatch);
      }
      if (PostOfficeCity.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PostOfficeCity);
      }
      if (PostOfficeState.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(PostOfficeState);
      }
      if (AbbreviatedCity.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(AbbreviatedCity);
      }
      if (FipsCountyCode.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(FipsCountyCode);
      }
      if (County.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(County);
      }
      if (ElotNumber.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(ElotNumber);
      }
      if (ElotFlag.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ElotFlag);
      }
      if (LacsLinkReturnCode.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(LacsLinkReturnCode);
      }
      if (LacsLinkIndicator.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(LacsLinkIndicator);
      }
      if (PoBoxOnlyPostalCode != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(PoBoxOnlyPostalCode);
      }
      if (SuitelinkFootnote.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(SuitelinkFootnote);
      }
      if (PmbDesignator.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(PmbDesignator);
      }
      if (PmbNumber.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(PmbNumber);
      }
      if (AddressRecordType.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(AddressRecordType);
      }
      if (DefaultAddress != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(DefaultAddress);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(ErrorMessage);
      }
      if (CassProcessed != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(CassProcessed);
      }
      if (DpvNoStatReasonCode != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(DpvNoStatReasonCode);
      }
      if (DpvDrop.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(DpvDrop);
      }
      if (DpvThrowback.Length != 0) {
        output.WriteRawTag(250, 1);
        output.WriteString(DpvThrowback);
      }
      if (DpvNonDeliveryDays.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(DpvNonDeliveryDays);
      }
      if (DpvNonDeliveryDaysValues != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(DpvNonDeliveryDaysValues);
      }
      if (DpvNoSecureLocation.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(DpvNoSecureLocation);
      }
      if (DpvPbsa.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(DpvPbsa);
      }
      if (DpvDoorNotAccessible.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(DpvDoorNotAccessible);
      }
      if (DpvEnhancedDeliveryCode.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(DpvEnhancedDeliveryCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (standardizedAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StandardizedAddress);
      }
      if (DeliveryPointCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeliveryPointCode);
      }
      if (DeliveryPointCheckDigit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeliveryPointCheckDigit);
      }
      if (DpvConfirmation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DpvConfirmation);
      }
      if (DpvFootnote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DpvFootnote);
      }
      if (DpvCmra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DpvCmra);
      }
      if (DpvVacant.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DpvVacant);
      }
      if (DpvNoStat.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DpvNoStat);
      }
      if (DpvNoStatReasonCode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DpvNoStatReasonCode);
      }
      if (DpvDrop.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DpvDrop);
      }
      if (DpvThrowback.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DpvThrowback);
      }
      if (DpvNonDeliveryDays.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DpvNonDeliveryDays);
      }
      if (DpvNonDeliveryDaysValues != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DpvNonDeliveryDaysValues);
      }
      if (DpvNoSecureLocation.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DpvNoSecureLocation);
      }
      if (DpvPbsa.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DpvPbsa);
      }
      if (DpvDoorNotAccessible.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DpvDoorNotAccessible);
      }
      if (DpvEnhancedDeliveryCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DpvEnhancedDeliveryCode);
      }
      if (CarrierRoute.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierRoute);
      }
      if (CarrierRouteIndicator.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierRouteIndicator);
      }
      if (EwsNoMatch != false) {
        size += 1 + 1;
      }
      if (PostOfficeCity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostOfficeCity);
      }
      if (PostOfficeState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PostOfficeState);
      }
      if (AbbreviatedCity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AbbreviatedCity);
      }
      if (FipsCountyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FipsCountyCode);
      }
      if (County.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(County);
      }
      if (ElotNumber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ElotNumber);
      }
      if (ElotFlag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ElotFlag);
      }
      if (LacsLinkReturnCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LacsLinkReturnCode);
      }
      if (LacsLinkIndicator.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LacsLinkIndicator);
      }
      if (PoBoxOnlyPostalCode != false) {
        size += 2 + 1;
      }
      if (SuitelinkFootnote.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SuitelinkFootnote);
      }
      if (PmbDesignator.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PmbDesignator);
      }
      if (PmbNumber.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PmbNumber);
      }
      if (AddressRecordType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AddressRecordType);
      }
      if (DefaultAddress != false) {
        size += 2 + 1;
      }
      if (ErrorMessage.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (CassProcessed != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UspsData other) {
      if (other == null) {
        return;
      }
      if (other.standardizedAddress_ != null) {
        if (standardizedAddress_ == null) {
          StandardizedAddress = new global::Google.Maps.AddressValidation.V1.UspsAddress();
        }
        StandardizedAddress.MergeFrom(other.StandardizedAddress);
      }
      if (other.DeliveryPointCode.Length != 0) {
        DeliveryPointCode = other.DeliveryPointCode;
      }
      if (other.DeliveryPointCheckDigit.Length != 0) {
        DeliveryPointCheckDigit = other.DeliveryPointCheckDigit;
      }
      if (other.DpvConfirmation.Length != 0) {
        DpvConfirmation = other.DpvConfirmation;
      }
      if (other.DpvFootnote.Length != 0) {
        DpvFootnote = other.DpvFootnote;
      }
      if (other.DpvCmra.Length != 0) {
        DpvCmra = other.DpvCmra;
      }
      if (other.DpvVacant.Length != 0) {
        DpvVacant = other.DpvVacant;
      }
      if (other.DpvNoStat.Length != 0) {
        DpvNoStat = other.DpvNoStat;
      }
      if (other.DpvNoStatReasonCode != 0) {
        DpvNoStatReasonCode = other.DpvNoStatReasonCode;
      }
      if (other.DpvDrop.Length != 0) {
        DpvDrop = other.DpvDrop;
      }
      if (other.DpvThrowback.Length != 0) {
        DpvThrowback = other.DpvThrowback;
      }
      if (other.DpvNonDeliveryDays.Length != 0) {
        DpvNonDeliveryDays = other.DpvNonDeliveryDays;
      }
      if (other.DpvNonDeliveryDaysValues != 0) {
        DpvNonDeliveryDaysValues = other.DpvNonDeliveryDaysValues;
      }
      if (other.DpvNoSecureLocation.Length != 0) {
        DpvNoSecureLocation = other.DpvNoSecureLocation;
      }
      if (other.DpvPbsa.Length != 0) {
        DpvPbsa = other.DpvPbsa;
      }
      if (other.DpvDoorNotAccessible.Length != 0) {
        DpvDoorNotAccessible = other.DpvDoorNotAccessible;
      }
      if (other.DpvEnhancedDeliveryCode.Length != 0) {
        DpvEnhancedDeliveryCode = other.DpvEnhancedDeliveryCode;
      }
      if (other.CarrierRoute.Length != 0) {
        CarrierRoute = other.CarrierRoute;
      }
      if (other.CarrierRouteIndicator.Length != 0) {
        CarrierRouteIndicator = other.CarrierRouteIndicator;
      }
      if (other.EwsNoMatch != false) {
        EwsNoMatch = other.EwsNoMatch;
      }
      if (other.PostOfficeCity.Length != 0) {
        PostOfficeCity = other.PostOfficeCity;
      }
      if (other.PostOfficeState.Length != 0) {
        PostOfficeState = other.PostOfficeState;
      }
      if (other.AbbreviatedCity.Length != 0) {
        AbbreviatedCity = other.AbbreviatedCity;
      }
      if (other.FipsCountyCode.Length != 0) {
        FipsCountyCode = other.FipsCountyCode;
      }
      if (other.County.Length != 0) {
        County = other.County;
      }
      if (other.ElotNumber.Length != 0) {
        ElotNumber = other.ElotNumber;
      }
      if (other.ElotFlag.Length != 0) {
        ElotFlag = other.ElotFlag;
      }
      if (other.LacsLinkReturnCode.Length != 0) {
        LacsLinkReturnCode = other.LacsLinkReturnCode;
      }
      if (other.LacsLinkIndicator.Length != 0) {
        LacsLinkIndicator = other.LacsLinkIndicator;
      }
      if (other.PoBoxOnlyPostalCode != false) {
        PoBoxOnlyPostalCode = other.PoBoxOnlyPostalCode;
      }
      if (other.SuitelinkFootnote.Length != 0) {
        SuitelinkFootnote = other.SuitelinkFootnote;
      }
      if (other.PmbDesignator.Length != 0) {
        PmbDesignator = other.PmbDesignator;
      }
      if (other.PmbNumber.Length != 0) {
        PmbNumber = other.PmbNumber;
      }
      if (other.AddressRecordType.Length != 0) {
        AddressRecordType = other.AddressRecordType;
      }
      if (other.DefaultAddress != false) {
        DefaultAddress = other.DefaultAddress;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.CassProcessed != false) {
        CassProcessed = other.CassProcessed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (standardizedAddress_ == null) {
              StandardizedAddress = new global::Google.Maps.AddressValidation.V1.UspsAddress();
            }
            input.ReadMessage(StandardizedAddress);
            break;
          }
          case 18: {
            DeliveryPointCode = input.ReadString();
            break;
          }
          case 26: {
            DeliveryPointCheckDigit = input.ReadString();
            break;
          }
          case 34: {
            DpvConfirmation = input.ReadString();
            break;
          }
          case 42: {
            DpvFootnote = input.ReadString();
            break;
          }
          case 50: {
            DpvCmra = input.ReadString();
            break;
          }
          case 58: {
            DpvVacant = input.ReadString();
            break;
          }
          case 66: {
            DpvNoStat = input.ReadString();
            break;
          }
          case 74: {
            CarrierRoute = input.ReadString();
            break;
          }
          case 82: {
            CarrierRouteIndicator = input.ReadString();
            break;
          }
          case 88: {
            EwsNoMatch = input.ReadBool();
            break;
          }
          case 98: {
            PostOfficeCity = input.ReadString();
            break;
          }
          case 106: {
            PostOfficeState = input.ReadString();
            break;
          }
          case 114: {
            AbbreviatedCity = input.ReadString();
            break;
          }
          case 122: {
            FipsCountyCode = input.ReadString();
            break;
          }
          case 130: {
            County = input.ReadString();
            break;
          }
          case 138: {
            ElotNumber = input.ReadString();
            break;
          }
          case 146: {
            ElotFlag = input.ReadString();
            break;
          }
          case 154: {
            LacsLinkReturnCode = input.ReadString();
            break;
          }
          case 162: {
            LacsLinkIndicator = input.ReadString();
            break;
          }
          case 168: {
            PoBoxOnlyPostalCode = input.ReadBool();
            break;
          }
          case 178: {
            SuitelinkFootnote = input.ReadString();
            break;
          }
          case 186: {
            PmbDesignator = input.ReadString();
            break;
          }
          case 194: {
            PmbNumber = input.ReadString();
            break;
          }
          case 202: {
            AddressRecordType = input.ReadString();
            break;
          }
          case 208: {
            DefaultAddress = input.ReadBool();
            break;
          }
          case 218: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 224: {
            CassProcessed = input.ReadBool();
            break;
          }
          case 232: {
            DpvNoStatReasonCode = input.ReadInt32();
            break;
          }
          case 242: {
            DpvDrop = input.ReadString();
            break;
          }
          case 250: {
            DpvThrowback = input.ReadString();
            break;
          }
          case 258: {
            DpvNonDeliveryDays = input.ReadString();
            break;
          }
          case 264: {
            DpvNonDeliveryDaysValues = input.ReadInt32();
            break;
          }
          case 274: {
            DpvNoSecureLocation = input.ReadString();
            break;
          }
          case 282: {
            DpvPbsa = input.ReadString();
            break;
          }
          case 290: {
            DpvDoorNotAccessible = input.ReadString();
            break;
          }
          case 298: {
            DpvEnhancedDeliveryCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (standardizedAddress_ == null) {
              StandardizedAddress = new global::Google.Maps.AddressValidation.V1.UspsAddress();
            }
            input.ReadMessage(StandardizedAddress);
            break;
          }
          case 18: {
            DeliveryPointCode = input.ReadString();
            break;
          }
          case 26: {
            DeliveryPointCheckDigit = input.ReadString();
            break;
          }
          case 34: {
            DpvConfirmation = input.ReadString();
            break;
          }
          case 42: {
            DpvFootnote = input.ReadString();
            break;
          }
          case 50: {
            DpvCmra = input.ReadString();
            break;
          }
          case 58: {
            DpvVacant = input.ReadString();
            break;
          }
          case 66: {
            DpvNoStat = input.ReadString();
            break;
          }
          case 74: {
            CarrierRoute = input.ReadString();
            break;
          }
          case 82: {
            CarrierRouteIndicator = input.ReadString();
            break;
          }
          case 88: {
            EwsNoMatch = input.ReadBool();
            break;
          }
          case 98: {
            PostOfficeCity = input.ReadString();
            break;
          }
          case 106: {
            PostOfficeState = input.ReadString();
            break;
          }
          case 114: {
            AbbreviatedCity = input.ReadString();
            break;
          }
          case 122: {
            FipsCountyCode = input.ReadString();
            break;
          }
          case 130: {
            County = input.ReadString();
            break;
          }
          case 138: {
            ElotNumber = input.ReadString();
            break;
          }
          case 146: {
            ElotFlag = input.ReadString();
            break;
          }
          case 154: {
            LacsLinkReturnCode = input.ReadString();
            break;
          }
          case 162: {
            LacsLinkIndicator = input.ReadString();
            break;
          }
          case 168: {
            PoBoxOnlyPostalCode = input.ReadBool();
            break;
          }
          case 178: {
            SuitelinkFootnote = input.ReadString();
            break;
          }
          case 186: {
            PmbDesignator = input.ReadString();
            break;
          }
          case 194: {
            PmbNumber = input.ReadString();
            break;
          }
          case 202: {
            AddressRecordType = input.ReadString();
            break;
          }
          case 208: {
            DefaultAddress = input.ReadBool();
            break;
          }
          case 218: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 224: {
            CassProcessed = input.ReadBool();
            break;
          }
          case 232: {
            DpvNoStatReasonCode = input.ReadInt32();
            break;
          }
          case 242: {
            DpvDrop = input.ReadString();
            break;
          }
          case 250: {
            DpvThrowback = input.ReadString();
            break;
          }
          case 258: {
            DpvNonDeliveryDays = input.ReadString();
            break;
          }
          case 264: {
            DpvNonDeliveryDaysValues = input.ReadInt32();
            break;
          }
          case 274: {
            DpvNoSecureLocation = input.ReadString();
            break;
          }
          case 282: {
            DpvPbsa = input.ReadString();
            break;
          }
          case 290: {
            DpvDoorNotAccessible = input.ReadString();
            break;
          }
          case 298: {
            DpvEnhancedDeliveryCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
