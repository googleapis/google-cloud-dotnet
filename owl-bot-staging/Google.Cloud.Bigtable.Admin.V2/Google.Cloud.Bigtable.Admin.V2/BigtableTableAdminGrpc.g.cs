// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/bigtable/admin/v2/bigtable_table_admin.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Bigtable.Admin.V2 {
  /// <summary>
  /// Service for creating, configuring, and deleting Cloud Bigtable tables.
  ///
  /// Provides access to the table schemas only, not the data stored within
  /// the tables.
  /// </summary>
  public static partial class BigtableTableAdmin
  {
    static readonly string __ServiceName = "google.bigtable.admin.v2.BigtableTableAdmin";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest> __Marshaller_google_bigtable_admin_v2_CreateTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.Table> __Marshaller_google_bigtable_admin_v2_Table = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.Table.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest> __Marshaller_google_bigtable_admin_v2_CreateTableFromSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest> __Marshaller_google_bigtable_admin_v2_ListTablesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> __Marshaller_google_bigtable_admin_v2_ListTablesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest> __Marshaller_google_bigtable_admin_v2_GetTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest> __Marshaller_google_bigtable_admin_v2_UpdateTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest> __Marshaller_google_bigtable_admin_v2_DeleteTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest> __Marshaller_google_bigtable_admin_v2_UndeleteTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest> __Marshaller_google_bigtable_admin_v2_CreateAuthorizedViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest> __Marshaller_google_bigtable_admin_v2_ListAuthorizedViewsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse> __Marshaller_google_bigtable_admin_v2_ListAuthorizedViewsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest> __Marshaller_google_bigtable_admin_v2_GetAuthorizedViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView> __Marshaller_google_bigtable_admin_v2_AuthorizedView = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest> __Marshaller_google_bigtable_admin_v2_UpdateAuthorizedViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest> __Marshaller_google_bigtable_admin_v2_DeleteAuthorizedViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest> __Marshaller_google_bigtable_admin_v2_ModifyColumnFamiliesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest> __Marshaller_google_bigtable_admin_v2_DropRowRangeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest> __Marshaller_google_bigtable_admin_v2_GenerateConsistencyTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> __Marshaller_google_bigtable_admin_v2_GenerateConsistencyTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest> __Marshaller_google_bigtable_admin_v2_CheckConsistencyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> __Marshaller_google_bigtable_admin_v2_CheckConsistencyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest> __Marshaller_google_bigtable_admin_v2_SnapshotTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest> __Marshaller_google_bigtable_admin_v2_GetSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.Snapshot> __Marshaller_google_bigtable_admin_v2_Snapshot = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.Snapshot.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest> __Marshaller_google_bigtable_admin_v2_ListSnapshotsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> __Marshaller_google_bigtable_admin_v2_ListSnapshotsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest> __Marshaller_google_bigtable_admin_v2_DeleteSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest> __Marshaller_google_bigtable_admin_v2_CreateBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest> __Marshaller_google_bigtable_admin_v2_GetBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.Backup> __Marshaller_google_bigtable_admin_v2_Backup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.Backup.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest> __Marshaller_google_bigtable_admin_v2_UpdateBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest> __Marshaller_google_bigtable_admin_v2_DeleteBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest> __Marshaller_google_bigtable_admin_v2_ListBackupsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse> __Marshaller_google_bigtable_admin_v2_ListBackupsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest> __Marshaller_google_bigtable_admin_v2_RestoreTableRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest> __Marshaller_google_bigtable_admin_v2_CopyBackupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.GetIamPolicyRequest> __Marshaller_google_iam_v1_GetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.GetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.Policy> __Marshaller_google_iam_v1_Policy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.Policy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.SetIamPolicyRequest> __Marshaller_google_iam_v1_SetIamPolicyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.SetIamPolicyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest> __Marshaller_google_iam_v1_TestIamPermissionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Marshaller_google_iam_v1_TestIamPermissionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table> __Method_CreateTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTable",
        __Marshaller_google_bigtable_admin_v2_CreateTableRequest,
        __Marshaller_google_bigtable_admin_v2_Table);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest, global::Google.LongRunning.Operation> __Method_CreateTableFromSnapshot = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTableFromSnapshot",
        __Marshaller_google_bigtable_admin_v2_CreateTableFromSnapshotRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest, global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> __Method_ListTables = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest, global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTables",
        __Marshaller_google_bigtable_admin_v2_ListTablesRequest,
        __Marshaller_google_bigtable_admin_v2_ListTablesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table> __Method_GetTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTable",
        __Marshaller_google_bigtable_admin_v2_GetTableRequest,
        __Marshaller_google_bigtable_admin_v2_Table);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest, global::Google.LongRunning.Operation> __Method_UpdateTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTable",
        __Marshaller_google_bigtable_admin_v2_UpdateTableRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTable",
        __Marshaller_google_bigtable_admin_v2_DeleteTableRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest, global::Google.LongRunning.Operation> __Method_UndeleteTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UndeleteTable",
        __Marshaller_google_bigtable_admin_v2_UndeleteTableRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest, global::Google.LongRunning.Operation> __Method_CreateAuthorizedView = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAuthorizedView",
        __Marshaller_google_bigtable_admin_v2_CreateAuthorizedViewRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse> __Method_ListAuthorizedViews = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAuthorizedViews",
        __Marshaller_google_bigtable_admin_v2_ListAuthorizedViewsRequest,
        __Marshaller_google_bigtable_admin_v2_ListAuthorizedViewsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest, global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView> __Method_GetAuthorizedView = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest, global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAuthorizedView",
        __Marshaller_google_bigtable_admin_v2_GetAuthorizedViewRequest,
        __Marshaller_google_bigtable_admin_v2_AuthorizedView);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest, global::Google.LongRunning.Operation> __Method_UpdateAuthorizedView = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAuthorizedView",
        __Marshaller_google_bigtable_admin_v2_UpdateAuthorizedViewRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAuthorizedView = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAuthorizedView",
        __Marshaller_google_bigtable_admin_v2_DeleteAuthorizedViewRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest, global::Google.Cloud.Bigtable.Admin.V2.Table> __Method_ModifyColumnFamilies = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ModifyColumnFamilies",
        __Marshaller_google_bigtable_admin_v2_ModifyColumnFamiliesRequest,
        __Marshaller_google_bigtable_admin_v2_Table);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DropRowRange = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DropRowRange",
        __Marshaller_google_bigtable_admin_v2_DropRowRangeRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest, global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> __Method_GenerateConsistencyToken = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest, global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateConsistencyToken",
        __Marshaller_google_bigtable_admin_v2_GenerateConsistencyTokenRequest,
        __Marshaller_google_bigtable_admin_v2_GenerateConsistencyTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest, global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> __Method_CheckConsistency = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest, global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckConsistency",
        __Marshaller_google_bigtable_admin_v2_CheckConsistencyRequest,
        __Marshaller_google_bigtable_admin_v2_CheckConsistencyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest, global::Google.LongRunning.Operation> __Method_SnapshotTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SnapshotTable",
        __Marshaller_google_bigtable_admin_v2_SnapshotTableRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest, global::Google.Cloud.Bigtable.Admin.V2.Snapshot> __Method_GetSnapshot = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest, global::Google.Cloud.Bigtable.Admin.V2.Snapshot>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSnapshot",
        __Marshaller_google_bigtable_admin_v2_GetSnapshotRequest,
        __Marshaller_google_bigtable_admin_v2_Snapshot);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> __Method_ListSnapshots = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSnapshots",
        __Marshaller_google_bigtable_admin_v2_ListSnapshotsRequest,
        __Marshaller_google_bigtable_admin_v2_ListSnapshotsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSnapshot = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSnapshot",
        __Marshaller_google_bigtable_admin_v2_DeleteSnapshotRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest, global::Google.LongRunning.Operation> __Method_CreateBackup = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBackup",
        __Marshaller_google_bigtable_admin_v2_CreateBackupRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest, global::Google.Cloud.Bigtable.Admin.V2.Backup> __Method_GetBackup = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest, global::Google.Cloud.Bigtable.Admin.V2.Backup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBackup",
        __Marshaller_google_bigtable_admin_v2_GetBackupRequest,
        __Marshaller_google_bigtable_admin_v2_Backup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest, global::Google.Cloud.Bigtable.Admin.V2.Backup> __Method_UpdateBackup = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest, global::Google.Cloud.Bigtable.Admin.V2.Backup>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBackup",
        __Marshaller_google_bigtable_admin_v2_UpdateBackupRequest,
        __Marshaller_google_bigtable_admin_v2_Backup);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteBackup = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBackup",
        __Marshaller_google_bigtable_admin_v2_DeleteBackupRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse> __Method_ListBackups = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBackups",
        __Marshaller_google_bigtable_admin_v2_ListBackupsRequest,
        __Marshaller_google_bigtable_admin_v2_ListBackupsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest, global::Google.LongRunning.Operation> __Method_RestoreTable = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestoreTable",
        __Marshaller_google_bigtable_admin_v2_RestoreTableRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest, global::Google.LongRunning.Operation> __Method_CopyBackup = new grpc::Method<global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CopyBackup",
        __Marshaller_google_bigtable_admin_v2_CopyBackupRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_GetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIamPolicy",
        __Marshaller_google_iam_v1_GetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy> __Method_SetIamPolicy = new grpc::Method<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIamPolicy",
        __Marshaller_google_iam_v1_SetIamPolicyRequest,
        __Marshaller_google_iam_v1_Policy);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> __Method_TestIamPermissions = new grpc::Method<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TestIamPermissions",
        __Marshaller_google_iam_v1_TestIamPermissionsRequest,
        __Marshaller_google_iam_v1_TestIamPermissionsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Bigtable.Admin.V2.BigtableTableAdminReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BigtableTableAdmin</summary>
    [grpc::BindServiceMethod(typeof(BigtableTableAdmin), "BindService")]
    public abstract partial class BigtableTableAdminBase
    {
      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Table> CreateTable(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateTableFromSnapshot(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> ListTables(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Table> GetTable(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a specified table.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateTable(global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTable(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restores a specified table which was accidentally deleted.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UndeleteTable(global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all AuthorizedViews from a specific table.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse> ListAuthorizedViews(global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets information from a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView> GetAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Permanently deletes a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Table> ModifyColumnFamilies(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DropRowRange(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> GenerateConsistencyToken(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> CheckConsistency(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> SnapshotTable(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets metadata information about the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Snapshot> GetSnapshot(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all snapshots associated with the specified cluster.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> ListSnapshots(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Permanently deletes the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshot(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Starts creating a new Cloud Bigtable Backup.  The returned backup
      /// [long-running operation][google.longrunning.Operation] can be used to
      /// track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.bigtable.admin.v2.CreateBackupMetadata]. The
      /// [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.bigtable.admin.v2.Backup], if successful. Cancelling the
      /// returned operation will stop the creation and delete the backup.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateBackup(global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets metadata on a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Backup> GetBackup(global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.Backup> UpdateBackup(global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a pending or completed Cloud Bigtable backup.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackup(global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists Cloud Bigtable backups. Returns both completed and pending
      /// backups.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse> ListBackups(global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new table by restoring from a completed backup.  The
      /// returned table [long-running operation][google.longrunning.Operation] can
      /// be used to track the progress of the operation, and to cancel it.  The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreTableMetadata][google.bigtable.admin.v2.RestoreTableMetadata].  The
      /// [response][google.longrunning.Operation.response] type is
      /// [Table][google.bigtable.admin.v2.Table], if successful.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RestoreTable(global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Copy a Cloud Bigtable backup to a new backup in the destination cluster
      /// located in the destination instance and project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CopyBackup(global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the access control policy for a Table or Backup resource.
      /// Returns an empty policy if the resource exists but does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the access control policy on a Table or Backup resource.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.Policy> SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns permissions that the caller has on the specified Table or Backup
      /// resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BigtableTableAdmin</summary>
    public partial class BigtableTableAdminClient : grpc::ClientBase<BigtableTableAdminClient>
    {
      /// <summary>Creates a new client for BigtableTableAdmin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BigtableTableAdminClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BigtableTableAdmin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public BigtableTableAdminClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BigtableTableAdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected BigtableTableAdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table CreateTable(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table CreateTable(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTable, null, options, request);
      }
      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> CreateTableAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new table in the specified instance.
      /// The table can be created with a full set of initial column families,
      /// specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> CreateTableAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTable, null, options, request);
      }
      /// <summary>
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateTableFromSnapshot(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTableFromSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateTableFromSnapshot(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTableFromSnapshot, null, options, request);
      }
      /// <summary>
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateTableFromSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTableFromSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new table from the specified snapshot. The target table must
      /// not exist. The snapshot and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateTableFromSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTableFromSnapshot, null, options, request);
      }
      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse ListTables(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTables(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse ListTables(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTables, null, options, request);
      }
      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> ListTablesAsync(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTablesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all tables served from a specified instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse> ListTablesAsync(global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTables, null, options, request);
      }
      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table GetTable(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table GetTable(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTable, null, options, request);
      }
      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> GetTableAsync(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata information about the specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> GetTableAsync(global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTable, null, options, request);
      }
      /// <summary>
      /// Updates a specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateTable(global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateTable(global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTable, null, options, request);
      }
      /// <summary>
      /// Updates a specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateTableAsync(global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a specified table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateTableAsync(global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTable, null, options, request);
      }
      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTable(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTable(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTable, null, options, request);
      }
      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTableAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently deletes a specified table and all of its data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTableAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTable, null, options, request);
      }
      /// <summary>
      /// Restores a specified table which was accidentally deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteTable(global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restores a specified table which was accidentally deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UndeleteTable(global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UndeleteTable, null, options, request);
      }
      /// <summary>
      /// Restores a specified table which was accidentally deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteTableAsync(global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UndeleteTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restores a specified table which was accidentally deleted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UndeleteTableAsync(global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UndeleteTable, null, options, request);
      }
      /// <summary>
      /// Creates a new AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAuthorizedView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAuthorizedView, null, options, request);
      }
      /// <summary>
      /// Creates a new AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAuthorizedViewAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAuthorizedViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAuthorizedViewAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAuthorizedView, null, options, request);
      }
      /// <summary>
      /// Lists all AuthorizedViews from a specific table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse ListAuthorizedViews(global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAuthorizedViews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all AuthorizedViews from a specific table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse ListAuthorizedViews(global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAuthorizedViews, null, options, request);
      }
      /// <summary>
      /// Lists all AuthorizedViews from a specific table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse> ListAuthorizedViewsAsync(global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAuthorizedViewsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all AuthorizedViews from a specific table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse> ListAuthorizedViewsAsync(global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAuthorizedViews, null, options, request);
      }
      /// <summary>
      /// Gets information from a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView GetAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthorizedView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets information from a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView GetAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAuthorizedView, null, options, request);
      }
      /// <summary>
      /// Gets information from a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView> GetAuthorizedViewAsync(global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAuthorizedViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets information from a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView> GetAuthorizedViewAsync(global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAuthorizedView, null, options, request);
      }
      /// <summary>
      /// Updates an AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAuthorizedView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAuthorizedView, null, options, request);
      }
      /// <summary>
      /// Updates an AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAuthorizedViewAsync(global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAuthorizedViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an AuthorizedView in a table.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAuthorizedViewAsync(global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAuthorizedView, null, options, request);
      }
      /// <summary>
      /// Permanently deletes a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAuthorizedView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently deletes a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAuthorizedView(global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAuthorizedView, null, options, request);
      }
      /// <summary>
      /// Permanently deletes a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAuthorizedViewAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAuthorizedViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently deletes a specified AuthorizedView.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAuthorizedViewAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAuthorizedView, null, options, request);
      }
      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table ModifyColumnFamilies(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyColumnFamilies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Table ModifyColumnFamilies(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ModifyColumnFamilies, null, options, request);
      }
      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> ModifyColumnFamiliesAsync(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ModifyColumnFamiliesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a series of column family modifications on the specified table.
      /// Either all or none of the modifications will occur before this method
      /// returns, but data requests received prior to that point may see a table
      /// where only some modifications have taken effect.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Table> ModifyColumnFamiliesAsync(global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ModifyColumnFamilies, null, options, request);
      }
      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DropRowRange(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DropRowRange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DropRowRange(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DropRowRange, null, options, request);
      }
      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DropRowRangeAsync(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DropRowRangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently drop/delete a row range from a specified table. The request can
      /// specify whether to delete all rows in a table, or only those that match a
      /// particular prefix.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DropRowRangeAsync(global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DropRowRange, null, options, request);
      }
      /// <summary>
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse GenerateConsistencyToken(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateConsistencyToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse GenerateConsistencyToken(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateConsistencyToken, null, options, request);
      }
      /// <summary>
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> GenerateConsistencyTokenAsync(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateConsistencyTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a consistency token for a Table, which can be used in
      /// CheckConsistency to check whether mutations to the table that finished
      /// before this call started have been replicated. The tokens will be available
      /// for 90 days.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse> GenerateConsistencyTokenAsync(global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateConsistencyToken, null, options, request);
      }
      /// <summary>
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse CheckConsistency(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckConsistency(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse CheckConsistency(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckConsistency, null, options, request);
      }
      /// <summary>
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> CheckConsistencyAsync(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckConsistencyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks replication consistency based on a consistency token, that is, if
      /// replication has caught up based on the conditions specified in the token
      /// and the check request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse> CheckConsistencyAsync(global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckConsistency, null, options, request);
      }
      /// <summary>
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SnapshotTable(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SnapshotTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation SnapshotTable(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SnapshotTable, null, options, request);
      }
      /// <summary>
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SnapshotTableAsync(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SnapshotTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new snapshot in the specified cluster from the specified
      /// source table. The cluster and the table must be in the same instance.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> SnapshotTableAsync(global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SnapshotTable, null, options, request);
      }
      /// <summary>
      /// Gets metadata information about the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Snapshot GetSnapshot(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata information about the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Snapshot GetSnapshot(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSnapshot, null, options, request);
      }
      /// <summary>
      /// Gets metadata information about the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Snapshot> GetSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata information about the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Snapshot> GetSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSnapshot, null, options, request);
      }
      /// <summary>
      /// Lists all snapshots associated with the specified cluster.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse ListSnapshots(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSnapshots(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all snapshots associated with the specified cluster.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse ListSnapshots(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSnapshots, null, options, request);
      }
      /// <summary>
      /// Lists all snapshots associated with the specified cluster.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> ListSnapshotsAsync(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSnapshotsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all snapshots associated with the specified cluster.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse> ListSnapshotsAsync(global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSnapshots, null, options, request);
      }
      /// <summary>
      /// Permanently deletes the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSnapshot(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently deletes the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteSnapshot(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSnapshot, null, options, request);
      }
      /// <summary>
      /// Permanently deletes the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSnapshotAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Permanently deletes the specified snapshot.
      ///
      /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
      /// feature is not currently available to most Cloud Bigtable customers. This
      /// feature might be changed in backward-incompatible ways and is not
      /// recommended for production use. It is not subject to any SLA or deprecation
      /// policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSnapshotAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSnapshot, null, options, request);
      }
      /// <summary>
      /// Starts creating a new Cloud Bigtable Backup.  The returned backup
      /// [long-running operation][google.longrunning.Operation] can be used to
      /// track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.bigtable.admin.v2.CreateBackupMetadata]. The
      /// [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.bigtable.admin.v2.Backup], if successful. Cancelling the
      /// returned operation will stop the creation and delete the backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateBackup(global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts creating a new Cloud Bigtable Backup.  The returned backup
      /// [long-running operation][google.longrunning.Operation] can be used to
      /// track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.bigtable.admin.v2.CreateBackupMetadata]. The
      /// [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.bigtable.admin.v2.Backup], if successful. Cancelling the
      /// returned operation will stop the creation and delete the backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateBackup(global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBackup, null, options, request);
      }
      /// <summary>
      /// Starts creating a new Cloud Bigtable Backup.  The returned backup
      /// [long-running operation][google.longrunning.Operation] can be used to
      /// track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.bigtable.admin.v2.CreateBackupMetadata]. The
      /// [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.bigtable.admin.v2.Backup], if successful. Cancelling the
      /// returned operation will stop the creation and delete the backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts creating a new Cloud Bigtable Backup.  The returned backup
      /// [long-running operation][google.longrunning.Operation] can be used to
      /// track creation of the backup. The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [CreateBackupMetadata][google.bigtable.admin.v2.CreateBackupMetadata]. The
      /// [response][google.longrunning.Operation.response] field type is
      /// [Backup][google.bigtable.admin.v2.Backup], if successful. Cancelling the
      /// returned operation will stop the creation and delete the backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBackup, null, options, request);
      }
      /// <summary>
      /// Gets metadata on a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Backup GetBackup(global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata on a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Backup GetBackup(global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBackup, null, options, request);
      }
      /// <summary>
      /// Gets metadata on a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Backup> GetBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets metadata on a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Backup> GetBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBackup, null, options, request);
      }
      /// <summary>
      /// Updates a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Backup UpdateBackup(global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.Backup UpdateBackup(global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBackup, null, options, request);
      }
      /// <summary>
      /// Updates a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Backup> UpdateBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a pending or completed Cloud Bigtable Backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.Backup> UpdateBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBackup, null, options, request);
      }
      /// <summary>
      /// Deletes a pending or completed Cloud Bigtable backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackup(global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a pending or completed Cloud Bigtable backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackup(global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBackup, null, options, request);
      }
      /// <summary>
      /// Deletes a pending or completed Cloud Bigtable backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a pending or completed Cloud Bigtable backup.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBackup, null, options, request);
      }
      /// <summary>
      /// Lists Cloud Bigtable backups. Returns both completed and pending
      /// backups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse ListBackups(global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackups(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Cloud Bigtable backups. Returns both completed and pending
      /// backups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse ListBackups(global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBackups, null, options, request);
      }
      /// <summary>
      /// Lists Cloud Bigtable backups. Returns both completed and pending
      /// backups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse> ListBackupsAsync(global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListBackupsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Cloud Bigtable backups. Returns both completed and pending
      /// backups.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse> ListBackupsAsync(global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBackups, null, options, request);
      }
      /// <summary>
      /// Create a new table by restoring from a completed backup.  The
      /// returned table [long-running operation][google.longrunning.Operation] can
      /// be used to track the progress of the operation, and to cancel it.  The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreTableMetadata][google.bigtable.admin.v2.RestoreTableMetadata].  The
      /// [response][google.longrunning.Operation.response] type is
      /// [Table][google.bigtable.admin.v2.Table], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreTable(global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreTable(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new table by restoring from a completed backup.  The
      /// returned table [long-running operation][google.longrunning.Operation] can
      /// be used to track the progress of the operation, and to cancel it.  The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreTableMetadata][google.bigtable.admin.v2.RestoreTableMetadata].  The
      /// [response][google.longrunning.Operation.response] type is
      /// [Table][google.bigtable.admin.v2.Table], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RestoreTable(global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestoreTable, null, options, request);
      }
      /// <summary>
      /// Create a new table by restoring from a completed backup.  The
      /// returned table [long-running operation][google.longrunning.Operation] can
      /// be used to track the progress of the operation, and to cancel it.  The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreTableMetadata][google.bigtable.admin.v2.RestoreTableMetadata].  The
      /// [response][google.longrunning.Operation.response] type is
      /// [Table][google.bigtable.admin.v2.Table], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreTableAsync(global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestoreTableAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new table by restoring from a completed backup.  The
      /// returned table [long-running operation][google.longrunning.Operation] can
      /// be used to track the progress of the operation, and to cancel it.  The
      /// [metadata][google.longrunning.Operation.metadata] field type is
      /// [RestoreTableMetadata][google.bigtable.admin.v2.RestoreTableMetadata].  The
      /// [response][google.longrunning.Operation.response] type is
      /// [Table][google.bigtable.admin.v2.Table], if successful.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RestoreTableAsync(global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestoreTable, null, options, request);
      }
      /// <summary>
      /// Copy a Cloud Bigtable backup to a new backup in the destination cluster
      /// located in the destination instance and project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CopyBackup(global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyBackup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copy a Cloud Bigtable backup to a new backup in the destination cluster
      /// located in the destination instance and project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CopyBackup(global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CopyBackup, null, options, request);
      }
      /// <summary>
      /// Copy a Cloud Bigtable backup to a new backup in the destination cluster
      /// located in the destination instance and project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CopyBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CopyBackupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Copy a Cloud Bigtable backup to a new backup in the destination cluster
      /// located in the destination instance and project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CopyBackupAsync(global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CopyBackup, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a Table or Backup resource.
      /// Returns an empty policy if the resource exists but does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a Table or Backup resource.
      /// Returns an empty policy if the resource exists but does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy GetIamPolicy(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Gets the access control policy for a Table or Backup resource.
      /// Returns an empty policy if the resource exists but does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the access control policy for a Table or Backup resource.
      /// Returns an empty policy if the resource exists but does not have a policy
      /// set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> GetIamPolicyAsync(global::Google.Cloud.Iam.V1.GetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on a Table or Backup resource.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on a Table or Backup resource.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.Policy SetIamPolicy(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Sets the access control policy on a Table or Backup resource.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIamPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the access control policy on a Table or Backup resource.
      /// Replaces any existing policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.Policy> SetIamPolicyAsync(global::Google.Cloud.Iam.V1.SetIamPolicyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIamPolicy, null, options, request);
      }
      /// <summary>
      /// Returns permissions that the caller has on the specified Table or Backup
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that the caller has on the specified Table or Backup
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V1.TestIamPermissionsResponse TestIamPermissions(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>
      /// Returns permissions that the caller has on the specified Table or Backup
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TestIamPermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns permissions that the caller has on the specified Table or Backup
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V1.TestIamPermissionsResponse> TestIamPermissionsAsync(global::Google.Cloud.Iam.V1.TestIamPermissionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestIamPermissions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override BigtableTableAdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BigtableTableAdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(BigtableTableAdminBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTable, serviceImpl.CreateTable)
          .AddMethod(__Method_CreateTableFromSnapshot, serviceImpl.CreateTableFromSnapshot)
          .AddMethod(__Method_ListTables, serviceImpl.ListTables)
          .AddMethod(__Method_GetTable, serviceImpl.GetTable)
          .AddMethod(__Method_UpdateTable, serviceImpl.UpdateTable)
          .AddMethod(__Method_DeleteTable, serviceImpl.DeleteTable)
          .AddMethod(__Method_UndeleteTable, serviceImpl.UndeleteTable)
          .AddMethod(__Method_CreateAuthorizedView, serviceImpl.CreateAuthorizedView)
          .AddMethod(__Method_ListAuthorizedViews, serviceImpl.ListAuthorizedViews)
          .AddMethod(__Method_GetAuthorizedView, serviceImpl.GetAuthorizedView)
          .AddMethod(__Method_UpdateAuthorizedView, serviceImpl.UpdateAuthorizedView)
          .AddMethod(__Method_DeleteAuthorizedView, serviceImpl.DeleteAuthorizedView)
          .AddMethod(__Method_ModifyColumnFamilies, serviceImpl.ModifyColumnFamilies)
          .AddMethod(__Method_DropRowRange, serviceImpl.DropRowRange)
          .AddMethod(__Method_GenerateConsistencyToken, serviceImpl.GenerateConsistencyToken)
          .AddMethod(__Method_CheckConsistency, serviceImpl.CheckConsistency)
          .AddMethod(__Method_SnapshotTable, serviceImpl.SnapshotTable)
          .AddMethod(__Method_GetSnapshot, serviceImpl.GetSnapshot)
          .AddMethod(__Method_ListSnapshots, serviceImpl.ListSnapshots)
          .AddMethod(__Method_DeleteSnapshot, serviceImpl.DeleteSnapshot)
          .AddMethod(__Method_CreateBackup, serviceImpl.CreateBackup)
          .AddMethod(__Method_GetBackup, serviceImpl.GetBackup)
          .AddMethod(__Method_UpdateBackup, serviceImpl.UpdateBackup)
          .AddMethod(__Method_DeleteBackup, serviceImpl.DeleteBackup)
          .AddMethod(__Method_ListBackups, serviceImpl.ListBackups)
          .AddMethod(__Method_RestoreTable, serviceImpl.RestoreTable)
          .AddMethod(__Method_CopyBackup, serviceImpl.CopyBackup)
          .AddMethod(__Method_GetIamPolicy, serviceImpl.GetIamPolicy)
          .AddMethod(__Method_SetIamPolicy, serviceImpl.SetIamPolicy)
          .AddMethod(__Method_TestIamPermissions, serviceImpl.TestIamPermissions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, BigtableTableAdminBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.CreateTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(serviceImpl.CreateTable));
      serviceBinder.AddMethod(__Method_CreateTableFromSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.CreateTableFromSnapshotRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateTableFromSnapshot));
      serviceBinder.AddMethod(__Method_ListTables, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.ListTablesRequest, global::Google.Cloud.Bigtable.Admin.V2.ListTablesResponse>(serviceImpl.ListTables));
      serviceBinder.AddMethod(__Method_GetTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.GetTableRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(serviceImpl.GetTable));
      serviceBinder.AddMethod(__Method_UpdateTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.UpdateTableRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateTable));
      serviceBinder.AddMethod(__Method_DeleteTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.DeleteTableRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteTable));
      serviceBinder.AddMethod(__Method_UndeleteTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.UndeleteTableRequest, global::Google.LongRunning.Operation>(serviceImpl.UndeleteTable));
      serviceBinder.AddMethod(__Method_CreateAuthorizedView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.CreateAuthorizedViewRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateAuthorizedView));
      serviceBinder.AddMethod(__Method_ListAuthorizedViews, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListAuthorizedViewsResponse>(serviceImpl.ListAuthorizedViews));
      serviceBinder.AddMethod(__Method_GetAuthorizedView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.GetAuthorizedViewRequest, global::Google.Cloud.Bigtable.Admin.V2.AuthorizedView>(serviceImpl.GetAuthorizedView));
      serviceBinder.AddMethod(__Method_UpdateAuthorizedView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.UpdateAuthorizedViewRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateAuthorizedView));
      serviceBinder.AddMethod(__Method_DeleteAuthorizedView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.DeleteAuthorizedViewRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteAuthorizedView));
      serviceBinder.AddMethod(__Method_ModifyColumnFamilies, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.ModifyColumnFamiliesRequest, global::Google.Cloud.Bigtable.Admin.V2.Table>(serviceImpl.ModifyColumnFamilies));
      serviceBinder.AddMethod(__Method_DropRowRange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.DropRowRangeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DropRowRange));
      serviceBinder.AddMethod(__Method_GenerateConsistencyToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenRequest, global::Google.Cloud.Bigtable.Admin.V2.GenerateConsistencyTokenResponse>(serviceImpl.GenerateConsistencyToken));
      serviceBinder.AddMethod(__Method_CheckConsistency, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyRequest, global::Google.Cloud.Bigtable.Admin.V2.CheckConsistencyResponse>(serviceImpl.CheckConsistency));
      serviceBinder.AddMethod(__Method_SnapshotTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.SnapshotTableRequest, global::Google.LongRunning.Operation>(serviceImpl.SnapshotTable));
      serviceBinder.AddMethod(__Method_GetSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.GetSnapshotRequest, global::Google.Cloud.Bigtable.Admin.V2.Snapshot>(serviceImpl.GetSnapshot));
      serviceBinder.AddMethod(__Method_ListSnapshots, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListSnapshotsResponse>(serviceImpl.ListSnapshots));
      serviceBinder.AddMethod(__Method_DeleteSnapshot, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.DeleteSnapshotRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteSnapshot));
      serviceBinder.AddMethod(__Method_CreateBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.CreateBackupRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateBackup));
      serviceBinder.AddMethod(__Method_GetBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.GetBackupRequest, global::Google.Cloud.Bigtable.Admin.V2.Backup>(serviceImpl.GetBackup));
      serviceBinder.AddMethod(__Method_UpdateBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.UpdateBackupRequest, global::Google.Cloud.Bigtable.Admin.V2.Backup>(serviceImpl.UpdateBackup));
      serviceBinder.AddMethod(__Method_DeleteBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.DeleteBackupRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteBackup));
      serviceBinder.AddMethod(__Method_ListBackups, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.ListBackupsRequest, global::Google.Cloud.Bigtable.Admin.V2.ListBackupsResponse>(serviceImpl.ListBackups));
      serviceBinder.AddMethod(__Method_RestoreTable, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.RestoreTableRequest, global::Google.LongRunning.Operation>(serviceImpl.RestoreTable));
      serviceBinder.AddMethod(__Method_CopyBackup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.Admin.V2.CopyBackupRequest, global::Google.LongRunning.Operation>(serviceImpl.CopyBackup));
      serviceBinder.AddMethod(__Method_GetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.GetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.GetIamPolicy));
      serviceBinder.AddMethod(__Method_SetIamPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.SetIamPolicyRequest, global::Google.Cloud.Iam.V1.Policy>(serviceImpl.SetIamPolicy));
      serviceBinder.AddMethod(__Method_TestIamPermissions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V1.TestIamPermissionsRequest, global::Google.Cloud.Iam.V1.TestIamPermissionsResponse>(serviceImpl.TestIamPermissions));
    }

  }
}
#endregion
