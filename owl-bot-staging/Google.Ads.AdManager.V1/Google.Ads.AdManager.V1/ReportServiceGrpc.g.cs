// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/admanager/v1/report_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Ads.AdManager.V1 {
  /// <summary>
  /// Provides methods for interacting with reports.
  /// </summary>
  public static partial class ReportService
  {
    static readonly string __ServiceName = "google.ads.admanager.v1.ReportService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.GetReportRequest> __Marshaller_google_ads_admanager_v1_GetReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.GetReportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.Report> __Marshaller_google_ads_admanager_v1_Report = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.Report.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.ListReportsRequest> __Marshaller_google_ads_admanager_v1_ListReportsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.ListReportsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.ListReportsResponse> __Marshaller_google_ads_admanager_v1_ListReportsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.ListReportsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.CreateReportRequest> __Marshaller_google_ads_admanager_v1_CreateReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.CreateReportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.UpdateReportRequest> __Marshaller_google_ads_admanager_v1_UpdateReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.UpdateReportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.RunReportRequest> __Marshaller_google_ads_admanager_v1_RunReportRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.RunReportRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest> __Marshaller_google_ads_admanager_v1_FetchReportResultRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse> __Marshaller_google_ads_admanager_v1_FetchReportResultRowsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.GetReportRequest, global::Google.Ads.AdManager.V1.Report> __Method_GetReport = new grpc::Method<global::Google.Ads.AdManager.V1.GetReportRequest, global::Google.Ads.AdManager.V1.Report>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetReport",
        __Marshaller_google_ads_admanager_v1_GetReportRequest,
        __Marshaller_google_ads_admanager_v1_Report);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.ListReportsRequest, global::Google.Ads.AdManager.V1.ListReportsResponse> __Method_ListReports = new grpc::Method<global::Google.Ads.AdManager.V1.ListReportsRequest, global::Google.Ads.AdManager.V1.ListReportsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListReports",
        __Marshaller_google_ads_admanager_v1_ListReportsRequest,
        __Marshaller_google_ads_admanager_v1_ListReportsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.CreateReportRequest, global::Google.Ads.AdManager.V1.Report> __Method_CreateReport = new grpc::Method<global::Google.Ads.AdManager.V1.CreateReportRequest, global::Google.Ads.AdManager.V1.Report>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateReport",
        __Marshaller_google_ads_admanager_v1_CreateReportRequest,
        __Marshaller_google_ads_admanager_v1_Report);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.UpdateReportRequest, global::Google.Ads.AdManager.V1.Report> __Method_UpdateReport = new grpc::Method<global::Google.Ads.AdManager.V1.UpdateReportRequest, global::Google.Ads.AdManager.V1.Report>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateReport",
        __Marshaller_google_ads_admanager_v1_UpdateReportRequest,
        __Marshaller_google_ads_admanager_v1_Report);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.RunReportRequest, global::Google.LongRunning.Operation> __Method_RunReport = new grpc::Method<global::Google.Ads.AdManager.V1.RunReportRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RunReport",
        __Marshaller_google_ads_admanager_v1_RunReportRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest, global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse> __Method_FetchReportResultRows = new grpc::Method<global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest, global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchReportResultRows",
        __Marshaller_google_ads_admanager_v1_FetchReportResultRowsRequest,
        __Marshaller_google_ads_admanager_v1_FetchReportResultRowsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Ads.AdManager.V1.ReportServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ReportService</summary>
    [grpc::BindServiceMethod(typeof(ReportService), "BindService")]
    public abstract partial class ReportServiceBase
    {
      /// <summary>
      /// API to retrieve a `Report` object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.Report> GetReport(global::Google.Ads.AdManager.V1.GetReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to retrieve a list of `Report` objects.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.ListReportsResponse> ListReports(global::Google.Ads.AdManager.V1.ListReportsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to create a `Report` object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.Report> CreateReport(global::Google.Ads.AdManager.V1.CreateReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to update a `Report` object.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.Report> UpdateReport(global::Google.Ads.AdManager.V1.UpdateReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Initiates the execution of an existing report asynchronously. Users can
      /// get the report by polling this operation via
      /// `OperationsService.GetOperation`.
      /// Poll every 5 seconds initially, with an exponential
      /// backoff. Once a report is complete, the operation will contain a
      /// `RunReportResponse` in its response field containing a report_result that
      /// can be passed to the `FetchReportResultRows` method to retrieve the report
      /// data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RunReport(global::Google.Ads.AdManager.V1.RunReportRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the result rows from a completed report.
      /// The caller must have previously called `RunReport` and waited for that
      /// operation to complete. The rows will be returned according to the order
      /// specified by the `sorts` member of the report definition.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse> FetchReportResultRows(global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ReportService</summary>
    public partial class ReportServiceClient : grpc::ClientBase<ReportServiceClient>
    {
      /// <summary>Creates a new client for ReportService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ReportServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ReportService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ReportServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ReportServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ReportServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// API to retrieve a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.Report GetReport(global::Google.Ads.AdManager.V1.GetReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to retrieve a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.Report GetReport(global::Google.Ads.AdManager.V1.GetReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetReport, null, options, request);
      }
      /// <summary>
      /// API to retrieve a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.Report> GetReportAsync(global::Google.Ads.AdManager.V1.GetReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to retrieve a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.Report> GetReportAsync(global::Google.Ads.AdManager.V1.GetReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetReport, null, options, request);
      }
      /// <summary>
      /// API to retrieve a list of `Report` objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.ListReportsResponse ListReports(global::Google.Ads.AdManager.V1.ListReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListReports(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to retrieve a list of `Report` objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.ListReportsResponse ListReports(global::Google.Ads.AdManager.V1.ListReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListReports, null, options, request);
      }
      /// <summary>
      /// API to retrieve a list of `Report` objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.ListReportsResponse> ListReportsAsync(global::Google.Ads.AdManager.V1.ListReportsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListReportsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to retrieve a list of `Report` objects.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.ListReportsResponse> ListReportsAsync(global::Google.Ads.AdManager.V1.ListReportsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListReports, null, options, request);
      }
      /// <summary>
      /// API to create a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.Report CreateReport(global::Google.Ads.AdManager.V1.CreateReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to create a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.Report CreateReport(global::Google.Ads.AdManager.V1.CreateReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateReport, null, options, request);
      }
      /// <summary>
      /// API to create a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.Report> CreateReportAsync(global::Google.Ads.AdManager.V1.CreateReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to create a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.Report> CreateReportAsync(global::Google.Ads.AdManager.V1.CreateReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateReport, null, options, request);
      }
      /// <summary>
      /// API to update a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.Report UpdateReport(global::Google.Ads.AdManager.V1.UpdateReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to update a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.Report UpdateReport(global::Google.Ads.AdManager.V1.UpdateReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateReport, null, options, request);
      }
      /// <summary>
      /// API to update a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.Report> UpdateReportAsync(global::Google.Ads.AdManager.V1.UpdateReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to update a `Report` object.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.Report> UpdateReportAsync(global::Google.Ads.AdManager.V1.UpdateReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateReport, null, options, request);
      }
      /// <summary>
      /// Initiates the execution of an existing report asynchronously. Users can
      /// get the report by polling this operation via
      /// `OperationsService.GetOperation`.
      /// Poll every 5 seconds initially, with an exponential
      /// backoff. Once a report is complete, the operation will contain a
      /// `RunReportResponse` in its response field containing a report_result that
      /// can be passed to the `FetchReportResultRows` method to retrieve the report
      /// data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RunReport(global::Google.Ads.AdManager.V1.RunReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunReport(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates the execution of an existing report asynchronously. Users can
      /// get the report by polling this operation via
      /// `OperationsService.GetOperation`.
      /// Poll every 5 seconds initially, with an exponential
      /// backoff. Once a report is complete, the operation will contain a
      /// `RunReportResponse` in its response field containing a report_result that
      /// can be passed to the `FetchReportResultRows` method to retrieve the report
      /// data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RunReport(global::Google.Ads.AdManager.V1.RunReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunReport, null, options, request);
      }
      /// <summary>
      /// Initiates the execution of an existing report asynchronously. Users can
      /// get the report by polling this operation via
      /// `OperationsService.GetOperation`.
      /// Poll every 5 seconds initially, with an exponential
      /// backoff. Once a report is complete, the operation will contain a
      /// `RunReportResponse` in its response field containing a report_result that
      /// can be passed to the `FetchReportResultRows` method to retrieve the report
      /// data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RunReportAsync(global::Google.Ads.AdManager.V1.RunReportRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RunReportAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Initiates the execution of an existing report asynchronously. Users can
      /// get the report by polling this operation via
      /// `OperationsService.GetOperation`.
      /// Poll every 5 seconds initially, with an exponential
      /// backoff. Once a report is complete, the operation will contain a
      /// `RunReportResponse` in its response field containing a report_result that
      /// can be passed to the `FetchReportResultRows` method to retrieve the report
      /// data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RunReportAsync(global::Google.Ads.AdManager.V1.RunReportRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunReport, null, options, request);
      }
      /// <summary>
      /// Returns the result rows from a completed report.
      /// The caller must have previously called `RunReport` and waited for that
      /// operation to complete. The rows will be returned according to the order
      /// specified by the `sorts` member of the report definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse FetchReportResultRows(global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchReportResultRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the result rows from a completed report.
      /// The caller must have previously called `RunReport` and waited for that
      /// operation to complete. The rows will be returned according to the order
      /// specified by the `sorts` member of the report definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse FetchReportResultRows(global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchReportResultRows, null, options, request);
      }
      /// <summary>
      /// Returns the result rows from a completed report.
      /// The caller must have previously called `RunReport` and waited for that
      /// operation to complete. The rows will be returned according to the order
      /// specified by the `sorts` member of the report definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse> FetchReportResultRowsAsync(global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchReportResultRowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the result rows from a completed report.
      /// The caller must have previously called `RunReport` and waited for that
      /// operation to complete. The rows will be returned according to the order
      /// specified by the `sorts` member of the report definition.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse> FetchReportResultRowsAsync(global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchReportResultRows, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ReportServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ReportServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ReportServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetReport, serviceImpl.GetReport)
          .AddMethod(__Method_ListReports, serviceImpl.ListReports)
          .AddMethod(__Method_CreateReport, serviceImpl.CreateReport)
          .AddMethod(__Method_UpdateReport, serviceImpl.UpdateReport)
          .AddMethod(__Method_RunReport, serviceImpl.RunReport)
          .AddMethod(__Method_FetchReportResultRows, serviceImpl.FetchReportResultRows).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ReportServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.GetReportRequest, global::Google.Ads.AdManager.V1.Report>(serviceImpl.GetReport));
      serviceBinder.AddMethod(__Method_ListReports, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.ListReportsRequest, global::Google.Ads.AdManager.V1.ListReportsResponse>(serviceImpl.ListReports));
      serviceBinder.AddMethod(__Method_CreateReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.CreateReportRequest, global::Google.Ads.AdManager.V1.Report>(serviceImpl.CreateReport));
      serviceBinder.AddMethod(__Method_UpdateReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.UpdateReportRequest, global::Google.Ads.AdManager.V1.Report>(serviceImpl.UpdateReport));
      serviceBinder.AddMethod(__Method_RunReport, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.RunReportRequest, global::Google.LongRunning.Operation>(serviceImpl.RunReport));
      serviceBinder.AddMethod(__Method_FetchReportResultRows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.FetchReportResultRowsRequest, global::Google.Ads.AdManager.V1.FetchReportResultRowsResponse>(serviceImpl.FetchReportResultRows));
    }

  }
}
#endregion
