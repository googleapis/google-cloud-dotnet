// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/admanager/v1/taxonomy_category_messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.AdManager.V1 {

  /// <summary>Holder for reflection information generated from google/ads/admanager/v1/taxonomy_category_messages.proto</summary>
  public static partial class TaxonomyCategoryMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/admanager/v1/taxonomy_category_messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TaxonomyCategoryMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjhnb29nbGUvYWRzL2FkbWFuYWdlci92MS90YXhvbm9teV9jYXRlZ29yeV9t",
            "ZXNzYWdlcy5wcm90bxIXZ29vZ2xlLmFkcy5hZG1hbmFnZXIudjEaMGdvb2ds",
            "ZS9hZHMvYWRtYW5hZ2VyL3YxL3RheG9ub215X3R5cGVfZW51bS5wcm90bxof",
            "Z29vZ2xlL2FwaS9maWVsZF9iZWhhdmlvci5wcm90bxoZZ29vZ2xlL2FwaS9y",
            "ZXNvdXJjZS5wcm90byLfAwoQVGF4b25vbXlDYXRlZ29yeRIRCgRuYW1lGAEg",
            "ASgJQgPgQQgSIQoUdGF4b25vbXlfY2F0ZWdvcnlfaWQYAiABKANCA+BBAxIZ",
            "CgxkaXNwbGF5X25hbWUYAyABKAlCA+BBAxIaCg1ncm91cGluZ19vbmx5GAUg",
            "ASgIQgPgQQMSKAobcGFyZW50X3RheG9ub215X2NhdGVnb3J5X2lkGAYgASgD",
            "QgPgQQMSUgoNdGF4b25vbXlfdHlwZRgJIAEoDjI2Lmdvb2dsZS5hZHMuYWRt",
            "YW5hZ2VyLnYxLlRheG9ub215VHlwZUVudW0uVGF4b25vbXlUeXBlQgPgQQMS",
            "GwoOYW5jZXN0b3JfbmFtZXMYByADKAlCA+BBAxIrCh5hbmNlc3Rvcl90YXhv",
            "bm9teV9jYXRlZ29yeV9pZHMYCCADKANCA+BBAzqVAepBkQEKKWFkbWFuYWdl",
            "ci5nb29nbGVhcGlzLmNvbS9UYXhvbm9teUNhdGVnb3J5Ej5uZXR3b3Jrcy97",
            "bmV0d29ya19jb2RlfS90YXhvbm9teUNhdGVnb3JpZXMve3RheG9ub215X2Nh",
            "dGVnb3J5fSoSdGF4b25vbXlDYXRlZ29yaWVzMhB0YXhvbm9teUNhdGVnb3J5",
            "QtEBChtjb20uZ29vZ2xlLmFkcy5hZG1hbmFnZXIudjFCHVRheG9ub215Q2F0",
            "ZWdvcnlNZXNzYWdlc1Byb3RvUAFaQGdvb2dsZS5nb2xhbmcub3JnL2dlbnBy",
            "b3RvL2dvb2dsZWFwaXMvYWRzL2FkbWFuYWdlci92MTthZG1hbmFnZXKqAhdH",
            "b29nbGUuQWRzLkFkTWFuYWdlci5WMcoCF0dvb2dsZVxBZHNcQWRNYW5hZ2Vy",
            "XFYx6gIaR29vZ2xlOjpBZHM6OkFkTWFuYWdlcjo6VjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.AdManager.V1.TaxonomyTypeEnumReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.TaxonomyCategory), global::Google.Ads.AdManager.V1.TaxonomyCategory.Parser, new[]{ "Name", "TaxonomyCategoryId", "DisplayName", "GroupingOnly", "ParentTaxonomyCategoryId", "TaxonomyType", "AncestorNames", "AncestorTaxonomyCategoryIds" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The `TaxonomyCategory` resource.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TaxonomyCategory : pb::IMessage<TaxonomyCategory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TaxonomyCategory> _parser = new pb::MessageParser<TaxonomyCategory>(() => new TaxonomyCategory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TaxonomyCategory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.AdManager.V1.TaxonomyCategoryMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TaxonomyCategory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TaxonomyCategory(TaxonomyCategory other) : this() {
      name_ = other.name_;
      taxonomyCategoryId_ = other.taxonomyCategoryId_;
      displayName_ = other.displayName_;
      groupingOnly_ = other.groupingOnly_;
      parentTaxonomyCategoryId_ = other.parentTaxonomyCategoryId_;
      taxonomyType_ = other.taxonomyType_;
      ancestorNames_ = other.ancestorNames_.Clone();
      ancestorTaxonomyCategoryIds_ = other.ancestorTaxonomyCategoryIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TaxonomyCategory Clone() {
      return new TaxonomyCategory(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Identifier. The resource name of the `TaxonomyCategory`.
    /// Format: `networks/{network_code}/taxonomyCategories/{taxonomy_category_id}`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "taxonomy_category_id" field.</summary>
    public const int TaxonomyCategoryIdFieldNumber = 2;
    private long taxonomyCategoryId_;
    /// <summary>
    /// Output only. `TaxonomyCategory` ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TaxonomyCategoryId {
      get { return taxonomyCategoryId_; }
      set {
        taxonomyCategoryId_ = value;
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    /// <summary>
    /// Output only. Display name of the `TaxonomyCategory`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "grouping_only" field.</summary>
    public const int GroupingOnlyFieldNumber = 5;
    private bool groupingOnly_;
    /// <summary>
    /// Output only. Whether this `TaxonomyCategory` only serves to group its
    /// children.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GroupingOnly {
      get { return groupingOnly_; }
      set {
        groupingOnly_ = value;
      }
    }

    /// <summary>Field number for the "parent_taxonomy_category_id" field.</summary>
    public const int ParentTaxonomyCategoryIdFieldNumber = 6;
    private long parentTaxonomyCategoryId_;
    /// <summary>
    /// Output only. The ID of the parent category this `TaxonomyCategory` descends
    /// from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ParentTaxonomyCategoryId {
      get { return parentTaxonomyCategoryId_; }
      set {
        parentTaxonomyCategoryId_ = value;
      }
    }

    /// <summary>Field number for the "taxonomy_type" field.</summary>
    public const int TaxonomyTypeFieldNumber = 9;
    private global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType taxonomyType_ = global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType.Unspecified;
    /// <summary>
    /// Output only. The taxonomy that this `TaxonomyCategory` belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType TaxonomyType {
      get { return taxonomyType_; }
      set {
        taxonomyType_ = value;
      }
    }

    /// <summary>Field number for the "ancestor_names" field.</summary>
    public const int AncestorNamesFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_ancestorNames_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> ancestorNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Output only. The list of names of the ancestors of this `TaxonomyCategory`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> AncestorNames {
      get { return ancestorNames_; }
    }

    /// <summary>Field number for the "ancestor_taxonomy_category_ids" field.</summary>
    public const int AncestorTaxonomyCategoryIdsFieldNumber = 8;
    private static readonly pb::FieldCodec<long> _repeated_ancestorTaxonomyCategoryIds_codec
        = pb::FieldCodec.ForInt64(66);
    private readonly pbc::RepeatedField<long> ancestorTaxonomyCategoryIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Output only. The list of IDs of the ancestors of this `TaxonomyCategory`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> AncestorTaxonomyCategoryIds {
      get { return ancestorTaxonomyCategoryIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TaxonomyCategory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TaxonomyCategory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (TaxonomyCategoryId != other.TaxonomyCategoryId) return false;
      if (DisplayName != other.DisplayName) return false;
      if (GroupingOnly != other.GroupingOnly) return false;
      if (ParentTaxonomyCategoryId != other.ParentTaxonomyCategoryId) return false;
      if (TaxonomyType != other.TaxonomyType) return false;
      if(!ancestorNames_.Equals(other.ancestorNames_)) return false;
      if(!ancestorTaxonomyCategoryIds_.Equals(other.ancestorTaxonomyCategoryIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TaxonomyCategoryId != 0L) hash ^= TaxonomyCategoryId.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (GroupingOnly != false) hash ^= GroupingOnly.GetHashCode();
      if (ParentTaxonomyCategoryId != 0L) hash ^= ParentTaxonomyCategoryId.GetHashCode();
      if (TaxonomyType != global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType.Unspecified) hash ^= TaxonomyType.GetHashCode();
      hash ^= ancestorNames_.GetHashCode();
      hash ^= ancestorTaxonomyCategoryIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TaxonomyCategoryId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TaxonomyCategoryId);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (GroupingOnly != false) {
        output.WriteRawTag(40);
        output.WriteBool(GroupingOnly);
      }
      if (ParentTaxonomyCategoryId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ParentTaxonomyCategoryId);
      }
      ancestorNames_.WriteTo(output, _repeated_ancestorNames_codec);
      ancestorTaxonomyCategoryIds_.WriteTo(output, _repeated_ancestorTaxonomyCategoryIds_codec);
      if (TaxonomyType != global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType.Unspecified) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TaxonomyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (TaxonomyCategoryId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TaxonomyCategoryId);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (GroupingOnly != false) {
        output.WriteRawTag(40);
        output.WriteBool(GroupingOnly);
      }
      if (ParentTaxonomyCategoryId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ParentTaxonomyCategoryId);
      }
      ancestorNames_.WriteTo(ref output, _repeated_ancestorNames_codec);
      ancestorTaxonomyCategoryIds_.WriteTo(ref output, _repeated_ancestorTaxonomyCategoryIds_codec);
      if (TaxonomyType != global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType.Unspecified) {
        output.WriteRawTag(72);
        output.WriteEnum((int) TaxonomyType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TaxonomyCategoryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaxonomyCategoryId);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (GroupingOnly != false) {
        size += 1 + 1;
      }
      if (ParentTaxonomyCategoryId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentTaxonomyCategoryId);
      }
      if (TaxonomyType != global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TaxonomyType);
      }
      size += ancestorNames_.CalculateSize(_repeated_ancestorNames_codec);
      size += ancestorTaxonomyCategoryIds_.CalculateSize(_repeated_ancestorTaxonomyCategoryIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TaxonomyCategory other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TaxonomyCategoryId != 0L) {
        TaxonomyCategoryId = other.TaxonomyCategoryId;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.GroupingOnly != false) {
        GroupingOnly = other.GroupingOnly;
      }
      if (other.ParentTaxonomyCategoryId != 0L) {
        ParentTaxonomyCategoryId = other.ParentTaxonomyCategoryId;
      }
      if (other.TaxonomyType != global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType.Unspecified) {
        TaxonomyType = other.TaxonomyType;
      }
      ancestorNames_.Add(other.ancestorNames_);
      ancestorTaxonomyCategoryIds_.Add(other.ancestorTaxonomyCategoryIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            TaxonomyCategoryId = input.ReadInt64();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 40: {
            GroupingOnly = input.ReadBool();
            break;
          }
          case 48: {
            ParentTaxonomyCategoryId = input.ReadInt64();
            break;
          }
          case 58: {
            ancestorNames_.AddEntriesFrom(input, _repeated_ancestorNames_codec);
            break;
          }
          case 66:
          case 64: {
            ancestorTaxonomyCategoryIds_.AddEntriesFrom(input, _repeated_ancestorTaxonomyCategoryIds_codec);
            break;
          }
          case 72: {
            TaxonomyType = (global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            TaxonomyCategoryId = input.ReadInt64();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 40: {
            GroupingOnly = input.ReadBool();
            break;
          }
          case 48: {
            ParentTaxonomyCategoryId = input.ReadInt64();
            break;
          }
          case 58: {
            ancestorNames_.AddEntriesFrom(ref input, _repeated_ancestorNames_codec);
            break;
          }
          case 66:
          case 64: {
            ancestorTaxonomyCategoryIds_.AddEntriesFrom(ref input, _repeated_ancestorTaxonomyCategoryIds_codec);
            break;
          }
          case 72: {
            TaxonomyType = (global::Google.Ads.AdManager.V1.TaxonomyTypeEnum.Types.TaxonomyType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
