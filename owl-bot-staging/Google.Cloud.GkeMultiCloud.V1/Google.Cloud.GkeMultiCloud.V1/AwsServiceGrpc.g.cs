// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gkemulticloud/v1/aws_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.GkeMultiCloud.V1 {
  /// <summary>
  /// The AwsClusters API provides a single centrally managed service
  /// to create and manage Anthos clusters that run on AWS infrastructure.
  /// </summary>
  public static partial class AwsClusters
  {
    static readonly string __ServiceName = "google.cloud.gkemulticloud.v1.AwsClusters";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_CreateAwsClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_UpdateAwsClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAwsClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AwsCluster> __Marshaller_google_cloud_gkemulticloud_v1_AwsCluster = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AwsCluster.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest> __Marshaller_google_cloud_gkemulticloud_v1_ListAwsClustersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse> __Marshaller_google_cloud_gkemulticloud_v1_ListAwsClustersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_DeleteAwsClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAwsClusterAgentTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAwsClusterAgentTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAwsAccessTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAwsAccessTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest> __Marshaller_google_cloud_gkemulticloud_v1_CreateAwsNodePoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest> __Marshaller_google_cloud_gkemulticloud_v1_UpdateAwsNodePoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest> __Marshaller_google_cloud_gkemulticloud_v1_RollbackAwsNodePoolUpdateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAwsNodePoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool> __Marshaller_google_cloud_gkemulticloud_v1_AwsNodePool = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest> __Marshaller_google_cloud_gkemulticloud_v1_ListAwsNodePoolsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse> __Marshaller_google_cloud_gkemulticloud_v1_ListAwsNodePoolsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest> __Marshaller_google_cloud_gkemulticloud_v1_DeleteAwsNodePoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAwsOpenIdConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig> __Marshaller_google_cloud_gkemulticloud_v1_AwsOpenIdConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAwsJsonWebKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys> __Marshaller_google_cloud_gkemulticloud_v1_AwsJsonWebKeys = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAwsServerConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig> __Marshaller_google_cloud_gkemulticloud_v1_AwsServerConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest, global::Google.LongRunning.Operation> __Method_CreateAwsCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAwsCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_CreateAwsClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest, global::Google.LongRunning.Operation> __Method_UpdateAwsCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAwsCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_UpdateAwsClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsCluster> __Method_GetAwsCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsCluster>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAwsCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAwsClusterRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AwsCluster);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse> __Method_ListAwsClusters = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAwsClusters",
        __Marshaller_google_cloud_gkemulticloud_v1_ListAwsClustersRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_ListAwsClustersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest, global::Google.LongRunning.Operation> __Method_DeleteAwsCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAwsCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_DeleteAwsClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse> __Method_GenerateAwsClusterAgentToken = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAwsClusterAgentToken",
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAwsClusterAgentTokenRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAwsClusterAgentTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse> __Method_GenerateAwsAccessToken = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAwsAccessToken",
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAwsAccessTokenRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAwsAccessTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest, global::Google.LongRunning.Operation> __Method_CreateAwsNodePool = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAwsNodePool",
        __Marshaller_google_cloud_gkemulticloud_v1_CreateAwsNodePoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest, global::Google.LongRunning.Operation> __Method_UpdateAwsNodePool = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAwsNodePool",
        __Marshaller_google_cloud_gkemulticloud_v1_UpdateAwsNodePoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest, global::Google.LongRunning.Operation> __Method_RollbackAwsNodePoolUpdate = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RollbackAwsNodePoolUpdate",
        __Marshaller_google_cloud_gkemulticloud_v1_RollbackAwsNodePoolUpdateRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool> __Method_GetAwsNodePool = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAwsNodePool",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAwsNodePoolRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AwsNodePool);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse> __Method_ListAwsNodePools = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAwsNodePools",
        __Marshaller_google_cloud_gkemulticloud_v1_ListAwsNodePoolsRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_ListAwsNodePoolsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest, global::Google.LongRunning.Operation> __Method_DeleteAwsNodePool = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAwsNodePool",
        __Marshaller_google_cloud_gkemulticloud_v1_DeleteAwsNodePoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig> __Method_GetAwsOpenIdConfig = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAwsOpenIdConfig",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAwsOpenIdConfigRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AwsOpenIdConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys> __Method_GetAwsJsonWebKeys = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAwsJsonWebKeys",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAwsJsonWebKeysRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AwsJsonWebKeys);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig> __Method_GetAwsServerConfig = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAwsServerConfig",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAwsServerConfigRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AwsServerConfig);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.GkeMultiCloud.V1.AwsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AwsClusters</summary>
    [grpc::BindServiceMethod(typeof(AwsClusters), "BindService")]
    public abstract partial class AwsClustersBase
    {
      /// <summary>
      /// Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AwsCluster> GetAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
      /// on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse> ListAwsClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse> GenerateAwsClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse> GenerateAwsAccessToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
      /// attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Rolls back a previously aborted or failed
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
      /// Makes no changes if the last update request successfully finished.
      /// If an update request is in progress, you cannot rollback the update.
      /// You must first cancel or let it finish unsuccessfully before you can
      /// rollback.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> RollbackAwsNodePoolUpdate(global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Describes a specific
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool> GetAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resources on a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse> ListAwsNodePools(global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig> GetAwsOpenIdConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys> GetAwsJsonWebKeys(global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns information, such as supported AWS regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig> GetAwsServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AwsClusters</summary>
    public partial class AwsClustersClient : grpc::ClientBase<AwsClustersClient>
    {
      /// <summary>Creates a new client for AwsClusters</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AwsClustersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AwsClusters that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AwsClustersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AwsClustersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AwsClustersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAwsCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAwsCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAwsClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAwsClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAwsClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAwsCluster, null, options, request);
      }
      /// <summary>
      /// Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAwsCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAwsCluster, null, options, request);
      }
      /// <summary>
      /// Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAwsClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAwsClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAwsClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAwsCluster, null, options, request);
      }
      /// <summary>
      /// Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsCluster GetAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsCluster GetAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAwsCluster, null, options, request);
      }
      /// <summary>
      /// Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsCluster> GetAwsClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsCluster> GetAwsClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAwsCluster, null, options, request);
      }
      /// <summary>
      /// Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
      /// on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse ListAwsClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAwsClusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
      /// on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse ListAwsClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAwsClusters, null, options, request);
      }
      /// <summary>
      /// Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
      /// on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse> ListAwsClustersAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAwsClustersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resources
      /// on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse> ListAwsClustersAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAwsClusters, null, options, request);
      }
      /// <summary>
      /// Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAwsCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAwsCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAwsCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAwsClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAwsClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster]
      /// resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAwsClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAwsCluster, null, options, request);
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse GenerateAwsClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAwsClusterAgentToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse GenerateAwsClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAwsClusterAgentToken, null, options, request);
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse> GenerateAwsClusterAgentTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAwsClusterAgentTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse> GenerateAwsClusterAgentTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAwsClusterAgentToken, null, options, request);
      }
      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse GenerateAwsAccessToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAwsAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse GenerateAwsAccessToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAwsAccessToken, null, options, request);
      }
      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse> GenerateAwsAccessTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAwsAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse> GenerateAwsAccessTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAwsAccessToken, null, options, request);
      }
      /// <summary>
      /// Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
      /// attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAwsNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
      /// attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAwsNodePool, null, options, request);
      }
      /// <summary>
      /// Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
      /// attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAwsNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAwsNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool],
      /// attached to a given [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAwsNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAwsNodePool, null, options, request);
      }
      /// <summary>
      /// Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAwsNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAwsNodePool, null, options, request);
      }
      /// <summary>
      /// Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAwsNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAwsNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAwsNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAwsNodePool, null, options, request);
      }
      /// <summary>
      /// Rolls back a previously aborted or failed
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
      /// Makes no changes if the last update request successfully finished.
      /// If an update request is in progress, you cannot rollback the update.
      /// You must first cancel or let it finish unsuccessfully before you can
      /// rollback.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RollbackAwsNodePoolUpdate(global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackAwsNodePoolUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rolls back a previously aborted or failed
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
      /// Makes no changes if the last update request successfully finished.
      /// If an update request is in progress, you cannot rollback the update.
      /// You must first cancel or let it finish unsuccessfully before you can
      /// rollback.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation RollbackAwsNodePoolUpdate(global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RollbackAwsNodePoolUpdate, null, options, request);
      }
      /// <summary>
      /// Rolls back a previously aborted or failed
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
      /// Makes no changes if the last update request successfully finished.
      /// If an update request is in progress, you cannot rollback the update.
      /// You must first cancel or let it finish unsuccessfully before you can
      /// rollback.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RollbackAwsNodePoolUpdateAsync(global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackAwsNodePoolUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Rolls back a previously aborted or failed
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] update request.
      /// Makes no changes if the last update request successfully finished.
      /// If an update request is in progress, you cannot rollback the update.
      /// You must first cancel or let it finish unsuccessfully before you can
      /// rollback.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> RollbackAwsNodePoolUpdateAsync(global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RollbackAwsNodePoolUpdate, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool GetAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool GetAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAwsNodePool, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool> GetAwsNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool> GetAwsNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAwsNodePool, null, options, request);
      }
      /// <summary>
      /// Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resources on a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse ListAwsNodePools(global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAwsNodePools(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resources on a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse ListAwsNodePools(global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAwsNodePools, null, options, request);
      }
      /// <summary>
      /// Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resources on a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse> ListAwsNodePoolsAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAwsNodePoolsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resources on a given
      /// [AwsCluster][google.cloud.gkemulticloud.v1.AwsCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse> ListAwsNodePoolsAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAwsNodePools, null, options, request);
      }
      /// <summary>
      /// Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAwsNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAwsNodePool(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAwsNodePool, null, options, request);
      }
      /// <summary>
      /// Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAwsNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAwsNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific [AwsNodePool][google.cloud.gkemulticloud.v1.AwsNodePool]
      /// resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAwsNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAwsNodePool, null, options, request);
      }
      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig GetAwsOpenIdConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsOpenIdConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig GetAwsOpenIdConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAwsOpenIdConfig, null, options, request);
      }
      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig> GetAwsOpenIdConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsOpenIdConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig> GetAwsOpenIdConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAwsOpenIdConfig, null, options, request);
      }
      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys GetAwsJsonWebKeys(global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsJsonWebKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys GetAwsJsonWebKeys(global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAwsJsonWebKeys, null, options, request);
      }
      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys> GetAwsJsonWebKeysAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsJsonWebKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys> GetAwsJsonWebKeysAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAwsJsonWebKeys, null, options, request);
      }
      /// <summary>
      /// Returns information, such as supported AWS regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig GetAwsServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsServerConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns information, such as supported AWS regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig GetAwsServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAwsServerConfig, null, options, request);
      }
      /// <summary>
      /// Returns information, such as supported AWS regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig> GetAwsServerConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAwsServerConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns information, such as supported AWS regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig> GetAwsServerConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAwsServerConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AwsClustersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AwsClustersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AwsClustersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateAwsCluster, serviceImpl.CreateAwsCluster)
          .AddMethod(__Method_UpdateAwsCluster, serviceImpl.UpdateAwsCluster)
          .AddMethod(__Method_GetAwsCluster, serviceImpl.GetAwsCluster)
          .AddMethod(__Method_ListAwsClusters, serviceImpl.ListAwsClusters)
          .AddMethod(__Method_DeleteAwsCluster, serviceImpl.DeleteAwsCluster)
          .AddMethod(__Method_GenerateAwsClusterAgentToken, serviceImpl.GenerateAwsClusterAgentToken)
          .AddMethod(__Method_GenerateAwsAccessToken, serviceImpl.GenerateAwsAccessToken)
          .AddMethod(__Method_CreateAwsNodePool, serviceImpl.CreateAwsNodePool)
          .AddMethod(__Method_UpdateAwsNodePool, serviceImpl.UpdateAwsNodePool)
          .AddMethod(__Method_RollbackAwsNodePoolUpdate, serviceImpl.RollbackAwsNodePoolUpdate)
          .AddMethod(__Method_GetAwsNodePool, serviceImpl.GetAwsNodePool)
          .AddMethod(__Method_ListAwsNodePools, serviceImpl.ListAwsNodePools)
          .AddMethod(__Method_DeleteAwsNodePool, serviceImpl.DeleteAwsNodePool)
          .AddMethod(__Method_GetAwsOpenIdConfig, serviceImpl.GetAwsOpenIdConfig)
          .AddMethod(__Method_GetAwsJsonWebKeys, serviceImpl.GetAwsJsonWebKeys)
          .AddMethod(__Method_GetAwsServerConfig, serviceImpl.GetAwsServerConfig).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AwsClustersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateAwsCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.CreateAwsClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateAwsCluster));
      serviceBinder.AddMethod(__Method_UpdateAwsCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateAwsCluster));
      serviceBinder.AddMethod(__Method_GetAwsCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAwsClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsCluster>(serviceImpl.GetAwsCluster));
      serviceBinder.AddMethod(__Method_ListAwsClusters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAwsClustersResponse>(serviceImpl.ListAwsClusters));
      serviceBinder.AddMethod(__Method_DeleteAwsCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAwsCluster));
      serviceBinder.AddMethod(__Method_GenerateAwsClusterAgentToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsClusterAgentTokenResponse>(serviceImpl.GenerateAwsClusterAgentToken));
      serviceBinder.AddMethod(__Method_GenerateAwsAccessToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAwsAccessTokenResponse>(serviceImpl.GenerateAwsAccessToken));
      serviceBinder.AddMethod(__Method_CreateAwsNodePool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.CreateAwsNodePoolRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateAwsNodePool));
      serviceBinder.AddMethod(__Method_UpdateAwsNodePool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.UpdateAwsNodePoolRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateAwsNodePool));
      serviceBinder.AddMethod(__Method_RollbackAwsNodePoolUpdate, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.RollbackAwsNodePoolUpdateRequest, global::Google.LongRunning.Operation>(serviceImpl.RollbackAwsNodePoolUpdate));
      serviceBinder.AddMethod(__Method_GetAwsNodePool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAwsNodePoolRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsNodePool>(serviceImpl.GetAwsNodePool));
      serviceBinder.AddMethod(__Method_ListAwsNodePools, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAwsNodePoolsResponse>(serviceImpl.ListAwsNodePools));
      serviceBinder.AddMethod(__Method_DeleteAwsNodePool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.DeleteAwsNodePoolRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAwsNodePool));
      serviceBinder.AddMethod(__Method_GetAwsOpenIdConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAwsOpenIdConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsOpenIdConfig>(serviceImpl.GetAwsOpenIdConfig));
      serviceBinder.AddMethod(__Method_GetAwsJsonWebKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAwsJsonWebKeysRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsJsonWebKeys>(serviceImpl.GetAwsJsonWebKeys));
      serviceBinder.AddMethod(__Method_GetAwsServerConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAwsServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AwsServerConfig>(serviceImpl.GetAwsServerConfig));
    }

  }
}
#endregion
