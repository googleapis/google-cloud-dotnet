// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gkemulticloud/v1/azure_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.GkeMultiCloud.V1 {
  /// <summary>
  /// The AzureClusters API provides a single centrally managed service
  /// to create and manage Anthos clusters that run on Azure infrastructure.
  /// </summary>
  public static partial class AzureClusters
  {
    static readonly string __ServiceName = "google.cloud.gkemulticloud.v1.AzureClusters";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest> __Marshaller_google_cloud_gkemulticloud_v1_CreateAzureClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAzureClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AzureClient> __Marshaller_google_cloud_gkemulticloud_v1_AzureClient = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AzureClient.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest> __Marshaller_google_cloud_gkemulticloud_v1_ListAzureClientsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse> __Marshaller_google_cloud_gkemulticloud_v1_ListAzureClientsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest> __Marshaller_google_cloud_gkemulticloud_v1_DeleteAzureClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_CreateAzureClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_UpdateAzureClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAzureClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AzureCluster> __Marshaller_google_cloud_gkemulticloud_v1_AzureCluster = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AzureCluster.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest> __Marshaller_google_cloud_gkemulticloud_v1_ListAzureClustersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse> __Marshaller_google_cloud_gkemulticloud_v1_ListAzureClustersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_DeleteAzureClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAzureClusterAgentTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAzureClusterAgentTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAzureAccessTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAzureAccessTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest> __Marshaller_google_cloud_gkemulticloud_v1_CreateAzureNodePoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest> __Marshaller_google_cloud_gkemulticloud_v1_UpdateAzureNodePoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAzureNodePoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool> __Marshaller_google_cloud_gkemulticloud_v1_AzureNodePool = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest> __Marshaller_google_cloud_gkemulticloud_v1_ListAzureNodePoolsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse> __Marshaller_google_cloud_gkemulticloud_v1_ListAzureNodePoolsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest> __Marshaller_google_cloud_gkemulticloud_v1_DeleteAzureNodePoolRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAzureOpenIdConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig> __Marshaller_google_cloud_gkemulticloud_v1_AzureOpenIdConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAzureJsonWebKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys> __Marshaller_google_cloud_gkemulticloud_v1_AzureJsonWebKeys = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAzureServerConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig> __Marshaller_google_cloud_gkemulticloud_v1_AzureServerConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest, global::Google.LongRunning.Operation> __Method_CreateAzureClient = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAzureClient",
        __Marshaller_google_cloud_gkemulticloud_v1_CreateAzureClientRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureClient> __Method_GetAzureClient = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureClient>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAzureClient",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAzureClientRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AzureClient);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse> __Method_ListAzureClients = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAzureClients",
        __Marshaller_google_cloud_gkemulticloud_v1_ListAzureClientsRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_ListAzureClientsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest, global::Google.LongRunning.Operation> __Method_DeleteAzureClient = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAzureClient",
        __Marshaller_google_cloud_gkemulticloud_v1_DeleteAzureClientRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest, global::Google.LongRunning.Operation> __Method_CreateAzureCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAzureCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_CreateAzureClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest, global::Google.LongRunning.Operation> __Method_UpdateAzureCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAzureCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_UpdateAzureClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureCluster> __Method_GetAzureCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureCluster>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAzureCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAzureClusterRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AzureCluster);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse> __Method_ListAzureClusters = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAzureClusters",
        __Marshaller_google_cloud_gkemulticloud_v1_ListAzureClustersRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_ListAzureClustersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest, global::Google.LongRunning.Operation> __Method_DeleteAzureCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAzureCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_DeleteAzureClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse> __Method_GenerateAzureClusterAgentToken = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAzureClusterAgentToken",
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAzureClusterAgentTokenRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAzureClusterAgentTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse> __Method_GenerateAzureAccessToken = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAzureAccessToken",
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAzureAccessTokenRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAzureAccessTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest, global::Google.LongRunning.Operation> __Method_CreateAzureNodePool = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAzureNodePool",
        __Marshaller_google_cloud_gkemulticloud_v1_CreateAzureNodePoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest, global::Google.LongRunning.Operation> __Method_UpdateAzureNodePool = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAzureNodePool",
        __Marshaller_google_cloud_gkemulticloud_v1_UpdateAzureNodePoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool> __Method_GetAzureNodePool = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAzureNodePool",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAzureNodePoolRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AzureNodePool);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse> __Method_ListAzureNodePools = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAzureNodePools",
        __Marshaller_google_cloud_gkemulticloud_v1_ListAzureNodePoolsRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_ListAzureNodePoolsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest, global::Google.LongRunning.Operation> __Method_DeleteAzureNodePool = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAzureNodePool",
        __Marshaller_google_cloud_gkemulticloud_v1_DeleteAzureNodePoolRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig> __Method_GetAzureOpenIdConfig = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAzureOpenIdConfig",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAzureOpenIdConfigRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AzureOpenIdConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys> __Method_GetAzureJsonWebKeys = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAzureJsonWebKeys",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAzureJsonWebKeysRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AzureJsonWebKeys);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig> __Method_GetAzureServerConfig = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAzureServerConfig",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAzureServerConfigRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AzureServerConfig);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.GkeMultiCloud.V1.AzureServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AzureClusters</summary>
    [grpc::BindServiceMethod(typeof(AzureClusters), "BindService")]
    public abstract partial class AzureClustersBase
    {
      /// <summary>
      /// Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource on a given Google Cloud project and region.
      ///
      /// `AzureClient` resources hold client authentication
      /// information needed by the Anthos Multicloud API to manage Azure resources
      /// on your Azure subscription on your behalf.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAzureClient(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Describes a specific
      /// [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AzureClient> GetAzureClient(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse> ListAzureClients(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource.
      ///
      /// If the client is used by one or more clusters, deletion will
      /// fail and a `FAILED_PRECONDITION` error will be returned.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAzureClient(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Describes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AzureCluster> GetAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse> ListAzureClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse> GenerateAzureClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse> GenerateAzureAccessToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
      /// attached to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Describes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool> GetAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
      /// resources on a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse> ListAzureNodePools(global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig> GetAzureOpenIdConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys> GetAzureJsonWebKeys(global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns information, such as supported Azure regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig> GetAzureServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AzureClusters</summary>
    public partial class AzureClustersClient : grpc::ClientBase<AzureClustersClient>
    {
      /// <summary>Creates a new client for AzureClusters</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AzureClustersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AzureClusters that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AzureClustersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AzureClustersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AzureClustersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource on a given Google Cloud project and region.
      ///
      /// `AzureClient` resources hold client authentication
      /// information needed by the Anthos Multicloud API to manage Azure resources
      /// on your Azure subscription on your behalf.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAzureClient(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAzureClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource on a given Google Cloud project and region.
      ///
      /// `AzureClient` resources hold client authentication
      /// information needed by the Anthos Multicloud API to manage Azure resources
      /// on your Azure subscription on your behalf.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAzureClient(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAzureClient, null, options, request);
      }
      /// <summary>
      /// Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource on a given Google Cloud project and region.
      ///
      /// `AzureClient` resources hold client authentication
      /// information needed by the Anthos Multicloud API to manage Azure resources
      /// on your Azure subscription on your behalf.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAzureClientAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAzureClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource on a given Google Cloud project and region.
      ///
      /// `AzureClient` resources hold client authentication
      /// information needed by the Anthos Multicloud API to manage Azure resources
      /// on your Azure subscription on your behalf.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAzureClientAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAzureClient, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureClient GetAzureClient(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureClient GetAzureClient(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAzureClient, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureClient> GetAzureClientAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AzureClient][google.cloud.gkemulticloud.v1.AzureClient] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureClient> GetAzureClientAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAzureClient, null, options, request);
      }
      /// <summary>
      /// Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse ListAzureClients(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAzureClients(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse ListAzureClients(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAzureClients, null, options, request);
      }
      /// <summary>
      /// Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse> ListAzureClientsAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAzureClientsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse> ListAzureClientsAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAzureClients, null, options, request);
      }
      /// <summary>
      /// Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource.
      ///
      /// If the client is used by one or more clusters, deletion will
      /// fail and a `FAILED_PRECONDITION` error will be returned.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAzureClient(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAzureClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource.
      ///
      /// If the client is used by one or more clusters, deletion will
      /// fail and a `FAILED_PRECONDITION` error will be returned.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAzureClient(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAzureClient, null, options, request);
      }
      /// <summary>
      /// Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource.
      ///
      /// If the client is used by one or more clusters, deletion will
      /// fail and a `FAILED_PRECONDITION` error will be returned.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAzureClientAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAzureClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific [AzureClient][google.cloud.gkemulticloud.v1.AzureClient]
      /// resource.
      ///
      /// If the client is used by one or more clusters, deletion will
      /// fail and a `FAILED_PRECONDITION` error will be returned.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAzureClientAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAzureClient, null, options, request);
      }
      /// <summary>
      /// Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAzureCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAzureCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAzureClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAzureClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resource on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAzureClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAzureCluster, null, options, request);
      }
      /// <summary>
      /// Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAzureCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAzureCluster, null, options, request);
      }
      /// <summary>
      /// Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAzureClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAzureClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAzureClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAzureCluster, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureCluster GetAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureCluster GetAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAzureCluster, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureCluster> GetAzureClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureCluster> GetAzureClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAzureCluster, null, options, request);
      }
      /// <summary>
      /// Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse ListAzureClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAzureClusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse ListAzureClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAzureClusters, null, options, request);
      }
      /// <summary>
      /// Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse> ListAzureClustersAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAzureClustersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse> ListAzureClustersAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAzureClusters, null, options, request);
      }
      /// <summary>
      /// Deletes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAzureCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAzureCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAzureCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAzureClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAzureClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      ///
      /// Fails if the cluster has one or more associated
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resources.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAzureClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAzureCluster, null, options, request);
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse GenerateAzureClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAzureClusterAgentToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse GenerateAzureClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAzureClusterAgentToken, null, options, request);
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse> GenerateAzureClusterAgentTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAzureClusterAgentTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse> GenerateAzureClusterAgentTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAzureClusterAgentToken, null, options, request);
      }
      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse GenerateAzureAccessToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAzureAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse GenerateAzureAccessToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAzureAccessToken, null, options, request);
      }
      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse> GenerateAzureAccessTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAzureAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates a short-lived access token to authenticate to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse> GenerateAzureAccessTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAzureAccessToken, null, options, request);
      }
      /// <summary>
      /// Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
      /// attached to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAzureNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
      /// attached to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAzureNodePool, null, options, request);
      }
      /// <summary>
      /// Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
      /// attached to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAzureNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAzureNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool],
      /// attached to a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAzureNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAzureNodePool, null, options, request);
      }
      /// <summary>
      /// Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAzureNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAzureNodePool, null, options, request);
      }
      /// <summary>
      /// Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAzureNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAzureNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAzureNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAzureNodePool, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool GetAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool GetAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAzureNodePool, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool> GetAzureNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool> GetAzureNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAzureNodePool, null, options, request);
      }
      /// <summary>
      /// Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
      /// resources on a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse ListAzureNodePools(global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAzureNodePools(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
      /// resources on a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse ListAzureNodePools(global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAzureNodePools, null, options, request);
      }
      /// <summary>
      /// Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
      /// resources on a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse> ListAzureNodePoolsAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAzureNodePoolsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool]
      /// resources on a given
      /// [AzureCluster][google.cloud.gkemulticloud.v1.AzureCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse> ListAzureNodePoolsAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAzureNodePools, null, options, request);
      }
      /// <summary>
      /// Deletes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAzureNodePool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAzureNodePool(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAzureNodePool, null, options, request);
      }
      /// <summary>
      /// Deletes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAzureNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAzureNodePoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific
      /// [AzureNodePool][google.cloud.gkemulticloud.v1.AzureNodePool] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAzureNodePoolAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAzureNodePool, null, options, request);
      }
      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig GetAzureOpenIdConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureOpenIdConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig GetAzureOpenIdConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAzureOpenIdConfig, null, options, request);
      }
      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig> GetAzureOpenIdConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureOpenIdConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the OIDC discovery document for the cluster.
      /// See the
      /// [OpenID Connect Discovery 1.0
      /// specification](https://openid.net/specs/openid-connect-discovery-1_0.html)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig> GetAzureOpenIdConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAzureOpenIdConfig, null, options, request);
      }
      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys GetAzureJsonWebKeys(global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureJsonWebKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys GetAzureJsonWebKeys(global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAzureJsonWebKeys, null, options, request);
      }
      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys> GetAzureJsonWebKeysAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureJsonWebKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the public component of the cluster signing keys in
      /// JSON Web Key format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys> GetAzureJsonWebKeysAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAzureJsonWebKeys, null, options, request);
      }
      /// <summary>
      /// Returns information, such as supported Azure regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig GetAzureServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureServerConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns information, such as supported Azure regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig GetAzureServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAzureServerConfig, null, options, request);
      }
      /// <summary>
      /// Returns information, such as supported Azure regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig> GetAzureServerConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAzureServerConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns information, such as supported Azure regions and Kubernetes
      /// versions, on a given Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig> GetAzureServerConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAzureServerConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AzureClustersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AzureClustersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AzureClustersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateAzureClient, serviceImpl.CreateAzureClient)
          .AddMethod(__Method_GetAzureClient, serviceImpl.GetAzureClient)
          .AddMethod(__Method_ListAzureClients, serviceImpl.ListAzureClients)
          .AddMethod(__Method_DeleteAzureClient, serviceImpl.DeleteAzureClient)
          .AddMethod(__Method_CreateAzureCluster, serviceImpl.CreateAzureCluster)
          .AddMethod(__Method_UpdateAzureCluster, serviceImpl.UpdateAzureCluster)
          .AddMethod(__Method_GetAzureCluster, serviceImpl.GetAzureCluster)
          .AddMethod(__Method_ListAzureClusters, serviceImpl.ListAzureClusters)
          .AddMethod(__Method_DeleteAzureCluster, serviceImpl.DeleteAzureCluster)
          .AddMethod(__Method_GenerateAzureClusterAgentToken, serviceImpl.GenerateAzureClusterAgentToken)
          .AddMethod(__Method_GenerateAzureAccessToken, serviceImpl.GenerateAzureAccessToken)
          .AddMethod(__Method_CreateAzureNodePool, serviceImpl.CreateAzureNodePool)
          .AddMethod(__Method_UpdateAzureNodePool, serviceImpl.UpdateAzureNodePool)
          .AddMethod(__Method_GetAzureNodePool, serviceImpl.GetAzureNodePool)
          .AddMethod(__Method_ListAzureNodePools, serviceImpl.ListAzureNodePools)
          .AddMethod(__Method_DeleteAzureNodePool, serviceImpl.DeleteAzureNodePool)
          .AddMethod(__Method_GetAzureOpenIdConfig, serviceImpl.GetAzureOpenIdConfig)
          .AddMethod(__Method_GetAzureJsonWebKeys, serviceImpl.GetAzureJsonWebKeys)
          .AddMethod(__Method_GetAzureServerConfig, serviceImpl.GetAzureServerConfig).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AzureClustersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateAzureClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClientRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateAzureClient));
      serviceBinder.AddMethod(__Method_GetAzureClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAzureClientRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureClient>(serviceImpl.GetAzureClient));
      serviceBinder.AddMethod(__Method_ListAzureClients, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClientsResponse>(serviceImpl.ListAzureClients));
      serviceBinder.AddMethod(__Method_DeleteAzureClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClientRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAzureClient));
      serviceBinder.AddMethod(__Method_CreateAzureCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateAzureCluster));
      serviceBinder.AddMethod(__Method_UpdateAzureCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateAzureCluster));
      serviceBinder.AddMethod(__Method_GetAzureCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAzureClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureCluster>(serviceImpl.GetAzureCluster));
      serviceBinder.AddMethod(__Method_ListAzureClusters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureClustersResponse>(serviceImpl.ListAzureClusters));
      serviceBinder.AddMethod(__Method_DeleteAzureCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAzureCluster));
      serviceBinder.AddMethod(__Method_GenerateAzureClusterAgentToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureClusterAgentTokenResponse>(serviceImpl.GenerateAzureClusterAgentToken));
      serviceBinder.AddMethod(__Method_GenerateAzureAccessToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAzureAccessTokenResponse>(serviceImpl.GenerateAzureAccessToken));
      serviceBinder.AddMethod(__Method_CreateAzureNodePool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.CreateAzureNodePoolRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateAzureNodePool));
      serviceBinder.AddMethod(__Method_UpdateAzureNodePool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.UpdateAzureNodePoolRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateAzureNodePool));
      serviceBinder.AddMethod(__Method_GetAzureNodePool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAzureNodePoolRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureNodePool>(serviceImpl.GetAzureNodePool));
      serviceBinder.AddMethod(__Method_ListAzureNodePools, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAzureNodePoolsResponse>(serviceImpl.ListAzureNodePools));
      serviceBinder.AddMethod(__Method_DeleteAzureNodePool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.DeleteAzureNodePoolRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAzureNodePool));
      serviceBinder.AddMethod(__Method_GetAzureOpenIdConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAzureOpenIdConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureOpenIdConfig>(serviceImpl.GetAzureOpenIdConfig));
      serviceBinder.AddMethod(__Method_GetAzureJsonWebKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAzureJsonWebKeysRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureJsonWebKeys>(serviceImpl.GetAzureJsonWebKeys));
      serviceBinder.AddMethod(__Method_GetAzureServerConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAzureServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AzureServerConfig>(serviceImpl.GetAzureServerConfig));
    }

  }
}
#endregion
