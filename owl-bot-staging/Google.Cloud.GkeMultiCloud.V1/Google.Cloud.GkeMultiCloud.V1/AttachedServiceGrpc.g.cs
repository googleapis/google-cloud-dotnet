// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gkemulticloud/v1/attached_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.GkeMultiCloud.V1 {
  /// <summary>
  /// The AttachedClusters API provides a single centrally managed service
  /// to register and manage Anthos attached clusters that run on customer's owned
  /// infrastructure.
  /// </summary>
  public static partial class AttachedClusters
  {
    static readonly string __ServiceName = "google.cloud.gkemulticloud.v1.AttachedClusters";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_CreateAttachedClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_UpdateAttachedClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_ImportAttachedClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAttachedClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster> __Marshaller_google_cloud_gkemulticloud_v1_AttachedCluster = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest> __Marshaller_google_cloud_gkemulticloud_v1_ListAttachedClustersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse> __Marshaller_google_cloud_gkemulticloud_v1_ListAttachedClustersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest> __Marshaller_google_cloud_gkemulticloud_v1_DeleteAttachedClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest> __Marshaller_google_cloud_gkemulticloud_v1_GetAttachedServerConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig> __Marshaller_google_cloud_gkemulticloud_v1_AttachedServerConfig = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAttachedClusterInstallManifestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAttachedClusterInstallManifestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAttachedClusterAgentTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse> __Marshaller_google_cloud_gkemulticloud_v1_GenerateAttachedClusterAgentTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest, global::Google.LongRunning.Operation> __Method_CreateAttachedCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAttachedCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_CreateAttachedClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest, global::Google.LongRunning.Operation> __Method_UpdateAttachedCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAttachedCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_UpdateAttachedClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest, global::Google.LongRunning.Operation> __Method_ImportAttachedCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportAttachedCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_ImportAttachedClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster> __Method_GetAttachedCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAttachedCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAttachedClusterRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AttachedCluster);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse> __Method_ListAttachedClusters = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAttachedClusters",
        __Marshaller_google_cloud_gkemulticloud_v1_ListAttachedClustersRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_ListAttachedClustersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest, global::Google.LongRunning.Operation> __Method_DeleteAttachedCluster = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAttachedCluster",
        __Marshaller_google_cloud_gkemulticloud_v1_DeleteAttachedClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig> __Method_GetAttachedServerConfig = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAttachedServerConfig",
        __Marshaller_google_cloud_gkemulticloud_v1_GetAttachedServerConfigRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_AttachedServerConfig);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse> __Method_GenerateAttachedClusterInstallManifest = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAttachedClusterInstallManifest",
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAttachedClusterInstallManifestRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAttachedClusterInstallManifestResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse> __Method_GenerateAttachedClusterAgentToken = new grpc::Method<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateAttachedClusterAgentToken",
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAttachedClusterAgentTokenRequest,
        __Marshaller_google_cloud_gkemulticloud_v1_GenerateAttachedClusterAgentTokenResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.GkeMultiCloud.V1.AttachedServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AttachedClusters</summary>
    [grpc::BindServiceMethod(typeof(AttachedClusters), "BindService")]
    public abstract partial class AttachedClustersBase
    {
      /// <summary>
      /// Creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Imports creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// by importing an existing Fleet Membership resource.
      ///
      /// Attached Clusters created before the introduction of the Anthos Multi-Cloud
      /// API can be imported through this method.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> ImportAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Describes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster> GetAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse> ListAttachedClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns information, such as supported Kubernetes versions, on a given
      /// Google Cloud location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig> GetAttachedServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates the install manifest to be installed on the target cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse> GenerateAttachedClusterInstallManifest(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse> GenerateAttachedClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AttachedClusters</summary>
    public partial class AttachedClustersClient : grpc::ClientBase<AttachedClustersClient>
    {
      /// <summary>Creates a new client for AttachedClusters</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AttachedClustersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AttachedClusters that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AttachedClustersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AttachedClustersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AttachedClustersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAttachedCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAttachedClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// on a given Google Cloud Platform project and region.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Updates an
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAttachedCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Updates an
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAttachedClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Imports creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// by importing an existing Fleet Membership resource.
      ///
      /// Attached Clusters created before the introduction of the Anthos Multi-Cloud
      /// API can be imported through this method.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ImportAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportAttachedCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// by importing an existing Fleet Membership resource.
      ///
      /// Attached Clusters created before the introduction of the Anthos Multi-Cloud
      /// API can be imported through this method.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation ImportAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Imports creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// by importing an existing Fleet Membership resource.
      ///
      /// Attached Clusters created before the introduction of the Anthos Multi-Cloud
      /// API can be imported through this method.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ImportAttachedClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Imports creates a new
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource
      /// by importing an existing Fleet Membership resource.
      ///
      /// Attached Clusters created before the introduction of the Anthos Multi-Cloud
      /// API can be imported through this method.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> ImportAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster GetAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttachedCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster GetAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Describes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster> GetAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttachedClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Describes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster> GetAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Lists all [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse ListAttachedClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAttachedClusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse ListAttachedClusters(global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAttachedClusters, null, options, request);
      }
      /// <summary>
      /// Lists all [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse> ListAttachedClustersAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAttachedClustersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster]
      /// resources on a given Google Cloud project and region.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse> ListAttachedClustersAsync(global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAttachedClusters, null, options, request);
      }
      /// <summary>
      /// Deletes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAttachedCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteAttachedCluster(global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAttachedClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a specific
      /// [AttachedCluster][google.cloud.gkemulticloud.v1.AttachedCluster] resource.
      ///
      /// If successful, the response contains a newly created
      /// [Operation][google.longrunning.Operation] resource that can be
      /// described to track the status of the operation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteAttachedClusterAsync(global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAttachedCluster, null, options, request);
      }
      /// <summary>
      /// Returns information, such as supported Kubernetes versions, on a given
      /// Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig GetAttachedServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttachedServerConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns information, such as supported Kubernetes versions, on a given
      /// Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig GetAttachedServerConfig(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAttachedServerConfig, null, options, request);
      }
      /// <summary>
      /// Returns information, such as supported Kubernetes versions, on a given
      /// Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig> GetAttachedServerConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttachedServerConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns information, such as supported Kubernetes versions, on a given
      /// Google Cloud location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig> GetAttachedServerConfigAsync(global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAttachedServerConfig, null, options, request);
      }
      /// <summary>
      /// Generates the install manifest to be installed on the target cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse GenerateAttachedClusterInstallManifest(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAttachedClusterInstallManifest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates the install manifest to be installed on the target cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse GenerateAttachedClusterInstallManifest(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAttachedClusterInstallManifest, null, options, request);
      }
      /// <summary>
      /// Generates the install manifest to be installed on the target cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse> GenerateAttachedClusterInstallManifestAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAttachedClusterInstallManifestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates the install manifest to be installed on the target cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse> GenerateAttachedClusterInstallManifestAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAttachedClusterInstallManifest, null, options, request);
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse GenerateAttachedClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAttachedClusterAgentToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse GenerateAttachedClusterAgentToken(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateAttachedClusterAgentToken, null, options, request);
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse> GenerateAttachedClusterAgentTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateAttachedClusterAgentTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an access token for a cluster agent.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse> GenerateAttachedClusterAgentTokenAsync(global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateAttachedClusterAgentToken, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AttachedClustersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AttachedClustersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AttachedClustersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateAttachedCluster, serviceImpl.CreateAttachedCluster)
          .AddMethod(__Method_UpdateAttachedCluster, serviceImpl.UpdateAttachedCluster)
          .AddMethod(__Method_ImportAttachedCluster, serviceImpl.ImportAttachedCluster)
          .AddMethod(__Method_GetAttachedCluster, serviceImpl.GetAttachedCluster)
          .AddMethod(__Method_ListAttachedClusters, serviceImpl.ListAttachedClusters)
          .AddMethod(__Method_DeleteAttachedCluster, serviceImpl.DeleteAttachedCluster)
          .AddMethod(__Method_GetAttachedServerConfig, serviceImpl.GetAttachedServerConfig)
          .AddMethod(__Method_GenerateAttachedClusterInstallManifest, serviceImpl.GenerateAttachedClusterInstallManifest)
          .AddMethod(__Method_GenerateAttachedClusterAgentToken, serviceImpl.GenerateAttachedClusterAgentToken).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AttachedClustersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateAttachedCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.CreateAttachedClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateAttachedCluster));
      serviceBinder.AddMethod(__Method_UpdateAttachedCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.UpdateAttachedClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateAttachedCluster));
      serviceBinder.AddMethod(__Method_ImportAttachedCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.ImportAttachedClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.ImportAttachedCluster));
      serviceBinder.AddMethod(__Method_GetAttachedCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAttachedClusterRequest, global::Google.Cloud.GkeMultiCloud.V1.AttachedCluster>(serviceImpl.GetAttachedCluster));
      serviceBinder.AddMethod(__Method_ListAttachedClusters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersRequest, global::Google.Cloud.GkeMultiCloud.V1.ListAttachedClustersResponse>(serviceImpl.ListAttachedClusters));
      serviceBinder.AddMethod(__Method_DeleteAttachedCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.DeleteAttachedClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteAttachedCluster));
      serviceBinder.AddMethod(__Method_GetAttachedServerConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GetAttachedServerConfigRequest, global::Google.Cloud.GkeMultiCloud.V1.AttachedServerConfig>(serviceImpl.GetAttachedServerConfig));
      serviceBinder.AddMethod(__Method_GenerateAttachedClusterInstallManifest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterInstallManifestResponse>(serviceImpl.GenerateAttachedClusterInstallManifest));
      serviceBinder.AddMethod(__Method_GenerateAttachedClusterAgentToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenRequest, global::Google.Cloud.GkeMultiCloud.V1.GenerateAttachedClusterAgentTokenResponse>(serviceImpl.GenerateAttachedClusterAgentToken));
    }

  }
}
#endregion
