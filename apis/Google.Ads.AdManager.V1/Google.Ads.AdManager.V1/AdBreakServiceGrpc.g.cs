// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/admanager/v1/ad_break_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Ads.AdManager.V1 {
  /// <summary>
  /// Provides methods for handling `AdBreak` objects.
  /// </summary>
  public static partial class AdBreakService
  {
    static readonly string __ServiceName = "google.ads.admanager.v1.AdBreakService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.GetAdBreakRequest> __Marshaller_google_ads_admanager_v1_GetAdBreakRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.GetAdBreakRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.AdBreak> __Marshaller_google_ads_admanager_v1_AdBreak = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.AdBreak.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.ListAdBreaksRequest> __Marshaller_google_ads_admanager_v1_ListAdBreaksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.ListAdBreaksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.ListAdBreaksResponse> __Marshaller_google_ads_admanager_v1_ListAdBreaksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.ListAdBreaksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.CreateAdBreakRequest> __Marshaller_google_ads_admanager_v1_CreateAdBreakRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.CreateAdBreakRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.UpdateAdBreakRequest> __Marshaller_google_ads_admanager_v1_UpdateAdBreakRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.UpdateAdBreakRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Ads.AdManager.V1.DeleteAdBreakRequest> __Marshaller_google_ads_admanager_v1_DeleteAdBreakRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Ads.AdManager.V1.DeleteAdBreakRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.GetAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak> __Method_GetAdBreak = new grpc::Method<global::Google.Ads.AdManager.V1.GetAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAdBreak",
        __Marshaller_google_ads_admanager_v1_GetAdBreakRequest,
        __Marshaller_google_ads_admanager_v1_AdBreak);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.ListAdBreaksRequest, global::Google.Ads.AdManager.V1.ListAdBreaksResponse> __Method_ListAdBreaks = new grpc::Method<global::Google.Ads.AdManager.V1.ListAdBreaksRequest, global::Google.Ads.AdManager.V1.ListAdBreaksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAdBreaks",
        __Marshaller_google_ads_admanager_v1_ListAdBreaksRequest,
        __Marshaller_google_ads_admanager_v1_ListAdBreaksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.CreateAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak> __Method_CreateAdBreak = new grpc::Method<global::Google.Ads.AdManager.V1.CreateAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAdBreak",
        __Marshaller_google_ads_admanager_v1_CreateAdBreakRequest,
        __Marshaller_google_ads_admanager_v1_AdBreak);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.UpdateAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak> __Method_UpdateAdBreak = new grpc::Method<global::Google.Ads.AdManager.V1.UpdateAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAdBreak",
        __Marshaller_google_ads_admanager_v1_UpdateAdBreakRequest,
        __Marshaller_google_ads_admanager_v1_AdBreak);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Ads.AdManager.V1.DeleteAdBreakRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAdBreak = new grpc::Method<global::Google.Ads.AdManager.V1.DeleteAdBreakRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAdBreak",
        __Marshaller_google_ads_admanager_v1_DeleteAdBreakRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Ads.AdManager.V1.AdBreakServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AdBreakService</summary>
    [grpc::BindServiceMethod(typeof(AdBreakService), "BindService")]
    public abstract partial class AdBreakServiceBase
    {
      /// <summary>
      /// API to retrieve an `AdBreak` object.
      ///
      /// Query an ad break by its resource name or custom asset key. Check the
      /// resource's `breakState` field to determine its state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.AdBreak> GetAdBreak(global::Google.Ads.AdManager.V1.GetAdBreakRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to retrieve a list of `AdBreak` objects.
      ///
      /// By default, when no `orderBy` query parameter is specified, ad breaks are
      /// ordered reverse chronologically. However, ad breaks with a 'breakState' of
      /// 'SCHEDULED' or 'DECISIONED' are prioritized and appear first.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.ListAdBreaksResponse> ListAdBreaks(global::Google.Ads.AdManager.V1.ListAdBreaksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to create an `AdBreak` object.
      ///
      /// Informs DAI of an upcoming ad break for a live stream event, with an
      /// optional expected start time. DAI will begin decisioning ads for the break
      /// shortly before the expected start time, if provided. Each live stream
      /// event can only have one incomplete ad break at any given time. The next ad
      /// break can be scheduled after the previous ad break has started serving,
      /// indicated by its state being
      /// [`COMPLETE`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.COMPLETE],
      /// or it has been deleted.
      ///
      /// This method cannot be used if the `LiveStreamEvent` has
      /// [prefetching ad breaks
      /// enabled](https://developers.google.com/ad-manager/api/reference/latest/LiveStreamEventService.LiveStreamEvent#prefetchenabled)
      /// or the event is not active. If a `LiveStreamEvent` is deactivated after
      /// creating an ad break and before the ad break is complete, the ad break
      /// is discarded.
      ///
      /// An ad break's state is complete when the following occurs:
      ///  - Full service DAI: after a matching ad break shows in the
      ///  `LiveStreamEvent` manifest only when the ad break has started decisioning.
      ///  - Pod Serving: after the ad break is requested using the ad break ID or
      ///  break sequence.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.AdBreak> CreateAdBreak(global::Google.Ads.AdManager.V1.CreateAdBreakRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to update an `AdBreak` object.
      ///
      /// Modify an ad break when its state is
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Ads.AdManager.V1.AdBreak> UpdateAdBreak(global::Google.Ads.AdManager.V1.UpdateAdBreakRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// API to delete an `AdBreak` object.
      ///
      /// Deletes and cancels an incomplete ad break, mitigating the need to wait
      /// for the current break to serve before recreating an ad break. You can
      /// delete an ad break that has not started serving or seen in manifests,
      /// indicated by its state being
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED]
      /// or
      /// [`DECISIONED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.DECISIONED].
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAdBreak(global::Google.Ads.AdManager.V1.DeleteAdBreakRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AdBreakService</summary>
    public partial class AdBreakServiceClient : grpc::ClientBase<AdBreakServiceClient>
    {
      /// <summary>Creates a new client for AdBreakService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AdBreakServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AdBreakService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AdBreakServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AdBreakServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AdBreakServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// API to retrieve an `AdBreak` object.
      ///
      /// Query an ad break by its resource name or custom asset key. Check the
      /// resource's `breakState` field to determine its state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.AdBreak GetAdBreak(global::Google.Ads.AdManager.V1.GetAdBreakRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAdBreak(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to retrieve an `AdBreak` object.
      ///
      /// Query an ad break by its resource name or custom asset key. Check the
      /// resource's `breakState` field to determine its state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.AdBreak GetAdBreak(global::Google.Ads.AdManager.V1.GetAdBreakRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAdBreak, null, options, request);
      }
      /// <summary>
      /// API to retrieve an `AdBreak` object.
      ///
      /// Query an ad break by its resource name or custom asset key. Check the
      /// resource's `breakState` field to determine its state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.AdBreak> GetAdBreakAsync(global::Google.Ads.AdManager.V1.GetAdBreakRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAdBreakAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to retrieve an `AdBreak` object.
      ///
      /// Query an ad break by its resource name or custom asset key. Check the
      /// resource's `breakState` field to determine its state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.AdBreak> GetAdBreakAsync(global::Google.Ads.AdManager.V1.GetAdBreakRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAdBreak, null, options, request);
      }
      /// <summary>
      /// API to retrieve a list of `AdBreak` objects.
      ///
      /// By default, when no `orderBy` query parameter is specified, ad breaks are
      /// ordered reverse chronologically. However, ad breaks with a 'breakState' of
      /// 'SCHEDULED' or 'DECISIONED' are prioritized and appear first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.ListAdBreaksResponse ListAdBreaks(global::Google.Ads.AdManager.V1.ListAdBreaksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAdBreaks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to retrieve a list of `AdBreak` objects.
      ///
      /// By default, when no `orderBy` query parameter is specified, ad breaks are
      /// ordered reverse chronologically. However, ad breaks with a 'breakState' of
      /// 'SCHEDULED' or 'DECISIONED' are prioritized and appear first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.ListAdBreaksResponse ListAdBreaks(global::Google.Ads.AdManager.V1.ListAdBreaksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAdBreaks, null, options, request);
      }
      /// <summary>
      /// API to retrieve a list of `AdBreak` objects.
      ///
      /// By default, when no `orderBy` query parameter is specified, ad breaks are
      /// ordered reverse chronologically. However, ad breaks with a 'breakState' of
      /// 'SCHEDULED' or 'DECISIONED' are prioritized and appear first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.ListAdBreaksResponse> ListAdBreaksAsync(global::Google.Ads.AdManager.V1.ListAdBreaksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAdBreaksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to retrieve a list of `AdBreak` objects.
      ///
      /// By default, when no `orderBy` query parameter is specified, ad breaks are
      /// ordered reverse chronologically. However, ad breaks with a 'breakState' of
      /// 'SCHEDULED' or 'DECISIONED' are prioritized and appear first.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.ListAdBreaksResponse> ListAdBreaksAsync(global::Google.Ads.AdManager.V1.ListAdBreaksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAdBreaks, null, options, request);
      }
      /// <summary>
      /// API to create an `AdBreak` object.
      ///
      /// Informs DAI of an upcoming ad break for a live stream event, with an
      /// optional expected start time. DAI will begin decisioning ads for the break
      /// shortly before the expected start time, if provided. Each live stream
      /// event can only have one incomplete ad break at any given time. The next ad
      /// break can be scheduled after the previous ad break has started serving,
      /// indicated by its state being
      /// [`COMPLETE`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.COMPLETE],
      /// or it has been deleted.
      ///
      /// This method cannot be used if the `LiveStreamEvent` has
      /// [prefetching ad breaks
      /// enabled](https://developers.google.com/ad-manager/api/reference/latest/LiveStreamEventService.LiveStreamEvent#prefetchenabled)
      /// or the event is not active. If a `LiveStreamEvent` is deactivated after
      /// creating an ad break and before the ad break is complete, the ad break
      /// is discarded.
      ///
      /// An ad break's state is complete when the following occurs:
      ///  - Full service DAI: after a matching ad break shows in the
      ///  `LiveStreamEvent` manifest only when the ad break has started decisioning.
      ///  - Pod Serving: after the ad break is requested using the ad break ID or
      ///  break sequence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.AdBreak CreateAdBreak(global::Google.Ads.AdManager.V1.CreateAdBreakRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAdBreak(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to create an `AdBreak` object.
      ///
      /// Informs DAI of an upcoming ad break for a live stream event, with an
      /// optional expected start time. DAI will begin decisioning ads for the break
      /// shortly before the expected start time, if provided. Each live stream
      /// event can only have one incomplete ad break at any given time. The next ad
      /// break can be scheduled after the previous ad break has started serving,
      /// indicated by its state being
      /// [`COMPLETE`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.COMPLETE],
      /// or it has been deleted.
      ///
      /// This method cannot be used if the `LiveStreamEvent` has
      /// [prefetching ad breaks
      /// enabled](https://developers.google.com/ad-manager/api/reference/latest/LiveStreamEventService.LiveStreamEvent#prefetchenabled)
      /// or the event is not active. If a `LiveStreamEvent` is deactivated after
      /// creating an ad break and before the ad break is complete, the ad break
      /// is discarded.
      ///
      /// An ad break's state is complete when the following occurs:
      ///  - Full service DAI: after a matching ad break shows in the
      ///  `LiveStreamEvent` manifest only when the ad break has started decisioning.
      ///  - Pod Serving: after the ad break is requested using the ad break ID or
      ///  break sequence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.AdBreak CreateAdBreak(global::Google.Ads.AdManager.V1.CreateAdBreakRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAdBreak, null, options, request);
      }
      /// <summary>
      /// API to create an `AdBreak` object.
      ///
      /// Informs DAI of an upcoming ad break for a live stream event, with an
      /// optional expected start time. DAI will begin decisioning ads for the break
      /// shortly before the expected start time, if provided. Each live stream
      /// event can only have one incomplete ad break at any given time. The next ad
      /// break can be scheduled after the previous ad break has started serving,
      /// indicated by its state being
      /// [`COMPLETE`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.COMPLETE],
      /// or it has been deleted.
      ///
      /// This method cannot be used if the `LiveStreamEvent` has
      /// [prefetching ad breaks
      /// enabled](https://developers.google.com/ad-manager/api/reference/latest/LiveStreamEventService.LiveStreamEvent#prefetchenabled)
      /// or the event is not active. If a `LiveStreamEvent` is deactivated after
      /// creating an ad break and before the ad break is complete, the ad break
      /// is discarded.
      ///
      /// An ad break's state is complete when the following occurs:
      ///  - Full service DAI: after a matching ad break shows in the
      ///  `LiveStreamEvent` manifest only when the ad break has started decisioning.
      ///  - Pod Serving: after the ad break is requested using the ad break ID or
      ///  break sequence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.AdBreak> CreateAdBreakAsync(global::Google.Ads.AdManager.V1.CreateAdBreakRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAdBreakAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to create an `AdBreak` object.
      ///
      /// Informs DAI of an upcoming ad break for a live stream event, with an
      /// optional expected start time. DAI will begin decisioning ads for the break
      /// shortly before the expected start time, if provided. Each live stream
      /// event can only have one incomplete ad break at any given time. The next ad
      /// break can be scheduled after the previous ad break has started serving,
      /// indicated by its state being
      /// [`COMPLETE`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.COMPLETE],
      /// or it has been deleted.
      ///
      /// This method cannot be used if the `LiveStreamEvent` has
      /// [prefetching ad breaks
      /// enabled](https://developers.google.com/ad-manager/api/reference/latest/LiveStreamEventService.LiveStreamEvent#prefetchenabled)
      /// or the event is not active. If a `LiveStreamEvent` is deactivated after
      /// creating an ad break and before the ad break is complete, the ad break
      /// is discarded.
      ///
      /// An ad break's state is complete when the following occurs:
      ///  - Full service DAI: after a matching ad break shows in the
      ///  `LiveStreamEvent` manifest only when the ad break has started decisioning.
      ///  - Pod Serving: after the ad break is requested using the ad break ID or
      ///  break sequence.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.AdBreak> CreateAdBreakAsync(global::Google.Ads.AdManager.V1.CreateAdBreakRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAdBreak, null, options, request);
      }
      /// <summary>
      /// API to update an `AdBreak` object.
      ///
      /// Modify an ad break when its state is
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.AdBreak UpdateAdBreak(global::Google.Ads.AdManager.V1.UpdateAdBreakRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAdBreak(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to update an `AdBreak` object.
      ///
      /// Modify an ad break when its state is
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Ads.AdManager.V1.AdBreak UpdateAdBreak(global::Google.Ads.AdManager.V1.UpdateAdBreakRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAdBreak, null, options, request);
      }
      /// <summary>
      /// API to update an `AdBreak` object.
      ///
      /// Modify an ad break when its state is
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.AdBreak> UpdateAdBreakAsync(global::Google.Ads.AdManager.V1.UpdateAdBreakRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAdBreakAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to update an `AdBreak` object.
      ///
      /// Modify an ad break when its state is
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Ads.AdManager.V1.AdBreak> UpdateAdBreakAsync(global::Google.Ads.AdManager.V1.UpdateAdBreakRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAdBreak, null, options, request);
      }
      /// <summary>
      /// API to delete an `AdBreak` object.
      ///
      /// Deletes and cancels an incomplete ad break, mitigating the need to wait
      /// for the current break to serve before recreating an ad break. You can
      /// delete an ad break that has not started serving or seen in manifests,
      /// indicated by its state being
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED]
      /// or
      /// [`DECISIONED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.DECISIONED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAdBreak(global::Google.Ads.AdManager.V1.DeleteAdBreakRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAdBreak(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to delete an `AdBreak` object.
      ///
      /// Deletes and cancels an incomplete ad break, mitigating the need to wait
      /// for the current break to serve before recreating an ad break. You can
      /// delete an ad break that has not started serving or seen in manifests,
      /// indicated by its state being
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED]
      /// or
      /// [`DECISIONED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.DECISIONED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAdBreak(global::Google.Ads.AdManager.V1.DeleteAdBreakRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAdBreak, null, options, request);
      }
      /// <summary>
      /// API to delete an `AdBreak` object.
      ///
      /// Deletes and cancels an incomplete ad break, mitigating the need to wait
      /// for the current break to serve before recreating an ad break. You can
      /// delete an ad break that has not started serving or seen in manifests,
      /// indicated by its state being
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED]
      /// or
      /// [`DECISIONED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.DECISIONED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAdBreakAsync(global::Google.Ads.AdManager.V1.DeleteAdBreakRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAdBreakAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// API to delete an `AdBreak` object.
      ///
      /// Deletes and cancels an incomplete ad break, mitigating the need to wait
      /// for the current break to serve before recreating an ad break. You can
      /// delete an ad break that has not started serving or seen in manifests,
      /// indicated by its state being
      /// [`SCHEDULED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.SCHEDULED]
      /// or
      /// [`DECISIONED`][google.ads.admanager.v1.AdBreakStateEnum.AdBreakState.DECISIONED].
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAdBreakAsync(global::Google.Ads.AdManager.V1.DeleteAdBreakRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAdBreak, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AdBreakServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AdBreakServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AdBreakServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAdBreak, serviceImpl.GetAdBreak)
          .AddMethod(__Method_ListAdBreaks, serviceImpl.ListAdBreaks)
          .AddMethod(__Method_CreateAdBreak, serviceImpl.CreateAdBreak)
          .AddMethod(__Method_UpdateAdBreak, serviceImpl.UpdateAdBreak)
          .AddMethod(__Method_DeleteAdBreak, serviceImpl.DeleteAdBreak).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AdBreakServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAdBreak, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.GetAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak>(serviceImpl.GetAdBreak));
      serviceBinder.AddMethod(__Method_ListAdBreaks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.ListAdBreaksRequest, global::Google.Ads.AdManager.V1.ListAdBreaksResponse>(serviceImpl.ListAdBreaks));
      serviceBinder.AddMethod(__Method_CreateAdBreak, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.CreateAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak>(serviceImpl.CreateAdBreak));
      serviceBinder.AddMethod(__Method_UpdateAdBreak, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.UpdateAdBreakRequest, global::Google.Ads.AdManager.V1.AdBreak>(serviceImpl.UpdateAdBreak));
      serviceBinder.AddMethod(__Method_DeleteAdBreak, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Ads.AdManager.V1.DeleteAdBreakRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteAdBreak));
    }

  }
}
#endregion
