// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/ads/admanager/v1/report_definition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Ads.AdManager.V1 {

  /// <summary>Holder for reflection information generated from google/ads/admanager/v1/report_definition.proto</summary>
  public static partial class ReportDefinitionReflection {

    #region Descriptor
    /// <summary>File descriptor for google/ads/admanager/v1/report_definition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReportDefinitionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9nb29nbGUvYWRzL2FkbWFuYWdlci92MS9yZXBvcnRfZGVmaW5pdGlvbi5w",
            "cm90bxIXZ29vZ2xlLmFkcy5hZG1hbmFnZXIudjEaKmdvb2dsZS9hZHMvYWRt",
            "YW5hZ2VyL3YxL3JlcG9ydF92YWx1ZS5wcm90bxofZ29vZ2xlL2FwaS9maWVs",
            "ZF9iZWhhdmlvci5wcm90bxoWZ29vZ2xlL3R5cGUvZGF0ZS5wcm90byLo1AIK",
            "EFJlcG9ydERlZmluaXRpb24STAoKZGltZW5zaW9ucxgBIAMoDjIzLmdvb2ds",
            "ZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERlZmluaXRpb24uRGltZW5zaW9u",
            "QgPgQQISRgoHbWV0cmljcxgCIAMoDjIwLmdvb2dsZS5hZHMuYWRtYW5hZ2Vy",
            "LnYxLlJlcG9ydERlZmluaXRpb24uTWV0cmljQgPgQQISRgoHZmlsdGVycxgD",
            "IAMoCzIwLmdvb2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERlZmluaXRp",
            "b24uRmlsdGVyQgPgQQESVwoQdGltZV96b25lX3NvdXJjZRgUIAEoDjI4Lmdv",
            "b2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERlZmluaXRpb24uVGltZVpv",
            "bmVTb3VyY2VCA+BBARIWCgl0aW1lX3pvbmUYBCABKAlCA+BBARIaCg1jdXJy",
            "ZW5jeV9jb2RlGAUgASgJQgPgQQESTAoKZGF0ZV9yYW5nZRgGIAEoCzIzLmdv",
            "b2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERlZmluaXRpb24uRGF0ZVJh",
            "bmdlQgPgQQISXAoVY29tcGFyaXNvbl9kYXRlX3JhbmdlGAkgASgLMjMuZ29v",
            "Z2xlLmFkcy5hZG1hbmFnZXIudjEuUmVwb3J0RGVmaW5pdGlvbi5EYXRlUmFu",
            "Z2VCA+BBAUgAiAEBEiUKGGN1c3RvbV9kaW1lbnNpb25fa2V5X2lkcxgHIAMo",
            "A0ID4EEBEicKGmxpbmVfaXRlbV9jdXN0b21fZmllbGRfaWRzGAsgAygDQgPg",
            "QQESIwoWb3JkZXJfY3VzdG9tX2ZpZWxkX2lkcxgMIAMoA0ID4EEBEiYKGWNy",
            "ZWF0aXZlX2N1c3RvbV9maWVsZF9pZHMYDSADKANCA+BBARJOCgtyZXBvcnRf",
            "dHlwZRgIIAEoDjI0Lmdvb2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERl",
            "ZmluaXRpb24uUmVwb3J0VHlwZUID4EECElsKEnRpbWVfcGVyaW9kX2NvbHVt",
            "bhgKIAEoDjI6Lmdvb2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERlZmlu",
            "aXRpb24uVGltZVBlcmlvZENvbHVtbkID4EEBEkIKBWZsYWdzGA4gAygLMi4u",
            "Z29vZ2xlLmFkcy5hZG1hbmFnZXIudjEuUmVwb3J0RGVmaW5pdGlvbi5GbGFn",
            "QgPgQQESQgoFc29ydHMYDyADKAsyLi5nb29nbGUuYWRzLmFkbWFuYWdlci52",
            "MS5SZXBvcnREZWZpbml0aW9uLlNvcnRCA+BBARqeAQoFRmllbGQSSAoJZGlt",
            "ZW5zaW9uGAEgASgOMjMuZ29vZ2xlLmFkcy5hZG1hbmFnZXIudjEuUmVwb3J0",
            "RGVmaW5pdGlvbi5EaW1lbnNpb25IABJCCgZtZXRyaWMYAiABKA4yMC5nb29n",
            "bGUuYWRzLmFkbWFuYWdlci52MS5SZXBvcnREZWZpbml0aW9uLk1ldHJpY0gA",
            "QgcKBWZpZWxkGv4HCglEYXRlUmFuZ2USUwoFZml4ZWQYASABKAsyQi5nb29n",
            "bGUuYWRzLmFkbWFuYWdlci52MS5SZXBvcnREZWZpbml0aW9uLkRhdGVSYW5n",
            "ZS5GaXhlZERhdGVSYW5nZUgAElkKCHJlbGF0aXZlGAIgASgOMkUuZ29vZ2xl",
            "LmFkcy5hZG1hbmFnZXIudjEuUmVwb3J0RGVmaW5pdGlvbi5EYXRlUmFuZ2Uu",
            "UmVsYXRpdmVEYXRlUmFuZ2VIABpmCg5GaXhlZERhdGVSYW5nZRIqCgpzdGFy",
            "dF9kYXRlGAEgASgLMhEuZ29vZ2xlLnR5cGUuRGF0ZUID4EECEigKCGVuZF9k",
            "YXRlGAIgASgLMhEuZ29vZ2xlLnR5cGUuRGF0ZUID4EECIsUFChFSZWxhdGl2",
            "ZURhdGVSYW5nZRIjCh9SRUxBVElWRV9EQVRFX1JBTkdFX1VOU1BFQ0lGSUVE",
            "EAASCQoFVE9EQVkQARINCglZRVNURVJEQVkQAhINCglUSElTX1dFRUsQAxIV",
            "ChFUSElTX1dFRUtfVE9fREFURRAdEg4KClRISVNfTU9OVEgQBBIWChJUSElT",
            "X01PTlRIX1RPX0RBVEUQGhIQCgxUSElTX1FVQVJURVIQBRIYChRUSElTX1FV",
            "QVJURVJfVE9fREFURRAbEg0KCVRISVNfWUVBUhAGEhUKEVRISVNfWUVBUl9U",
            "T19EQVRFEBwSDQoJTEFTVF9XRUVLEAcSDgoKTEFTVF9NT05USBAIEhAKDExB",
            "U1RfUVVBUlRFUhAJEg0KCUxBU1RfWUVBUhAKEg8KC0xBU1RfN19EQVlTEAsS",
            "EAoMTEFTVF8zMF9EQVlTEAwSEAoMTEFTVF82MF9EQVlTEA0SEAoMTEFTVF85",
            "MF9EQVlTEA4SEQoNTEFTVF8xODBfREFZUxAPEhEKDUxBU1RfMzYwX0RBWVMQ",
            "EBIRCg1MQVNUXzM2NV9EQVlTEBESEQoNTEFTVF8zX01PTlRIUxASEhEKDUxB",
            "U1RfNl9NT05USFMQExISCg5MQVNUXzEyX01PTlRIUxAUEhEKDUFMTF9BVkFJ",
            "TEFCTEUQFRIMCghUT01PUlJPVxAeEhAKDE5FWFRfOTBfREFZUxAfEg4KCk5F",
            "WFRfTU9OVEgQIBIRCg1ORVhUXzNfTU9OVEhTECESEgoOTkVYVF8xMl9NT05U",
            "SFMQIhINCglORVhUX1dFRUsQIxIQCgxORVhUX1FVQVJURVIQJBIYChRUT19F",
            "TkRfT0ZfTkVYVF9NT05USBAlEhMKD1BSRVZJT1VTX1BFUklPRBAWEh0KGVNB",
            "TUVfUEVSSU9EX1BSRVZJT1VTX1lFQVIQGEIRCg9kYXRlX3JhbmdlX3R5cGUa",
            "zwgKBkZpbHRlchJUCgxmaWVsZF9maWx0ZXIYASABKAsyPC5nb29nbGUuYWRz",
            "LmFkbWFuYWdlci52MS5SZXBvcnREZWZpbml0aW9uLkZpbHRlci5GaWVsZEZp",
            "bHRlckgAEkYKCm5vdF9maWx0ZXIYAiABKAsyMC5nb29nbGUuYWRzLmFkbWFu",
            "YWdlci52MS5SZXBvcnREZWZpbml0aW9uLkZpbHRlckgAElEKCmFuZF9maWx0",
            "ZXIYAyABKAsyOy5nb29nbGUuYWRzLmFkbWFuYWdlci52MS5SZXBvcnREZWZp",
            "bml0aW9uLkZpbHRlci5GaWx0ZXJMaXN0SAASUAoJb3JfZmlsdGVyGAQgASgL",
            "MjsuZ29vZ2xlLmFkcy5hZG1hbmFnZXIudjEuUmVwb3J0RGVmaW5pdGlvbi5G",
            "aWx0ZXIuRmlsdGVyTGlzdEgAGuYDCgtGaWVsZEZpbHRlchJDCgVmaWVsZBgB",
            "IAEoCzIvLmdvb2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERlZmluaXRp",
            "b24uRmllbGRCA+BBAhJSCglvcGVyYXRpb24YAiABKA4yOi5nb29nbGUuYWRz",
            "LmFkbWFuYWdlci52MS5SZXBvcnREZWZpbml0aW9uLkZpbHRlci5PcGVyYXRp",
            "b25CA+BBAhI5CgZ2YWx1ZXMYAyADKAsyJC5nb29nbGUuYWRzLmFkbWFuYWdl",
            "ci52MS5SZXBvcnRWYWx1ZUID4EECEkgKBXNsaWNlGAQgASgLMi8uZ29vZ2xl",
            "LmFkcy5hZG1hbmFnZXIudjEuUmVwb3J0RGVmaW5pdGlvbi5TbGljZUID4EEB",
            "SACIAQESIwoRdGltZV9wZXJpb2RfaW5kZXgYBSABKAVCA+BBAUgBiAEBEl4K",
            "EW1ldHJpY192YWx1ZV90eXBlGAYgASgOMjkuZ29vZ2xlLmFkcy5hZG1hbmFn",
            "ZXIudjEuUmVwb3J0RGVmaW5pdGlvbi5NZXRyaWNWYWx1ZVR5cGVCA+BBAUgC",
            "iAEBQggKBl9zbGljZUIUChJfdGltZV9wZXJpb2RfaW5kZXhCFAoSX21ldHJp",
            "Y192YWx1ZV90eXBlGlQKCkZpbHRlckxpc3QSRgoHZmlsdGVycxgBIAMoCzIw",
            "Lmdvb2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERlZmluaXRpb24uRmls",
            "dGVyQgPgQQIiugEKCU9wZXJhdGlvbhIGCgJJThAAEgoKBk5PVF9JThABEgwK",
            "CENPTlRBSU5TEAISEAoMTk9UX0NPTlRBSU5TEAMSDQoJTEVTU19USEFOEAQS",
            "FAoQTEVTU19USEFOX0VRVUFMUxAFEhAKDEdSRUFURVJfVEhBThAGEhcKE0dS",
            "RUFURVJfVEhBTl9FUVVBTFMQBxILCgdCRVRXRUVOEAgSCwoHTUFUQ0hFUxAJ",
            "Eg8KC05PVF9NQVRDSEVTEApCBgoEdHlwZRrpAgoEU29ydBJDCgVmaWVsZBgB",
            "IAEoCzIvLmdvb2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9ydERlZmluaXRp",
            "b24uRmllbGRCA+BBAhIXCgpkZXNjZW5kaW5nGAIgASgIQgPgQQESSAoFc2xp",
            "Y2UYAyABKAsyLy5nb29nbGUuYWRzLmFkbWFuYWdlci52MS5SZXBvcnREZWZp",
            "bml0aW9uLlNsaWNlQgPgQQFIAIgBARIjChF0aW1lX3BlcmlvZF9pbmRleBgE",
            "IAEoBUID4EEBSAGIAQESXgoRbWV0cmljX3ZhbHVlX3R5cGUYBSABKA4yOS5n",
            "b29nbGUuYWRzLmFkbWFuYWdlci52MS5SZXBvcnREZWZpbml0aW9uLk1ldHJp",
            "Y1ZhbHVlVHlwZUID4EEBSAKIAQFCCAoGX3NsaWNlQhQKEl90aW1lX3Blcmlv",
            "ZF9pbmRleEIUChJfbWV0cmljX3ZhbHVlX3R5cGUajgEKBVNsaWNlEksKCWRp",
            "bWVuc2lvbhgBIAEoDjIzLmdvb2dsZS5hZHMuYWRtYW5hZ2VyLnYxLlJlcG9y",
            "dERlZmluaXRpb24uRGltZW5zaW9uQgPgQQISOAoFdmFsdWUYAiABKAsyJC5n",
            "b29nbGUuYWRzLmFkbWFuYWdlci52MS5SZXBvcnRWYWx1ZUID4EECGmEKBEZs",
            "YWcSRgoHZmlsdGVycxgBIAMoCzIwLmdvb2dsZS5hZHMuYWRtYW5hZ2VyLnYx",
            "LlJlcG9ydERlZmluaXRpb24uRmlsdGVyQgPgQQISEQoEbmFtZRgCIAEoCUID",
            "4EEBIm0KClJlcG9ydFR5cGUSGwoXUkVQT1JUX1RZUEVfVU5TUEVDSUZJRUQQ",
            "ABIOCgpISVNUT1JJQ0FMEAESCQoFUkVBQ0gQBRIZChVQUklWQUNZX0FORF9N",
            "RVNTQUdJTkcQBhIMCghBRF9TUEVFRBANIrOpAQoJRGltZW5zaW9uEhkKFURJ",
            "TUVOU0lPTl9VTlNQRUNJRklFRBAAEiMKHkFDVElWRV9WSUVXX01FQVNVUkVN",
            "RU5UX1NPVVJDRRC/BBIoCiNBQ1RJVkVfVklFV19NRUFTVVJFTUVOVF9TT1VS",
            "Q0VfTkFNRRDABBIdChhBRFZFUlRJU0VSX0NSRURJVF9TVEFUVVMQ2wMSIgod",
            "QURWRVJUSVNFUl9DUkVESVRfU1RBVFVTX05BTUUQ3AMSGwoWQURWRVJUSVNF",
            "Ul9ET01BSU5fTkFNRRDyARIbChZBRFZFUlRJU0VSX0VYVEVSTkFMX0lEEOQB",
            "EhIKDUFEVkVSVElTRVJfSUQQgwESFgoRQURWRVJUSVNFUl9MQUJFTFMQ5gES",
            "GQoUQURWRVJUSVNFUl9MQUJFTF9JRFMQ5QESFAoPQURWRVJUSVNFUl9OQU1F",
            "EIQBEh8KGkFEVkVSVElTRVJfUFJJTUFSWV9DT05UQUNUEOMBEhYKEUFEVkVS",
            "VElTRVJfU1RBVFVTENcDEhsKFkFEVkVSVElTRVJfU1RBVFVTX05BTUUQ2AMS",
            "FAoPQURWRVJUSVNFUl9UWVBFENkDEhkKFEFEVkVSVElTRVJfVFlQRV9OQU1F",
            "ENoDEhgKE0FEVkVSVElTRVJfVkVSVElDQUwQxAQSEAoLQURYX1BST0RVQ1QQ",
            "8wMSFQoQQURYX1BST0RVQ1RfTkFNRRD0AxIYChNBRF9FWFBFUklFTkNFU19U",
            "WVBFEIEFEh0KGEFEX0VYUEVSSUVOQ0VTX1RZUEVfTkFNRRCCBRIQCgtBRF9M",
            "T0NBVElPThCGAxIVChBBRF9MT0NBVElPTl9OQU1FEIcDEiIKHUFEX1RFQ0hO",
            "T0xPR1lfUFJPVklERVJfRE9NQUlOEOwEEh4KGUFEX1RFQ0hOT0xPR1lfUFJP",
            "VklERVJfSUQQ7QQSIAobQURfVEVDSE5PTE9HWV9QUk9WSURFUl9OQU1FEO4E",
            "EgwKB0FEX1RZUEUQ8QMSEQoMQURfVFlQRV9OQU1FEPIDEhAKDEFEX1VOSVRf",
            "Q09ERRBAEhgKFEFEX1VOSVRfQ09ERV9MRVZFTF8xEEESGQoVQURfVU5JVF9D",
            "T0RFX0xFVkVMXzEwEEoSGQoVQURfVU5JVF9DT0RFX0xFVkVMXzExEEsSGQoV",
            "QURfVU5JVF9DT0RFX0xFVkVMXzEyEEwSGQoVQURfVU5JVF9DT0RFX0xFVkVM",
            "XzEzEE0SGQoVQURfVU5JVF9DT0RFX0xFVkVMXzE0EE4SGQoVQURfVU5JVF9D",
            "T0RFX0xFVkVMXzE1EE8SGQoVQURfVU5JVF9DT0RFX0xFVkVMXzE2EFASGAoU",
            "QURfVU5JVF9DT0RFX0xFVkVMXzIQQhIYChRBRF9VTklUX0NPREVfTEVWRUxf",
            "MxBDEhgKFEFEX1VOSVRfQ09ERV9MRVZFTF80EEQSGAoUQURfVU5JVF9DT0RF",
            "X0xFVkVMXzUQRRIYChRBRF9VTklUX0NPREVfTEVWRUxfNhBGEhgKFEFEX1VO",
            "SVRfQ09ERV9MRVZFTF83EEcSGAoUQURfVU5JVF9DT0RFX0xFVkVMXzgQSBIY",
            "ChRBRF9VTklUX0NPREVfTEVWRUxfORBJEg4KCkFEX1VOSVRfSUQQGRIYChRB",
            "RF9VTklUX0lEX0FMTF9MRVZFTBAbEhYKEkFEX1VOSVRfSURfTEVWRUxfMRAe",
            "EhcKE0FEX1VOSVRfSURfTEVWRUxfMTAQMBIXChNBRF9VTklUX0lEX0xFVkVM",
            "XzExEDISFwoTQURfVU5JVF9JRF9MRVZFTF8xMhA0EhcKE0FEX1VOSVRfSURf",
            "TEVWRUxfMTMQNhIXChNBRF9VTklUX0lEX0xFVkVMXzE0EDgSFwoTQURfVU5J",
            "VF9JRF9MRVZFTF8xNRA6EhcKE0FEX1VOSVRfSURfTEVWRUxfMTYQPBIWChJB",
            "RF9VTklUX0lEX0xFVkVMXzIQIBIWChJBRF9VTklUX0lEX0xFVkVMXzMQIhIW",
            "ChJBRF9VTklUX0lEX0xFVkVMXzQQJBIWChJBRF9VTklUX0lEX0xFVkVMXzUQ",
            "JhIWChJBRF9VTklUX0lEX0xFVkVMXzYQKBIWChJBRF9VTklUX0lEX0xFVkVM",
            "XzcQKhIWChJBRF9VTklUX0lEX0xFVkVMXzgQLBIWChJBRF9VTklUX0lEX0xF",
            "VkVMXzkQLhIZChRBRF9VTklUX0lEX1RPUF9MRVZFTBCOARIQCgxBRF9VTklU",
            "X05BTUUQGhIaChZBRF9VTklUX05BTUVfQUxMX0xFVkVMEB0SGAoUQURfVU5J",
            "VF9OQU1FX0xFVkVMXzEQHxIZChVBRF9VTklUX05BTUVfTEVWRUxfMTAQMRIZ",
            "ChVBRF9VTklUX05BTUVfTEVWRUxfMTEQMxIZChVBRF9VTklUX05BTUVfTEVW",
            "RUxfMTIQNRIZChVBRF9VTklUX05BTUVfTEVWRUxfMTMQNxIZChVBRF9VTklU",
            "X05BTUVfTEVWRUxfMTQQORIZChVBRF9VTklUX05BTUVfTEVWRUxfMTUQOxIZ",
            "ChVBRF9VTklUX05BTUVfTEVWRUxfMTYQPRIYChRBRF9VTklUX05BTUVfTEVW",
            "RUxfMhAhEhgKFEFEX1VOSVRfTkFNRV9MRVZFTF8zECMSGAoUQURfVU5JVF9O",
            "QU1FX0xFVkVMXzQQJRIYChRBRF9VTklUX05BTUVfTEVWRUxfNRAnEhgKFEFE",
            "X1VOSVRfTkFNRV9MRVZFTF82ECkSGAoUQURfVU5JVF9OQU1FX0xFVkVMXzcQ",
            "KxIYChRBRF9VTklUX05BTUVfTEVWRUxfOBAtEhgKFEFEX1VOSVRfTkFNRV9M",
            "RVZFTF85EC8SGwoWQURfVU5JVF9OQU1FX1RPUF9MRVZFTBCPARIZChVBRF9V",
            "TklUX1JFV0FSRF9BTU9VTlQQPxIXChNBRF9VTklUX1JFV0FSRF9UWVBFED4S",
            "EwoOQURfVU5JVF9TVEFUVVMQzgESGAoTQURfVU5JVF9TVEFUVVNfTkFNRRDP",
            "ARIWChFBR0VOQ1lfTEVWRUxfMV9JRBC1BBIYChNBR0VOQ1lfTEVWRUxfMV9O",
            "QU1FELYEEhYKEUFHRU5DWV9MRVZFTF8yX0lEELcEEhgKE0FHRU5DWV9MRVZF",
            "TF8yX05BTUUQuAQSFgoRQUdFTkNZX0xFVkVMXzNfSUQQuQQSGAoTQUdFTkNZ",
            "X0xFVkVMXzNfTkFNRRC6BBIQCgtBR0VfQlJBQ0tFVBD8AxIVChBBR0VfQlJB",
            "Q0tFVF9OQU1FEMYEEi0KKEFQUF9UUkFDS0lOR19UUkFOU1BBUkVOQ1lfQ09O",
            "U0VOVF9TVEFUVVMQugMSMgotQVBQX1RSQUNLSU5HX1RSQU5TUEFSRU5DWV9D",
            "T05TRU5UX1NUQVRVU19OQU1FELsDEhAKC0FQUF9WRVJTSU9OEIgDEhkKFEFV",
            "Q1RJT05fUEFDS0FHRV9ERUFMEMMEEhwKF0FVQ1RJT05fUEFDS0FHRV9ERUFM",
            "X0lEELsEEiEKHEFVRElFTkNFX1NFR01FTlRfSURfVEFSR0VURUQQyAQSHgoZ",
            "QVVESUVOQ0VfU0VHTUVOVF9UQVJHRVRFRBDJBBIbChZBVVRPX1JFRlJFU0hF",
            "RF9UUkFGRklDEKUDEiAKG0FVVE9fUkVGUkVTSEVEX1RSQUZGSUNfTkFNRRCm",
            "AxIYChNCSURERVJfRU5DUllQVEVEX0lEEO0DEhAKC0JJRERFUl9OQU1FEO4D",
            "Eg4KCUJJRF9SQU5HRRCnBRIZChRCSURfUkVKRUNUSU9OX1JFQVNPThDXBBIe",
            "ChlCSURfUkVKRUNUSU9OX1JFQVNPTl9OQU1FENgEEhIKDUJSQU5ESU5HX1RZ",
            "UEUQ/wISFwoSQlJBTkRJTkdfVFlQRV9OQU1FEIADEhQKEEJST1dTRVJfQ0FU",
            "RUdPUlkQdxIZChVCUk9XU0VSX0NBVEVHT1JZX05BTUUQeBIPCgpCUk9XU0VS",
            "X0lEEOsBEhEKDEJST1dTRVJfTkFNRRDsARIVChBCVVlFUl9ORVRXT1JLX0lE",
            "EMADEhcKEkJVWUVSX05FVFdPUktfTkFNRRDBAxIcChdDQUxMT1VUX1NUQVRV",
            "U19DQVRFR09SWRDMBBIhChxDQUxMT1VUX1NUQVRVU19DQVRFR09SWV9OQU1F",
            "EM0EEg8KCkNBUlJJRVJfSUQQ8QISEQoMQ0FSUklFUl9OQU1FEPACEgwKB0NI",
            "QU5ORUwQ9QMSFwoSQ0hJTERfTkVUV09SS19DT0RFEJ4EEhUKEENISUxEX05F",
            "VFdPUktfSUQQoAQSFwoSQ0hJTERfUEFSVE5FUl9OQU1FEJ8EEgwKB0NJVFlf",
            "SUQQywMSDgoJQ0lUWV9OQU1FEMQDEh0KGENMQVNTSUZJRURfQURWRVJUSVNF",
            "Ul9JRBCFARIfChpDTEFTU0lGSUVEX0FEVkVSVElTRVJfTkFNRRCGARIYChND",
            "TEFTU0lGSUVEX0JSQU5EX0lEEPMBEhoKFUNMQVNTSUZJRURfQlJBTkRfTkFN",
            "RRD0ARIVChBDT05URU5UX0NNU19OQU1FEIMFEhkKFENPTlRFTlRfQ01TX1ZJ",
            "REVPX0lEEIQFEg8KCkNPTlRFTlRfSUQQ9gESHQoYQ09OVEVOVF9NQVBQSU5H",
            "X1BSRVNFTkNFENsFEiIKHUNPTlRFTlRfTUFQUElOR19QUkVTRU5DRV9OQU1F",
            "ENwFEhEKDENPTlRFTlRfTkFNRRD3ARIOCglDT05USU5FTlQQ1QMSEwoOQ09O",
            "VElORU5UX05BTUUQ1gMSEQoMQ09VTlRSWV9DT0RFENIDEg4KCkNPVU5UUllf",
            "SUQQCxIQCgxDT1VOVFJZX05BTUUQDBIaChVDUkVBVElWRV9CSUxMSU5HX1RZ",
            "UEUQ7gISHwoaQ1JFQVRJVkVfQklMTElOR19UWVBFX05BTUUQ7wISHwoaQ1JF",
            "QVRJVkVfQ0xJQ0tfVEhST1VHSF9VUkwQrgESEAoLQ1JFQVRJVkVfSUQQigES",
            "EgoNQ1JFQVRJVkVfTkFNRRCLARIgChtDUkVBVElWRV9QT0xJQ0lFU19GSUxU",
            "RVJJTkcQxwUSJQogQ1JFQVRJVkVfUE9MSUNJRVNfRklMVEVSSU5HX05BTUUQ",
            "yAUSIwoeQ1JFQVRJVkVfUFJPVEVDVElPTlNfRklMVEVSSU5HEMAFEigKI0NS",
            "RUFUSVZFX1BST1RFQ1RJT05TX0ZJTFRFUklOR19OQU1FEMEFEhsKFkNSRUFU",
            "SVZFX1NFVF9ST0xFX1RZUEUQrgUSIAobQ1JFQVRJVkVfU0VUX1JPTEVfVFlQ",
            "RV9OQU1FEK8FEhgKE0NSRUFUSVZFX1RFQ0hOT0xPR1kQlAESHQoYQ1JFQVRJ",
            "VkVfVEVDSE5PTE9HWV9OQU1FEJUBEiAKG0NSRUFUSVZFX1RISVJEX1BBUlRZ",
            "X1ZFTkRPUhDpAhISCg1DUkVBVElWRV9UWVBFENgCEhcKEkNSRUFUSVZFX1RZ",
            "UEVfTkFNRRDZAhIXChJDUkVBVElWRV9WRU5ET1JfSUQQwgUSGQoUQ1JFQVRJ",
            "VkVfVkVORE9SX05BTUUQwwUSKAojQ1JFQVRJVkVfVklERU9fUkVESVJFQ1Rf",
            "VEhJUkRfUEFSVFkQsgQSDwoKQ1VSQVRPUl9JRBC8BBIRCgxDVVJBVE9SX05B",
            "TUUQvQQSFAoPQ1VTVE9NX0VWRU5UX0lEEOEFEhYKEUNVU1RPTV9FVkVOVF9O",
            "QU1FEN8FEhYKEUNVU1RPTV9FVkVOVF9UWVBFEOAFEhsKFkNVU1RPTV9FVkVO",
            "VF9UWVBFX05BTUUQ4gUSEwoOQ1VTVE9NX1NQT1RfSUQQpwMSFQoQQ1VTVE9N",
            "X1NQT1RfTkFNRRCoAxIICgREQVRFEAMSDwoLREFZX09GX1dFRUsQBBISCg1E",
            "RUFMX0JVWUVSX0lEEPABEhQKD0RFQUxfQlVZRVJfTkFNRRDxARIMCgdERUFM",
            "X0lEELQDEg4KCURFQUxfTkFNRRC1AxIfChpERUxJVkVSRURfU0VDVVJFX1NJ",
            "R05BTF9JRBC1AhIhChxERUxJVkVSRURfU0VDVVJFX1NJR05BTF9OQU1FELYC",
            "EhIKDkRFTUFORF9DSEFOTkVMEAkSFwoTREVNQU5EX0NIQU5ORUxfTkFNRRAK",
            "EhIKDURFTUFORF9TT1VSQ0UQ0AQSFwoSREVNQU5EX1NPVVJDRV9OQU1FENEE",
            "EhUKEURFTUFORF9TVUJDSEFOTkVMEBYSGgoWREVNQU5EX1NVQkNIQU5ORUxf",
            "TkFNRRAXEgsKBkRFVklDRRDiARITCg9ERVZJQ0VfQ0FURUdPUlkQDxIYChRE",
            "RVZJQ0VfQ0FURUdPUllfTkFNRRAQEhsKFkRFVklDRV9NQU5VRkFDVFVSRVJf",
            "SUQQjQQSHQoYREVWSUNFX01BTlVGQUNUVVJFUl9OQU1FEI4EEhQKD0RFVklD",
            "RV9NT0RFTF9JRBCPBBIWChFERVZJQ0VfTU9ERUxfTkFNRRCQBBIQCgtERVZJ",
            "Q0VfTkFNRRDhARIQCgtEU1BfU0VBVF9JRBC0BBIcChdEWU5BTUlDX0FMTE9D",
            "QVRJT05fVFlQRRD2AxIhChxEWU5BTUlDX0FMTE9DQVRJT05fVFlQRV9OQU1F",
            "EPcDEhEKDEVTUF9ERUxJVkVSWRDvBBIWChFFU1BfREVMSVZFUllfTkFNRRDw",
            "BBIRCgxFU1BfUFJFU0VOQ0UQ8QQSFgoRRVNQX1BSRVNFTkNFX05BTUUQ8gQS",
            "HQoYRVhDSEFOR0VfQklERElOR19ERUFMX0lEEMsFEh8KGkVYQ0hBTkdFX0JJ",
            "RERJTkdfREVBTF9UWVBFEMoFEiQKH0VYQ0hBTkdFX0JJRERJTkdfREVBTF9U",
            "WVBFX05BTUUQ0wUSJAofRVhDSEFOR0VfVEhJUkRfUEFSVFlfQ09NUEFOWV9J",
            "RBC5ARImCiFFWENIQU5HRV9USElSRF9QQVJUWV9DT01QQU5ZX05BTUUQugES",
            "HwoaRklSU1RfTE9PS19QUklDSU5HX1JVTEVfSUQQ+AESIQocRklSU1RfTE9P",
            "S19QUklDSU5HX1JVTEVfTkFNRRD5ARIaChVGSVJTVF9QQVJUWV9JRF9TVEFU",
            "VVMQlAMSHwoaRklSU1RfUEFSVFlfSURfU1RBVFVTX05BTUUQlQMSCwoGR0VO",
            "REVSEP0DEhAKC0dFTkRFUl9OQU1FEMcEEh8KGkdPT0dMRV9BTkFMWVRJQ1Nf",
            "U1RSRUFNX0lEEIcEEiEKHEdPT0dMRV9BTkFMWVRJQ1NfU1RSRUFNX05BTUUQ",
            "iAQSGQoUSEJUX1lJRUxEX1BBUlRORVJfSUQQkwUSGwoWSEJUX1lJRUxEX1BB",
            "UlRORVJfTkFNRRCUBRIjCh5IRUFERVJfQklEREVSX0lOVEVHUkFUSU9OX1RZ",
            "UEUQzgUSKAojSEVBREVSX0JJRERFUl9JTlRFR1JBVElPTl9UWVBFX05BTUUQ",
            "zwUSCAoESE9VUhBkEh8KGklNUFJFU1NJT05fQ09VTlRJTkdfTUVUSE9EEMEE",
            "EiQKH0lNUFJFU1NJT05fQ09VTlRJTkdfTUVUSE9EX05BTUUQwgQSFQoQSU5U",
            "RVJBQ1RJT05fVFlQRRDfARIaChVJTlRFUkFDVElPTl9UWVBFX05BTUUQ4AES",
            "DQoISU5URVJFU1QQ/gMSFAoQSU5WRU5UT1JZX0ZPUk1BVBAREhkKFUlOVkVO",
            "VE9SWV9GT1JNQVRfTkFNRRASEiIKHUlOVkVOVE9SWV9TSEFSRV9BU1NJR05N",
            "RU5UX0lEEIgFEiQKH0lOVkVOVE9SWV9TSEFSRV9BU1NJR05NRU5UX05BTUUQ",
            "iQUSHAoXSU5WRU5UT1JZX1NIQVJFX09VVENPTUUQ2wQSIQocSU5WRU5UT1JZ",
            "X1NIQVJFX09VVENPTUVfTkFNRRDcBBImCiFJTlZFTlRPUllfU0hBUkVfUEFS",
            "VE5FUl9BRF9TRVJWRVIQjAUSKwomSU5WRU5UT1JZX1NIQVJFX1BBUlRORVJf",
            "QURfU0VSVkVSX05BTUUQjQUSKQokSU5WRU5UT1JZX1NIQVJFX1RBUkdFVF9T",
            "SEFSRV9QRVJDRU5UEI4FEhkKFElOVkVOVE9SWV9TSEFSRV9UWVBFEIoFEh4K",
            "GUlOVkVOVE9SWV9TSEFSRV9UWVBFX05BTUUQiwUSEgoOSU5WRU5UT1JZX1RZ",
            "UEUQExIXChNJTlZFTlRPUllfVFlQRV9OQU1FEBQSEgoNSVNfQURYX0RJUkVD",
            "VBD+AhIZChRJU19DVVJBVElPTl9UQVJHRVRFRBC+BBIPCgpJU19EUk9QUEVE",
            "ENADEhcKEklTX0ZJUlNUX0xPT0tfREVBTBCRAxISCg1LRVlfVkFMVUVTX0lE",
            "ENYBEhQKD0tFWV9WQUxVRVNfTkFNRRDXARIVChBMSU5FX0lURU1fQUdFTkNZ",
            "EJcFEhcKEkxJTkVfSVRFTV9BUkNISVZFRBC8ARIoCiNMSU5FX0lURU1fQ09N",
            "UEFOSU9OX0RFTElWRVJZX09QVElPThDMARItCihMSU5FX0lURU1fQ09NUEFO",
            "SU9OX0RFTElWRVJZX09QVElPTl9OQU1FEM0BEh4KGUxJTkVfSVRFTV9DT01Q",
            "VVRFRF9TVEFUVVMQ+gESIwoeTElORV9JVEVNX0NPTVBVVEVEX1NUQVRVU19O",
            "QU1FEPsBEiEKHUxJTkVfSVRFTV9DT05UUkFDVEVEX1FVQU5USVRZEFwSGwoX",
            "TElORV9JVEVNX0NPU1RfUEVSX1VOSVQQVRIYChNMSU5FX0lURU1fQ09TVF9U",
            "WVBFENQBEh0KGExJTkVfSVRFTV9DT1NUX1RZUEVfTkFNRRDVARIgChtMSU5F",
            "X0lURU1fQ1JFQVRJVkVfRU5EX0RBVEUQsAESJQogTElORV9JVEVNX0NSRUFU",
            "SVZFX1JPVEFUSU9OX1RZUEUQvQESKgolTElORV9JVEVNX0NSRUFUSVZFX1JP",
            "VEFUSU9OX1RZUEVfTkFNRRC+ARIiCh1MSU5FX0lURU1fQ1JFQVRJVkVfU1RB",
            "UlRfREFURRCvARIcChdMSU5FX0lURU1fQ1VSUkVOQ1lfQ09ERRC0ARIgChxM",
            "SU5FX0lURU1fREVMSVZFUllfSU5ESUNBVE9SEFcSIQocTElORV9JVEVNX0RF",
            "TElWRVJZX1JBVEVfVFlQRRC/ARImCiFMSU5FX0lURU1fREVMSVZFUllfUkFU",
            "RV9UWVBFX05BTUUQwAESIAobTElORV9JVEVNX0RJU0NPVU5UX0FCU09MVVRF",
            "EMMBEiIKHUxJTkVfSVRFTV9ESVNDT1VOVF9QRVJDRU5UQUdFEMQBEhYKEkxJ",
            "TkVfSVRFTV9FTkRfREFURRBREhsKF0xJTkVfSVRFTV9FTkRfREFURV9USU1F",
            "EFMSHwoaTElORV9JVEVNX0VOVklST05NRU5UX1RZUEUQyQESJAofTElORV9J",
            "VEVNX0VOVklST05NRU5UX1RZUEVfTkFNRRDKARIeChpMSU5FX0lURU1fRVhU",
            "RVJOQUxfREVBTF9JRBBhEhkKFUxJTkVfSVRFTV9FWFRFUk5BTF9JRBBWEhwK",
            "F0xJTkVfSVRFTV9GUkVRVUVOQ1lfQ0FQEIACEhAKDExJTkVfSVRFTV9JRBAB",
            "EhUKEExJTkVfSVRFTV9MQUJFTFMQmwUSGAoTTElORV9JVEVNX0xBQkVMX0lE",
            "UxCZBRIjCh5MSU5FX0lURU1fTEFTVF9NT0RJRklFRF9CWV9BUFAQtQESHQoZ",
            "TElORV9JVEVNX0xJRkVUSU1FX0NMSUNLUxBfEiIKHkxJTkVfSVRFTV9MSUZF",
            "VElNRV9JTVBSRVNTSU9OUxBeEisKJ0xJTkVfSVRFTV9MSUZFVElNRV9WSUVX",
            "QUJMRV9JTVBSRVNTSU9OUxBgEhYKEkxJTkVfSVRFTV9NQUtFR09PRBBZEhIK",
            "DkxJTkVfSVRFTV9OQU1FEAISJAogTElORV9JVEVNX05PTl9DUERfQk9PS0VE",
            "X1JFVkVOVUUQYhIZChVMSU5FX0lURU1fT1BUSU1JWkFCTEUQWhIYChNMSU5F",
            "X0lURU1fUE9fTlVNQkVSEJ0FEiAKG0xJTkVfSVRFTV9QUklNQVJZX0dPQUxf",
            "VFlQRRDSARIlCiBMSU5FX0lURU1fUFJJTUFSWV9HT0FMX1RZUEVfTkFNRRDT",
            "ARIpCiVMSU5FX0lURU1fUFJJTUFSWV9HT0FMX1VOSVRTX0FCU09MVVRFEF0S",
            "LAonTElORV9JVEVNX1BSSU1BUllfR09BTF9VTklUU19QRVJDRU5UQUdFEIwD",
            "EiUKIExJTkVfSVRFTV9QUklNQVJZX0dPQUxfVU5JVF9UWVBFENABEioKJUxJ",
            "TkVfSVRFTV9QUklNQVJZX0dPQUxfVU5JVF9UWVBFX05BTUUQ0QESFgoSTElO",
            "RV9JVEVNX1BSSU9SSVRZEBgSIQocTElORV9JVEVNX1JFU0VSVkFUSU9OX1NU",
            "QVRVUxCwAhImCiFMSU5FX0lURU1fUkVTRVJWQVRJT05fU1RBVFVTX05BTUUQ",
            "sQISGgoVTElORV9JVEVNX1NBTEVTUEVSU09OEJ8FEiQKH0xJTkVfSVRFTV9T",
            "RUNPTkRBUllfU0FMRVNQRU9QTEUQoQUSJAofTElORV9JVEVNX1NFQ09OREFS",
            "WV9UUkFGRklDS0VSUxCjBRIYChRMSU5FX0lURU1fU1RBUlRfREFURRBSEh0K",
            "GUxJTkVfSVRFTV9TVEFSVF9EQVRFX1RJTUUQVBIZChRMSU5FX0lURU1fVFJB",
            "RkZJQ0tFUhClBRITCg5MSU5FX0lURU1fVFlQRRDBARIYChNMSU5FX0lURU1f",
            "VFlQRV9OQU1FEMIBEhwKF0xJTkVfSVRFTV9VTkxJTUlURURfRU5EELsBEiEK",
            "HUxJTkVfSVRFTV9WQUxVRV9DT1NUX1BFUl9VTklUEFgSIAobTElORV9JVEVN",
            "X1dFQl9QUk9QRVJUWV9DT0RFELMBEiEKHE1BU1RFUl9DT01QQU5JT05fQ1JF",
            "QVRJVkVfSUQQjAESIwoeTUFTVEVSX0NPTVBBTklPTl9DUkVBVElWRV9OQU1F",
            "EI0BEhMKDk1FRElBVElPTl9UWVBFEL0FEhgKE01FRElBVElPTl9UWVBFX05B",
            "TUUQ8gUSHwoaTUVESUFUSU9OX1lJRUxEX1BBUlRORVJfSUQQlQUSIQocTUVE",
            "SUFUSU9OX1lJRUxEX1BBUlRORVJfTkFNRRCWBRINCghNRVRST19JRBDFAxIP",
            "CgpNRVRST19OQU1FEMYDEhQKD01PQklMRV9BUFBfRlJFRRCAARIYChNNT0JJ",
            "TEVfQVBQX0lDT05fVVJMEIEBEhEKDU1PQklMRV9BUFBfSUQQexITCg9NT0JJ",
            "TEVfQVBQX05BTUUQfxIgChtNT0JJTEVfQVBQX09XTkVSU0hJUF9TVEFUVVMQ",
            "twISJQogTU9CSUxFX0FQUF9PV05FUlNISVBfU1RBVFVTX05BTUUQuAISFAoQ",
            "TU9CSUxFX0FQUF9TVE9SRRB9EhoKFU1PQklMRV9BUFBfU1RPUkVfTkFNRRD1",
            "ARIZChVNT0JJTEVfSU5WRU5UT1JZX1RZUEUQYxIeChpNT0JJTEVfSU5WRU5U",
            "T1JZX1RZUEVfTkFNRRAVEhkKFE1PQklMRV9SRU5ERVJJTkdfU0RLEIYFEh4K",
            "GU1PQklMRV9SRU5ERVJJTkdfU0RLX05BTUUQhwUSHQoYTU9CSUxFX1NES19N",
            "QUpPUl9WRVJTSU9OELQFEh0KGE1PQklMRV9TREtfTUlOT1JfVkVSU0lPThC1",
            "BRIcChdNT0JJTEVfU0RLX1ZFUlNJT05fTkFNRRCCARIOCgpNT05USF9ZRUFS",
            "EAYSGAoTTkFUSVZFX0FEX0ZPUk1BVF9JRBD/ARIaChVOQVRJVkVfQURfRk9S",
            "TUFUX05BTUUQ/gESFAoPTkFUSVZFX1NUWUxFX0lEEP0BEhYKEU5BVElWRV9T",
            "VFlMRV9OQU1FEPwBEhwKF05PX0ZJTExfUkVBU09OX0NBVEVHT1JZEMoEEiEK",
            "HE5PX0ZJTExfUkVBU09OX0NBVEVHT1JZX05BTUUQywQSHQoZT1BFUkFUSU5H",
            "X1NZU1RFTV9DQVRFR09SWRB1EiIKHk9QRVJBVElOR19TWVNURU1fQ0FURUdP",
            "UllfTkFNRRB2EiAKG09QRVJBVElOR19TWVNURU1fVkVSU0lPTl9JRBDuARIi",
            "Ch1PUEVSQVRJTkdfU1lTVEVNX1ZFUlNJT05fTkFNRRDtARIWChFPUFRJTUla",
            "QVRJT05fVFlQRRD/BBIbChZPUFRJTUlaQVRJT05fVFlQRV9OQU1FEIAFEhEK",
            "DE9SREVSX0FHRU5DWRCWARIUCg9PUkRFUl9BR0VOQ1lfSUQQlwESFQoQT1JE",
            "RVJfQk9PS0VEX0NQQxCYARIVChBPUkRFUl9CT09LRURfQ1BNEJkBEhoKFU9S",
            "REVSX0RFTElWRVJZX1NUQVRVUxDnARIfChpPUkRFUl9ERUxJVkVSWV9TVEFU",
            "VVNfTkFNRRDvARITCg5PUkRFUl9FTkRfREFURRCaARIYChNPUkRFUl9FTkRf",
            "REFURV9USU1FEJsBEhYKEU9SREVSX0VYVEVSTkFMX0lEEJwBEgwKCE9SREVS",
            "X0lEEAcSEQoMT1JERVJfTEFCRUxTEKoBEhQKD09SREVSX0xBQkVMX0lEUxCr",
            "ARIaChVPUkRFUl9MSUZFVElNRV9DTElDS1MQngESHwoaT1JERVJfTElGRVRJ",
            "TUVfSU1QUkVTU0lPTlMQnwESDgoKT1JERVJfTkFNRRAIEhQKD09SREVSX1BP",
            "X05VTUJFUhCgARIXChJPUkRFUl9QUk9HUkFNTUFUSUMQnQESFgoRT1JERVJf",
            "U0FMRVNQRVJTT04QoQESGQoUT1JERVJfU0FMRVNQRVJTT05fSUQQ9QQSIAob",
            "T1JERVJfU0VDT05EQVJZX1NBTEVTUEVPUExFEKQBEiMKHk9SREVSX1NFQ09O",
            "REFSWV9TQUxFU1BFT1BMRV9JRBClARIgChtPUkRFUl9TRUNPTkRBUllfVFJB",
            "RkZJQ0tFUlMQpgESIwoeT1JERVJfU0VDT05EQVJZX1RSQUZGSUNLRVJTX0lE",
            "EKcBEhUKEE9SREVSX1NUQVJUX0RBVEUQqAESGgoVT1JERVJfU1RBUlRfREFU",
            "RV9USU1FEKkBEhUKEE9SREVSX1RSQUZGSUNLRVIQogESGAoTT1JERVJfVFJB",
            "RkZJQ0tFUl9JRBCjARIYChNPUkRFUl9VTkxJTUlURURfRU5EEMsBEg4KCVBB",
            "R0VfUEFUSBD/AxIgChtQQUdFX1RJVExFX0FORF9TQ1JFRU5fQ0xBU1MQgAQS",
            "HwoaUEFHRV9USVRMRV9BTkRfU0NSRUVOX05BTUUQgQQSEAoMUExBQ0VNRU5U",
            "X0lEEHESFQoQUExBQ0VNRU5UX0lEX0FMTBCQARISCg5QTEFDRU1FTlRfTkFN",
            "RRByEhcKElBMQUNFTUVOVF9OQU1FX0FMTBCRARIVChBQTEFDRU1FTlRfU1RB",
            "VFVTEOoCEhoKFVBMQUNFTUVOVF9TVEFUVVNfTkFNRRDsAhIeChlQTEFDRU1F",
            "TlRfU1RBVFVTX05BTUVfQUxMEO0CEhMKDlBPU1RBTF9DT0RFX0lEEMcDEhUK",
            "EFBPU1RBTF9DT0RFX05BTUUQyAMSEAoLUFBJRF9TVEFUVVMQlgMSFQoQUFBJ",
            "RF9TVEFUVVNfTkFNRRCXAxIhChxQUkVESUNURURfVklFV0FCSUxJVFlfQlVD",
            "S0VUEPkEEiYKIVBSRURJQ1RFRF9WSUVXQUJJTElUWV9CVUNLRVRfTkFNRRD6",
            "BBIfChpQUkVTRU5URURfU0VDVVJFX1NJR05BTF9JRBDvAxIhChxQUkVTRU5U",
            "RURfU0VDVVJFX1NJR05BTF9OQU1FEPADEiQKH1BSSU1BUllfUEVSU09OQUxJ",
            "WkFUSU9OX0lEX1RZUEUQmAMSKQokUFJJTUFSWV9QRVJTT05BTElaQVRJT05f",
            "SURfVFlQRV9OQU1FEJkDEh4KFVBST0dSQU1NQVRJQ19CVVlFUl9JRBDwARoC",
            "CAESIAoXUFJPR1JBTU1BVElDX0JVWUVSX05BTUUQ8QEaAggBEhgKFFBST0dS",
            "QU1NQVRJQ19DSEFOTkVMEA0SHQoZUFJPR1JBTU1BVElDX0NIQU5ORUxfTkFN",
            "RRAOEjgKM1BVQkxJU0hFUl9QUk9WSURFRF9TSUdOQUxTX0FMTF9MRVZFTFNf",
            "RVhURVJOQUxfQ09ERRCaAxIuCilQVUJMSVNIRVJfUFJPVklERURfU0lHTkFM",
            "U19BTExfTEVWRUxTX0lEUxCiBBIvCipQVUJMSVNIRVJfUFJPVklERURfU0lH",
            "TkFMU19BTExfTEVWRUxTX05BTUUQnAMSLwoqUFVCTElTSEVSX1BST1ZJREVE",
            "X1NJR05BTFNfQUxMX0xFVkVMU19USUVSEJ0DEi8KKlBVQkxJU0hFUl9QUk9W",
            "SURFRF9TSUdOQUxTX0FMTF9MRVZFTFNfVFlQRRCeAxI3CjJQVUJMSVNIRVJf",
            "UFJPVklERURfU0lHTkFMU19ERUxJVkVSRURfRVhURVJOQUxfQ09ERRCpAxIt",
            "CihQVUJMSVNIRVJfUFJPVklERURfU0lHTkFMU19ERUxJVkVSRURfSURTEKEE",
            "Ei4KKVBVQkxJU0hFUl9QUk9WSURFRF9TSUdOQUxTX0RFTElWRVJFRF9OQU1F",
            "EKsDEi4KKVBVQkxJU0hFUl9QUk9WSURFRF9TSUdOQUxTX0RFTElWRVJFRF9U",
            "SUVSEKwDEi4KKVBVQkxJU0hFUl9QUk9WSURFRF9TSUdOQUxTX0RFTElWRVJF",
            "RF9UWVBFEK0DEjcKMlBVQkxJU0hFUl9QUk9WSURFRF9TSUdOQUxTX1RPUF9M",
            "RVZFTF9FWFRFUk5BTF9DT0RFEJ8DEiwKJ1BVQkxJU0hFUl9QUk9WSURFRF9T",
            "SUdOQUxTX1RPUF9MRVZFTF9JRBCgAxIuCilQVUJMSVNIRVJfUFJPVklERURf",
            "U0lHTkFMU19UT1BfTEVWRUxfTkFNRRChAxIuCilQVUJMSVNIRVJfUFJPVklE",
            "RURfU0lHTkFMU19UT1BfTEVWRUxfVElFUhCiAxIuCilQVUJMSVNIRVJfUFJP",
            "VklERURfU0lHTkFMU19UT1BfTEVWRUxfVFlQRRCjAxIvCipQVUJMSVNIRVJf",
            "UFJPVklERURfU0lHTkFMX0RBVEFfUFJPVklERVJfSUQQiAESMQosUFVCTElT",
            "SEVSX1BST1ZJREVEX1NJR05BTF9EQVRBX1BST1ZJREVSX05BTUUQiQESDgoJ",
            "UkVHSU9OX0lEEMkDEhAKC1JFR0lPTl9OQU1FEMoDEh0KGFJFSkVDVElPTl9D",
            "TEFTU19DQVRFR09SWRDOBBIiCh1SRUpFQ1RJT05fQ0xBU1NfQ0FURUdPUllf",
            "TkFNRRDPBBIbChZSRU5ERVJFRF9DUkVBVElWRV9TSVpFENcCEhcKElJFUVVF",
            "U1RFRF9BRF9TSVpFUxDgAhIRCgxSRVFVRVNUX1RZUEUQkgESFgoRUkVRVUVT",
            "VF9UWVBFX05BTUUQkwESJAofU0VSVkVSX1NJREVfVU5XUkFQUElOR19FTElH",
            "SUJMRRDVBBIYChNTRVJWSU5HX1JFU1RSSUNUSU9OEPcEEh0KGFNFUlZJTkdf",
            "UkVTVFJJQ1RJT05fTkFNRRD4BBIJCgRTSVRFEIMDEhEKDFRBUkdFVElOR19J",
            "RBDoARITCg5UQVJHRVRJTkdfTkFNRRDpARITCg5UQVJHRVRJTkdfVFlQRRCB",
            "AxIYChNUQVJHRVRJTkdfVFlQRV9OQU1FEIIDEhoKFVRISVJEX1BBUlRZX0lE",
            "X1NUQVRVUxCSAxIfChpUSElSRF9QQVJUWV9JRF9TVEFUVVNfTkFNRRCTAxIS",
            "Cg1UT1BJQ1NfU1RBVFVTEPgDEhcKElRPUElDU19TVEFUVVNfTkFNRRD5AxIX",
            "ChJUT1BfUFJJVkFURV9ET01BSU4QvAMSEwoOVFJBRkZJQ19TT1VSQ0UQhAMS",
            "GAoTVFJBRkZJQ19TT1VSQ0VfTkFNRRCFAxIcChdVTklGSUVEX1BSSUNJTkdf",
            "UlVMRV9JRBCJAxIeChlVTklGSUVEX1BSSUNJTkdfUlVMRV9OQU1FEIoDEggK",
            "A1VSTBD6AxILCgZVUkxfSUQQ+wMSJQogVVNFUl9NRVNTQUdFU19FTlRJVExF",
            "TUVOVF9TT1VSQ0UQ+wQSKgolVVNFUl9NRVNTQUdFU19FTlRJVExFTUVOVF9T",
            "T1VSQ0VfTkFNRRD8BBIvCipVU0VSX01FU1NBR0VTX09QRVJBVElOR19TWVNU",
            "RU1fQ1JJVEVSSUFfSUQQ/QQSMQosVVNFUl9NRVNTQUdFU19PUEVSQVRJTkdf",
            "U1lTVEVNX0NSSVRFUklBX05BTUUQ/gQSEQoMVkFTVF9WRVJTSU9OEKoEEhYK",
            "EVZBU1RfVkVSU0lPTl9OQU1FEKsEEhgKE1ZJREVPX0FEX0JSRUFLX1RZUEUQ",
            "rAQSHQoYVklERU9fQURfQlJFQUtfVFlQRV9OQU1FEK0EEhYKEVZJREVPX0FE",
            "X0RVUkFUSU9OEMIDEhoKFVZJREVPX0FEX0ZPUk1BVFNfUlVMRRCxBBIdChhW",
            "SURFT19BRF9GT1JNQVRTX1JVTEVfSUQQsAQSHgoZVklERU9fQURfUkVRVUVT",
            "VF9EVVJBVElPThCuBBIsCidWSURFT19BRF9SRVFVRVNUX0RVUkFUSU9OX01J",
            "RFBPSU5UX05BTUUQ7wUSIwoeVklERU9fQURfUkVRVUVTVF9EVVJBVElPTl9O",
            "QU1FEK8EEhwKF1ZJREVPX0FEX1JFUVVFU1RfU09VUkNFELYDEiEKHFZJREVP",
            "X0FEX1JFUVVFU1RfU09VUkNFX05BTUUQtwMSEgoNVklERU9fQURfVFlQRRCw",
            "AxIXChJWSURFT19BRF9UWVBFX05BTUUQsQMSHwoaVklERU9fQ09OVElOVU9V",
            "U19QTEFZX1RZUEUQ0QUSJAofVklERU9fQ09OVElOVU9VU19QTEFZX1RZUEVf",
            "TkFNRRDSBRIcChdWSURFT19GQUxMQkFDS19QT1NJVElPThCSBBIdChhWSURF",
            "T19NRUFTVVJFTUVOVF9TT1VSQ0UQ2QQSIgodVklERU9fTUVBU1VSRU1FTlRf",
            "U09VUkNFX05BTUUQ2gQSEAoLVklERU9fUExDTVQQrAESFQoQVklERU9fUExD",
            "TVRfTkFNRRCtARIaChVWSURFT19QT1NJVElPTl9JTl9QT0QQmgQSGgoVVklE",
            "RU9fUE9TSVRJT05fT0ZfUE9EEJsEEhYKEVZJREVPX1NES19WRVJTSU9OELgD",
            "EhsKFlZJREVPX1NES19WRVJTSU9OX05BTUUQuQMSGAoTVklERU9fU1RJVENI",
            "RVJfVFlQRRDwBRIdChhWSURFT19TVElUQ0hFUl9UWVBFX05BTUUQ8QUSCAoE",
            "V0VFSxAFEhsKFllJRUxEX0dST1VQX0JVWUVSX05BTUUQuAESHwoaWUlFTERf",
            "R1JPVVBfQlVZRVJfVEFHX05BTUUQ8wQSEwoOWUlFTERfR1JPVVBfSUQQtgES",
            "FQoQWUlFTERfR1JPVVBfTkFNRRC3ARIfChpZT1VUVUJFX0FEX0RVUkFUSU9O",
            "X0JVQ0tFVBCuAxIkCh9ZT1VUVUJFX0FEX0RVUkFUSU9OX0JVQ0tFVF9OQU1F",
            "EK8DEhQKD1lPVVRVQkVfQURfVFlQRRCPAxIZChRZT1VUVUJFX0FEX1RZUEVf",
            "TkFNRRCQAxInCiJMSU5FX0lURU1fQ1VTVE9NX0ZJRUxEXzBfT1BUSU9OX0lE",
            "EJBOEicKIkxJTkVfSVRFTV9DVVNUT01fRklFTERfMV9PUFRJT05fSUQQkU4S",
            "JwoiTElORV9JVEVNX0NVU1RPTV9GSUVMRF8yX09QVElPTl9JRBCSThInCiJM",
            "SU5FX0lURU1fQ1VTVE9NX0ZJRUxEXzNfT1BUSU9OX0lEEJNOEicKIkxJTkVf",
            "SVRFTV9DVVNUT01fRklFTERfNF9PUFRJT05fSUQQlE4SJwoiTElORV9JVEVN",
            "X0NVU1RPTV9GSUVMRF81X09QVElPTl9JRBCVThInCiJMSU5FX0lURU1fQ1VT",
            "VE9NX0ZJRUxEXzZfT1BUSU9OX0lEEJZOEicKIkxJTkVfSVRFTV9DVVNUT01f",
            "RklFTERfN19PUFRJT05fSUQQl04SJwoiTElORV9JVEVNX0NVU1RPTV9GSUVM",
            "RF84X09QVElPTl9JRBCYThInCiJMSU5FX0lURU1fQ1VTVE9NX0ZJRUxEXzlf",
            "T1BUSU9OX0lEEJlOEigKI0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTBfT1BU",
            "SU9OX0lEEJpOEigKI0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTFfT1BUSU9O",
            "X0lEEJtOEigKI0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTJfT1BUSU9OX0lE",
            "EJxOEigKI0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTNfT1BUSU9OX0lEEJ1O",
            "EigKI0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTRfT1BUSU9OX0lEEJ5OEiMK",
            "HkxJTkVfSVRFTV9DVVNUT01fRklFTERfMF9WQUxVRRD4VRIjCh5MSU5FX0lU",
            "RU1fQ1VTVE9NX0ZJRUxEXzFfVkFMVUUQ+VUSIwoeTElORV9JVEVNX0NVU1RP",
            "TV9GSUVMRF8yX1ZBTFVFEPpVEiMKHkxJTkVfSVRFTV9DVVNUT01fRklFTERf",
            "M19WQUxVRRD7VRIjCh5MSU5FX0lURU1fQ1VTVE9NX0ZJRUxEXzRfVkFMVUUQ",
            "/FUSIwoeTElORV9JVEVNX0NVU1RPTV9GSUVMRF81X1ZBTFVFEP1VEiMKHkxJ",
            "TkVfSVRFTV9DVVNUT01fRklFTERfNl9WQUxVRRD+VRIjCh5MSU5FX0lURU1f",
            "Q1VTVE9NX0ZJRUxEXzdfVkFMVUUQ/1USIwoeTElORV9JVEVNX0NVU1RPTV9G",
            "SUVMRF84X1ZBTFVFEIBWEiMKHkxJTkVfSVRFTV9DVVNUT01fRklFTERfOV9W",
            "QUxVRRCBVhIkCh9MSU5FX0lURU1fQ1VTVE9NX0ZJRUxEXzEwX1ZBTFVFEIJW",
            "EiQKH0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTFfVkFMVUUQg1YSJAofTElO",
            "RV9JVEVNX0NVU1RPTV9GSUVMRF8xMl9WQUxVRRCEVhIkCh9MSU5FX0lURU1f",
            "Q1VTVE9NX0ZJRUxEXzEzX1ZBTFVFEIVWEiQKH0xJTkVfSVRFTV9DVVNUT01f",
            "RklFTERfMTRfVkFMVUUQhlYSIwoeT1JERVJfQ1VTVE9NX0ZJRUxEXzBfT1BU",
            "SU9OX0lEEOBdEiMKHk9SREVSX0NVU1RPTV9GSUVMRF8xX09QVElPTl9JRBDh",
            "XRIjCh5PUkRFUl9DVVNUT01fRklFTERfMl9PUFRJT05fSUQQ4l0SIwoeT1JE",
            "RVJfQ1VTVE9NX0ZJRUxEXzNfT1BUSU9OX0lEEONdEiMKHk9SREVSX0NVU1RP",
            "TV9GSUVMRF80X09QVElPTl9JRBDkXRIjCh5PUkRFUl9DVVNUT01fRklFTERf",
            "NV9PUFRJT05fSUQQ5V0SIwoeT1JERVJfQ1VTVE9NX0ZJRUxEXzZfT1BUSU9O",
            "X0lEEOZdEiMKHk9SREVSX0NVU1RPTV9GSUVMRF83X09QVElPTl9JRBDnXRIj",
            "Ch5PUkRFUl9DVVNUT01fRklFTERfOF9PUFRJT05fSUQQ6F0SIwoeT1JERVJf",
            "Q1VTVE9NX0ZJRUxEXzlfT1BUSU9OX0lEEOldEiQKH09SREVSX0NVU1RPTV9G",
            "SUVMRF8xMF9PUFRJT05fSUQQ6l0SJAofT1JERVJfQ1VTVE9NX0ZJRUxEXzEx",
            "X09QVElPTl9JRBDrXRIkCh9PUkRFUl9DVVNUT01fRklFTERfMTJfT1BUSU9O",
            "X0lEEOxdEiQKH09SREVSX0NVU1RPTV9GSUVMRF8xM19PUFRJT05fSUQQ7V0S",
            "JAofT1JERVJfQ1VTVE9NX0ZJRUxEXzE0X09QVElPTl9JRBDuXRIfChpPUkRF",
            "Ul9DVVNUT01fRklFTERfMF9WQUxVRRDIZRIfChpPUkRFUl9DVVNUT01fRklF",
            "TERfMV9WQUxVRRDJZRIfChpPUkRFUl9DVVNUT01fRklFTERfMl9WQUxVRRDK",
            "ZRIfChpPUkRFUl9DVVNUT01fRklFTERfM19WQUxVRRDLZRIfChpPUkRFUl9D",
            "VVNUT01fRklFTERfNF9WQUxVRRDMZRIfChpPUkRFUl9DVVNUT01fRklFTERf",
            "NV9WQUxVRRDNZRIfChpPUkRFUl9DVVNUT01fRklFTERfNl9WQUxVRRDOZRIf",
            "ChpPUkRFUl9DVVNUT01fRklFTERfN19WQUxVRRDPZRIfChpPUkRFUl9DVVNU",
            "T01fRklFTERfOF9WQUxVRRDQZRIfChpPUkRFUl9DVVNUT01fRklFTERfOV9W",
            "QUxVRRDRZRIgChtPUkRFUl9DVVNUT01fRklFTERfMTBfVkFMVUUQ0mUSIAob",
            "T1JERVJfQ1VTVE9NX0ZJRUxEXzExX1ZBTFVFENNlEiAKG09SREVSX0NVU1RP",
            "TV9GSUVMRF8xMl9WQUxVRRDUZRIgChtPUkRFUl9DVVNUT01fRklFTERfMTNf",
            "VkFMVUUQ1WUSIAobT1JERVJfQ1VTVE9NX0ZJRUxEXzE0X1ZBTFVFENZlEiYK",
            "IUNSRUFUSVZFX0NVU1RPTV9GSUVMRF8wX09QVElPTl9JRBCwbRImCiFDUkVB",
            "VElWRV9DVVNUT01fRklFTERfMV9PUFRJT05fSUQQsW0SJgohQ1JFQVRJVkVf",
            "Q1VTVE9NX0ZJRUxEXzJfT1BUSU9OX0lEELJtEiYKIUNSRUFUSVZFX0NVU1RP",
            "TV9GSUVMRF8zX09QVElPTl9JRBCzbRImCiFDUkVBVElWRV9DVVNUT01fRklF",
            "TERfNF9PUFRJT05fSUQQtG0SJgohQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzVf",
            "T1BUSU9OX0lEELVtEiYKIUNSRUFUSVZFX0NVU1RPTV9GSUVMRF82X09QVElP",
            "Tl9JRBC2bRImCiFDUkVBVElWRV9DVVNUT01fRklFTERfN19PUFRJT05fSUQQ",
            "t20SJgohQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzhfT1BUSU9OX0lEELhtEiYK",
            "IUNSRUFUSVZFX0NVU1RPTV9GSUVMRF85X09QVElPTl9JRBC5bRInCiJDUkVB",
            "VElWRV9DVVNUT01fRklFTERfMTBfT1BUSU9OX0lEELptEicKIkNSRUFUSVZF",
            "X0NVU1RPTV9GSUVMRF8xMV9PUFRJT05fSUQQu20SJwoiQ1JFQVRJVkVfQ1VT",
            "VE9NX0ZJRUxEXzEyX09QVElPTl9JRBC8bRInCiJDUkVBVElWRV9DVVNUT01f",
            "RklFTERfMTNfT1BUSU9OX0lEEL1tEicKIkNSRUFUSVZFX0NVU1RPTV9GSUVM",
            "RF8xNF9PUFRJT05fSUQQvm0SIgodQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzBf",
            "VkFMVUUQmHUSIgodQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzFfVkFMVUUQmXUS",
            "IgodQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzJfVkFMVUUQmnUSIgodQ1JFQVRJ",
            "VkVfQ1VTVE9NX0ZJRUxEXzNfVkFMVUUQm3USIgodQ1JFQVRJVkVfQ1VTVE9N",
            "X0ZJRUxEXzRfVkFMVUUQnHUSIgodQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzVf",
            "VkFMVUUQnXUSIgodQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzZfVkFMVUUQnnUS",
            "IgodQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzdfVkFMVUUQn3USIgodQ1JFQVRJ",
            "VkVfQ1VTVE9NX0ZJRUxEXzhfVkFMVUUQoHUSIgodQ1JFQVRJVkVfQ1VTVE9N",
            "X0ZJRUxEXzlfVkFMVUUQoXUSIwoeQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzEw",
            "X1ZBTFVFEKJ1EiMKHkNSRUFUSVZFX0NVU1RPTV9GSUVMRF8xMV9WQUxVRRCj",
            "dRIjCh5DUkVBVElWRV9DVVNUT01fRklFTERfMTJfVkFMVUUQpHUSIwoeQ1JF",
            "QVRJVkVfQ1VTVE9NX0ZJRUxEXzEzX1ZBTFVFEKV1EiMKHkNSRUFUSVZFX0NV",
            "U1RPTV9GSUVMRF8xNF9WQUxVRRCmdRIwCitCQUNLRklMTF9MSU5FX0lURU1f",
            "Q1VTVE9NX0ZJRUxEXzBfT1BUSU9OX0lEEIB9EjAKK0JBQ0tGSUxMX0xJTkVf",
            "SVRFTV9DVVNUT01fRklFTERfMV9PUFRJT05fSUQQgX0SMAorQkFDS0ZJTExf",
            "TElORV9JVEVNX0NVU1RPTV9GSUVMRF8yX09QVElPTl9JRBCCfRIwCitCQUNL",
            "RklMTF9MSU5FX0lURU1fQ1VTVE9NX0ZJRUxEXzNfT1BUSU9OX0lEEIN9EjAK",
            "K0JBQ0tGSUxMX0xJTkVfSVRFTV9DVVNUT01fRklFTERfNF9PUFRJT05fSUQQ",
            "hH0SMAorQkFDS0ZJTExfTElORV9JVEVNX0NVU1RPTV9GSUVMRF81X09QVElP",
            "Tl9JRBCFfRIwCitCQUNLRklMTF9MSU5FX0lURU1fQ1VTVE9NX0ZJRUxEXzZf",
            "T1BUSU9OX0lEEIZ9EjAKK0JBQ0tGSUxMX0xJTkVfSVRFTV9DVVNUT01fRklF",
            "TERfN19PUFRJT05fSUQQh30SMAorQkFDS0ZJTExfTElORV9JVEVNX0NVU1RP",
            "TV9GSUVMRF84X09QVElPTl9JRBCIfRIwCitCQUNLRklMTF9MSU5FX0lURU1f",
            "Q1VTVE9NX0ZJRUxEXzlfT1BUSU9OX0lEEIl9EjEKLEJBQ0tGSUxMX0xJTkVf",
            "SVRFTV9DVVNUT01fRklFTERfMTBfT1BUSU9OX0lEEIp9EjEKLEJBQ0tGSUxM",
            "X0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTFfT1BUSU9OX0lEEIt9EjEKLEJB",
            "Q0tGSUxMX0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTJfT1BUSU9OX0lEEIx9",
            "EjEKLEJBQ0tGSUxMX0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTNfT1BUSU9O",
            "X0lEEI19EjEKLEJBQ0tGSUxMX0xJTkVfSVRFTV9DVVNUT01fRklFTERfMTRf",
            "T1BUSU9OX0lEEI59Ei0KJ0JBQ0tGSUxMX0xJTkVfSVRFTV9DVVNUT01fRklF",
            "TERfMF9WQUxVRRDohAESLQonQkFDS0ZJTExfTElORV9JVEVNX0NVU1RPTV9G",
            "SUVMRF8xX1ZBTFVFEOmEARItCidCQUNLRklMTF9MSU5FX0lURU1fQ1VTVE9N",
            "X0ZJRUxEXzJfVkFMVUUQ6oQBEi0KJ0JBQ0tGSUxMX0xJTkVfSVRFTV9DVVNU",
            "T01fRklFTERfM19WQUxVRRDrhAESLQonQkFDS0ZJTExfTElORV9JVEVNX0NV",
            "U1RPTV9GSUVMRF80X1ZBTFVFEOyEARItCidCQUNLRklMTF9MSU5FX0lURU1f",
            "Q1VTVE9NX0ZJRUxEXzVfVkFMVUUQ7YQBEi0KJ0JBQ0tGSUxMX0xJTkVfSVRF",
            "TV9DVVNUT01fRklFTERfNl9WQUxVRRDuhAESLQonQkFDS0ZJTExfTElORV9J",
            "VEVNX0NVU1RPTV9GSUVMRF83X1ZBTFVFEO+EARItCidCQUNLRklMTF9MSU5F",
            "X0lURU1fQ1VTVE9NX0ZJRUxEXzhfVkFMVUUQ8IQBEi0KJ0JBQ0tGSUxMX0xJ",
            "TkVfSVRFTV9DVVNUT01fRklFTERfOV9WQUxVRRDxhAESLgooQkFDS0ZJTExf",
            "TElORV9JVEVNX0NVU1RPTV9GSUVMRF8xMF9WQUxVRRDyhAESLgooQkFDS0ZJ",
            "TExfTElORV9JVEVNX0NVU1RPTV9GSUVMRF8xMV9WQUxVRRDzhAESLgooQkFD",
            "S0ZJTExfTElORV9JVEVNX0NVU1RPTV9GSUVMRF8xMl9WQUxVRRD0hAESLgoo",
            "QkFDS0ZJTExfTElORV9JVEVNX0NVU1RPTV9GSUVMRF8xM19WQUxVRRD1hAES",
            "LgooQkFDS0ZJTExfTElORV9JVEVNX0NVU1RPTV9GSUVMRF8xNF9WQUxVRRD2",
            "hAESLQonQkFDS0ZJTExfT1JERVJfQ1VTVE9NX0ZJRUxEXzBfT1BUSU9OX0lE",
            "ENCMARItCidCQUNLRklMTF9PUkRFUl9DVVNUT01fRklFTERfMV9PUFRJT05f",
            "SUQQ0YwBEi0KJ0JBQ0tGSUxMX09SREVSX0NVU1RPTV9GSUVMRF8yX09QVElP",
            "Tl9JRBDSjAESLQonQkFDS0ZJTExfT1JERVJfQ1VTVE9NX0ZJRUxEXzNfT1BU",
            "SU9OX0lEENOMARItCidCQUNLRklMTF9PUkRFUl9DVVNUT01fRklFTERfNF9P",
            "UFRJT05fSUQQ1IwBEi0KJ0JBQ0tGSUxMX09SREVSX0NVU1RPTV9GSUVMRF81",
            "X09QVElPTl9JRBDVjAESLQonQkFDS0ZJTExfT1JERVJfQ1VTVE9NX0ZJRUxE",
            "XzZfT1BUSU9OX0lEENaMARItCidCQUNLRklMTF9PUkRFUl9DVVNUT01fRklF",
            "TERfN19PUFRJT05fSUQQ14wBEi0KJ0JBQ0tGSUxMX09SREVSX0NVU1RPTV9G",
            "SUVMRF84X09QVElPTl9JRBDYjAESLQonQkFDS0ZJTExfT1JERVJfQ1VTVE9N",
            "X0ZJRUxEXzlfT1BUSU9OX0lEENmMARIuCihCQUNLRklMTF9PUkRFUl9DVVNU",
            "T01fRklFTERfMTBfT1BUSU9OX0lEENqMARIuCihCQUNLRklMTF9PUkRFUl9D",
            "VVNUT01fRklFTERfMTFfT1BUSU9OX0lEENuMARIuCihCQUNLRklMTF9PUkRF",
            "Ul9DVVNUT01fRklFTERfMTJfT1BUSU9OX0lEENyMARIuCihCQUNLRklMTF9P",
            "UkRFUl9DVVNUT01fRklFTERfMTNfT1BUSU9OX0lEEN2MARIuCihCQUNLRklM",
            "TF9PUkRFUl9DVVNUT01fRklFTERfMTRfT1BUSU9OX0lEEN6MARIpCiNCQUNL",
            "RklMTF9PUkRFUl9DVVNUT01fRklFTERfMF9WQUxVRRC4lAESKQojQkFDS0ZJ",
            "TExfT1JERVJfQ1VTVE9NX0ZJRUxEXzFfVkFMVUUQuZQBEikKI0JBQ0tGSUxM",
            "X09SREVSX0NVU1RPTV9GSUVMRF8yX1ZBTFVFELqUARIpCiNCQUNLRklMTF9P",
            "UkRFUl9DVVNUT01fRklFTERfM19WQUxVRRC7lAESKQojQkFDS0ZJTExfT1JE",
            "RVJfQ1VTVE9NX0ZJRUxEXzRfVkFMVUUQvJQBEikKI0JBQ0tGSUxMX09SREVS",
            "X0NVU1RPTV9GSUVMRF81X1ZBTFVFEL2UARIpCiNCQUNLRklMTF9PUkRFUl9D",
            "VVNUT01fRklFTERfNl9WQUxVRRC+lAESKQojQkFDS0ZJTExfT1JERVJfQ1VT",
            "VE9NX0ZJRUxEXzdfVkFMVUUQv5QBEikKI0JBQ0tGSUxMX09SREVSX0NVU1RP",
            "TV9GSUVMRF84X1ZBTFVFEMCUARIpCiNCQUNLRklMTF9PUkRFUl9DVVNUT01f",
            "RklFTERfOV9WQUxVRRDBlAESKgokQkFDS0ZJTExfT1JERVJfQ1VTVE9NX0ZJ",
            "RUxEXzEwX1ZBTFVFEMKUARIqCiRCQUNLRklMTF9PUkRFUl9DVVNUT01fRklF",
            "TERfMTFfVkFMVUUQw5QBEioKJEJBQ0tGSUxMX09SREVSX0NVU1RPTV9GSUVM",
            "RF8xMl9WQUxVRRDElAESKgokQkFDS0ZJTExfT1JERVJfQ1VTVE9NX0ZJRUxE",
            "XzEzX1ZBTFVFEMWUARIqCiRCQUNLRklMTF9PUkRFUl9DVVNUT01fRklFTERf",
            "MTRfVkFMVUUQxpQBEjAKKkJBQ0tGSUxMX0NSRUFUSVZFX0NVU1RPTV9GSUVM",
            "RF8wX09QVElPTl9JRBCgnAESMAoqQkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9N",
            "X0ZJRUxEXzFfT1BUSU9OX0lEEKGcARIwCipCQUNLRklMTF9DUkVBVElWRV9D",
            "VVNUT01fRklFTERfMl9PUFRJT05fSUQQopwBEjAKKkJBQ0tGSUxMX0NSRUFU",
            "SVZFX0NVU1RPTV9GSUVMRF8zX09QVElPTl9JRBCjnAESMAoqQkFDS0ZJTExf",
            "Q1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzRfT1BUSU9OX0lEEKScARIwCipCQUNL",
            "RklMTF9DUkVBVElWRV9DVVNUT01fRklFTERfNV9PUFRJT05fSUQQpZwBEjAK",
            "KkJBQ0tGSUxMX0NSRUFUSVZFX0NVU1RPTV9GSUVMRF82X09QVElPTl9JRBCm",
            "nAESMAoqQkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzdfT1BUSU9O",
            "X0lEEKecARIwCipCQUNLRklMTF9DUkVBVElWRV9DVVNUT01fRklFTERfOF9P",
            "UFRJT05fSUQQqJwBEjAKKkJBQ0tGSUxMX0NSRUFUSVZFX0NVU1RPTV9GSUVM",
            "RF85X09QVElPTl9JRBCpnAESMQorQkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9N",
            "X0ZJRUxEXzEwX09QVElPTl9JRBCqnAESMQorQkFDS0ZJTExfQ1JFQVRJVkVf",
            "Q1VTVE9NX0ZJRUxEXzExX09QVElPTl9JRBCrnAESMQorQkFDS0ZJTExfQ1JF",
            "QVRJVkVfQ1VTVE9NX0ZJRUxEXzEyX09QVElPTl9JRBCsnAESMQorQkFDS0ZJ",
            "TExfQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzEzX09QVElPTl9JRBCtnAESMQor",
            "QkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzE0X09QVElPTl9JRBCu",
            "nAESLAomQkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzBfVkFMVUUQ",
            "iKQBEiwKJkJBQ0tGSUxMX0NSRUFUSVZFX0NVU1RPTV9GSUVMRF8xX1ZBTFVF",
            "EImkARIsCiZCQUNLRklMTF9DUkVBVElWRV9DVVNUT01fRklFTERfMl9WQUxV",
            "RRCKpAESLAomQkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzNfVkFM",
            "VUUQi6QBEiwKJkJBQ0tGSUxMX0NSRUFUSVZFX0NVU1RPTV9GSUVMRF80X1ZB",
            "TFVFEIykARIsCiZCQUNLRklMTF9DUkVBVElWRV9DVVNUT01fRklFTERfNV9W",
            "QUxVRRCNpAESLAomQkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxEXzZf",
            "VkFMVUUQjqQBEiwKJkJBQ0tGSUxMX0NSRUFUSVZFX0NVU1RPTV9GSUVMRF83",
            "X1ZBTFVFEI+kARIsCiZCQUNLRklMTF9DUkVBVElWRV9DVVNUT01fRklFTERf",
            "OF9WQUxVRRCQpAESLAomQkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9NX0ZJRUxE",
            "XzlfVkFMVUUQkaQBEi0KJ0JBQ0tGSUxMX0NSRUFUSVZFX0NVU1RPTV9GSUVM",
            "RF8xMF9WQUxVRRCSpAESLQonQkFDS0ZJTExfQ1JFQVRJVkVfQ1VTVE9NX0ZJ",
            "RUxEXzExX1ZBTFVFEJOkARItCidCQUNLRklMTF9DUkVBVElWRV9DVVNUT01f",
            "RklFTERfMTJfVkFMVUUQlKQBEi0KJ0JBQ0tGSUxMX0NSRUFUSVZFX0NVU1RP",
            "TV9GSUVMRF8xM19WQUxVRRCVpAESLQonQkFDS0ZJTExfQ1JFQVRJVkVfQ1VT",
            "VE9NX0ZJRUxEXzE0X1ZBTFVFEJakARIhChtDVVNUT01fRElNRU5TSU9OXzBf",
            "VkFMVUVfSUQQoI0GEiEKG0NVU1RPTV9ESU1FTlNJT05fMV9WQUxVRV9JRBCh",
            "jQYSIQobQ1VTVE9NX0RJTUVOU0lPTl8yX1ZBTFVFX0lEEKKNBhIhChtDVVNU",
            "T01fRElNRU5TSU9OXzNfVkFMVUVfSUQQo40GEiEKG0NVU1RPTV9ESU1FTlNJ",
            "T05fNF9WQUxVRV9JRBCkjQYSIQobQ1VTVE9NX0RJTUVOU0lPTl81X1ZBTFVF",
            "X0lEEKWNBhIhChtDVVNUT01fRElNRU5TSU9OXzZfVkFMVUVfSUQQpo0GEiEK",
            "G0NVU1RPTV9ESU1FTlNJT05fN19WQUxVRV9JRBCnjQYSIQobQ1VTVE9NX0RJ",
            "TUVOU0lPTl84X1ZBTFVFX0lEEKiNBhIhChtDVVNUT01fRElNRU5TSU9OXzlf",
            "VkFMVUVfSUQQqY0GEh4KGENVU1RPTV9ESU1FTlNJT05fMF9WQUxVRRCIlQYS",
            "HgoYQ1VTVE9NX0RJTUVOU0lPTl8xX1ZBTFVFEImVBhIeChhDVVNUT01fRElN",
            "RU5TSU9OXzJfVkFMVUUQipUGEh4KGENVU1RPTV9ESU1FTlNJT05fM19WQUxV",
            "RRCLlQYSHgoYQ1VTVE9NX0RJTUVOU0lPTl80X1ZBTFVFEIyVBhIeChhDVVNU",
            "T01fRElNRU5TSU9OXzVfVkFMVUUQjZUGEh4KGENVU1RPTV9ESU1FTlNJT05f",
            "Nl9WQUxVRRCOlQYSHgoYQ1VTVE9NX0RJTUVOU0lPTl83X1ZBTFVFEI+VBhIe",
            "ChhDVVNUT01fRElNRU5TSU9OXzhfVkFMVUUQkJUGEh4KGENVU1RPTV9ESU1F",
            "TlNJT05fOV9WQUxVRRCRlQYaAhABIp+IAQoGTWV0cmljEhYKEk1FVFJJQ19V",
            "TlNQRUNJRklFRBAAEhEKDEFDVElWRV9VU0VSUxDfARIpCiRBQ1RJVkVfVklF",
            "V19BVURJQkxFX0FUX1NUQVJUX1BFUkNFTlQQvQMSJAofQUNUSVZFX1ZJRVdf",
            "QVVESUJMRV9JTVBSRVNTSU9OUxCTBRIzCi5BQ1RJVkVfVklFV19BVURJQkxF",
            "X1RIUk9VR0hfQ09NUExFVElPTl9QRVJDRU5UEL4DEjcKMkFDVElWRV9WSUVX",
            "X0FVRElCTEVfVEhST1VHSF9GSVJTVF9RVUFSVElMRV9QRVJDRU5UEL8DEjEK",
            "LEFDVElWRV9WSUVXX0FVRElCTEVfVEhST1VHSF9NSURQT0lOVF9QRVJDRU5U",
            "EMADEjcKMkFDVElWRV9WSUVXX0FVRElCTEVfVEhST1VHSF9USElSRF9RVUFS",
            "VElMRV9QRVJDRU5UEMEDEioKJUFDVElWRV9WSUVXX0FVRElPX0VOQUJMRURf",
            "SU1QUkVTU0lPTlMQlAUSLQooQUNUSVZFX1ZJRVdfQVVESU9fTUVBU1VSQUJM",
            "RV9JTVBSRVNTSU9OUxCVBRIlCiFBQ1RJVkVfVklFV19BVkVSQUdFX1ZJRVdB",
            "QkxFX1RJTUUQPRIkCiBBQ1RJVkVfVklFV19FTElHSUJMRV9JTVBSRVNTSU9O",
            "UxA6EjIKLUFDVElWRV9WSUVXX0VWRVJfQVVESUJMRV9CQUNLR1JPVU5ERURf",
            "UEVSQ0VOVBDCAxIlCiBBQ1RJVkVfVklFV19FVkVSX0FVRElCTEVfUEVSQ0VO",
            "VBDDAxIqCiVBQ1RJVkVfVklFV19FVkVSX0JBQ0tHUk9VTkRFRF9QRVJDRU5U",
            "EMQDEiMKHkFDVElWRV9WSUVXX0VWRVJfTVVURURfUEVSQ0VOVBDFAxI/CjpB",
            "Q1RJVkVfVklFV19JTVBSRVNTSU9OU19BVURJQkxFX0FORF9WSVNJQkxJRV9B",
            "VF9DT01QTEVUSU9OEJsDEiYKIkFDVElWRV9WSUVXX01FQVNVUkFCTEVfSU1Q",
            "UkVTU0lPTlMQORIrCidBQ1RJVkVfVklFV19NRUFTVVJBQkxFX0lNUFJFU1NJ",
            "T05TX1JBVEUQPBIrCiZBQ1RJVkVfVklFV19OT05fTUVBU1VSQUJMRV9JTVBS",
            "RVNTSU9OUxCWBRIpCiRBQ1RJVkVfVklFV19OT05fVklFV0FCTEVfSU1QUkVT",
            "U0lPTlMQlwUSNgoxQUNUSVZFX1ZJRVdfTk9OX1ZJRVdBQkxFX0lNUFJFU1NJ",
            "T05TX0RJU1RSSUJVVElPThCYBRIsCidBQ1RJVkVfVklFV19QRVJDRU5UX0FV",
            "RElCTEVfSU1QUkVTU0lPTlMQmQUSJgohQUNUSVZFX1ZJRVdfUExVU19NRUFT",
            "VVJBQkxFX0NPVU5UEMYDEhgKE0FDVElWRV9WSUVXX1JFVkVOVUUQngMSNgox",
            "QUNUSVZFX1ZJRVdfVU5ERVRFUk1JTkVEX0lNUFJFU1NJT05TX0RJU1RSSUJV",
            "VElPThCaBRIkCiBBQ1RJVkVfVklFV19WSUVXQUJMRV9JTVBSRVNTSU9OUxA4",
            "EjIKLUFDVElWRV9WSUVXX1ZJRVdBQkxFX0lNUFJFU1NJT05TX0RJU1RSSUJV",
            "VElPThCbBRIpCiVBQ1RJVkVfVklFV19WSUVXQUJMRV9JTVBSRVNTSU9OU19S",
            "QVRFEDsSLQopQURTRU5TRV9BQ1RJVkVfVklFV19BVkVSQUdFX1ZJRVdBQkxF",
            "X1RJTUUQSRIsCihBRFNFTlNFX0FDVElWRV9WSUVXX0VMSUdJQkxFX0lNUFJF",
            "U1NJT05TEEYSLgoqQURTRU5TRV9BQ1RJVkVfVklFV19NRUFTVVJBQkxFX0lN",
            "UFJFU1NJT05TEEUSMwovQURTRU5TRV9BQ1RJVkVfVklFV19NRUFTVVJBQkxF",
            "X0lNUFJFU1NJT05TX1JBVEUQSBIzCi5BRFNFTlNFX0FDVElWRV9WSUVXX05P",
            "Tl9NRUFTVVJBQkxFX0lNUFJFU1NJT05TEIIFEjEKLEFEU0VOU0VfQUNUSVZF",
            "X1ZJRVdfTk9OX1ZJRVdBQkxFX0lNUFJFU1NJT05TEIMFEj4KOUFEU0VOU0Vf",
            "QUNUSVZFX1ZJRVdfTk9OX1ZJRVdBQkxFX0lNUFJFU1NJT05TX0RJU1RSSUJV",
            "VElPThCEBRI+CjlBRFNFTlNFX0FDVElWRV9WSUVXX1VOREVURVJNSU5FRF9J",
            "TVBSRVNTSU9OU19ESVNUUklCVVRJT04QhQUSLAooQURTRU5TRV9BQ1RJVkVf",
            "VklFV19WSUVXQUJMRV9JTVBSRVNTSU9OUxBEEjoKNUFEU0VOU0VfQUNUSVZF",
            "X1ZJRVdfVklFV0FCTEVfSU1QUkVTU0lPTlNfRElTVFJJQlVUSU9OEIYFEjEK",
            "LUFEU0VOU0VfQUNUSVZFX1ZJRVdfVklFV0FCTEVfSU1QUkVTU0lPTlNfUkFU",
            "RRBHEhgKFEFEU0VOU0VfQVZFUkFHRV9FQ1BNEBoSEgoOQURTRU5TRV9DTElD",
            "S1MQFxIPCgtBRFNFTlNFX0NUUhAYEhcKE0FEU0VOU0VfSU1QUkVTU0lPTlMQ",
            "FhIaChZBRFNFTlNFX1BFUkNFTlRfQ0xJQ0tTEBwSHwobQURTRU5TRV9QRVJD",
            "RU5UX0lNUFJFU1NJT05TEBsSGwoXQURTRU5TRV9QRVJDRU5UX1JFVkVOVUUQ",
            "HRInCiNBRFNFTlNFX1BFUkNFTlRfUkVWRU5VRV9XSVRIT1VUX0NQRBAeEhwK",
            "GEFEU0VOU0VfUkVTUE9OU0VTX1NFUlZFRBApEhMKD0FEU0VOU0VfUkVWRU5V",
            "RRAZEjEKLUFEX0VYQ0hBTkdFX0FDVElWRV9WSUVXX0FWRVJBR0VfVklFV0FC",
            "TEVfVElNRRBPEjAKLEFEX0VYQ0hBTkdFX0FDVElWRV9WSUVXX0VMSUdJQkxF",
            "X0lNUFJFU1NJT05TEEwSMgouQURfRVhDSEFOR0VfQUNUSVZFX1ZJRVdfTUVB",
            "U1VSQUJMRV9JTVBSRVNTSU9OUxBLEjcKM0FEX0VYQ0hBTkdFX0FDVElWRV9W",
            "SUVXX01FQVNVUkFCTEVfSU1QUkVTU0lPTlNfUkFURRBOEjcKMkFEX0VYQ0hB",
            "TkdFX0FDVElWRV9WSUVXX05PTl9NRUFTVVJBQkxFX0lNUFJFU1NJT05TEI4F",
            "EjUKMEFEX0VYQ0hBTkdFX0FDVElWRV9WSUVXX05PTl9WSUVXQUJMRV9JTVBS",
            "RVNTSU9OUxCPBRJCCj1BRF9FWENIQU5HRV9BQ1RJVkVfVklFV19OT05fVklF",
            "V0FCTEVfSU1QUkVTU0lPTlNfRElTVFJJQlVUSU9OEJAFEkIKPUFEX0VYQ0hB",
            "TkdFX0FDVElWRV9WSUVXX1VOREVURVJNSU5FRF9JTVBSRVNTSU9OU19ESVNU",
            "UklCVVRJT04QkQUSMAosQURfRVhDSEFOR0VfQUNUSVZFX1ZJRVdfVklFV0FC",
            "TEVfSU1QUkVTU0lPTlMQShI+CjlBRF9FWENIQU5HRV9BQ1RJVkVfVklFV19W",
            "SUVXQUJMRV9JTVBSRVNTSU9OU19ESVNUUklCVVRJT04QkgUSNQoxQURfRVhD",
            "SEFOR0VfQUNUSVZFX1ZJRVdfVklFV0FCTEVfSU1QUkVTU0lPTlNfUkFURRBN",
            "EhwKGEFEX0VYQ0hBTkdFX0FWRVJBR0VfRUNQTRASEhYKEkFEX0VYQ0hBTkdF",
            "X0NMSUNLUxAPEhQKD0FEX0VYQ0hBTkdFX0NQQxD0ARITCg9BRF9FWENIQU5H",
            "RV9DVFIQEBIeChlBRF9FWENIQU5HRV9ERUxJVkVSWV9SQVRFEPUBEhsKF0FE",
            "X0VYQ0hBTkdFX0lNUFJFU1NJT05TEA4SKgolQURfRVhDSEFOR0VfSU1QUkVT",
            "U0lPTlNfUEVSX0FEX1ZJRVdFUhCrAxIoCiNBRF9FWENIQU5HRV9JTVBSRVNT",
            "SU9OU19QRVJfU0VTU0lPThCsAxIVChBBRF9FWENIQU5HRV9MSUZUEPYBEiQK",
            "H0FEX0VYQ0hBTkdFX01BVENIRURfUkVRVUVTVF9DVFIQ9wESJQogQURfRVhD",
            "SEFOR0VfTUFUQ0hFRF9SRVFVRVNUX0VDUE0Q+AESGwoWQURfRVhDSEFOR0Vf",
            "TUFUQ0hfUkFURRD5ARIqCiVBRF9FWENIQU5HRV9PUFBPUlRVTklUSUVTX0ZS",
            "T01fRVJST1JTEPoBEi8KKkFEX0VYQ0hBTkdFX09QUE9SVFVOSVRJRVNfRlJP",
            "TV9JTVBSRVNTSU9OUxD7ARIeChpBRF9FWENIQU5HRV9QRVJDRU5UX0NMSUNL",
            "UxAUEiMKH0FEX0VYQ0hBTkdFX1BFUkNFTlRfSU1QUkVTU0lPTlMQExIfChtB",
            "RF9FWENIQU5HRV9QRVJDRU5UX1JFVkVOVUUQFRIrCidBRF9FWENIQU5HRV9Q",
            "RVJDRU5UX1JFVkVOVUVfV0lUSE9VVF9DUEQQHxImCiFBRF9FWENIQU5HRV9Q",
            "TFVTX1lJRUxEX0dST1VQX0VDUE0Q/AESLQooQURfRVhDSEFOR0VfUExVU19Z",
            "SUVMRF9HUk9VUF9JTVBSRVNTSU9OUxD9ARIpCiRBRF9FWENIQU5HRV9QTFVT",
            "X1lJRUxEX0dST1VQX1JFVkVOVUUQ/gESIAocQURfRVhDSEFOR0VfUkVTUE9O",
            "U0VTX1NFUlZFRBAqEhcKE0FEX0VYQ0hBTkdFX1JFVkVOVUUQERI1CjBBRF9F",
            "WENIQU5HRV9SRVZFTlVFX1BBSURfVEhST1VHSF9NQ01fQVVUT1BBWU1FTlQQ",
            "1AESJgohQURfRVhDSEFOR0VfUkVWRU5VRV9QRVJfQURfVklFV0VSEK0DEh8K",
            "GkFEX0VYQ0hBTkdFX1RPVEFMX1JFUVVFU1RTEP8BEiIKHUFEX0VYQ0hBTkdF",
            "X1RPVEFMX1JFUVVFU1RfQ1RSEIACEiMKHkFEX0VYQ0hBTkdFX1RPVEFMX1JF",
            "UVVFU1RfRUNQTRCBAhIYChNBRF9FWFBPU1VSRV9TRUNPTkRTEPEBEg8KC0FE",
            "X1JFUVVFU1RTECYSLworQURfU0VSVkVSX0FDVElWRV9WSUVXX0FWRVJBR0Vf",
            "VklFV0FCTEVfVElNRRBDEi4KKkFEX1NFUlZFUl9BQ1RJVkVfVklFV19FTElH",
            "SUJMRV9JTVBSRVNTSU9OUxBAEjAKLEFEX1NFUlZFUl9BQ1RJVkVfVklFV19N",
            "RUFTVVJBQkxFX0lNUFJFU1NJT05TED8SNQoxQURfU0VSVkVSX0FDVElWRV9W",
            "SUVXX01FQVNVUkFCTEVfSU1QUkVTU0lPTlNfUkFURRBCEjUKMEFEX1NFUlZF",
            "Ul9BQ1RJVkVfVklFV19OT05fTUVBU1VSQUJMRV9JTVBSRVNTSU9OUxDMAhIz",
            "Ci5BRF9TRVJWRVJfQUNUSVZFX1ZJRVdfTk9OX1ZJRVdBQkxFX0lNUFJFU1NJ",
            "T05TEMsCEkAKO0FEX1NFUlZFUl9BQ1RJVkVfVklFV19OT05fVklFV0FCTEVf",
            "SU1QUkVTU0lPTlNfRElTVFJJQlVUSU9OEM4CEkAKO0FEX1NFUlZFUl9BQ1RJ",
            "VkVfVklFV19VTkRFVEVSTUlORURfSU1QUkVTU0lPTlNfRElTVFJJQlVUSU9O",
            "EM8CEi4KKkFEX1NFUlZFUl9BQ1RJVkVfVklFV19WSUVXQUJMRV9JTVBSRVNT",
            "SU9OUxA+EjwKN0FEX1NFUlZFUl9BQ1RJVkVfVklFV19WSUVXQUJMRV9JTVBS",
            "RVNTSU9OU19ESVNUUklCVVRJT04QzQISMwovQURfU0VSVkVSX0FDVElWRV9W",
            "SUVXX1ZJRVdBQkxFX0lNUFJFU1NJT05TX1JBVEUQQRIaChZBRF9TRVJWRVJf",
            "QVZFUkFHRV9FQ1BNECISJgoiQURfU0VSVkVSX0FWRVJBR0VfRUNQTV9XSVRI",
            "T1VUX0NQRBAKEioKJUFEX1NFUlZFUl9CRUdJTl9UT19SRU5ERVJfSU1QUkVT",
            "U0lPTlMQhgISFAoQQURfU0VSVkVSX0NMSUNLUxAHEh4KGUFEX1NFUlZFUl9D",
            "T01QTEVURURfVklFV1MQrwMSIwoeQURfU0VSVkVSX0NPVklFV0VEX0lNUFJF",
            "U1NJT05TEKoEEhkKFUFEX1NFUlZFUl9DUERfUkVWRU5VRRAgEhEKDUFEX1NF",
            "UlZFUl9DVFIQCBIcChdBRF9TRVJWRVJfR1JPU1NfUkVWRU5VRRDjAxIoCiNB",
            "RF9TRVJWRVJfR1JPU1NfUkVWRU5VRV9XSVRIT1VUX0NQRBDkAxIZChVBRF9T",
            "RVJWRVJfSU1QUkVTU0lPTlMQBhIpCiRBRF9TRVJWRVJfSU1QUkVTU0lPTlNf",
            "V0lUSF9DT01QQU5JT04Q3gESMwouQURfU0VSVkVSX0lOQUNUSVZFX0JFR0lO",
            "X1RPX1JFTkRFUl9JTVBSRVNTSU9OUxDSAhIcChhBRF9TRVJWRVJfUEVSQ0VO",
            "VF9DTElDS1MQDBIhCh1BRF9TRVJWRVJfUEVSQ0VOVF9JTVBSRVNTSU9OUxAL",
            "Eh0KGUFEX1NFUlZFUl9QRVJDRU5UX1JFVkVOVUUQIxIpCiVBRF9TRVJWRVJf",
            "UEVSQ0VOVF9SRVZFTlVFX1dJVEhPVVRfQ1BEEA0SHgoaQURfU0VSVkVSX1JF",
            "U1BPTlNFU19TRVJWRUQQKBIVChFBRF9TRVJWRVJfUkVWRU5VRRAhEjMKLkFE",
            "X1NFUlZFUl9SRVZFTlVFX1BBSURfVEhST1VHSF9NQ01fQVVUT1BBWU1FTlQQ",
            "1QESIQodQURfU0VSVkVSX1JFVkVOVUVfV0lUSE9VVF9DUEQQCRIeChlBRF9T",
            "RVJWRVJfVEFSR0VURURfQ0xJQ0tTEJICEiMKHkFEX1NFUlZFUl9UQVJHRVRF",
            "RF9JTVBSRVNTSU9OUxCTAhIaChVBRF9TRVJWRVJfVFJBQ0tFRF9BRFMQiAIS",
            "NQowQURfU0VSVkVSX1VORklMVEVSRURfQkVHSU5fVE9fUkVOREVSX0lNUFJF",
            "U1NJT05TEIUCEiAKG0FEX1NFUlZFUl9VTkZJTFRFUkVEX0NMSUNLUxCDAhIw",
            "CitBRF9TRVJWRVJfVU5GSUxURVJFRF9ET1dOTE9BREVEX0lNUFJFU1NJT05T",
            "EIQCEikKIEFEX1NFUlZFUl9VTkZJTFRFUkVEX0lNUFJFU1NJT05TEIQCGgII",
            "ARIlCiBBRF9TRVJWRVJfVU5GSUxURVJFRF9UUkFDS0VEX0FEUxCHAhIdChhB",
            "RF9VTklUX0VYUE9TVVJFX1NFQ09ORFMQ8gESDwoKQURfVklFV0VSUxCpAxId",
            "ChhBVE5fQURTX0ZBSUxFRF9UT19SRU5ERVIQrgMSHAoXQVROX0VMSUdJQkxF",
            "X0xJTkVfSVRFTVMQ1gISKAojQVROX0VMSUdJQkxFX0xJTkVfSVRFTVNfQURf",
            "UkVRVUVTVFMQ1wISIAobQVROX0hCVF9BTExPV0VEX0FEX1JFUVVFU1RTENgC",
            "EhwKF0FUTl9IQlRfQklEU19JTl9BVUNUSU9OENkCEigKI0FUTl9IQlRfQklE",
            "U19JTl9BVUNUSU9OX0FEX1JFUVVFU1RTENoCEhsKFkFUTl9IQlRfQ0FORElE",
            "QVRFX0JJRFMQ2wISIAobQVROX0hCVF9JTlZBTElEX0FEX1JFUVVFU1RTENwC",
            "EiAKG0FUTl9IQlRfTk9fQklEU19BRF9SRVFVRVNUUxDYAxIaChVBVE5fSEJU",
            "X1JFSkVDVEVEX0JJRFMQ3QISHgoZQVROX0hCVF9WQUxJRF9BRF9SRVFVRVNU",
            "UxDeAhIiCh1BVE5fSEJUX1dJVEhfQklEU19BRF9SRVFVRVNUUxDZAxIcChdB",
            "VE5fSU5WQUxJRF9BRF9SRVFVRVNUUxDfAhIqCiVBVE5fTElORV9JVEVNU19D",
            "UkVBVElWRV9OT1RfUkVUUklFVkVEENwDEh4KGUFUTl9MSU5FX0lURU1TX0lO",
            "X0FVQ1RJT04Q4AISIQocQVROX0xJTkVfSVRFTVNfTk9UX0NPTVBFVElORxCD",
            "BBIgChtBVE5fTElORV9JVEVNU19OT1RfU0VMRUNURUQQ4QISKQokQVROX0xJ",
            "TkVfSVRFTV9JTl9BVUNUSU9OX0FEX1JFUVVFU1RTEOICEicKIkFUTl9MSU5F",
            "X0lURU1fVEFSR0VURURfQURfUkVRVUVTVFMQ4wISJgohQVROX01FRElBVElP",
            "Tl9BTExPV0VEX0FEX1JFUVVFU1RTEOQCEiYKIUFUTl9NRURJQVRJT05fSU5W",
            "QUxJRF9BRF9SRVFVRVNUUxDlAhIpCiRBVE5fTUVESUFUSU9OX0xPQURFRF9B",
            "RFNfRlJPTV9DSEFJTlMQ5gISKQokQVROX01FRElBVElPTl9OT19QQVJUTkVS",
            "X0FEX1JFUVVFU1RTENoDEiYKIUFUTl9NRURJQVRJT05fUEFSVE5FUlNfSU5f",
            "QVVDVElPThDnAhIyCi1BVE5fTUVESUFUSU9OX1BBUlRORVJTX0lOX0FVQ1RJ",
            "T05fQURfUkVRVUVTVFMQ6AISJAofQVROX01FRElBVElPTl9SRUpFQ1RFRF9Q",
            "QVJUTkVSUxDpAhIkCh9BVE5fTUVESUFUSU9OX1RBUkdFVEVEX1BBUlRORVJT",
            "EOoCEicKIkFUTl9NRURJQVRJT05fVE9UQUxfWUlFTERfUEFSVE5FUlMQugMS",
            "KwomQVROX01FRElBVElPTl9VTkxPQURFRF9BRFNfRlJPTV9DSEFJTlMQ6wIS",
            "KgolQVROX01FRElBVElPTl9VTlVTRURfQklEU19PUl9QQVJUTkVSUxDsAhIk",
            "Ch9BVE5fTUVESUFUSU9OX1ZBTElEX0FEX1JFUVVFU1RTEO0CEiwKJ0FUTl9N",
            "RURJQVRJT05fV0lUSF9QQVJUTkVSU19BRF9SRVFVRVNUUxDbAxIrCiZBVE5f",
            "UFJPR1JBTU1BVElDX0FEX1JFUVVFU1RTX1dJVEhfQklEUxDuAhI4CjNBVE5f",
            "UFJPR1JBTU1BVElDX0FEX1JFUVVFU1RTX1dJVEhfQklEX1JFUVVFU1RTX1NF",
            "TlQQ7wISKQokQVROX1BST0dSQU1NQVRJQ19BTExPV0VEX0FEX1JFUVVFU1RT",
            "EPACEiUKIEFUTl9QUk9HUkFNTUFUSUNfQklEU19JTl9BVUNUSU9OEPECEjAK",
            "K0FUTl9QUk9HUkFNTUFUSUNfQklEX0lOX0FVQ1RJT05fQURfUkVRVUVTVFMQ",
            "8gISJwoiQVROX1BST0dSQU1NQVRJQ19CSURfUkVRVUVTVFNfU0VOVBDzAhIw",
            "CitBVE5fUFJPR1JBTU1BVElDX0JJRF9SRVFVRVNUU19XSVRIX1JFU1BPTlNF",
            "EPQCEiwKJ0FUTl9QUk9HUkFNTUFUSUNfQklEX1JFUVVFU1RfQ0FORElEQVRF",
            "UxD1AhIoCiNBVE5fUFJPR1JBTU1BVElDX0JJRF9SRVFVRVNUX0VSUk9SUxD2",
            "AhIsCidBVE5fUFJPR1JBTU1BVElDX0lORUxJR0lCTEVfQURfUkVRVUVTVFMQ",
            "9wISIwoeQVROX1BST0dSQU1NQVRJQ19SRUpFQ1RFRF9CSURTEPgCEioKJUFU",
            "Tl9QUk9HUkFNTUFUSUNfU0tJUFBFRF9CSURfUkVRVUVTVFMQ+QISIAobQVRO",
            "X1BST0dSQU1NQVRJQ19UT1RBTF9CSURTEPoCEicKIkFUTl9QUk9HUkFNTUFU",
            "SUNfVkFMSURfQURfUkVRVUVTVFMQ+wISHAoXQVROX1JFSkVDVEVEX0xJTkVf",
            "SVRFTVMQ/AISIAobQVROX1NFUlZFRF9NRURJQVRJT05fQ0hBSU5TEP0CEhoK",
            "FUFUTl9TRVJWRURfU0lOR0xFX0FEUxD+AhIcChdBVE5fVEFSR0VURURfTElO",
            "RV9JVEVNUxD/AhIaChVBVE5fVE9UQUxfQURfUkVRVUVTVFMQgAMSJwoiQVRO",
            "X1RPVEFMX0NPTVBFVElOR19BRFNfSU5fQVVDVElPThCBAxIZChRBVE5fVE9U",
            "QUxfTE9BREVEX0FEUxCDAxIaChVBVE5fVkFMSURfQURfUkVRVUVTVFMQhQMS",
            "KAojQVROX1lJRUxEX0dST1VQX01FRElBVElPTl9QQVNTQkFDS1MQhgMSEAoM",
            "QVZFUkFHRV9FQ1BNECUSHAoYQVZFUkFHRV9FQ1BNX1dJVEhPVVRfQ1BEEAUS",
            "KwomQVZFUkFHRV9FTkdBR0VNRU5UX1NFQ09ORFNfUEVSX1NFU1NJT04Q4AES",
            "KAojQVZFUkFHRV9FTkdBR0VNRU5UX1NFQ09ORFNfUEVSX1VTRVIQ4QESKwom",
            "QVZFUkFHRV9JTVBSRVNTSU9OU19QRVJfVU5JUVVFX1ZJU0lUT1IQogMSLQoo",
            "QVZFUkFHRV9QVVJDSEFTRV9SRVZFTlVFX1BFUl9QQVlJTkdfVVNFUhDiARId",
            "ChhBVkVSQUdFX1JFVkVOVUVfUEVSX1VTRVIQ4wESHAoXQVZFUkFHRV9TRVNT",
            "SU9OX1NFQ09ORFMQ5AESCQoEQklEUxC7AxIUCg9CSURfQVZFUkFHRV9DUE0Q",
            "vAMSEAoLQk9VTkNFX1JBVEUQsQMSCgoGQ0xJQ0tTEAISFQoRQ09ERV9TRVJW",
            "RURfQ09VTlQQLBIQCgtDUENfUkVWRU5VRRC4AxIQCgtDUE1fUkVWRU5VRRC5",
            "AxIlCiBDUkVBVElWRV9MT0FEX1RJTUVfMF81MDBfUEVSQ0VOVBDEAhIpCiRD",
            "UkVBVElWRV9MT0FEX1RJTUVfMTAwMF8yMDAwX1BFUkNFTlQQxgISKQokQ1JF",
            "QVRJVkVfTE9BRF9USU1FXzIwMDBfNDAwMF9QRVJDRU5UEMcCEikKJENSRUFU",
            "SVZFX0xPQURfVElNRV80MDAwXzgwMDBfUEVSQ0VOVBDIAhIoCiNDUkVBVElW",
            "RV9MT0FEX1RJTUVfNTAwXzEwMDBfUEVSQ0VOVBDFAhInCiJDUkVBVElWRV9M",
            "T0FEX1RJTUVfR1RfODAwMF9QRVJDRU5UEMkCEgcKA0NUUhADEg8KCkRFQUxT",
            "X0JJRFMQngQSEwoOREVBTFNfQklEX1JBVEUQnwQSFwoSREVBTFNfQklEX1JF",
            "UVVFU1RTEKAEEhcKEkRFQUxTX1dJTk5JTkdfQklEUxChBBITCg5ERUFMU19X",
            "SU5fUkFURRCiBBIvCipET01fTE9BRF9UT19GSVJTVF9BRF9SRVFVRVNUXzBf",
            "NTAwX1BFUkNFTlQQiQQSMwouRE9NX0xPQURfVE9fRklSU1RfQURfUkVRVUVT",
            "VF8xMDAwXzIwMDBfUEVSQ0VOVBCKBBIzCi5ET01fTE9BRF9UT19GSVJTVF9B",
            "RF9SRVFVRVNUXzIwMDBfNDAwMF9QRVJDRU5UEIsEEjMKLkRPTV9MT0FEX1RP",
            "X0ZJUlNUX0FEX1JFUVVFU1RfNDAwMF84MDAwX1BFUkNFTlQQjAQSMgotRE9N",
            "X0xPQURfVE9fRklSU1RfQURfUkVRVUVTVF81MDBfMTAwMF9QRVJDRU5UEI0E",
            "EjEKLERPTV9MT0FEX1RPX0ZJUlNUX0FEX1JFUVVFU1RfR1RfODAwMF9QRVJD",
            "RU5UEIgEEiwKJ0RPTV9MT0FEX1RPX1RBR19MT0FEX1RJTUVfMF81MDBfUEVS",
            "Q0VOVBCOBBIwCitET01fTE9BRF9UT19UQUdfTE9BRF9USU1FXzEwMDBfMjAw",
            "MF9QRVJDRU5UEI8EEjAKK0RPTV9MT0FEX1RPX1RBR19MT0FEX1RJTUVfMjAw",
            "MF80MDAwX1BFUkNFTlQQkAQSMAorRE9NX0xPQURfVE9fVEFHX0xPQURfVElN",
            "RV80MDAwXzgwMDBfUEVSQ0VOVBCRBBIvCipET01fTE9BRF9UT19UQUdfTE9B",
            "RF9USU1FXzUwMF8xMDAwX1BFUkNFTlQQkwQSLgopRE9NX0xPQURfVE9fVEFH",
            "X0xPQURfVElNRV9HVF84MDAwX1BFUkNFTlQQkgQSEQoMRFJPUE9GRl9SQVRF",
            "EJ8DEhUKEEVOR0FHRURfU0VTU0lPTlMQ5QESHgoZRU5HQUdFRF9TRVNTSU9O",
            "U19QRVJfVVNFUhDmARIUCg9FTkdBR0VNRU5UX1JBVEUQqgMSJgohRVVST1BF",
            "QU5fUkVHVUxBVElPTlNfQ09OU0VOVF9SQVRFEI4CEi0KKEVVUk9QRUFOX1JF",
            "R1VMQVRJT05TX0NVU1RPTV9DT05TRU5UX1JBVEUQjwISKAojRVVST1BFQU5f",
            "UkVHVUxBVElPTlNfTUVTU0FHRVNfU0hPV04QkAISKQokRVVST1BFQU5fUkVH",
            "VUxBVElPTlNfTk9fQ09OU0VOVF9SQVRFEJECEg4KCUZJTExfUkFURRCCAhIc",
            "ChdHT09HTEVfQU5BTFlUSUNTX0NMSUNLUxDnARIZChRHT09HTEVfQU5BTFlU",
            "SUNTX0NUUhDoARIaChVHT09HTEVfQU5BTFlUSUNTX0VDUE0Q6QESIQocR09P",
            "R0xFX0FOQUxZVElDU19JTVBSRVNTSU9OUxDqARIdChhHT09HTEVfQU5BTFlU",
            "SUNTX1JFVkVOVUUQ6wESGwoWR09PR0xFX0FOQUxZVElDU19WSUVXUxDsARIk",
            "Ch9HT09HTEVfQU5BTFlUSUNTX1ZJRVdTX1BFUl9VU0VSEO0BEi0KKEdPT0dM",
            "RV9TT0xEX0FVQ1RJT05fQ09WSUVXRURfSU1QUkVTU0lPTlMQgQESJAofR09P",
            "R0xFX1NPTERfQVVDVElPTl9JTVBSRVNTSU9OUxCAARIlCiBHT09HTEVfU09M",
            "RF9DT1ZJRVdFRF9JTVBSRVNTSU9OUxCDARIcChdHT09HTEVfU09MRF9JTVBS",
            "RVNTSU9OUxCCARIwCixHT09HTEVfU09MRF9SRVNFUlZBVElPTl9DT1ZJRVdF",
            "RF9JTVBSRVNTSU9OUxB/EicKI0dPT0dMRV9TT0xEX1JFU0VSVkFUSU9OX0lN",
            "UFJFU1NJT05TEH4SDwoLSU1QUkVTU0lPTlMQARIpCiRJTkFDVElWRV9CRUdJ",
            "Tl9UT19SRU5ERVJfSU1QUkVTU0lPTlMQlwMSFQoQSU5WRU5UT1JZX1NIQVJF",
            "UxCjBBIzCi5JTlZFTlRPUllfU0hBUkVfUEFSVE5FUl9VTkZJTExFRF9PUFBP",
            "UlRVTklUSUVTEKQEEhkKFElOVk9JQ0VEX0lNUFJFU1NJT05TEJQDEiIKHUlO",
            "Vk9JQ0VEX1VORklMTEVEX0lNUFJFU1NJT05TEJUDEhwKF01FRElBVElPTl9D",
            "SEFJTlNfRklMTEVEEMgEEhYKEU1VVEVEX0lNUFJFU1NJT05TEJwDEh4KGU1V",
            "VEVfRUxJR0lCTEVfSU1QUkVTU0lPTlMQmQMSEgoNT1BQT1JUVU5JVElFUxDP",
            "AxIeChlPVkVSREVMSVZFUkVEX0lNUFJFU1NJT05TELADEiYKIVBBUlRORVJf",
            "U0FMRVNfRklMTEVEX1BPRF9SRVFVRVNUUxCHARIcChdQQVJUTkVSX1NBTEVT",
            "X0ZJTExfUkFURRCIARIlCiBQQVJUTkVSX1NBTEVTX1BBUlRORVJfTUFUQ0hf",
            "UkFURRCJARIaChVQQVJUTkVSX1NBTEVTX1FVRVJJRVMQhAESJwoiUEFSVE5F",
            "Ul9TQUxFU19VTkZJTExFRF9JTVBSRVNTSU9OUxCFARIkCh9QQVJUTkVSX1NB",
            "TEVTX1VOTUFUQ0hFRF9RVUVSSUVTEIYBEhwKGFBBUlRORVJfU09MRF9DT0RF",
            "X1NFUlZFRBB9EiUKIVBBUlRORVJfU09MRF9DT1ZJRVdFRF9JTVBSRVNTSU9O",
            "UxB8EhwKGFBBUlRORVJfU09MRF9JTVBSRVNTSU9OUxB7EiYKIVBST0dSQU1N",
            "QVRJQ19FTElHSUJMRV9BRF9SRVFVRVNUUxCxARIcChdQUk9HUkFNTUFUSUNf",
            "TUFUQ0hfUkFURRCyARIiCh1QUk9HUkFNTUFUSUNfUkVTUE9OU0VTX1NFUlZF",
            "RBCwARIWChFSRUFDSF9JTVBSRVNTSU9OUxCgAxIUChBSRVNQT05TRVNfU0VS",
            "VkVEECcSDgoJUkVURU5USU9OEO4BEgsKB1JFVkVOVUUQJBIpCiRSRVZFTlVF",
            "X1BBSURfVEhST1VHSF9NQ01fQVVUT1BBWU1FTlQQ1gESFwoTUkVWRU5VRV9X",
            "SVRIT1VUX0NQRBAEEhQKD1JFV0FSRFNfR1JBTlRFRBCdAxIkCh9SSUNIX01F",
            "RElBX0FWRVJBR0VfRElTUExBWV9USU1FEMsEEigKI1JJQ0hfTUVESUFfQVZF",
            "UkFHRV9JTlRFUkFDVElPTl9USU1FEMwEEh0KGFJJQ0hfTUVESUFfQkFDS1VQ",
            "X0lNQUdFUxDNBBIiCh1SSUNIX01FRElBX0NVU1RPTV9FVkVOVF9DT1VOVBDX",
            "BBIhChxSSUNIX01FRElBX0NVU1RPTV9FVkVOVF9USU1FENgEEhwKF1JJQ0hf",
            "TUVESUFfRElTUExBWV9USU1FEM4EEh4KGVJJQ0hfTUVESUFfRVhQQU5ESU5H",
            "X1RJTUUQzwQSGgoVUklDSF9NRURJQV9FWFBBTlNJT05TENAEEicKIlJJQ0hf",
            "TUVESUFfRlVMTF9TQ1JFRU5fSU1QUkVTU0lPTlMQ0QQSIQocUklDSF9NRURJ",
            "QV9JTlRFUkFDVElPTl9DT1VOVBDSBBIgChtSSUNIX01FRElBX0lOVEVSQUNU",
            "SU9OX1JBVEUQ0wQSIAobUklDSF9NRURJQV9JTlRFUkFDVElPTl9USU1FENQE",
            "EicKIlJJQ0hfTUVESUFfSU5URVJBQ1RJVkVfSU1QUkVTU0lPTlMQ1QQSHQoY",
            "UklDSF9NRURJQV9NQU5VQUxfQ0xPU0VTENYEEh8KGlJJQ0hfTUVESUFfVklE",
            "RU9fQ09NUExFVEVTEPcDEiIKHVJJQ0hfTUVESUFfVklERU9fSU5URVJBQ1RJ",
            "T05TEPkDEiYKIVJJQ0hfTUVESUFfVklERU9fSU5URVJBQ1RJT05fUkFURRD4",
            "AxIfChpSSUNIX01FRElBX1ZJREVPX01JRFBPSU5UUxD6AxIbChZSSUNIX01F",
            "RElBX1ZJREVPX01VVEVTEPsDEhwKF1JJQ0hfTUVESUFfVklERU9fUEFVU0VT",
            "EPwDEhsKFlJJQ0hfTUVESUFfVklERU9fUExBWVMQ/QMSHQoYUklDSF9NRURJ",
            "QV9WSURFT19SRVBMQVlTEP4DEhsKFlJJQ0hfTUVESUFfVklERU9fU1RPUFMQ",
            "/wMSHQoYUklDSF9NRURJQV9WSURFT19VTk1VVEVTEIAEEh8KGlJJQ0hfTUVE",
            "SUFfVklERU9fVklFV19SQVRFEIEEEh8KGlJJQ0hfTUVESUFfVklERU9fVklF",
            "V19USU1FEIIEEicKIlNFTExfVEhST1VHSF9BVkFJTEFCTEVfSU1QUkVTU0lP",
            "TlMQ3QMSKAojU0VMTF9USFJPVUdIX0ZPUkVDQVNURURfSU1QUkVTU0lPTlMQ",
            "3gMSJgohU0VMTF9USFJPVUdIX1JFU0VSVkVEX0lNUFJFU1NJT05TEN8DEiMK",
            "HlNFTExfVEhST1VHSF9TRUxMX1RIUk9VR0hfUkFURRDgAxIuCilTRVJWRVJf",
            "U0lERV9VTldSQVBQSU5HX0FWRVJBR0VfTEFURU5DWV9NUxCyAxIkCh9TRVJW",
            "RVJfU0lERV9VTldSQVBQSU5HX0NBTExPVVRTELMDEisKJlNFUlZFUl9TSURF",
            "X1VOV1JBUFBJTkdfRU1QVFlfUkVTUE9OU0VTELQDEisKJlNFUlZFUl9TSURF",
            "X1VOV1JBUFBJTkdfRVJST1JfUkVTUE9OU0VTELUDEjAKK1NFUlZFUl9TSURF",
            "X1VOV1JBUFBJTkdfU1VDQ0VTU0ZVTF9SRVNQT05TRVMQtgMSJAofU0VSVkVS",
            "X1NJREVfVU5XUkFQUElOR19USU1FT1VUUxC3AxINCghTRVNTSU9OUxDvARIv",
            "CipUQUdfTE9BRF9UT19GSVJTVF9BRF9SRVFVRVNUXzBfNTAwX1BFUkNFTlQQ",
            "xwMSMwouVEFHX0xPQURfVE9fRklSU1RfQURfUkVRVUVTVF8xMDAwXzIwMDBf",
            "UEVSQ0VOVBDJAxIzCi5UQUdfTE9BRF9UT19GSVJTVF9BRF9SRVFVRVNUXzIw",
            "MDBfNDAwMF9QRVJDRU5UEMoDEjMKLlRBR19MT0FEX1RPX0ZJUlNUX0FEX1JF",
            "UVVFU1RfNDAwMF84MDAwX1BFUkNFTlQQywMSMgotVEFHX0xPQURfVE9fRklS",
            "U1RfQURfUkVRVUVTVF81MDBfMTAwMF9QRVJDRU5UEMgDEjEKLFRBR19MT0FE",
            "X1RPX0ZJUlNUX0FEX1JFUVVFU1RfR1RfODAwMF9QRVJDRU5UEMwDEhQKD1RB",
            "UkdFVEVEX0NMSUNLUxCUAhIZChRUQVJHRVRFRF9JTVBSRVNTSU9OUxCVAhIY",
            "ChRVTkZJTExFRF9JTVBSRVNTSU9OUxAtEhQKD1VOSVFVRV9WSVNJVE9SUxCh",
            "AxIkCh9VTkxPQURFRF9JTVBSRVNTSU9OU19EVUVfVE9fQ1BVEJgDEigKI1VO",
            "TE9BREVEX0lNUFJFU1NJT05TX0RVRV9UT19ORVRXT1JLEJYDEhkKFVVOTUFU",
            "Q0hFRF9BRF9SRVFVRVNUUxArEiIKHVVOVklFV0VEX1JFQVNPTl9PVEhFUl9Q",
            "RVJDRU5UEKYEEjgKM1VOVklFV0VEX1JFQVNPTl9TTE9UX05FVkVSX0VOVEVS",
            "RURfVklFV1BPUlRfUEVSQ0VOVBCpBBI7CjZVTlZJRVdFRF9SRUFTT05fVVNF",
            "Ul9TQ1JPTExFRF9CRUZPUkVfQURfRklMTEVEX1BFUkNFTlQQpwQSOwo2VU5W",
            "SUVXRURfUkVBU09OX1VTRVJfU0NST0xMRURfQkVGT1JFX0FEX0xPQURFRF9Q",
            "RVJDRU5UEKgEEjwKN1VOVklFV0VEX1JFQVNPTl9VU0VSX1NDUk9MTEVEX0JF",
            "Rk9SRV9PTkVfU0VDT05EX1BFUkNFTlQQpQQSKAojVVNFUl9FTkdBR0VNRU5U",
            "X0RVUkFUSU9OX0lOX1NFQ09ORFMQ8AESLQooVVNFUl9NRVNTQUdFU19BRF9C",
            "TE9DS0lOR19FWFRFTlNJT05fUkFURRDmAxI5CjRVU0VSX01FU1NBR0VTX0FE",
            "X0JMT0NLSU5HX1JFQ09WRVJZX0FMTE9XTElTVEVEX0NPVU5UEOcDEjYKMVVT",
            "RVJfTUVTU0FHRVNfQURfQkxPQ0tJTkdfUkVDT1ZFUllfTUVTU0FHRVNfU0hP",
            "V04Q6AMSJgohVVNFUl9NRVNTQUdFU19BTExPV19BRFNfUEFHRVZJRVdTEOkD",
            "EiYKIVVTRVJfTUVTU0FHRVNfQ0NQQV9NRVNTQUdFU19TSE9XThDqAxIoCiNV",
            "U0VSX01FU1NBR0VTX0lERkFfQVRUX0FMRVJUU19TSE9XThDrAxIjCh5VU0VS",
            "X01FU1NBR0VTX0lERkFfQVRUX0NPTlNFTlQQ7AMSKAojVVNFUl9NRVNTQUdF",
            "U19JREZBX0FUVF9DT05TRU5UX1JBVEUQ7QMSKwomVVNFUl9NRVNTQUdFU19J",
            "REZBX0FUVF9ERUNMSU5FX0NPTlNFTlQQ7gMSKAojVVNFUl9NRVNTQUdFU19J",
            "REZBX0FUVF9ERUNMSU5FX1JBVEUQ7wMSKAojVVNFUl9NRVNTQUdFU19JREZB",
            "X0VYUExBSU5FUlNfU0hPV04Q8AMSKgolVVNFUl9NRVNTQUdFU19JREZBX0lB",
            "Ql9NRVNTQUdFU19TSE9XThDxAxIjCh5VU0VSX01FU1NBR0VTX0lERkFfTk9f",
            "REVDSVNJT04Q8gMSKgomVVNFUl9NRVNTQUdFU19PRkZFUldBTExfTUVTU0FH",
            "RVNfU0hPV04QeRIyCi5VU0VSX01FU1NBR0VTX09GRkVSV0FMTF9TVUNDRVNT",
            "RlVMX0VOR0FHRU1FTlRTEHoSKwomVVNFUl9NRVNTQUdFU19QT1NUX09GRkVS",
            "V0FMTF9QQUdFVklFV1MQ8wMSKgolVVNFUl9NRVNTQUdFU19UT1RBTF9FU1RJ",
            "TUFURURfUkVWRU5VRRD0AxImCiFVU0VSX01FU1NBR0VTX1VQVENfTUVTU0FH",
            "RVNfU0hPV04Q9QMSNQowVVNFUl9NRVNTQUdFU19VUFRDX1BFUlNPTkFMSVpB",
            "VElPTl9PUFRfT1VUX1JBVElPEPYDEhoKFVZJREVPX0VSUk9SXzEwMF9DT1VO",
            "VBC0ARIaChVWSURFT19FUlJPUl8xMDFfQ09VTlQQtQESGgoVVklERU9fRVJS",
            "T1JfMTAyX0NPVU5UELYBEhoKFVZJREVPX0VSUk9SXzIwMF9DT1VOVBC3ARIa",
            "ChVWSURFT19FUlJPUl8yMDFfQ09VTlQQuAESGgoVVklERU9fRVJST1JfMjAy",
            "X0NPVU5UELkBEhoKFVZJREVPX0VSUk9SXzIwM19DT1VOVBC6ARIaChVWSURF",
            "T19FUlJPUl8zMDBfQ09VTlQQuwESGgoVVklERU9fRVJST1JfMzAxX0NPVU5U",
            "ELwBEhoKFVZJREVPX0VSUk9SXzMwMl9DT1VOVBC9ARIaChVWSURFT19FUlJP",
            "Ul8zMDNfQ09VTlQQvgESGgoVVklERU9fRVJST1JfNDAwX0NPVU5UEL8BEhoK",
            "FVZJREVPX0VSUk9SXzQwMV9DT1VOVBDAARIaChVWSURFT19FUlJPUl80MDJf",
            "Q09VTlQQwQESGgoVVklERU9fRVJST1JfNDAzX0NPVU5UEMIBEhoKFVZJREVP",
            "X0VSUk9SXzQwNV9DT1VOVBDDARIaChVWSURFT19FUlJPUl80MDZfQ09VTlQQ",
            "xAESGgoVVklERU9fRVJST1JfNDA3X0NPVU5UEMUBEhoKFVZJREVPX0VSUk9S",
            "XzQwOF9DT1VOVBDGARIaChVWSURFT19FUlJPUl80MDlfQ09VTlQQxwESGgoV",
            "VklERU9fRVJST1JfNDEwX0NPVU5UEMgBEhoKFVZJREVPX0VSUk9SXzUwMF9D",
            "T1VOVBDJARIaChVWSURFT19FUlJPUl81MDFfQ09VTlQQygESGgoVVklERU9f",
            "RVJST1JfNTAyX0NPVU5UEMsBEhoKFVZJREVPX0VSUk9SXzUwM19DT1VOVBDM",
            "ARIaChVWSURFT19FUlJPUl82MDBfQ09VTlQQzQESGgoVVklERU9fRVJST1Jf",
            "NjAxX0NPVU5UEM4BEhoKFVZJREVPX0VSUk9SXzYwMl9DT1VOVBDPARIaChVW",
            "SURFT19FUlJPUl82MDNfQ09VTlQQ0AESGgoVVklERU9fRVJST1JfNjA0X0NP",
            "VU5UENEBEhoKFVZJREVPX0VSUk9SXzkwMF9DT1VOVBDSARIaChVWSURFT19F",
            "UlJPUl85MDFfQ09VTlQQ0wESLgoqVklERU9fSU5URVJBQ1RJT05fQVZFUkFH",
            "RV9JTlRFUkFDVElPTl9SQVRFEFwSHwobVklERU9fSU5URVJBQ1RJT05fQ09M",
            "TEFQU0VTEF0SHQoZVklERU9fSU5URVJBQ1RJT05fRVhQQU5EUxBfEiIKHlZJ",
            "REVPX0lOVEVSQUNUSU9OX0ZVTExfU0NSRUVOUxBgEhsKF1ZJREVPX0lOVEVS",
            "QUNUSU9OX01VVEVTEGESHAoYVklERU9fSU5URVJBQ1RJT05fUEFVU0VTEGIS",
            "HQoZVklERU9fSU5URVJBQ1RJT05fUkVTVU1FUxBjEh0KGVZJREVPX0lOVEVS",
            "QUNUSU9OX1JFV0lORFMQZBIdChlWSURFT19JTlRFUkFDVElPTl9VTk1VVEVT",
            "EGUSIQodVklERU9fSU5URVJBQ1RJT05fVklERU9fU0tJUFMQZhIkCh9WSURF",
            "T19NT05FVElaQUJMRV9DT05URU5UX1ZJRVdTENkEEiQKH1ZJREVPX1JFQUxf",
            "VElNRV9DUkVBVElWRV9TRVJWRVMQiwESJAofVklERU9fUkVBTF9USU1FX0VS",
            "Uk9SXzEwMF9DT1VOVBCPARIkCh9WSURFT19SRUFMX1RJTUVfRVJST1JfMTAx",
            "X0NPVU5UEJABEiQKH1ZJREVPX1JFQUxfVElNRV9FUlJPUl8xMDJfQ09VTlQQ",
            "kQESJAofVklERU9fUkVBTF9USU1FX0VSUk9SXzIwMF9DT1VOVBCSARIkCh9W",
            "SURFT19SRUFMX1RJTUVfRVJST1JfMjAxX0NPVU5UEJMBEiQKH1ZJREVPX1JF",
            "QUxfVElNRV9FUlJPUl8yMDJfQ09VTlQQlAESJAofVklERU9fUkVBTF9USU1F",
            "X0VSUk9SXzIwM19DT1VOVBCVARIkCh9WSURFT19SRUFMX1RJTUVfRVJST1Jf",
            "MzAwX0NPVU5UEJYBEiQKH1ZJREVPX1JFQUxfVElNRV9FUlJPUl8zMDFfQ09V",
            "TlQQlwESJAofVklERU9fUkVBTF9USU1FX0VSUk9SXzMwMl9DT1VOVBCYARIk",
            "Ch9WSURFT19SRUFMX1RJTUVfRVJST1JfMzAzX0NPVU5UEJkBEiQKH1ZJREVP",
            "X1JFQUxfVElNRV9FUlJPUl80MDBfQ09VTlQQmgESJAofVklERU9fUkVBTF9U",
            "SU1FX0VSUk9SXzQwMV9DT1VOVBCbARIkCh9WSURFT19SRUFMX1RJTUVfRVJS",
            "T1JfNDAyX0NPVU5UEJwBEiQKH1ZJREVPX1JFQUxfVElNRV9FUlJPUl80MDNf",
            "Q09VTlQQnQESJAofVklERU9fUkVBTF9USU1FX0VSUk9SXzQwNV9DT1VOVBCe",
            "ARIkCh9WSURFT19SRUFMX1RJTUVfRVJST1JfNDA2X0NPVU5UEJ8BEiQKH1ZJ",
            "REVPX1JFQUxfVElNRV9FUlJPUl80MDdfQ09VTlQQoAESJAofVklERU9fUkVB",
            "TF9USU1FX0VSUk9SXzQwOF9DT1VOVBChARIkCh9WSURFT19SRUFMX1RJTUVf",
            "RVJST1JfNDA5X0NPVU5UEKIBEiQKH1ZJREVPX1JFQUxfVElNRV9FUlJPUl80",
            "MTBfQ09VTlQQowESJAofVklERU9fUkVBTF9USU1FX0VSUk9SXzUwMF9DT1VO",
            "VBCkARIkCh9WSURFT19SRUFMX1RJTUVfRVJST1JfNTAxX0NPVU5UEKUBEiQK",
            "H1ZJREVPX1JFQUxfVElNRV9FUlJPUl81MDJfQ09VTlQQpgESJAofVklERU9f",
            "UkVBTF9USU1FX0VSUk9SXzUwM19DT1VOVBCnARIkCh9WSURFT19SRUFMX1RJ",
            "TUVfRVJST1JfNjAwX0NPVU5UEKgBEiQKH1ZJREVPX1JFQUxfVElNRV9FUlJP",
            "Ul82MDFfQ09VTlQQqQESJAofVklERU9fUkVBTF9USU1FX0VSUk9SXzYwMl9D",
            "T1VOVBCqARIkCh9WSURFT19SRUFMX1RJTUVfRVJST1JfNjAzX0NPVU5UEKsB",
            "EiQKH1ZJREVPX1JFQUxfVElNRV9FUlJPUl82MDRfQ09VTlQQrAESJAofVklE",
            "RU9fUkVBTF9USU1FX0VSUk9SXzkwMF9DT1VOVBCtARIkCh9WSURFT19SRUFM",
            "X1RJTUVfRVJST1JfOTAxX0NPVU5UEK4BEiAKG1ZJREVPX1JFQUxfVElNRV9J",
            "TVBSRVNTSU9OUxCKARIkCh9WSURFT19SRUFMX1RJTUVfTUFUQ0hFRF9RVUVS",
            "SUVTEIwBEiYKIVZJREVPX1JFQUxfVElNRV9UT1RBTF9FUlJPUl9DT1VOVBCv",
            "ARIiCh1WSURFT19SRUFMX1RJTUVfVE9UQUxfUVVFUklFUxCOARImCiFWSURF",
            "T19SRUFMX1RJTUVfVU5NQVRDSEVEX1FVRVJJRVMQjQESHwobVklERU9fVklF",
            "V0VSU0hJUF9BVVRPX1BMQVlTEGcSJgoiVklERU9fVklFV0VSU0hJUF9BVkVS",
            "QUdFX1ZJRVdfUkFURRBoEiYKIlZJREVPX1ZJRVdFUlNISVBfQVZFUkFHRV9W",
            "SUVXX1RJTUUQaRIjCh9WSURFT19WSUVXRVJTSElQX0NMSUNLX1RPX1BMQVlT",
            "EGoSHgoaVklERU9fVklFV0VSU0hJUF9DT01QTEVURVMQaxIkCiBWSURFT19W",
            "SUVXRVJTSElQX0NPTVBMRVRJT05fUkFURRBsEiIKHlZJREVPX1ZJRVdFUlNI",
            "SVBfRU5HQUdFRF9WSUVXUxBtEiQKIFZJREVPX1ZJRVdFUlNISVBfRklSU1Rf",
            "UVVBUlRJTEVTEG4SHgoaVklERU9fVklFV0VSU0hJUF9NSURQT0lOVFMQbxIn",
            "CiNWSURFT19WSUVXRVJTSElQX1NLSVBfQlVUVE9OU19TSE9XThBwEhsKF1ZJ",
            "REVPX1ZJRVdFUlNISVBfU1RBUlRTEHESJAogVklERU9fVklFV0VSU0hJUF9U",
            "SElSRF9RVUFSVElMRVMQchImCiJWSURFT19WSUVXRVJTSElQX1RPVEFMX0VS",
            "Uk9SX0NPVU5UEHMSJQohVklERU9fVklFV0VSU0hJUF9UT1RBTF9FUlJPUl9S",
            "QVRFEF4SIQodVklERU9fVklFV0VSU0hJUF9WSURFT19MRU5HVEgQdBImCiJW",
            "SURFT19WSUVXRVJTSElQX1ZJRVdfVEhST1VHSF9SQVRFEHUSHAoYWUlFTERf",
            "R1JPVVBfQVVDVElPTlNfV09OEFASFAoQWUlFTERfR1JPVVBfQklEUxBREh8K",
            "G1lJRUxEX0dST1VQX0JJRFNfSU5fQVVDVElPThBSEhgKFFlJRUxEX0dST1VQ",
            "X0NBTExPVVRTEFMSHQoZWUlFTERfR1JPVVBfRVNUSU1BVEVEX0NQTRBYEiEK",
            "HVlJRUxEX0dST1VQX0VTVElNQVRFRF9SRVZFTlVFEFcSGwoXWUlFTERfR1JP",
            "VVBfSU1QUkVTU0lPTlMQVRIjCh9ZSUVMRF9HUk9VUF9NRURJQVRJT05fRklM",
            "TF9SQVRFEFkSKQolWUlFTERfR1JPVVBfTUVESUFUSU9OX01BVENIRURfUVVF",
            "UklFUxBWEiMKH1lJRUxEX0dST1VQX01FRElBVElPTl9QQVNTQkFDS1MQdhIq",
            "CiZZSUVMRF9HUk9VUF9NRURJQVRJT05fVEhJUkRfUEFSVFlfRUNQTRBaEjUK",
            "MFlJRUxEX0dST1VQX1JFVkVOVUVfUEFJRF9USFJPVUdIX01DTV9BVVRPUEFZ",
            "TUVOVBDXARIkCiBZSUVMRF9HUk9VUF9TVUNDRVNTRlVMX1JFU1BPTlNFUxBU",
            "GgIQASKuAQoQVGltZVBlcmlvZENvbHVtbhIiCh5USU1FX1BFUklPRF9DT0xV",
            "TU5fVU5TUEVDSUZJRUQQABIbChdUSU1FX1BFUklPRF9DT0xVTU5fREFURRAB",
            "EhsKF1RJTUVfUEVSSU9EX0NPTFVNTl9XRUVLEAISHAoYVElNRV9QRVJJT0Rf",
            "Q09MVU1OX01PTlRIEAMSHgoaVElNRV9QRVJJT0RfQ09MVU1OX1FVQVJURVIQ",
            "BCKXAQoPTWV0cmljVmFsdWVUeXBlEgsKB1BSSU1BUlkQABIcChhQUklNQVJZ",
            "X1BFUkNFTlRfT0ZfVE9UQUwQARIOCgpDT01QQVJJU09OEAISHwobQ09NUEFS",
            "SVNPTl9QRVJDRU5UX09GX1RPVEFMEAMSEwoPQUJTT0xVVEVfQ0hBTkdFEAQS",
            "EwoPUkVMQVRJVkVfQ0hBTkdFEAUiaQoOVGltZVpvbmVTb3VyY2USIAocVElN",
            "RV9aT05FX1NPVVJDRV9VTlNQRUNJRklFRBAAEg0KCVBVQkxJU0hFUhABEg8K",
            "C0FEX0VYQ0hBTkdFEAISBwoDVVRDEAMSDAoIUFJPVklERUQQBEIYChZfY29t",
            "cGFyaXNvbl9kYXRlX3JhbmdlQskBChtjb20uZ29vZ2xlLmFkcy5hZG1hbmFn",
            "ZXIudjFCFVJlcG9ydERlZmluaXRpb25Qcm90b1ABWkBnb29nbGUuZ29sYW5n",
            "Lm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fkcy9hZG1hbmFnZXIvdjE7YWRt",
            "YW5hZ2VyqgIXR29vZ2xlLkFkcy5BZE1hbmFnZXIuVjHKAhdHb29nbGVcQWRz",
            "XEFkTWFuYWdlclxWMeoCGkdvb2dsZTo6QWRzOjpBZE1hbmFnZXI6OlYxYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Ads.AdManager.V1.ReportValueReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Type.DateReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition), global::Google.Ads.AdManager.V1.ReportDefinition.Parser, new[]{ "Dimensions", "Metrics", "Filters", "TimeZoneSource", "TimeZone", "CurrencyCode", "DateRange", "ComparisonDateRange", "CustomDimensionKeyIds", "LineItemCustomFieldIds", "OrderCustomFieldIds", "CreativeCustomFieldIds", "ReportType", "TimePeriodColumn", "Flags", "Sorts" }, new[]{ "ComparisonDateRange" }, new[]{ typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType), typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension), typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric), typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn), typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType), typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field), global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field.Parser, new[]{ "Dimension", "Metric" }, new[]{ "Field" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange), global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Parser, new[]{ "Fixed", "Relative" }, new[]{ "DateRangeType" }, new[]{ typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.RelativeDateRange) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange), global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange.Parser, new[]{ "StartDate", "EndDate" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter), global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Parser, new[]{ "FieldFilter", "NotFilter", "AndFilter", "OrFilter" }, new[]{ "Type" }, new[]{ typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter), global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter.Parser, new[]{ "Field", "Operation", "Values", "Slice", "TimePeriodIndex", "MetricValueType" }, new[]{ "Slice", "TimePeriodIndex", "MetricValueType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList), global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList.Parser, new[]{ "Filters" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Sort), global::Google.Ads.AdManager.V1.ReportDefinition.Types.Sort.Parser, new[]{ "Field", "Descending", "Slice", "TimePeriodIndex", "MetricValueType" }, new[]{ "Slice", "TimePeriodIndex", "MetricValueType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice), global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice.Parser, new[]{ "Dimension", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Ads.AdManager.V1.ReportDefinition.Types.Flag), global::Google.Ads.AdManager.V1.ReportDefinition.Types.Flag.Parser, new[]{ "Filters", "Name" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The definition of how a report should be run.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ReportDefinition : pb::IMessage<ReportDefinition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportDefinition> _parser = new pb::MessageParser<ReportDefinition>(() => new ReportDefinition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ReportDefinition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Ads.AdManager.V1.ReportDefinitionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportDefinition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportDefinition(ReportDefinition other) : this() {
      dimensions_ = other.dimensions_.Clone();
      metrics_ = other.metrics_.Clone();
      filters_ = other.filters_.Clone();
      timeZoneSource_ = other.timeZoneSource_;
      timeZone_ = other.timeZone_;
      currencyCode_ = other.currencyCode_;
      dateRange_ = other.dateRange_ != null ? other.dateRange_.Clone() : null;
      comparisonDateRange_ = other.comparisonDateRange_ != null ? other.comparisonDateRange_.Clone() : null;
      customDimensionKeyIds_ = other.customDimensionKeyIds_.Clone();
      lineItemCustomFieldIds_ = other.lineItemCustomFieldIds_.Clone();
      orderCustomFieldIds_ = other.orderCustomFieldIds_.Clone();
      creativeCustomFieldIds_ = other.creativeCustomFieldIds_.Clone();
      reportType_ = other.reportType_;
      timePeriodColumn_ = other.timePeriodColumn_;
      flags_ = other.flags_.Clone();
      sorts_ = other.sorts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportDefinition Clone() {
      return new ReportDefinition(this);
    }

    /// <summary>Field number for the "dimensions" field.</summary>
    public const int DimensionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension> _repeated_dimensions_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension) x);
    private readonly pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension> dimensions_ = new pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension>();
    /// <summary>
    /// Required. The list of dimensions to report on. If empty, the report will
    /// have no dimensions, and any metrics will be totals.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension> Dimensions {
      get { return dimensions_; }
    }

    /// <summary>Field number for the "metrics" field.</summary>
    public const int MetricsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric> _repeated_metrics_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric) x);
    private readonly pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric> metrics_ = new pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric>();
    /// <summary>
    /// Required. The list of metrics to report on. If empty, the report will have
    /// no metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric> Metrics {
      get { return metrics_; }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> filters_ = new pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter>();
    /// <summary>
    /// Optional. The filters for this report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> Filters {
      get { return filters_; }
    }

    /// <summary>Field number for the "time_zone_source" field.</summary>
    public const int TimeZoneSourceFieldNumber = 20;
    private global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource timeZoneSource_ = global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource.Unspecified;
    /// <summary>
    /// Optional. Where to get the time zone for this report. Defaults to using the
    /// network time zone setting (PUBLISHER). If source is PROVIDED, the time_zone
    /// field in the report definition must also set a time zone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource TimeZoneSource {
      get { return timeZoneSource_; }
      set {
        timeZoneSource_ = value;
      }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 4;
    private string timeZone_ = "";
    /// <summary>
    /// Optional. If time_zone_source is PROVIDED, this is the time zone to use for
    /// this report. Leave empty for any other time zone source. Time zone in IANA
    /// format. For example, "America/New_York".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 5;
    private string currencyCode_ = "";
    /// <summary>
    /// Optional. The ISO 4217 currency code for this report. Defaults to publisher
    /// currency code if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "date_range" field.</summary>
    public const int DateRangeFieldNumber = 6;
    private global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange dateRange_;
    /// <summary>
    /// Required. The primary date range of this report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange DateRange {
      get { return dateRange_; }
      set {
        dateRange_ = value;
      }
    }

    /// <summary>Field number for the "comparison_date_range" field.</summary>
    public const int ComparisonDateRangeFieldNumber = 9;
    private global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange comparisonDateRange_;
    /// <summary>
    /// Optional. The comparison date range of this report. If unspecified, the
    /// report won't have any comparison metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange ComparisonDateRange {
      get { return comparisonDateRange_; }
      set {
        comparisonDateRange_ = value;
      }
    }

    /// <summary>Field number for the "custom_dimension_key_ids" field.</summary>
    public const int CustomDimensionKeyIdsFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_customDimensionKeyIds_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> customDimensionKeyIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
    /// dimensions. The index of this repeated field corresponds to the index on
    /// each dimension. For example, custom_dimension_key_ids[0] describes
    /// CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> CustomDimensionKeyIds {
      get { return customDimensionKeyIds_; }
    }

    /// <summary>Field number for the "line_item_custom_field_ids" field.</summary>
    public const int LineItemCustomFieldIdsFieldNumber = 11;
    private static readonly pb::FieldCodec<long> _repeated_lineItemCustomFieldIds_codec
        = pb::FieldCodec.ForInt64(90);
    private readonly pbc::RepeatedField<long> lineItemCustomFieldIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
    /// dimensions. The index of this repeated field corresponds to the index on
    /// each dimension. For example, line_item_custom_field_ids[0] describes
    /// LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> LineItemCustomFieldIds {
      get { return lineItemCustomFieldIds_; }
    }

    /// <summary>Field number for the "order_custom_field_ids" field.</summary>
    public const int OrderCustomFieldIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<long> _repeated_orderCustomFieldIds_codec
        = pb::FieldCodec.ForInt64(98);
    private readonly pbc::RepeatedField<long> orderCustomFieldIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
    /// dimensions. The index of this repeated field corresponds to the index on
    /// each dimension. For example, order_custom_field_ids[0] describes
    /// ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> OrderCustomFieldIds {
      get { return orderCustomFieldIds_; }
    }

    /// <summary>Field number for the "creative_custom_field_ids" field.</summary>
    public const int CreativeCustomFieldIdsFieldNumber = 13;
    private static readonly pb::FieldCodec<long> _repeated_creativeCustomFieldIds_codec
        = pb::FieldCodec.ForInt64(106);
    private readonly pbc::RepeatedField<long> creativeCustomFieldIds_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
    /// dimensions. The index of this repeated field corresponds to the index on
    /// each dimension. For example, creative_custom_field_ids[0] describes
    /// CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> CreativeCustomFieldIds {
      get { return creativeCustomFieldIds_; }
    }

    /// <summary>Field number for the "report_type" field.</summary>
    public const int ReportTypeFieldNumber = 8;
    private global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType reportType_ = global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType.Unspecified;
    /// <summary>
    /// Required. The type of this report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType ReportType {
      get { return reportType_; }
      set {
        reportType_ = value;
      }
    }

    /// <summary>Field number for the "time_period_column" field.</summary>
    public const int TimePeriodColumnFieldNumber = 10;
    private global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn timePeriodColumn_ = global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn.Unspecified;
    /// <summary>
    /// Optional. Include a time period column to introduce comparison columns in
    /// the report for each generated period. For example, set to  "QUARTERS" here
    /// to have a column for each quarter present in the primary date range. If
    /// "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
    /// column will also include comparison values for its relative previous
    /// quarter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn TimePeriodColumn {
      get { return timePeriodColumn_; }
      set {
        timePeriodColumn_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Flag> _repeated_flags_codec
        = pb::FieldCodec.ForMessage(114, global::Google.Ads.AdManager.V1.ReportDefinition.Types.Flag.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Flag> flags_ = new pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Flag>();
    /// <summary>
    /// Optional. List of flags for this report. Used to flag rows in a result set
    /// based on a set of defined filters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Flag> Flags {
      get { return flags_; }
    }

    /// <summary>Field number for the "sorts" field.</summary>
    public const int SortsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Sort> _repeated_sorts_codec
        = pb::FieldCodec.ForMessage(122, global::Google.Ads.AdManager.V1.ReportDefinition.Types.Sort.Parser);
    private readonly pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Sort> sorts_ = new pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Sort>();
    /// <summary>
    /// Optional. Default sorts to apply to this report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Sort> Sorts {
      get { return sorts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ReportDefinition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ReportDefinition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dimensions_.Equals(other.dimensions_)) return false;
      if(!metrics_.Equals(other.metrics_)) return false;
      if(!filters_.Equals(other.filters_)) return false;
      if (TimeZoneSource != other.TimeZoneSource) return false;
      if (TimeZone != other.TimeZone) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if (!object.Equals(DateRange, other.DateRange)) return false;
      if (!object.Equals(ComparisonDateRange, other.ComparisonDateRange)) return false;
      if(!customDimensionKeyIds_.Equals(other.customDimensionKeyIds_)) return false;
      if(!lineItemCustomFieldIds_.Equals(other.lineItemCustomFieldIds_)) return false;
      if(!orderCustomFieldIds_.Equals(other.orderCustomFieldIds_)) return false;
      if(!creativeCustomFieldIds_.Equals(other.creativeCustomFieldIds_)) return false;
      if (ReportType != other.ReportType) return false;
      if (TimePeriodColumn != other.TimePeriodColumn) return false;
      if(!flags_.Equals(other.flags_)) return false;
      if(!sorts_.Equals(other.sorts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dimensions_.GetHashCode();
      hash ^= metrics_.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (TimeZoneSource != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource.Unspecified) hash ^= TimeZoneSource.GetHashCode();
      if (TimeZone.Length != 0) hash ^= TimeZone.GetHashCode();
      if (CurrencyCode.Length != 0) hash ^= CurrencyCode.GetHashCode();
      if (dateRange_ != null) hash ^= DateRange.GetHashCode();
      if (comparisonDateRange_ != null) hash ^= ComparisonDateRange.GetHashCode();
      hash ^= customDimensionKeyIds_.GetHashCode();
      hash ^= lineItemCustomFieldIds_.GetHashCode();
      hash ^= orderCustomFieldIds_.GetHashCode();
      hash ^= creativeCustomFieldIds_.GetHashCode();
      if (ReportType != global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType.Unspecified) hash ^= ReportType.GetHashCode();
      if (TimePeriodColumn != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn.Unspecified) hash ^= TimePeriodColumn.GetHashCode();
      hash ^= flags_.GetHashCode();
      hash ^= sorts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      dimensions_.WriteTo(output, _repeated_dimensions_codec);
      metrics_.WriteTo(output, _repeated_metrics_codec);
      filters_.WriteTo(output, _repeated_filters_codec);
      if (TimeZone.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TimeZone);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CurrencyCode);
      }
      if (dateRange_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DateRange);
      }
      customDimensionKeyIds_.WriteTo(output, _repeated_customDimensionKeyIds_codec);
      if (ReportType != global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ReportType);
      }
      if (comparisonDateRange_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ComparisonDateRange);
      }
      if (TimePeriodColumn != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TimePeriodColumn);
      }
      lineItemCustomFieldIds_.WriteTo(output, _repeated_lineItemCustomFieldIds_codec);
      orderCustomFieldIds_.WriteTo(output, _repeated_orderCustomFieldIds_codec);
      creativeCustomFieldIds_.WriteTo(output, _repeated_creativeCustomFieldIds_codec);
      flags_.WriteTo(output, _repeated_flags_codec);
      sorts_.WriteTo(output, _repeated_sorts_codec);
      if (TimeZoneSource != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) TimeZoneSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      dimensions_.WriteTo(ref output, _repeated_dimensions_codec);
      metrics_.WriteTo(ref output, _repeated_metrics_codec);
      filters_.WriteTo(ref output, _repeated_filters_codec);
      if (TimeZone.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TimeZone);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CurrencyCode);
      }
      if (dateRange_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DateRange);
      }
      customDimensionKeyIds_.WriteTo(ref output, _repeated_customDimensionKeyIds_codec);
      if (ReportType != global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ReportType);
      }
      if (comparisonDateRange_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ComparisonDateRange);
      }
      if (TimePeriodColumn != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn.Unspecified) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TimePeriodColumn);
      }
      lineItemCustomFieldIds_.WriteTo(ref output, _repeated_lineItemCustomFieldIds_codec);
      orderCustomFieldIds_.WriteTo(ref output, _repeated_orderCustomFieldIds_codec);
      creativeCustomFieldIds_.WriteTo(ref output, _repeated_creativeCustomFieldIds_codec);
      flags_.WriteTo(ref output, _repeated_flags_codec);
      sorts_.WriteTo(ref output, _repeated_sorts_codec);
      if (TimeZoneSource != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) TimeZoneSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += dimensions_.CalculateSize(_repeated_dimensions_codec);
      size += metrics_.CalculateSize(_repeated_metrics_codec);
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (TimeZoneSource != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeZoneSource);
      }
      if (TimeZone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeZone);
      }
      if (CurrencyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      if (dateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DateRange);
      }
      if (comparisonDateRange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ComparisonDateRange);
      }
      size += customDimensionKeyIds_.CalculateSize(_repeated_customDimensionKeyIds_codec);
      size += lineItemCustomFieldIds_.CalculateSize(_repeated_lineItemCustomFieldIds_codec);
      size += orderCustomFieldIds_.CalculateSize(_repeated_orderCustomFieldIds_codec);
      size += creativeCustomFieldIds_.CalculateSize(_repeated_creativeCustomFieldIds_codec);
      if (ReportType != global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReportType);
      }
      if (TimePeriodColumn != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimePeriodColumn);
      }
      size += flags_.CalculateSize(_repeated_flags_codec);
      size += sorts_.CalculateSize(_repeated_sorts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ReportDefinition other) {
      if (other == null) {
        return;
      }
      dimensions_.Add(other.dimensions_);
      metrics_.Add(other.metrics_);
      filters_.Add(other.filters_);
      if (other.TimeZoneSource != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource.Unspecified) {
        TimeZoneSource = other.TimeZoneSource;
      }
      if (other.TimeZone.Length != 0) {
        TimeZone = other.TimeZone;
      }
      if (other.CurrencyCode.Length != 0) {
        CurrencyCode = other.CurrencyCode;
      }
      if (other.dateRange_ != null) {
        if (dateRange_ == null) {
          DateRange = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange();
        }
        DateRange.MergeFrom(other.DateRange);
      }
      if (other.comparisonDateRange_ != null) {
        if (comparisonDateRange_ == null) {
          ComparisonDateRange = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange();
        }
        ComparisonDateRange.MergeFrom(other.ComparisonDateRange);
      }
      customDimensionKeyIds_.Add(other.customDimensionKeyIds_);
      lineItemCustomFieldIds_.Add(other.lineItemCustomFieldIds_);
      orderCustomFieldIds_.Add(other.orderCustomFieldIds_);
      creativeCustomFieldIds_.Add(other.creativeCustomFieldIds_);
      if (other.ReportType != global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType.Unspecified) {
        ReportType = other.ReportType;
      }
      if (other.TimePeriodColumn != global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn.Unspecified) {
        TimePeriodColumn = other.TimePeriodColumn;
      }
      flags_.Add(other.flags_);
      sorts_.Add(other.sorts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            dimensions_.AddEntriesFrom(input, _repeated_dimensions_codec);
            break;
          }
          case 18:
          case 16: {
            metrics_.AddEntriesFrom(input, _repeated_metrics_codec);
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
          case 34: {
            TimeZone = input.ReadString();
            break;
          }
          case 42: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 50: {
            if (dateRange_ == null) {
              DateRange = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange();
            }
            input.ReadMessage(DateRange);
            break;
          }
          case 58:
          case 56: {
            customDimensionKeyIds_.AddEntriesFrom(input, _repeated_customDimensionKeyIds_codec);
            break;
          }
          case 64: {
            ReportType = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType) input.ReadEnum();
            break;
          }
          case 74: {
            if (comparisonDateRange_ == null) {
              ComparisonDateRange = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange();
            }
            input.ReadMessage(ComparisonDateRange);
            break;
          }
          case 80: {
            TimePeriodColumn = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn) input.ReadEnum();
            break;
          }
          case 90:
          case 88: {
            lineItemCustomFieldIds_.AddEntriesFrom(input, _repeated_lineItemCustomFieldIds_codec);
            break;
          }
          case 98:
          case 96: {
            orderCustomFieldIds_.AddEntriesFrom(input, _repeated_orderCustomFieldIds_codec);
            break;
          }
          case 106:
          case 104: {
            creativeCustomFieldIds_.AddEntriesFrom(input, _repeated_creativeCustomFieldIds_codec);
            break;
          }
          case 114: {
            flags_.AddEntriesFrom(input, _repeated_flags_codec);
            break;
          }
          case 122: {
            sorts_.AddEntriesFrom(input, _repeated_sorts_codec);
            break;
          }
          case 160: {
            TimeZoneSource = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            dimensions_.AddEntriesFrom(ref input, _repeated_dimensions_codec);
            break;
          }
          case 18:
          case 16: {
            metrics_.AddEntriesFrom(ref input, _repeated_metrics_codec);
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(ref input, _repeated_filters_codec);
            break;
          }
          case 34: {
            TimeZone = input.ReadString();
            break;
          }
          case 42: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 50: {
            if (dateRange_ == null) {
              DateRange = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange();
            }
            input.ReadMessage(DateRange);
            break;
          }
          case 58:
          case 56: {
            customDimensionKeyIds_.AddEntriesFrom(ref input, _repeated_customDimensionKeyIds_codec);
            break;
          }
          case 64: {
            ReportType = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.ReportType) input.ReadEnum();
            break;
          }
          case 74: {
            if (comparisonDateRange_ == null) {
              ComparisonDateRange = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange();
            }
            input.ReadMessage(ComparisonDateRange);
            break;
          }
          case 80: {
            TimePeriodColumn = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimePeriodColumn) input.ReadEnum();
            break;
          }
          case 90:
          case 88: {
            lineItemCustomFieldIds_.AddEntriesFrom(ref input, _repeated_lineItemCustomFieldIds_codec);
            break;
          }
          case 98:
          case 96: {
            orderCustomFieldIds_.AddEntriesFrom(ref input, _repeated_orderCustomFieldIds_codec);
            break;
          }
          case 106:
          case 104: {
            creativeCustomFieldIds_.AddEntriesFrom(ref input, _repeated_creativeCustomFieldIds_codec);
            break;
          }
          case 114: {
            flags_.AddEntriesFrom(ref input, _repeated_flags_codec);
            break;
          }
          case 122: {
            sorts_.AddEntriesFrom(ref input, _repeated_sorts_codec);
            break;
          }
          case 160: {
            TimeZoneSource = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.TimeZoneSource) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ReportDefinition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Supported report types.
      /// </summary>
      public enum ReportType {
        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        [pbr::OriginalName("REPORT_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Historical.
        /// </summary>
        [pbr::OriginalName("HISTORICAL")] Historical = 1,
        /// <summary>
        /// Reach.
        /// </summary>
        [pbr::OriginalName("REACH")] Reach = 5,
        /// <summary>
        /// Privacy and messaging.
        /// </summary>
        [pbr::OriginalName("PRIVACY_AND_MESSAGING")] PrivacyAndMessaging = 6,
        /// <summary>
        /// Ad speed.
        /// </summary>
        [pbr::OriginalName("AD_SPEED")] AdSpeed = 13,
      }

      /// <summary>
      /// Reporting dimensions.
      /// </summary>
      public enum Dimension {
        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        [pbr::OriginalName("DIMENSION_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        ///  The measurement source of a video ad.
        ///
        /// Corresponds to "Active View measurement source value" in the Ad Manager
        /// UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_MEASUREMENT_SOURCE")] ActiveViewMeasurementSource = 575,
        /// <summary>
        /// Active View measurement source localized name.
        ///
        /// Corresponds to "Active View measurement source" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_MEASUREMENT_SOURCE_NAME")] ActiveViewMeasurementSourceName = 576,
        /// <summary>
        /// Advertiser credit status ENUM
        ///
        /// Corresponds to "Advertiser credit status value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_CREDIT_STATUS")] AdvertiserCreditStatus = 475,
        /// <summary>
        /// Advertiser credit status locallized name
        ///
        /// Corresponds to "Advertiser credit status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_CREDIT_STATUS_NAME")] AdvertiserCreditStatusName = 476,
        /// <summary>
        /// The domain name of the advertiser.
        ///
        /// Corresponds to "Advertiser domain" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_DOMAIN_NAME")] AdvertiserDomainName = 242,
        /// <summary>
        /// The ID used in an external system for advertiser identification
        ///
        /// Corresponds to "Advertiser external ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_EXTERNAL_ID")] AdvertiserExternalId = 228,
        /// <summary>
        /// The ID of an advertiser company assigned to an order
        ///
        /// Corresponds to "Advertiser ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_ID")] AdvertiserId = 131,
        /// <summary>
        /// Labels applied to the advertiser
        ///  can be used for either competitive exclusion or ad exclusion
        ///
        /// Corresponds to "Advertiser labels" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_LABELS")] AdvertiserLabels = 230,
        /// <summary>
        /// Label ids applied to the advertiser
        ///  can be used for either competitive exclusion or ad exclusion
        ///
        /// Corresponds to "Advertiser label IDs" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_LABEL_IDS")] AdvertiserLabelIds = 229,
        /// <summary>
        /// The name of an advertiser company assigned to an order
        ///
        /// Corresponds to "Advertiser" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_NAME")] AdvertiserName = 132,
        /// <summary>
        /// The name of the contact associated with an advertiser company
        ///
        /// Corresponds to "Advertiser primary contact" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_PRIMARY_CONTACT")] AdvertiserPrimaryContact = 227,
        /// <summary>
        /// Advertiser status ENUM
        ///
        /// Corresponds to "Advertiser status value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_STATUS")] AdvertiserStatus = 471,
        /// <summary>
        /// Advertiser status locallized name
        ///
        /// Corresponds to "Advertiser status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_STATUS_NAME")] AdvertiserStatusName = 472,
        /// <summary>
        /// Advertiser type ENUM
        ///
        /// Corresponds to "Advertiser type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_TYPE")] AdvertiserType = 473,
        /// <summary>
        /// Advertiser type locallized name
        ///
        /// Corresponds to "Advertiser type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_TYPE_NAME")] AdvertiserTypeName = 474,
        /// <summary>
        /// The category of an advertiser, such as Arts &amp; Entertainment or Travel &amp;
        ///  Tourism.
        ///
        /// Corresponds to "Advertiser vertical" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADVERTISER_VERTICAL")] AdvertiserVertical = 580,
        /// <summary>
        /// Classification of different Ad Exchange products.
        ///
        /// Corresponds to "Ad Exchange product value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("ADX_PRODUCT")] AdxProduct = 499,
        /// <summary>
        /// Localized name of the classification of different Ad Exchange
        ///  products.
        ///
        /// Corresponds to "Ad Exchange product" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ADX_PRODUCT_NAME")] AdxProductName = 500,
        /// <summary>
        /// Ad experiences type.
        ///
        /// Corresponds to "Ad experiences value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("AD_EXPERIENCES_TYPE")] AdExperiencesType = 641,
        /// <summary>
        /// Localized name of the Ad experiences type.
        ///
        /// Corresponds to "Ad experiences" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_EXPERIENCES_TYPE_NAME")] AdExperiencesTypeName = 642,
        /// <summary>
        /// Shows an ENUM value describing whether a given piece of publisher
        ///  inventory was above (ATF) or below the fold (BTF) of a page.
        ///
        /// Corresponds to "Ad location value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("AD_LOCATION")] AdLocation = 390,
        /// <summary>
        /// Shows a localized string describing whether a given piece of publisher
        ///  inventory was above (ATF) or below the fold (BTF) of a page.
        ///
        /// Corresponds to "Ad location" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_LOCATION_NAME")] AdLocationName = 391,
        /// <summary>
        /// The domain of the ad technology provider associated with the bid.
        ///
        /// Corresponds to "Ad technology provider domain" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_TECHNOLOGY_PROVIDER_DOMAIN")] AdTechnologyProviderDomain = 620,
        /// <summary>
        /// The ID of the ad technology provider associated with the bid.
        ///
        /// Corresponds to "Ad technology provider ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_TECHNOLOGY_PROVIDER_ID")] AdTechnologyProviderId = 621,
        /// <summary>
        /// The name of the ad technology provider associated with the bid.
        ///
        /// Corresponds to "Ad technology provider" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_TECHNOLOGY_PROVIDER_NAME")] AdTechnologyProviderName = 622,
        /// <summary>
        /// Segmentation of ad types.
        ///
        /// Corresponds to "Ad type value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("AD_TYPE")] AdType = 497,
        /// <summary>
        /// Localized name of the ad type.
        ///
        /// Corresponds to "Ad type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_TYPE_NAME")] AdTypeName = 498,
        /// <summary>
        /// The code of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit code" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
        /// `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE")] AdUnitCode = 64,
        /// <summary>
        /// The code of the first level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 1" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_1")] AdUnitCodeLevel1 = 65,
        /// <summary>
        /// The code of the tenth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 10" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_10")] AdUnitCodeLevel10 = 74,
        /// <summary>
        /// The code of the eleventh level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 11" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_11")] AdUnitCodeLevel11 = 75,
        /// <summary>
        /// The code of the twelfth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 12" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_12")] AdUnitCodeLevel12 = 76,
        /// <summary>
        /// The code of the thirteenth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 13" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_13")] AdUnitCodeLevel13 = 77,
        /// <summary>
        /// The code of the fourteenth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 14" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_14")] AdUnitCodeLevel14 = 78,
        /// <summary>
        /// The code of the fifteenth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 15" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_15")] AdUnitCodeLevel15 = 79,
        /// <summary>
        /// The code of the sixteenth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 16" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_16")] AdUnitCodeLevel16 = 80,
        /// <summary>
        /// The code of the second level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 2" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_2")] AdUnitCodeLevel2 = 66,
        /// <summary>
        /// The code of the third level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 3" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_3")] AdUnitCodeLevel3 = 67,
        /// <summary>
        /// The code of the fourth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 4" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_4")] AdUnitCodeLevel4 = 68,
        /// <summary>
        /// The code of the fifth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 5" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_5")] AdUnitCodeLevel5 = 69,
        /// <summary>
        /// The code of the sixth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 6" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_6")] AdUnitCodeLevel6 = 70,
        /// <summary>
        /// The code of the seventh level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 7" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_7")] AdUnitCodeLevel7 = 71,
        /// <summary>
        /// The code of the eighth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 8" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_8")] AdUnitCodeLevel8 = 72,
        /// <summary>
        /// The code of the ninth level ad unit of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit code level 9" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_CODE_LEVEL_9")] AdUnitCodeLevel9 = 73,
        /// <summary>
        /// The ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
        /// `REACH`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID")] AdUnitId = 25,
        /// <summary>
        /// The full hierarchy of ad unit IDs where the ad was requested, from
        ///  root to leaf, excluding the root ad unit ID.
        ///
        /// Corresponds to "Ad unit ID (all levels)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
        /// `REACH`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_ALL_LEVEL")] AdUnitIdAllLevel = 27,
        /// <summary>
        /// The first level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 1" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_1")] AdUnitIdLevel1 = 30,
        /// <summary>
        /// The tenth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 10" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_10")] AdUnitIdLevel10 = 48,
        /// <summary>
        /// The eleventh level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 11" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_11")] AdUnitIdLevel11 = 50,
        /// <summary>
        /// The twelfth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 12" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_12")] AdUnitIdLevel12 = 52,
        /// <summary>
        /// The thirteenth level ad unit ID of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit ID level 13" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_13")] AdUnitIdLevel13 = 54,
        /// <summary>
        /// The fourteenth level ad unit ID of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit ID level 14" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_14")] AdUnitIdLevel14 = 56,
        /// <summary>
        /// The fifteenth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 15" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_15")] AdUnitIdLevel15 = 58,
        /// <summary>
        /// The sixteenth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 16" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_16")] AdUnitIdLevel16 = 60,
        /// <summary>
        /// The second level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 2" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_2")] AdUnitIdLevel2 = 32,
        /// <summary>
        /// The third level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 3" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_3")] AdUnitIdLevel3 = 34,
        /// <summary>
        /// The fourth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 4" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_4")] AdUnitIdLevel4 = 36,
        /// <summary>
        /// The fifth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 5" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_5")] AdUnitIdLevel5 = 38,
        /// <summary>
        /// The sixth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 6" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_6")] AdUnitIdLevel6 = 40,
        /// <summary>
        /// The seventh level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 7" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_7")] AdUnitIdLevel7 = 42,
        /// <summary>
        /// The eighth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 8" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_8")] AdUnitIdLevel8 = 44,
        /// <summary>
        /// The ninth level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID level 9" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_LEVEL_9")] AdUnitIdLevel9 = 46,
        /// <summary>
        /// The top-level ad unit ID of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit ID (top level)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_ID_TOP_LEVEL")] AdUnitIdTopLevel = 142,
        /// <summary>
        /// The name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
        /// `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME")] AdUnitName = 26,
        /// <summary>
        /// The full hierarchy of ad unit names where the ad was requested, from
        ///  root to leaf, excluding the root ad unit name.
        ///
        /// Corresponds to "Ad unit (all levels)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
        /// `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_ALL_LEVEL")] AdUnitNameAllLevel = 29,
        /// <summary>
        /// The first level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 1" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_1")] AdUnitNameLevel1 = 31,
        /// <summary>
        /// The tenth level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 10" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_10")] AdUnitNameLevel10 = 49,
        /// <summary>
        /// The eleventh level ad unit name of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit level 11" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_11")] AdUnitNameLevel11 = 51,
        /// <summary>
        /// The twelfth level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 12" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_12")] AdUnitNameLevel12 = 53,
        /// <summary>
        /// The thirteenth level ad unit name of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit level 13" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_13")] AdUnitNameLevel13 = 55,
        /// <summary>
        /// The fourteenth level ad unit name of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit level 14" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_14")] AdUnitNameLevel14 = 57,
        /// <summary>
        /// The fifteenth level ad unit name of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit level 15" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_15")] AdUnitNameLevel15 = 59,
        /// <summary>
        /// The sixteenth level ad unit name of the ad unit where the ad was
        ///  requested.
        ///
        /// Corresponds to "Ad unit level 16" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_16")] AdUnitNameLevel16 = 61,
        /// <summary>
        /// The second level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 2" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_2")] AdUnitNameLevel2 = 33,
        /// <summary>
        /// The third level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 3" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_3")] AdUnitNameLevel3 = 35,
        /// <summary>
        /// The fourth level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 4" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_4")] AdUnitNameLevel4 = 37,
        /// <summary>
        /// The fifth level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 5" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_5")] AdUnitNameLevel5 = 39,
        /// <summary>
        /// The sixth level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 6" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_6")] AdUnitNameLevel6 = 41,
        /// <summary>
        /// The seventh level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 7" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_7")] AdUnitNameLevel7 = 43,
        /// <summary>
        /// The eighth level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 8" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_8")] AdUnitNameLevel8 = 45,
        /// <summary>
        /// The ninth level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit level 9" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_LEVEL_9")] AdUnitNameLevel9 = 47,
        /// <summary>
        /// The top-level ad unit name of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit (top level)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_NAME_TOP_LEVEL")] AdUnitNameTopLevel = 143,
        /// <summary>
        /// The reward amount of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit reward amount" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
        /// `REACH`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_REWARD_AMOUNT")] AdUnitRewardAmount = 63,
        /// <summary>
        /// The reward type of the ad unit where the ad was requested.
        ///
        /// Corresponds to "Ad unit reward type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`,
        /// `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_REWARD_TYPE")] AdUnitRewardType = 62,
        /// <summary>
        /// The status of the ad unit
        ///
        /// Corresponds to "Ad unit status value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_STATUS")] AdUnitStatus = 206,
        /// <summary>
        /// The name of the status of the ad unit
        ///
        /// Corresponds to "Ad unit status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_STATUS_NAME")] AdUnitStatusName = 207,
        /// <summary>
        /// The ID of an agency at level 1 of agency hierarchy.
        ///
        /// Corresponds to "Agency ID (Level 1)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AGENCY_LEVEL_1_ID")] AgencyLevel1Id = 565,
        /// <summary>
        /// The name of an agency at level 1 of agency hierarchy.
        ///
        /// Corresponds to "Agency (Level 1)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AGENCY_LEVEL_1_NAME")] AgencyLevel1Name = 566,
        /// <summary>
        /// The ID of an agency at level 2 of agency hierarchy.
        ///
        /// Corresponds to "Agency ID (Level 2)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AGENCY_LEVEL_2_ID")] AgencyLevel2Id = 567,
        /// <summary>
        /// The name of an agency at level 2 of agency hierarchy.
        ///
        /// Corresponds to "Agency (Level 2)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AGENCY_LEVEL_2_NAME")] AgencyLevel2Name = 568,
        /// <summary>
        /// The ID of an agency at level 3 of agency hierarchy.
        ///
        /// Corresponds to "Agency ID (Level 3)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AGENCY_LEVEL_3_ID")] AgencyLevel3Id = 569,
        /// <summary>
        /// The name of an agency at level 3 of agency hierarchy.
        ///
        /// Corresponds to "Agency (Level 3)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AGENCY_LEVEL_3_NAME")] AgencyLevel3Name = 570,
        /// <summary>
        /// User age bracket enum.
        ///
        /// Corresponds to "Age bracket value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("AGE_BRACKET")] AgeBracket = 508,
        /// <summary>
        /// Localized user age bracket returned from Google Analytics. For example,
        ///  "18-24", "25-34", "35-44", "45-54", "55-64", "65+".
        ///
        /// Corresponds to "Age bracket" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AGE_BRACKET_NAME")] AgeBracketName = 582,
        /// <summary>
        /// Enum value for App Tracking Transparency consent status.
        ///
        /// Corresponds to "App Tracking Transparency consent status value" in the Ad
        /// Manager UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("APP_TRACKING_TRANSPARENCY_CONSENT_STATUS")] AppTrackingTransparencyConsentStatus = 442,
        /// <summary>
        /// Localized string value for App Tracking Transparency consent status.
        ///
        /// Corresponds to "App Tracking Transparency consent status" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("APP_TRACKING_TRANSPARENCY_CONSENT_STATUS_NAME")] AppTrackingTransparencyConsentStatusName = 443,
        /// <summary>
        /// The app version.
        ///
        /// Corresponds to "App version" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("APP_VERSION")] AppVersion = 392,
        /// <summary>
        /// The name of Auction Package deal
        ///
        /// Corresponds to "Auction package deal" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AUCTION_PACKAGE_DEAL")] AuctionPackageDeal = 579,
        /// <summary>
        /// The ID of Auction Package deal
        ///
        /// Corresponds to "Auction package deal ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AUCTION_PACKAGE_DEAL_ID")] AuctionPackageDealId = 571,
        /// <summary>
        /// ID of targeted audience segment, including all first-party and
        ///  third-party segments that matched the user on the winning line item.
        ///
        /// Corresponds to "Audience segment ID (targeted)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("AUDIENCE_SEGMENT_ID_TARGETED")] AudienceSegmentIdTargeted = 584,
        /// <summary>
        /// Name of targeted audience segment, including all first-party and
        ///  third-party segments that matched the user on the winning line item.
        ///
        /// Corresponds to "Audience segment (targeted)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AUDIENCE_SEGMENT_TARGETED")] AudienceSegmentTargeted = 585,
        /// <summary>
        /// Enum value of Auto refreshed traffic.
        ///
        /// Corresponds to "Auto refreshed traffic value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("AUTO_REFRESHED_TRAFFIC")] AutoRefreshedTraffic = 421,
        /// <summary>
        /// Indicates if the traffic is from auto-refreshed ad requests.
        ///
        /// Corresponds to "Auto refreshed traffic" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("AUTO_REFRESHED_TRAFFIC_NAME")] AutoRefreshedTrafficName = 422,
        /// <summary>
        /// The encrypted version of BIDDER_ID.
        ///
        /// Corresponds to "Bidder encrypted ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("BIDDER_ENCRYPTED_ID")] BidderEncryptedId = 493,
        /// <summary>
        /// The name of the bidder.
        ///
        /// Corresponds to "Bidder" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("BIDDER_NAME")] BidderName = 494,
        /// <summary>
        /// The cpm range within which a bid falls.
        ///
        /// Corresponds to "Bid Range" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BID_RANGE`
        /// </summary>
        [pbr::OriginalName("BID_RANGE")] BidRange = 679,
        /// <summary>
        /// The reason a bid was rejected.
        ///
        /// Corresponds to "Bid rejection reason value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("BID_REJECTION_REASON")] BidRejectionReason = 599,
        /// <summary>
        /// The localized name of the reason a bid was rejected.
        ///
        /// Corresponds to "Bid rejection reason" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("BID_REJECTION_REASON_NAME")] BidRejectionReasonName = 600,
        /// <summary>
        /// The amount of information about the Publisher's page sent to the buyer
        ///  who purchased the impressions.
        ///
        /// Corresponds to "Branding type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("BRANDING_TYPE")] BrandingType = 383,
        /// <summary>
        /// The localized version of branding type, the amount of information about
        ///  the Publisher's page sent to the buyer who purchased the impressions.
        ///
        /// Corresponds to "Branding type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("BRANDING_TYPE_NAME")] BrandingTypeName = 384,
        /// <summary>
        /// Browser category.
        ///
        /// Corresponds to "Browser category value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("BROWSER_CATEGORY")] BrowserCategory = 119,
        /// <summary>
        /// Browser category name.
        ///
        /// Corresponds to "Browser category" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("BROWSER_CATEGORY_NAME")] BrowserCategoryName = 120,
        /// <summary>
        /// The ID of the browser.
        ///
        /// Corresponds to "Browser ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("BROWSER_ID")] BrowserId = 235,
        /// <summary>
        /// The name of the browser.
        ///
        /// Corresponds to "Browser" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("BROWSER_NAME")] BrowserName = 236,
        /// <summary>
        /// The ID of the buyer network.
        ///
        /// Corresponds to "Buyer network ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("BUYER_NETWORK_ID")] BuyerNetworkId = 448,
        /// <summary>
        /// The name of the buyer network.
        ///
        /// Corresponds to "Buyer network" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("BUYER_NETWORK_NAME")] BuyerNetworkName = 449,
        /// <summary>
        /// The callout status category in the Ads traffic navigator report.
        ///
        /// Corresponds to "Callout status category value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CALLOUT_STATUS_CATEGORY")] CalloutStatusCategory = 588,
        /// <summary>
        /// The callout status category name in the Ads traffic navigator report.
        ///
        /// Corresponds to "Callout status category" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CALLOUT_STATUS_CATEGORY_NAME")] CalloutStatusCategoryName = 589,
        /// <summary>
        /// Mobile carrier ID.
        ///
        /// Corresponds to "Carrier ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CARRIER_ID")] CarrierId = 369,
        /// <summary>
        /// Name of the mobile carrier.
        ///
        /// Corresponds to "Carrier" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CARRIER_NAME")] CarrierName = 368,
        /// <summary>
        /// Inventory segmentation by channel.
        ///
        /// Corresponds to "Channel" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CHANNEL")] Channel = 501,
        /// <summary>
        /// Child Publisher Network Code
        ///
        /// Corresponds to "Child network code" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CHILD_NETWORK_CODE")] ChildNetworkCode = 542,
        /// <summary>
        /// Child Publisher Network ID
        ///
        /// Corresponds to "Child network ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CHILD_NETWORK_ID")] ChildNetworkId = 544,
        /// <summary>
        /// Child Partner Network Name
        ///
        /// Corresponds to "Child network" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CHILD_PARTNER_NAME")] ChildPartnerName = 543,
        /// <summary>
        /// The criteria ID of the city in which the ad served.
        ///
        /// Corresponds to "City ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CITY_ID")] CityId = 459,
        /// <summary>
        /// The name of the city in which the ad served.
        ///
        /// Corresponds to "City" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CITY_NAME")] CityName = 452,
        /// <summary>
        /// The ID of an advertiser, classified by Google, associated with a creative
        ///  transacted
        ///
        /// Corresponds to "Advertiser ID (classified)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CLASSIFIED_ADVERTISER_ID")] ClassifiedAdvertiserId = 133,
        /// <summary>
        /// The name of an advertiser, classified by Google, associated with a
        ///  creative transacted
        ///
        /// Corresponds to "Advertiser (classified)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CLASSIFIED_ADVERTISER_NAME")] ClassifiedAdvertiserName = 134,
        /// <summary>
        /// ID of the brand, as classified by Google,
        ///
        /// Corresponds to "Brand ID (classified)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CLASSIFIED_BRAND_ID")] ClassifiedBrandId = 243,
        /// <summary>
        /// Name of the brand, as classified by Google,
        ///
        /// Corresponds to "Brand (classified)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CLASSIFIED_BRAND_NAME")] ClassifiedBrandName = 244,
        /// <summary>
        /// The display name of the CMS content.
        ///
        /// Corresponds to "Content source name" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CONTENT_CMS_NAME")] ContentCmsName = 643,
        /// <summary>
        /// The CMS content ID of the video content.
        ///
        /// Corresponds to "ID of the video in the content source" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CONTENT_CMS_VIDEO_ID")] ContentCmsVideoId = 644,
        /// <summary>
        /// ID of the video content served.
        ///
        /// Corresponds to "Content ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CONTENT_ID")] ContentId = 246,
        /// <summary>
        /// Content mapping presence ENUM value
        ///
        /// Corresponds to "Content mapping presence value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CONTENT_MAPPING_PRESENCE")] ContentMappingPresence = 731,
        /// <summary>
        /// Content mapping presence name
        ///
        /// Corresponds to "Content mapping presence" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CONTENT_MAPPING_PRESENCE_NAME")] ContentMappingPresenceName = 732,
        /// <summary>
        /// Name of the video content served.
        ///
        /// Corresponds to "Content" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CONTENT_NAME")] ContentName = 247,
        /// <summary>
        /// The continent in which the ad served (derived from country).
        ///
        /// Corresponds to "Continent value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CONTINENT")] Continent = 469,
        /// <summary>
        /// The name of the continent in which the ad served (derived from country).
        ///
        /// Corresponds to "Continent" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CONTINENT_NAME")] ContinentName = 470,
        /// <summary>
        /// The ISO code of the country in which the ad served.
        ///
        /// Corresponds to "Country code" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("COUNTRY_CODE")] CountryCode = 466,
        /// <summary>
        /// The criteria ID of the country in which the ad served.
        ///
        /// Corresponds to "Country ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("COUNTRY_ID")] CountryId = 11,
        /// <summary>
        /// The name of the country in which the ad served.
        ///
        /// Corresponds to "Country" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("COUNTRY_NAME")] CountryName = 12,
        /// <summary>
        /// Enum value of creative billing type
        ///
        /// Corresponds to "Creative billing type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CREATIVE_BILLING_TYPE")] CreativeBillingType = 366,
        /// <summary>
        /// Localized string value of creative billing type
        ///
        /// Corresponds to "Creative billing type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_BILLING_TYPE_NAME")] CreativeBillingTypeName = 367,
        /// <summary>
        /// Represents the click-through URL of a creative
        ///
        /// Corresponds to "Creative click through url" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_CLICK_THROUGH_URL")] CreativeClickThroughUrl = 174,
        /// <summary>
        /// The ID of a creative
        ///
        /// Corresponds to "Creative ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CREATIVE_ID")] CreativeId = 138,
        /// <summary>
        /// Creative name
        ///
        /// Corresponds to "Creative" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_NAME")] CreativeName = 139,
        /// <summary>
        /// Creative Policies filtering.
        ///
        /// Corresponds to "Creative policies filtering value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CREATIVE_POLICIES_FILTERING")] CreativePoliciesFiltering = 711,
        /// <summary>
        /// Localized name of the Creative Policies filtering.
        ///
        /// Corresponds to "Creative policies filtering" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_POLICIES_FILTERING_NAME")] CreativePoliciesFilteringName = 712,
        /// <summary>
        /// Creative Protections filtering (Publisher Blocks Enforcement).
        ///
        /// Corresponds to "Creative protections filtering value" in the Ad Manager
        /// UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CREATIVE_PROTECTIONS_FILTERING")] CreativeProtectionsFiltering = 704,
        /// <summary>
        /// Localized name of the Creative Protections filtering.
        ///
        /// Corresponds to "Creative protections filtering" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_PROTECTIONS_FILTERING_NAME")] CreativeProtectionsFilteringName = 705,
        /// <summary>
        /// ENUM describing whether the creative is part of a creative set and if so,
        ///  what its role in the creative set is.
        ///
        /// Corresponds to "Creative set role type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CREATIVE_SET_ROLE_TYPE")] CreativeSetRoleType = 686,
        /// <summary>
        /// Localized name describing whether the creative is part of a creative set
        ///  and if so, what its role in the creative set is.
        ///
        /// Corresponds to "Creative set role type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_SET_ROLE_TYPE_NAME")] CreativeSetRoleTypeName = 687,
        /// <summary>
        /// Creative technology ENUM
        ///
        /// Corresponds to "Creative technology value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CREATIVE_TECHNOLOGY")] CreativeTechnology = 148,
        /// <summary>
        /// Creative technology locallized name
        ///
        /// Corresponds to "Creative technology" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_TECHNOLOGY_NAME")] CreativeTechnologyName = 149,
        /// <summary>
        /// Third party vendor name of a creative
        ///
        /// Corresponds to "Creative third party vendor" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_THIRD_PARTY_VENDOR")] CreativeThirdPartyVendor = 361,
        /// <summary>
        /// Enum value of creative type
        ///
        /// Corresponds to "Creative type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CREATIVE_TYPE")] CreativeType = 344,
        /// <summary>
        /// Localized string name of creative type
        ///
        /// Corresponds to "Creative type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_TYPE_NAME")] CreativeTypeName = 345,
        /// <summary>
        /// Creative vendor ID.
        ///
        /// Corresponds to "Creative vendor ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CREATIVE_VENDOR_ID")] CreativeVendorId = 706,
        /// <summary>
        /// Name of the Creative vendor.
        ///
        /// Corresponds to "Creative vendor" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_VENDOR_NAME")] CreativeVendorName = 707,
        /// <summary>
        /// The third party where Google Ad Manager was redirected for the creative,
        ///  based on the domain.
        ///
        /// Corresponds to "Creative video redirect third party" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CREATIVE_VIDEO_REDIRECT_THIRD_PARTY")] CreativeVideoRedirectThirdParty = 562,
        /// <summary>
        /// The ID of a Curation partner
        ///
        /// Corresponds to "Curation partner ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CURATOR_ID")] CuratorId = 572,
        /// <summary>
        /// The name of a Curation partner
        ///
        /// Corresponds to "Curation partner" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CURATOR_NAME")] CuratorName = 573,
        /// <summary>
        /// Custom event ID
        ///
        /// Corresponds to "Custom event id" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CUSTOM_EVENT_ID")] CustomEventId = 737,
        /// <summary>
        /// Custom event name
        ///
        /// Corresponds to "Custom event" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CUSTOM_EVENT_NAME")] CustomEventName = 735,
        /// <summary>
        /// Custom event type
        ///
        /// Corresponds to "Custom event type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("CUSTOM_EVENT_TYPE")] CustomEventType = 736,
        /// <summary>
        /// Localized name of the custom event type
        ///
        /// Corresponds to "Custom event type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CUSTOM_EVENT_TYPE_NAME")] CustomEventTypeName = 738,
        /// <summary>
        /// The ID of an ad spot. An ad spot can be added to an ad break template, as
        ///  well as directly targeted by a video line item.
        ///
        /// Corresponds to "Custom spot ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("CUSTOM_SPOT_ID")] CustomSpotId = 423,
        /// <summary>
        /// The name of an ad spot. An ad spot can be added to an ad break
        ///  template, as well as directly targeted by a video line item.
        ///
        /// Corresponds to "Custom spot" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("CUSTOM_SPOT_NAME")] CustomSpotName = 424,
        /// <summary>
        /// Breaks down reporting data by date.
        ///
        /// Corresponds to "Date" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `DATE`
        /// </summary>
        [pbr::OriginalName("DATE")] Date = 3,
        /// <summary>
        /// Breaks down reporting data by day of the week. Monday is 1 and 7 is
        ///  Sunday.
        ///
        /// Corresponds to "Day of week" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("DAY_OF_WEEK")] DayOfWeek = 4,
        /// <summary>
        /// The ID of the buyer of a deal.
        ///
        /// Corresponds to "Deal buyer ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("DEAL_BUYER_ID")] DealBuyerId = 240,
        /// <summary>
        /// The name of the buyer of a deal.
        ///
        /// Corresponds to "Deal buyer" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEAL_BUYER_NAME")] DealBuyerName = 241,
        /// <summary>
        /// Deal ID
        ///
        /// Corresponds to "Deal ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEAL_ID")] DealId = 436,
        /// <summary>
        /// Deal name
        ///
        /// Corresponds to "Deal" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEAL_NAME")] DealName = 437,
        /// <summary>
        /// The ID of the secure signals that were sent to the bidder who won the
        ///  impression.
        ///
        /// Corresponds to "Secure signal ID (delivered)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("DELIVERED_SECURE_SIGNAL_ID")] DeliveredSecureSignalId = 309,
        /// <summary>
        /// The name of the secure signals that were sent to the bidder who won the
        ///  impression.
        ///
        /// Corresponds to "Secure signal name (delivered)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DELIVERED_SECURE_SIGNAL_NAME")] DeliveredSecureSignalName = 310,
        /// <summary>
        /// Demand channel.
        ///
        /// Corresponds to "Demand channel value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("DEMAND_CHANNEL")] DemandChannel = 9,
        /// <summary>
        /// Demand channel name.
        ///
        /// Corresponds to "Demand channel" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEMAND_CHANNEL_NAME")] DemandChannelName = 10,
        /// <summary>
        /// Demand source.
        ///
        /// Corresponds to "Demand source value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("DEMAND_SOURCE")] DemandSource = 592,
        /// <summary>
        /// Demand source name.
        ///
        /// Corresponds to "Demand source" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEMAND_SOURCE_NAME")] DemandSourceName = 593,
        /// <summary>
        /// Demand subchannel.
        ///
        /// Corresponds to "Demand subchannel value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("DEMAND_SUBCHANNEL")] DemandSubchannel = 22,
        /// <summary>
        /// Demand subchannel name.
        ///
        /// Corresponds to "Demand subchannel" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEMAND_SUBCHANNEL_NAME")] DemandSubchannelName = 23,
        /// <summary>
        /// The device on which an ad was served.
        ///
        /// Corresponds to "Device value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("DEVICE")] Device = 226,
        /// <summary>
        /// The device category to which an ad is being targeted.
        ///
        /// Corresponds to "Device category value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("DEVICE_CATEGORY")] DeviceCategory = 15,
        /// <summary>
        /// The name of the category of device (smartphone, feature phone, tablet, or
        ///  desktop) to which an ad is being targeted.
        ///
        /// Corresponds to "Device category" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEVICE_CATEGORY_NAME")] DeviceCategoryName = 16,
        /// <summary>
        /// Device manufacturer ID
        ///
        /// Corresponds to "Device manufacturer ID" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("DEVICE_MANUFACTURER_ID")] DeviceManufacturerId = 525,
        /// <summary>
        /// Device manufacturer name
        ///
        /// Corresponds to "Device manufacturer" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEVICE_MANUFACTURER_NAME")] DeviceManufacturerName = 526,
        /// <summary>
        /// Device model ID
        ///
        /// Corresponds to "Device model ID" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("DEVICE_MODEL_ID")] DeviceModelId = 527,
        /// <summary>
        /// Device model name
        ///
        /// Corresponds to "Device model" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEVICE_MODEL_NAME")] DeviceModelName = 528,
        /// <summary>
        /// The localized name of the device on which an ad was served.
        ///
        /// Corresponds to "Device" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DEVICE_NAME")] DeviceName = 225,
        /// <summary>
        /// The ID of DSP Seat
        ///
        /// Corresponds to "DSP seat ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DSP_SEAT_ID")] DspSeatId = 564,
        /// <summary>
        /// Categorization of inventory sources based on AdX dynamic allocation
        ///  backfill type.
        ///
        /// Corresponds to "Dynamic allocation value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("DYNAMIC_ALLOCATION_TYPE")] DynamicAllocationType = 502,
        /// <summary>
        /// Localized name of the dynamic allocation type.
        ///
        /// Corresponds to "Dynamic allocation" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("DYNAMIC_ALLOCATION_TYPE_NAME")] DynamicAllocationTypeName = 503,
        /// <summary>
        /// Status of Encrypted Signals for Publishers delivery.
        ///
        /// Corresponds to "Secure signal delivery value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("ESP_DELIVERY")] EspDelivery = 623,
        /// <summary>
        /// Localized name of the ESP delivery status.
        ///
        /// Corresponds to "Secure signal delivery" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ESP_DELIVERY_NAME")] EspDeliveryName = 624,
        /// <summary>
        /// Whether Encrypted Signals for Publishers are present on the ad request.
        ///
        /// Corresponds to "Secure signal presence value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("ESP_PRESENCE")] EspPresence = 625,
        /// <summary>
        /// Localized name of the ESP presence status.
        ///
        /// Corresponds to "Secure signal presence" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ESP_PRESENCE_NAME")] EspPresenceName = 626,
        /// <summary>
        /// Exchange bidding deal ID.
        ///
        /// Corresponds to "Exchange bidding deal id" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("EXCHANGE_BIDDING_DEAL_ID")] ExchangeBiddingDealId = 715,
        /// <summary>
        /// Exchange bidding deal type.
        ///
        /// Corresponds to "Exchange bidding deal type value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("EXCHANGE_BIDDING_DEAL_TYPE")] ExchangeBiddingDealType = 714,
        /// <summary>
        /// Localized name of the exchange bidding deal type.
        ///
        /// Corresponds to "Exchange bidding deal type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("EXCHANGE_BIDDING_DEAL_TYPE_NAME")] ExchangeBiddingDealTypeName = 723,
        /// <summary>
        /// ID of the yield partner as classified by Google
        ///
        /// Corresponds to "Yield partner ID (classified)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("EXCHANGE_THIRD_PARTY_COMPANY_ID")] ExchangeThirdPartyCompanyId = 185,
        /// <summary>
        /// Name of the yield partner as classified by Google
        ///
        /// Corresponds to "Yield partner (classified)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("EXCHANGE_THIRD_PARTY_COMPANY_NAME")] ExchangeThirdPartyCompanyName = 186,
        /// <summary>
        /// The ID of the first look pricing rule.
        ///
        /// Corresponds to "First look pricing rule ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("FIRST_LOOK_PRICING_RULE_ID")] FirstLookPricingRuleId = 248,
        /// <summary>
        /// The name of the first look pricing rule.
        ///
        /// Corresponds to "First look pricing rule" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("FIRST_LOOK_PRICING_RULE_NAME")] FirstLookPricingRuleName = 249,
        /// <summary>
        /// Whether a first-party user identifier was present on a given
        ///  ad-request.
        ///
        /// Corresponds to "First-party ID status value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("FIRST_PARTY_ID_STATUS")] FirstPartyIdStatus = 404,
        /// <summary>
        /// The localized name of whether a first-party user identifier was present
        ///  on a given ad-request.
        ///
        /// Corresponds to "First-party ID status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("FIRST_PARTY_ID_STATUS_NAME")] FirstPartyIdStatusName = 405,
        /// <summary>
        /// User gender enum value returned from Google Analytics.
        ///
        /// Corresponds to "Gender value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("GENDER")] Gender = 509,
        /// <summary>
        /// Localized user gender returned from Google Analytics. For example,
        ///  "male", "female".
        ///
        /// Corresponds to "Gender" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("GENDER_NAME")] GenderName = 583,
        /// <summary>
        /// The ID of a Google Analytics stream. For example, web site or mobile app
        ///
        /// Corresponds to "Google Analytics stream ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_STREAM_ID")] GoogleAnalyticsStreamId = 519,
        /// <summary>
        /// The name of a Google Analytics stream. For example,
        ///  web site or mobile app.
        ///
        /// Corresponds to "Google Analytics stream" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_STREAM_NAME")] GoogleAnalyticsStreamName = 520,
        /// <summary>
        /// The ID of the header bidding trafficking yield partner.
        ///
        /// Corresponds to "Yield partner ID (header bidding trafficking)" in the Ad
        /// Manager UI (when showing API fields).
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("HBT_YIELD_PARTNER_ID")] HbtYieldPartnerId = 659,
        /// <summary>
        /// The name of the header bidding trafficking yield partner.
        ///
        /// Corresponds to "Yield partner (header bidding trafficking)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("HBT_YIELD_PARTNER_NAME")] HbtYieldPartnerName = 660,
        /// <summary>
        /// Header Bidder integration type.
        ///
        /// Corresponds to "Header bidder integration type value" in the Ad Manager
        /// UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("HEADER_BIDDER_INTEGRATION_TYPE")] HeaderBidderIntegrationType = 718,
        /// <summary>
        /// Localized name of the Header Bidder integration type.
        ///
        /// Corresponds to "Header bidder integration type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("HEADER_BIDDER_INTEGRATION_TYPE_NAME")] HeaderBidderIntegrationTypeName = 719,
        /// <summary>
        /// Breaks down reporting data by hour in one day.
        ///
        /// Corresponds to "Hour" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("HOUR")] Hour = 100,
        /// <summary>
        /// Impression Counting Method ENUM.
        ///
        /// Corresponds to "Impression counting method value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("IMPRESSION_COUNTING_METHOD")] ImpressionCountingMethod = 577,
        /// <summary>
        /// Localized impression counting method name.
        ///
        /// Corresponds to "Impression counting method" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("IMPRESSION_COUNTING_METHOD_NAME")] ImpressionCountingMethodName = 578,
        /// <summary>
        /// The interaction type of an ad.
        ///
        /// Corresponds to "Interaction type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("INTERACTION_TYPE")] InteractionType = 223,
        /// <summary>
        /// The localized name of the interaction type of an ad.
        ///
        /// Corresponds to "Interaction type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("INTERACTION_TYPE_NAME")] InteractionTypeName = 224,
        /// <summary>
        /// User interest returned from Google Analytics.
        ///
        /// Corresponds to "Interests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("INTEREST")] Interest = 510,
        /// <summary>
        /// Inventory format.
        ///  The format of the ad unit (e.g, banner) where the ad was requested.
        ///
        /// Corresponds to "Inventory format value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("INVENTORY_FORMAT")] InventoryFormat = 17,
        /// <summary>
        /// Inventory format name.
        ///  The format of the ad unit (e.g, banner) where the ad was requested.
        ///
        /// Corresponds to "Inventory format" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("INVENTORY_FORMAT_NAME")] InventoryFormatName = 18,
        /// <summary>
        /// The ID of the inventory share assignment.
        ///
        /// Corresponds to "Inventory share assignment ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_ASSIGNMENT_ID")] InventoryShareAssignmentId = 648,
        /// <summary>
        /// The name of the inventory share assignment.
        ///
        /// Corresponds to "Inventory share assignment" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_ASSIGNMENT_NAME")] InventoryShareAssignmentName = 649,
        /// <summary>
        /// The result of an inventory share.
        ///
        /// Corresponds to "Inventory share outcome value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_OUTCOME")] InventoryShareOutcome = 603,
        /// <summary>
        /// The localized name of the result of an inventory share.
        ///
        /// Corresponds to "Inventory share outcome" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_OUTCOME_NAME")] InventoryShareOutcomeName = 604,
        /// <summary>
        /// The partner ad server of the inventory share.
        ///
        /// Corresponds to "Inventory share partner ad server value" in the Ad
        /// Manager UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_PARTNER_AD_SERVER")] InventorySharePartnerAdServer = 652,
        /// <summary>
        /// The localized name of the partner ad server.
        ///
        /// Corresponds to "Inventory share partner ad server" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_PARTNER_AD_SERVER_NAME")] InventorySharePartnerAdServerName = 653,
        /// <summary>
        /// The target share percent of the inventory share assignment
        ///
        /// Corresponds to "Partner target share percent" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_TARGET_SHARE_PERCENT")] InventoryShareTargetSharePercent = 654,
        /// <summary>
        /// The type of the inventory share.
        ///
        /// Corresponds to "Inventory share type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_TYPE")] InventoryShareType = 650,
        /// <summary>
        /// The localized name of the inventory share type.
        ///
        /// Corresponds to "Inventory share type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_TYPE_NAME")] InventoryShareTypeName = 651,
        /// <summary>
        /// Inventory type.
        ///  The kind of web page or device where the ad was requested.
        ///
        /// Corresponds to "Inventory type (expanded) value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("INVENTORY_TYPE")] InventoryType = 19,
        /// <summary>
        /// Inventory type name.
        ///  The kind of web page or device where the ad was requested.
        ///
        /// Corresponds to "Inventory type (expanded)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("INVENTORY_TYPE_NAME")] InventoryTypeName = 20,
        /// <summary>
        /// Whether traffic is Adx Direct.
        ///
        /// Corresponds to "Is AdX Direct" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("IS_ADX_DIRECT")] IsAdxDirect = 382,
        /// <summary>
        /// If curation was targeted by the buyer when buying the impression
        ///
        /// Corresponds to "Is curation targeted" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("IS_CURATION_TARGETED")] IsCurationTargeted = 574,
        /// <summary>
        /// Whether the query was dropped.
        ///
        /// Corresponds to "Is Dropped" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("IS_DROPPED")] IsDropped = 464,
        /// <summary>
        /// Whether traffic is First Look.
        ///
        /// Corresponds to "Is First Look" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("IS_FIRST_LOOK_DEAL")] IsFirstLookDeal = 401,
        /// <summary>
        /// The Custom Targeting Value ID
        ///
        /// Corresponds to "Key-values ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("KEY_VALUES_ID")] KeyValuesId = 214,
        /// <summary>
        /// The Custom Targeting Value formatted like `{keyName}={valueName}`
        ///
        /// Corresponds to "Key-values" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("KEY_VALUES_NAME")] KeyValuesName = 215,
        /// <summary>
        /// The agency of the order associated with the line item.
        ///
        /// Corresponds to "Line item agency" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_AGENCY")] LineItemAgency = 663,
        /// <summary>
        /// Whether a Line item is archived.
        ///
        /// Corresponds to "Line item is archived" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_ARCHIVED")] LineItemArchived = 188,
        /// <summary>
        /// Line item comanion delivery option ENUM value.
        ///
        /// Corresponds to "Line item companion delivery option value" in the Ad
        /// Manager UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_COMPANION_DELIVERY_OPTION")] LineItemCompanionDeliveryOption = 204,
        /// <summary>
        /// Localized line item comanion delivery option name.
        ///
        /// Corresponds to "Line item companion delivery option" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME")] LineItemCompanionDeliveryOptionName = 205,
        /// <summary>
        /// The computed status of the LineItem.
        ///
        /// Corresponds to "Line item computed status value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_COMPUTED_STATUS")] LineItemComputedStatus = 250,
        /// <summary>
        /// The localized name of the computed status of the LineItem.
        ///
        /// Corresponds to "Line item computed status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_COMPUTED_STATUS_NAME")] LineItemComputedStatusName = 251,
        /// <summary>
        /// The contracted units bought for the Line item.
        ///
        /// Corresponds to "Line item contracted quantity" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CONTRACTED_QUANTITY")] LineItemContractedQuantity = 92,
        /// <summary>
        /// The cost per unit of the Line item.
        ///
        /// Corresponds to "Line item rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_COST_PER_UNIT")] LineItemCostPerUnit = 85,
        /// <summary>
        /// Line item cost type ENUM value.
        ///
        /// Corresponds to "Line item cost type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_COST_TYPE")] LineItemCostType = 212,
        /// <summary>
        /// Localized line item cost type name.
        ///
        /// Corresponds to "Line item cost type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_COST_TYPE_NAME")] LineItemCostTypeName = 213,
        /// <summary>
        /// Represent the end date of a creative associated with line item
        ///
        /// Corresponds to "Line item creative end date" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DATE`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CREATIVE_END_DATE")] LineItemCreativeEndDate = 176,
        /// <summary>
        /// The creative rotation type of the LineItem.
        ///
        /// Corresponds to "Line item creative rotation type value" in the Ad Manager
        /// UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CREATIVE_ROTATION_TYPE")] LineItemCreativeRotationType = 189,
        /// <summary>
        /// The localized name of the creative rotation type of the LineItem.
        ///
        /// Corresponds to "Line item creative rotation type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME")] LineItemCreativeRotationTypeName = 190,
        /// <summary>
        /// Represent the start date of a creative associated with line item
        ///
        /// Corresponds to "Line item creative start date" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DATE`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CREATIVE_START_DATE")] LineItemCreativeStartDate = 175,
        /// <summary>
        /// The 3 letter currency code of the Line Item
        ///
        /// Corresponds to "Line item currency code" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CURRENCY_CODE")] LineItemCurrencyCode = 180,
        /// <summary>
        /// The progress made for the delivery of the Line item.
        ///
        /// Corresponds to "Line item delivery indicator" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_DELIVERY_INDICATOR")] LineItemDeliveryIndicator = 87,
        /// <summary>
        /// The delivery rate type of the LineItem.
        ///
        /// Corresponds to "Line item delivery rate type value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_DELIVERY_RATE_TYPE")] LineItemDeliveryRateType = 191,
        /// <summary>
        /// The localized name of the delivery rate type of the LineItem.
        ///
        /// Corresponds to "Line item delivery rate type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_DELIVERY_RATE_TYPE_NAME")] LineItemDeliveryRateTypeName = 192,
        /// <summary>
        /// The discount of the LineItem in whole units in the LineItem's currency
        ///  code, or if unspecified the Network's currency code.
        ///
        /// Corresponds to "Line item discount (absolute)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_DISCOUNT_ABSOLUTE")] LineItemDiscountAbsolute = 195,
        /// <summary>
        /// The discount of the LineItem in percentage.
        ///
        /// Corresponds to "Line item discount (percentage)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `WHOLE_PERCENT`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_DISCOUNT_PERCENTAGE")] LineItemDiscountPercentage = 196,
        /// <summary>
        /// The end date of the Line item.
        ///
        /// Corresponds to "Line item end date" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `DATE`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_END_DATE")] LineItemEndDate = 81,
        /// <summary>
        /// The end date and time of the Line item.
        ///
        /// Corresponds to "Line item end time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `TIMESTAMP`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_END_DATE_TIME")] LineItemEndDateTime = 83,
        /// <summary>
        /// The ENUM value of the environment a LineItem is targeting.
        ///
        /// Corresponds to "Line item environment type value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_ENVIRONMENT_TYPE")] LineItemEnvironmentType = 201,
        /// <summary>
        /// The localized name of the environment a LineItem is targeting.
        ///
        /// Corresponds to "Line item environment type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_ENVIRONMENT_TYPE_NAME")] LineItemEnvironmentTypeName = 202,
        /// <summary>
        /// The deal ID of the Line item. Set for Programmatic Direct campaigns.
        ///
        /// Corresponds to "Line item deal ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_EXTERNAL_DEAL_ID")] LineItemExternalDealId = 97,
        /// <summary>
        /// The external ID of the Line item.
        ///
        /// Corresponds to "Line item external ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_EXTERNAL_ID")] LineItemExternalId = 86,
        /// <summary>
        /// The frequency cap of the Line item (descriptive string).
        ///
        /// Corresponds to "Line item frequency cap" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_FREQUENCY_CAP")] LineItemFrequencyCap = 256,
        /// <summary>
        /// Line item ID.
        ///
        /// Corresponds to "Line item ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_ID")] LineItemId = 1,
        /// <summary>
        /// Line item labels.
        ///
        /// Corresponds to "Line item labels" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_LABELS")] LineItemLabels = 667,
        /// <summary>
        /// Line item label IDs.
        ///
        /// Corresponds to "Line item label IDs" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_LABEL_IDS")] LineItemLabelIds = 665,
        /// <summary>
        /// The application that last modified the Line Item.
        ///
        /// Corresponds to "Line item last modified by app" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_LAST_MODIFIED_BY_APP")] LineItemLastModifiedByApp = 181,
        /// <summary>
        /// The total number of clicks delivered of the lifetime of the Line item.
        ///
        /// Corresponds to "Line item lifetime clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_LIFETIME_CLICKS")] LineItemLifetimeClicks = 95,
        /// <summary>
        /// The total number of impressions delivered over the lifetime of the
        ///  Line item.
        ///
        /// Corresponds to "Line item lifetime impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_LIFETIME_IMPRESSIONS")] LineItemLifetimeImpressions = 94,
        /// <summary>
        /// The total number of viewable impressions delivered over the lifetime of
        ///  the Line item.
        ///
        /// Corresponds to "Line item lifetime viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS")] LineItemLifetimeViewableImpressions = 96,
        /// <summary>
        /// Whether or not the Line item is Makegood. Makegood refers to free
        ///  inventory offered to buyers to compensate for mistakes or under-delivery
        ///  in the original campaigns.
        ///
        /// Corresponds to "Line item is makegood" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_MAKEGOOD")] LineItemMakegood = 89,
        /// <summary>
        /// Line item Name.
        ///
        /// Corresponds to "Line item" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_NAME")] LineItemName = 2,
        /// <summary>
        /// The cost of booking for the Line item (non-CPD).
        ///
        /// Corresponds to "Line item booked revenue (exclude CPD)" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_NON_CPD_BOOKED_REVENUE")] LineItemNonCpdBookedRevenue = 98,
        /// <summary>
        /// Whether a Line item is eligible for opitimization.
        ///
        /// Corresponds to "Line item is optimizable" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_OPTIMIZABLE")] LineItemOptimizable = 90,
        /// <summary>
        /// The PO number of the order associated with the line item.
        ///
        /// Corresponds to "Line item PO number" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_PO_NUMBER")] LineItemPoNumber = 669,
        /// <summary>
        /// Goal type ENUM value of the primary goal of the line item.
        ///
        /// Corresponds to "Line item primary goal type value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_PRIMARY_GOAL_TYPE")] LineItemPrimaryGoalType = 210,
        /// <summary>
        /// Localized goal type name of the primary goal of the line item.
        ///
        /// Corresponds to "Line item primary goal type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_PRIMARY_GOAL_TYPE_NAME")] LineItemPrimaryGoalTypeName = 211,
        /// <summary>
        /// The total number of impressions or clicks that are reserved for a
        ///  line item. For line items of type BULK or PRICE_PRIORITY, this
        ///  represents the number of remaining impressions reserved. If the line
        ///  item has an impression cap goal, this represents the number of
        ///  impressions or conversions that the line item will stop serving at if
        ///  reached.
        ///
        /// Corresponds to "Line item primary goal units (absolute)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE")] LineItemPrimaryGoalUnitsAbsolute = 93,
        /// <summary>
        /// The percentage of impressions or clicks that are reserved for a
        ///  line item. For line items of type SPONSORSHIP, this represents the
        ///  percentage of available impressions reserved. For line items of type
        ///  NETWORK or HOUSE, this represents the percentage of remaining
        ///  impressions reserved.
        ///
        /// Corresponds to "Line item primary goal units (percentage)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `WHOLE_PERCENT`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE")] LineItemPrimaryGoalUnitsPercentage = 396,
        /// <summary>
        /// Unit type ENUM value of the primary goal of the line item.
        ///
        /// Corresponds to "Line item primary goal unit type value" in the Ad Manager
        /// UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE")] LineItemPrimaryGoalUnitType = 208,
        /// <summary>
        /// Localized unit type name of the primary goal of the line item.
        ///
        /// Corresponds to "Line item primary goal unit type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME")] LineItemPrimaryGoalUnitTypeName = 209,
        /// <summary>
        /// The priority of this Line item as a value between 1 and 16.
        ///  In general, a lower priority means more serving priority for the
        ///  Line item.
        ///
        /// Corresponds to "Line item priority" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_PRIORITY")] LineItemPriority = 24,
        /// <summary>
        /// ENUM value describing the state of inventory reservation for the
        ///  LineItem.
        ///
        /// Corresponds to "Line item reservation status value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_RESERVATION_STATUS")] LineItemReservationStatus = 304,
        /// <summary>
        /// Localized string describing the state of inventory reservation for the
        ///  LineItem.
        ///
        /// Corresponds to "Line item reservation status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_RESERVATION_STATUS_NAME")] LineItemReservationStatusName = 305,
        /// <summary>
        /// The sales person of the order associated with the line item.
        ///
        /// Corresponds to "Line item salesperson" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_SALESPERSON")] LineItemSalesperson = 671,
        /// <summary>
        /// The secondary sales people of the order associated with the line item.
        ///
        /// Corresponds to "Line item secondary salespeople" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_SECONDARY_SALESPEOPLE")] LineItemSecondarySalespeople = 673,
        /// <summary>
        /// The secondary traffickers of the order associated with the line item.
        ///
        /// Corresponds to "Line item secondary traffickers" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_SECONDARY_TRAFFICKERS")] LineItemSecondaryTraffickers = 675,
        /// <summary>
        /// The start date of the Line item.
        ///
        /// Corresponds to "Line item start date" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `DATE`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_START_DATE")] LineItemStartDate = 82,
        /// <summary>
        /// The start date and time of the Line item.
        ///
        /// Corresponds to "Line item start time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `TIMESTAMP`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_START_DATE_TIME")] LineItemStartDateTime = 84,
        /// <summary>
        /// The trafficker of the order associated with the line item.
        ///
        /// Corresponds to "Line item trafficker" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_TRAFFICKER")] LineItemTrafficker = 677,
        /// <summary>
        /// Line item type ENUM value.
        ///
        /// Corresponds to "Line item type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_TYPE")] LineItemType = 193,
        /// <summary>
        /// Localized line item type name.
        ///
        /// Corresponds to "Line item type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_TYPE_NAME")] LineItemTypeName = 194,
        /// <summary>
        /// Whether the Line item end time and end date is set to effectively never
        ///  end.
        ///
        /// Corresponds to "Line item is unlimited end time" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_UNLIMITED_END")] LineItemUnlimitedEnd = 187,
        /// <summary>
        /// The artificial cost per unit used by the Ad server to help rank
        ///  inventory.
        ///
        /// Corresponds to "Line item value cost per unit" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_VALUE_COST_PER_UNIT")] LineItemValueCostPerUnit = 88,
        /// <summary>
        /// The web property code used for dynamic allocation Line Items.
        ///
        /// Corresponds to "Line item web property code" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_WEB_PROPERTY_CODE")] LineItemWebPropertyCode = 179,
        /// <summary>
        /// The ID of creative, includes regular creatives, and master and companions
        ///  in case of creative sets
        ///
        /// Corresponds to "Master and Companion creative ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("MASTER_COMPANION_CREATIVE_ID")] MasterCompanionCreativeId = 140,
        /// <summary>
        /// Name of creative, includes regular creatives, and master and companions
        ///  in case of creative sets
        ///
        /// Corresponds to "Master and Companion creative" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MASTER_COMPANION_CREATIVE_NAME")] MasterCompanionCreativeName = 141,
        /// <summary>
        /// Mediation type.
        ///
        /// Corresponds to "Mediation type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("MEDIATION_TYPE")] MediationType = 701,
        /// <summary>
        /// Localized mediation type name.
        ///
        /// Corresponds to "Mediation type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MEDIATION_TYPE_NAME")] MediationTypeName = 754,
        /// <summary>
        /// The ID of the yield partner for Mediation.
        ///
        /// Corresponds to "Yield partner ID (mediation)" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("MEDIATION_YIELD_PARTNER_ID")] MediationYieldPartnerId = 661,
        /// <summary>
        /// The name of the yield partner for Mediation.
        ///
        /// Corresponds to "Yield partner (mediation)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MEDIATION_YIELD_PARTNER_NAME")] MediationYieldPartnerName = 662,
        /// <summary>
        /// The criteria ID of the metro area in which the ad served.
        ///
        /// Corresponds to "Metro ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("METRO_ID")] MetroId = 453,
        /// <summary>
        /// The name of the metro area in which the ad served.
        ///
        /// Corresponds to "Metro" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("METRO_NAME")] MetroName = 454,
        /// <summary>
        /// Whether the mobile app is free.
        ///
        /// Corresponds to "App is free" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_FREE")] MobileAppFree = 128,
        /// <summary>
        /// URL of app icon for the mobile app.
        ///
        /// Corresponds to "App icon URL" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_ICON_URL")] MobileAppIconUrl = 129,
        /// <summary>
        /// The ID of the Mobile App.
        ///
        /// Corresponds to "App ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_ID")] MobileAppId = 123,
        /// <summary>
        /// The name of the mobile app.
        ///
        /// Corresponds to "App" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_NAME")] MobileAppName = 127,
        /// <summary>
        /// Ownership status of the mobile app.
        ///
        /// Corresponds to "App ownership status value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_OWNERSHIP_STATUS")] MobileAppOwnershipStatus = 311,
        /// <summary>
        /// Ownership status of the mobile app.
        ///
        /// Corresponds to "App ownership status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_OWNERSHIP_STATUS_NAME")] MobileAppOwnershipStatusName = 312,
        /// <summary>
        /// The App Store of the mobile app.
        ///
        /// Corresponds to "App store value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_STORE")] MobileAppStore = 125,
        /// <summary>
        /// The localized name of the mobile app store.
        ///
        /// Corresponds to "App store" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MOBILE_APP_STORE_NAME")] MobileAppStoreName = 245,
        /// <summary>
        /// Mobile inventory type.
        ///  Identifies whether a mobile ad came from a regular web page, an AMP web
        ///  page, or a mobile app.
        ///  Values match the Inventory type dimension available in the Overview Home
        ///  dashboard. Note: Video takes precedence over any other value, for
        ///  example, if there is an in-stream video impression on a desktop device,
        ///  it will be attributed to in-stream video and not desktop web.
        ///
        /// Corresponds to "Inventory type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("MOBILE_INVENTORY_TYPE")] MobileInventoryType = 99,
        /// <summary>
        /// Mobile inventory type name.
        ///  Identifies whether a mobile ad came from a regular web page, an AMP web
        ///  page, or a mobile app.
        ///
        /// Corresponds to "Inventory type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MOBILE_INVENTORY_TYPE_NAME")] MobileInventoryTypeName = 21,
        /// <summary>
        /// Mobile rendering SDK.
        ///
        /// Corresponds to "Rendering SDK value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("MOBILE_RENDERING_SDK")] MobileRenderingSdk = 646,
        /// <summary>
        /// Localized name of the Mobile rendering SDK.
        ///
        /// Corresponds to "Rendering SDK" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MOBILE_RENDERING_SDK_NAME")] MobileRenderingSdkName = 647,
        /// <summary>
        /// The major version of the mobile SDK.
        ///
        /// Corresponds to "App SDK major version" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("MOBILE_SDK_MAJOR_VERSION")] MobileSdkMajorVersion = 692,
        /// <summary>
        /// The minor version of the mobile SDK.
        ///
        /// Corresponds to "App SDK minor version" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("MOBILE_SDK_MINOR_VERSION")] MobileSdkMinorVersion = 693,
        /// <summary>
        /// SDK version of the mobile device.
        ///
        /// Corresponds to "App SDK version" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("MOBILE_SDK_VERSION_NAME")] MobileSdkVersionName = 130,
        /// <summary>
        /// Breaks down reporting data by month and year.
        ///
        /// Corresponds to "Month and year" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("MONTH_YEAR")] MonthYear = 6,
        /// <summary>
        /// Native ad format ID.
        ///
        /// Corresponds to "Native ad format ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("NATIVE_AD_FORMAT_ID")] NativeAdFormatId = 255,
        /// <summary>
        /// Native ad format name.
        ///
        /// Corresponds to "Native ad format" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("NATIVE_AD_FORMAT_NAME")] NativeAdFormatName = 254,
        /// <summary>
        /// Native style ID.
        ///
        /// Corresponds to "Native style ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("NATIVE_STYLE_ID")] NativeStyleId = 253,
        /// <summary>
        /// Native style name.
        ///
        /// Corresponds to "Native style" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("NATIVE_STYLE_NAME")] NativeStyleName = 252,
        /// <summary>
        /// No fill reason category in the Ads traffic navigator report.
        ///
        /// Corresponds to "No fill reason category value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("NO_FILL_REASON_CATEGORY")] NoFillReasonCategory = 586,
        /// <summary>
        /// No fill reason category name in the Ads traffic navigator report.
        ///
        /// Corresponds to "No fill reason category" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("NO_FILL_REASON_CATEGORY_NAME")] NoFillReasonCategoryName = 587,
        /// <summary>
        /// Operating system category.
        ///
        /// Corresponds to "Operating system category value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("OPERATING_SYSTEM_CATEGORY")] OperatingSystemCategory = 117,
        /// <summary>
        /// Operating system category name.
        ///
        /// Corresponds to "Operating system category" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("OPERATING_SYSTEM_CATEGORY_NAME")] OperatingSystemCategoryName = 118,
        /// <summary>
        /// ID of the operating system version.
        ///
        /// Corresponds to "Operating system ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("OPERATING_SYSTEM_VERSION_ID")] OperatingSystemVersionId = 238,
        /// <summary>
        /// Details of the operating system, including version.
        ///
        /// Corresponds to "Operating system" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("OPERATING_SYSTEM_VERSION_NAME")] OperatingSystemVersionName = 237,
        /// <summary>
        /// Enum value of the optimization type.
        ///
        /// Corresponds to "Optimization type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("OPTIMIZATION_TYPE")] OptimizationType = 639,
        /// <summary>
        /// Localized name of the optimization type.
        ///
        /// Corresponds to "Optimization type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("OPTIMIZATION_TYPE_NAME")] OptimizationTypeName = 640,
        /// <summary>
        /// Order agency.
        ///
        /// Corresponds to "Order agency" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ORDER_AGENCY")] OrderAgency = 150,
        /// <summary>
        /// Order agency ID.
        ///
        /// Corresponds to "Order agency ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("ORDER_AGENCY_ID")] OrderAgencyId = 151,
        /// <summary>
        /// Order booked CPC.
        ///
        /// Corresponds to "Order booked CPC" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ORDER_BOOKED_CPC")] OrderBookedCpc = 152,
        /// <summary>
        /// Order booked CPM.
        ///
        /// Corresponds to "Order booked CPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ORDER_BOOKED_CPM")] OrderBookedCpm = 153,
        /// <summary>
        /// Order delivery status ENUM value.
        ///
        /// Corresponds to "Order delivery status value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("ORDER_DELIVERY_STATUS")] OrderDeliveryStatus = 231,
        /// <summary>
        /// Order delivery status localized name.
        ///
        /// Corresponds to "Order delivery status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ORDER_DELIVERY_STATUS_NAME")] OrderDeliveryStatusName = 239,
        /// <summary>
        /// Order end date.
        ///
        /// Corresponds to "Order end date" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `DATE`
        /// </summary>
        [pbr::OriginalName("ORDER_END_DATE")] OrderEndDate = 154,
        /// <summary>
        /// Order end date and time.
        ///
        /// Corresponds to "Order end time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `TIMESTAMP`
        /// </summary>
        [pbr::OriginalName("ORDER_END_DATE_TIME")] OrderEndDateTime = 155,
        /// <summary>
        /// Order external ID.
        ///
        /// Corresponds to "Order external ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("ORDER_EXTERNAL_ID")] OrderExternalId = 156,
        /// <summary>
        /// Order ID.
        ///
        /// Corresponds to "Order ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("ORDER_ID")] OrderId = 7,
        /// <summary>
        /// Order labels.
        ///
        /// Corresponds to "Order labels" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("ORDER_LABELS")] OrderLabels = 170,
        /// <summary>
        /// Order labels IDs.
        ///
        /// Corresponds to "Order label IDs" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("ORDER_LABEL_IDS")] OrderLabelIds = 171,
        /// <summary>
        /// Order lifetime clicks.
        ///
        /// Corresponds to "Order lifetime clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ORDER_LIFETIME_CLICKS")] OrderLifetimeClicks = 158,
        /// <summary>
        /// Order lifetime impressions.
        ///
        /// Corresponds to "Order lifetime impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ORDER_LIFETIME_IMPRESSIONS")] OrderLifetimeImpressions = 159,
        /// <summary>
        /// Order name.
        ///
        /// Corresponds to "Order" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ORDER_NAME")] OrderName = 8,
        /// <summary>
        /// Order PO number.
        ///
        /// Corresponds to "Order PO number" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ORDER_PO_NUMBER")] OrderPoNumber = 160,
        /// <summary>
        /// Whether the Order is programmatic.
        ///
        /// Corresponds to "Order is programmatic" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("ORDER_PROGRAMMATIC")] OrderProgrammatic = 157,
        /// <summary>
        /// Order sales person.
        ///
        /// Corresponds to "Order salesperson" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ORDER_SALESPERSON")] OrderSalesperson = 161,
        /// <summary>
        /// Order sales person ID.
        ///
        /// Corresponds to "Order salesperson ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("ORDER_SALESPERSON_ID")] OrderSalespersonId = 629,
        /// <summary>
        /// Order secondary sales people.
        ///
        /// Corresponds to "Order secondary salespeople" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("ORDER_SECONDARY_SALESPEOPLE")] OrderSecondarySalespeople = 164,
        /// <summary>
        /// Order secondary sales people ID.
        ///
        /// Corresponds to "Order secondary salespeople ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("ORDER_SECONDARY_SALESPEOPLE_ID")] OrderSecondarySalespeopleId = 165,
        /// <summary>
        /// Order secondary traffickers.
        ///
        /// Corresponds to "Order secondary traffickers" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("ORDER_SECONDARY_TRAFFICKERS")] OrderSecondaryTraffickers = 166,
        /// <summary>
        /// Order secondary traffickers ID.
        ///
        /// Corresponds to "Order secondary trafficker IDs" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("ORDER_SECONDARY_TRAFFICKERS_ID")] OrderSecondaryTraffickersId = 167,
        /// <summary>
        /// Order start date.
        ///
        /// Corresponds to "Order start date" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `DATE`
        /// </summary>
        [pbr::OriginalName("ORDER_START_DATE")] OrderStartDate = 168,
        /// <summary>
        /// Order start date and time.
        ///
        /// Corresponds to "Order start time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `AD_SPEED`
        ///
        /// Data format: `TIMESTAMP`
        /// </summary>
        [pbr::OriginalName("ORDER_START_DATE_TIME")] OrderStartDateTime = 169,
        /// <summary>
        /// Order trafficker.
        ///
        /// Corresponds to "Order trafficker" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("ORDER_TRAFFICKER")] OrderTrafficker = 162,
        /// <summary>
        /// Order trafficker ID.
        ///
        /// Corresponds to "Order trafficker ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("ORDER_TRAFFICKER_ID")] OrderTraffickerId = 163,
        /// <summary>
        /// Whether the Order end time and end date is set to effectively never
        ///  end.
        ///
        /// Corresponds to "Order is unlimited end time" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("ORDER_UNLIMITED_END")] OrderUnlimitedEnd = 203,
        /// <summary>
        /// Page path is the part of a page URL that comes after the domain but
        ///  before the query strings from Google Analytics.
        ///
        /// Corresponds to "Page path" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PAGE_PATH")] PagePath = 511,
        /// <summary>
        /// Page title (web) and screen class (mobile) returned from Google
        ///  Analytics.
        ///
        /// Corresponds to "Page title and screen class" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PAGE_TITLE_AND_SCREEN_CLASS")] PageTitleAndScreenClass = 512,
        /// <summary>
        /// Page title (web) and screen name (mobile) returned from Google Analytics.
        ///
        /// Corresponds to "Page title and screen name" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PAGE_TITLE_AND_SCREEN_NAME")] PageTitleAndScreenName = 513,
        /// <summary>
        /// Placement ID
        ///
        /// Corresponds to "Placement ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("PLACEMENT_ID")] PlacementId = 113,
        /// <summary>
        /// The full list of placement IDs associated with the ad unit.
        ///
        /// Corresponds to "Placement ID (all)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("PLACEMENT_ID_ALL")] PlacementIdAll = 144,
        /// <summary>
        /// Placement name
        ///
        /// Corresponds to "Placement" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PLACEMENT_NAME")] PlacementName = 114,
        /// <summary>
        /// The full list of placement names associated with the ad unit.
        ///
        /// Corresponds to "Placement (all)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("PLACEMENT_NAME_ALL")] PlacementNameAll = 145,
        /// <summary>
        /// Placement status ENUM value
        ///
        /// Corresponds to "Placement status value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("PLACEMENT_STATUS")] PlacementStatus = 362,
        /// <summary>
        /// Localized placement status name.
        ///
        /// Corresponds to "Placement status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PLACEMENT_STATUS_NAME")] PlacementStatusName = 364,
        /// <summary>
        /// The full list of localized placement status names associated with the ad
        ///  unit.
        ///
        /// Corresponds to "Placement status (all)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("PLACEMENT_STATUS_NAME_ALL")] PlacementStatusNameAll = 365,
        /// <summary>
        /// The criteria ID of the postal code in which the ad served.
        ///
        /// Corresponds to "Postal code ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("POSTAL_CODE_ID")] PostalCodeId = 455,
        /// <summary>
        /// The name of the postal code in which the ad served.
        ///
        /// Corresponds to "Postal code" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("POSTAL_CODE_NAME")] PostalCodeName = 456,
        /// <summary>
        /// Indicates the valid PPID (Publisher provided identifier) status on a
        ///  given ad request.
        ///
        /// Corresponds to "PPID status value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("PPID_STATUS")] PpidStatus = 406,
        /// <summary>
        /// The localized name of that indicates the valid PPID (Publisher provided
        ///  identifier) status on a given ad request.
        ///
        /// Corresponds to "PPID status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PPID_STATUS_NAME")] PpidStatusName = 407,
        /// <summary>
        /// Predicted viewability score bucket.
        ///
        /// Corresponds to "Predicted viewability bucket value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("PREDICTED_VIEWABILITY_BUCKET")] PredictedViewabilityBucket = 633,
        /// <summary>
        /// The localized name of the predicted viewability score bucket.
        ///
        /// Corresponds to "Predicted viewability bucket" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PREDICTED_VIEWABILITY_BUCKET_NAME")] PredictedViewabilityBucketName = 634,
        /// <summary>
        /// The ID of the secure signals sent in the ad request.
        ///
        /// Corresponds to "Secure signal ID (presented)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("PRESENTED_SECURE_SIGNAL_ID")] PresentedSecureSignalId = 495,
        /// <summary>
        /// The name of the secure signals sent in the ad request.
        ///
        /// Corresponds to "Secure signal name (presented)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PRESENTED_SECURE_SIGNAL_NAME")] PresentedSecureSignalName = 496,
        /// <summary>
        /// The ID type selected for personalization.
        ///
        /// Corresponds to "Primary personalization ID type value" in the Ad Manager
        /// UI (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("PRIMARY_PERSONALIZATION_ID_TYPE")] PrimaryPersonalizationIdType = 408,
        /// <summary>
        /// The localized name of the ID type selected for personalization.
        ///
        /// Corresponds to "Primary personalization ID type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PRIMARY_PERSONALIZATION_ID_TYPE_NAME")] PrimaryPersonalizationIdTypeName = 409,
        /// <summary>
        /// Deprecated. Dimension has been renamed to `DEAL_BUYER_ID`.
        /// The server will normalize any requests using this value to
        /// `DEAL_BUYER_ID`.
        /// This value will be removed on or after October 10, 2025.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [pbr::OriginalName("PROGRAMMATIC_BUYER_ID", PreferredAlias = false)] ProgrammaticBuyerId = 240,
        /// <summary>
        /// Deprecated. Dimension has been renamed to `DEAL_BUYER_NAME`.
        /// The server will normalize any requests using this value to
        /// `DEAL_BUYER_NAME`.
        /// This value will be removed on or after October 10, 2025.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [pbr::OriginalName("PROGRAMMATIC_BUYER_NAME", PreferredAlias = false)] ProgrammaticBuyerName = 241,
        /// <summary>
        /// Programmatic channel.
        ///  The type of transaction that occurred in Ad Exchange.
        ///
        /// Corresponds to "Programmatic channel value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("PROGRAMMATIC_CHANNEL")] ProgrammaticChannel = 13,
        /// <summary>
        /// Programmatic channel name.
        ///  The type of transaction that occurred in Ad Exchange.
        ///
        /// Corresponds to "Programmatic channel" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PROGRAMMATIC_CHANNEL_NAME")] ProgrammaticChannelName = 14,
        /// <summary>
        /// External code ID of a publisher provided signal (all levels).
        ///
        /// Corresponds to "Publisher provided signals external code (all levels)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_EXTERNAL_CODE")] PublisherProvidedSignalsAllLevelsExternalCode = 410,
        /// <summary>
        /// The ancestor chain of IDs of a publisher provided signal (all levels).
        ///
        /// Corresponds to "Publisher provided signals ID (all levels)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_IDS")] PublisherProvidedSignalsAllLevelsIds = 546,
        /// <summary>
        /// The ancestor chain of names of a publisher provided signal (all levels).
        ///
        /// Corresponds to "Publisher provided signals (all levels)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_NAME")] PublisherProvidedSignalsAllLevelsName = 412,
        /// <summary>
        /// Tier of a publisher provided signal (all levels).
        ///
        /// Corresponds to "Publisher provided signals tier (all levels)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TIER")] PublisherProvidedSignalsAllLevelsTier = 413,
        /// <summary>
        /// Type of a publisher provided signal (all levels).
        ///
        /// Corresponds to "Publisher provided signals type (all levels)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_ALL_LEVELS_TYPE")] PublisherProvidedSignalsAllLevelsType = 414,
        /// <summary>
        /// External code ID of a publisher provided signal (delivered).
        ///
        /// Corresponds to "Publisher provided signals external code (delivered)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_DELIVERED_EXTERNAL_CODE")] PublisherProvidedSignalsDeliveredExternalCode = 425,
        /// <summary>
        /// The ancestor chain of IDs of a publisher provided signal (delivered).
        ///
        /// Corresponds to "Publisher provided signals ID (delivered)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER_LIST`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_DELIVERED_IDS")] PublisherProvidedSignalsDeliveredIds = 545,
        /// <summary>
        /// The ancestor chain of names of a publisher provided signal (delivered).
        ///
        /// Corresponds to "Publisher provided signals (delivered)" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_DELIVERED_NAME")] PublisherProvidedSignalsDeliveredName = 427,
        /// <summary>
        /// Tier of a publisher provided signal (delivered).
        ///
        /// Corresponds to "Publisher provided signals tier (delivered)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TIER")] PublisherProvidedSignalsDeliveredTier = 428,
        /// <summary>
        /// Type of a publisher provided signal (delivered).
        ///
        /// Corresponds to "Publisher provided signals type (delivered)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_DELIVERED_TYPE")] PublisherProvidedSignalsDeliveredType = 429,
        /// <summary>
        /// External code ID of a publisher provided signal (top level).
        ///
        /// Corresponds to "Publisher provided signals external code (top level)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_EXTERNAL_CODE")] PublisherProvidedSignalsTopLevelExternalCode = 415,
        /// <summary>
        /// ID of a publisher provided signal (top level).
        ///
        /// Corresponds to "Publisher provided signals ID (top level)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_ID")] PublisherProvidedSignalsTopLevelId = 416,
        /// <summary>
        /// Name of a publisher provided signal (top level).
        ///
        /// Corresponds to "Publisher provided signals (top level)" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING_LIST`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_NAME")] PublisherProvidedSignalsTopLevelName = 417,
        /// <summary>
        /// Tier of a publisher provided signal (top level).
        ///
        /// Corresponds to "Publisher provided signals tier (top level)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TIER")] PublisherProvidedSignalsTopLevelTier = 418,
        /// <summary>
        /// Type of a publisher provided signal (top level).
        ///
        /// Corresponds to "Publisher provided signals type (top level)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNALS_TOP_LEVEL_TYPE")] PublisherProvidedSignalsTopLevelType = 419,
        /// <summary>
        /// Data provider ID associated with a publisher provided signal.
        ///
        /// Corresponds to "Publisher provided signals (data provider ID)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_ID")] PublisherProvidedSignalDataProviderId = 136,
        /// <summary>
        /// Data provider name associated with a publisher provided signal.
        ///
        /// Corresponds to "Publisher provided signals (data provider)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("PUBLISHER_PROVIDED_SIGNAL_DATA_PROVIDER_NAME")] PublisherProvidedSignalDataProviderName = 137,
        /// <summary>
        /// The criteria ID of the region (for example, US state) in which the ad
        ///  served.
        ///
        /// Corresponds to "Region ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("REGION_ID")] RegionId = 457,
        /// <summary>
        /// The name of the region (for example, US state) in which the ad
        ///  served.
        ///
        /// Corresponds to "Region" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("REGION_NAME")] RegionName = 458,
        /// <summary>
        /// The rejection class category in the Ads traffic navigator report.
        ///
        /// Corresponds to "Rejection class category value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("REJECTION_CLASS_CATEGORY")] RejectionClassCategory = 590,
        /// <summary>
        /// The rejection class category name in the Ads traffic navigator report.
        ///
        /// Corresponds to "Rejection class category" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("REJECTION_CLASS_CATEGORY_NAME")] RejectionClassCategoryName = 591,
        /// <summary>
        /// The size of a rendered creative, It can differ with the creative's size
        ///  if a creative is shown in an ad slot of a different size.
        ///
        /// Corresponds to "Rendered creative size" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("RENDERED_CREATIVE_SIZE")] RenderedCreativeSize = 343,
        /// <summary>
        /// Inventory Requested Ad Sizes dimension
        ///
        /// Corresponds to "Requested ad sizes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("REQUESTED_AD_SIZES")] RequestedAdSizes = 352,
        /// <summary>
        /// Request type ENUM
        ///
        /// Corresponds to "Request type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE")] RequestType = 146,
        /// <summary>
        /// Request type locallized name
        ///
        /// Corresponds to "Request type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `AD_SPEED`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("REQUEST_TYPE_NAME")] RequestTypeName = 147,
        /// <summary>
        /// Indicates if a request was eligible for server-side unwrapping.
        ///
        /// Corresponds to "Server-side unwrapping eligible" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `BOOLEAN`
        /// </summary>
        [pbr::OriginalName("SERVER_SIDE_UNWRAPPING_ELIGIBLE")] ServerSideUnwrappingEligible = 597,
        /// <summary>
        /// The serving restriction mode for privacy.
        ///
        /// Corresponds to "Serving restriction value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("SERVING_RESTRICTION")] ServingRestriction = 631,
        /// <summary>
        /// The localized name of the serving restriction mode for privacy.
        ///
        /// Corresponds to "Serving restriction" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("SERVING_RESTRICTION_NAME")] ServingRestrictionName = 632,
        /// <summary>
        /// Information about domain or subdomains.
        ///
        /// Corresponds to "Site" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("SITE")] Site = 387,
        /// <summary>
        /// The ID of the browser, device or other environment into which a line item
        ///  or creative was served.
        ///
        /// Corresponds to "Targeting ID" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("TARGETING_ID")] TargetingId = 232,
        /// <summary>
        /// Information about the browser, device and other environments into which
        ///  a line item or creative was served.
        ///
        /// Corresponds to "Targeting" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("TARGETING_NAME")] TargetingName = 233,
        /// <summary>
        /// The way in which advertisers targeted their ads.
        ///
        /// Corresponds to "Targeting type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("TARGETING_TYPE")] TargetingType = 385,
        /// <summary>
        /// The localized name of the way in which advertisers targeted their ads.
        ///
        /// Corresponds to "Targeting type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("TARGETING_TYPE_NAME")] TargetingTypeName = 386,
        /// <summary>
        /// Whether a third-party cookie or device ID was present on a given ad
        ///  request.
        ///
        /// Corresponds to "Third-party ID status value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("THIRD_PARTY_ID_STATUS")] ThirdPartyIdStatus = 402,
        /// <summary>
        /// The localized name of whether a third-party cookie or device ID was
        ///  present on a given ad request.
        ///
        /// Corresponds to "Third-party ID status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("THIRD_PARTY_ID_STATUS_NAME")] ThirdPartyIdStatusName = 403,
        /// <summary>
        /// Reports the status of Topics in the ad request.
        ///
        /// Corresponds to "Topics status value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("TOPICS_STATUS")] TopicsStatus = 504,
        /// <summary>
        /// The localized name of the status of Topics in the ad request.
        ///
        /// Corresponds to "Topics status" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("TOPICS_STATUS_NAME")] TopicsStatusName = 505,
        /// <summary>
        /// Inventory top private domain dimension
        ///
        /// Corresponds to "Domain" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`,
        /// `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("TOP_PRIVATE_DOMAIN")] TopPrivateDomain = 444,
        /// <summary>
        /// Inventory Traffic source dimension
        ///
        /// Corresponds to "Traffic source value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("TRAFFIC_SOURCE")] TrafficSource = 388,
        /// <summary>
        /// Inventory Traffic source dimension name
        ///
        /// Corresponds to "Traffic source" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("TRAFFIC_SOURCE_NAME")] TrafficSourceName = 389,
        /// <summary>
        /// Unified pricing rule ID dimension
        ///
        /// Corresponds to "Unified pricing rule ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("UNIFIED_PRICING_RULE_ID")] UnifiedPricingRuleId = 393,
        /// <summary>
        /// Unified pricing rule name dimension
        ///
        /// Corresponds to "Unified pricing rule" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("UNIFIED_PRICING_RULE_NAME")] UnifiedPricingRuleName = 394,
        /// <summary>
        /// A URL defined under a publisher's inventory.
        ///
        /// Corresponds to "URL" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("URL")] Url = 506,
        /// <summary>
        /// A URL defined under a publisher's inventory.
        ///
        /// Corresponds to "URL ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("URL_ID")] UrlId = 507,
        /// <summary>
        /// Enum value for the entitlement source.
        ///
        /// Corresponds to "Entitlement source value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_ENTITLEMENT_SOURCE")] UserMessagesEntitlementSource = 635,
        /// <summary>
        /// The localized name of the entitlement source.
        ///
        /// Corresponds to "Entitlement source" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_ENTITLEMENT_SOURCE_NAME")] UserMessagesEntitlementSourceName = 636,
        /// <summary>
        /// Targeting criteria ID for the operating system group. Used for User
        ///  Messages reports.
        ///
        /// Corresponds to "Operating system group ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_ID")] UserMessagesOperatingSystemCriteriaId = 637,
        /// <summary>
        /// The name of the operating system group. Used for User Messages reports.
        ///
        /// Corresponds to "Operating system group" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_OPERATING_SYSTEM_CRITERIA_NAME")] UserMessagesOperatingSystemCriteriaName = 638,
        /// <summary>
        /// The VAST version of the creative that is returned for an ad request.
        ///
        /// Corresponds to "Vast version value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VAST_VERSION")] VastVersion = 554,
        /// <summary>
        /// The localized name of the VAST version of the creative that is returned
        ///  for an ad request.
        ///
        /// Corresponds to "Vast version" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VAST_VERSION_NAME")] VastVersionName = 555,
        /// <summary>
        /// The break type of a video ad request.
        ///
        /// Corresponds to "Video ad break type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_BREAK_TYPE")] VideoAdBreakType = 556,
        /// <summary>
        /// The localized name of the break type of a video ad request.
        ///
        /// Corresponds to "Video ad break type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_BREAK_TYPE_NAME")] VideoAdBreakTypeName = 557,
        /// <summary>
        /// Video ad duration
        ///
        /// Corresponds to "Video ad duration" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_DURATION")] VideoAdDuration = 450,
        /// <summary>
        /// The name of the video ad formats rule used to control the ad formats
        ///  eligible for your inventory.
        ///
        /// Corresponds to "Video ad formats rule" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_FORMATS_RULE")] VideoAdFormatsRule = 561,
        /// <summary>
        /// The ID of the video ad formats rule used to control the ad formats
        ///  eligible for your inventory.
        ///
        /// Corresponds to "Video ad formats rule ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_FORMATS_RULE_ID")] VideoAdFormatsRuleId = 560,
        /// <summary>
        /// The duration of a video ad request.
        ///
        /// Corresponds to "Video ad request duration value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_REQUEST_DURATION")] VideoAdRequestDuration = 558,
        /// <summary>
        /// The localized name of the midpoint of the duration of a video ad request.
        ///
        /// Corresponds to "Video ad request duration midpoint" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_REQUEST_DURATION_MIDPOINT_NAME")] VideoAdRequestDurationMidpointName = 751,
        /// <summary>
        /// The localized name of the duration of a video ad request.
        ///
        /// Corresponds to "Video ad request duration" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_REQUEST_DURATION_NAME")] VideoAdRequestDurationName = 559,
        /// <summary>
        /// The video ad request source enum.
        ///
        /// Corresponds to "Ad request source value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_REQUEST_SOURCE")] VideoAdRequestSource = 438,
        /// <summary>
        /// The localized name of the video ad request source.
        ///
        /// Corresponds to "Ad request source" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_REQUEST_SOURCE_NAME")] VideoAdRequestSourceName = 439,
        /// <summary>
        /// Video ad type
        ///
        /// Corresponds to "Video ad type value" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_TYPE")] VideoAdType = 432,
        /// <summary>
        /// Video ad type localized name
        ///
        /// Corresponds to "Video ad type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_AD_TYPE_NAME")] VideoAdTypeName = 433,
        /// <summary>
        /// The continuous play type of the video ad impression.
        ///
        /// Corresponds to "Video continuous play type value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_CONTINUOUS_PLAY_TYPE")] VideoContinuousPlayType = 721,
        /// <summary>
        /// Video continuous play type localized name.
        ///
        /// Corresponds to "Video continuous play type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_CONTINUOUS_PLAY_TYPE_NAME")] VideoContinuousPlayTypeName = 722,
        /// <summary>
        /// Fallback position of the video ad.
        ///
        /// Corresponds to "Fallback position" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_FALLBACK_POSITION")] VideoFallbackPosition = 530,
        /// <summary>
        /// The performance of the video ad inventory broken out by source.
        ///
        /// Corresponds to "Video measurement source value" in the Ad Manager UI
        /// (when showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_MEASUREMENT_SOURCE")] VideoMeasurementSource = 601,
        /// <summary>
        /// Video measurement source localized name.
        ///
        /// Corresponds to "Video measurement source" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_MEASUREMENT_SOURCE_NAME")] VideoMeasurementSourceName = 602,
        /// <summary>
        /// The video placement enum as defined by ADCOM 1.0-202303.
        ///
        /// Corresponds to "Video placement value (new)" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_PLCMT")] VideoPlcmt = 172,
        /// <summary>
        /// The localized name of the video placement as defined by ADCOM 1.0-202303.
        ///
        /// Corresponds to "Video placement (new)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_PLCMT_NAME")] VideoPlcmtName = 173,
        /// <summary>
        /// The position in the video pod. For example 0, 1, 2, etc.
        ///
        /// Corresponds to "Position in pod" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_POSITION_IN_POD")] VideoPositionInPod = 538,
        /// <summary>
        /// The position of the pod in the video stream. For example pre-roll,
        ///  mid-roll, post-roll.
        ///
        /// Corresponds to "Position of pod" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_POSITION_OF_POD")] VideoPositionOfPod = 539,
        /// <summary>
        /// The video SDK version enum.
        ///
        /// Corresponds to "Video SDK version value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_SDK_VERSION")] VideoSdkVersion = 440,
        /// <summary>
        /// The localized name of the video SDK version.
        ///
        /// Corresponds to "Video SDK version" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_SDK_VERSION_NAME")] VideoSdkVersionName = 441,
        /// <summary>
        /// Video stitcher type.
        ///
        /// Corresponds to "Video stitcher type value" in the Ad Manager UI (when
        /// showing API fields).
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("VIDEO_STITCHER_TYPE")] VideoStitcherType = 752,
        /// <summary>
        /// Localized name of the video stitcher type.
        ///
        /// Corresponds to "Video stitcher type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("VIDEO_STITCHER_TYPE_NAME")] VideoStitcherTypeName = 753,
        /// <summary>
        /// Breaks down reporting data by week of the year.
        ///
        /// Corresponds to "Week" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`, `REACH`,
        /// `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("WEEK")] Week = 5,
        /// <summary>
        /// Name of the company within a yield group
        ///
        /// Corresponds to "Yield partner" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_BUYER_NAME")] YieldGroupBuyerName = 184,
        /// <summary>
        /// Tag of the company within a yield group.
        ///
        /// Corresponds to "Yield group buyer tag" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_BUYER_TAG_NAME")] YieldGroupBuyerTagName = 627,
        /// <summary>
        /// ID of the group of ad networks or exchanges used for Mediation and Open
        ///  Bidding
        ///
        /// Corresponds to "Yield group ID" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `IDENTIFIER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_ID")] YieldGroupId = 182,
        /// <summary>
        /// Name of the group of ad networks or exchanges used for Mediation and Open
        ///  Bidding
        ///
        /// Corresponds to "Yield group" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_NAME")] YieldGroupName = 183,
        /// <summary>
        /// YouTube instream ad duration bucket.
        ///
        /// Corresponds to "Ad duration value" in the Ad Manager UI (when showing API
        /// fields).
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("YOUTUBE_AD_DURATION_BUCKET")] YoutubeAdDurationBucket = 430,
        /// <summary>
        /// YouTube instream ad duration bucket name.
        ///
        /// Corresponds to "Ad duration" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("YOUTUBE_AD_DURATION_BUCKET_NAME")] YoutubeAdDurationBucketName = 431,
        /// <summary>
        /// YouTube instream Ad Type.
        ///
        /// Corresponds to "YouTube ad type ID" in the Ad Manager UI (when showing
        /// API fields).
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `ENUM`
        /// </summary>
        [pbr::OriginalName("YOUTUBE_AD_TYPE")] YoutubeAdType = 399,
        /// <summary>
        /// YouTube instream Ad Type locallized name.
        ///
        /// Corresponds to "YouTube ad type" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `STRING`
        /// </summary>
        [pbr::OriginalName("YOUTUBE_AD_TYPE_NAME")] YoutubeAdTypeName = 400,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID")] LineItemCustomField0OptionId = 10000,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID")] LineItemCustomField1OptionId = 10001,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID")] LineItemCustomField2OptionId = 10002,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID")] LineItemCustomField3OptionId = 10003,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID")] LineItemCustomField4OptionId = 10004,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID")] LineItemCustomField5OptionId = 10005,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID")] LineItemCustomField6OptionId = 10006,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID")] LineItemCustomField7OptionId = 10007,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID")] LineItemCustomField8OptionId = 10008,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID")] LineItemCustomField9OptionId = 10009,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID")] LineItemCustomField10OptionId = 10010,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID")] LineItemCustomField11OptionId = 10011,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID")] LineItemCustomField12OptionId = 10012,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID")] LineItemCustomField13OptionId = 10013,
        /// <summary>
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID")] LineItemCustomField14OptionId = 10014,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 0 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_0_VALUE")] LineItemCustomField0Value = 11000,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 1 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_1_VALUE")] LineItemCustomField1Value = 11001,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 2 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_2_VALUE")] LineItemCustomField2Value = 11002,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 3 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_3_VALUE")] LineItemCustomField3Value = 11003,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 4 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_4_VALUE")] LineItemCustomField4Value = 11004,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 5 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_5_VALUE")] LineItemCustomField5Value = 11005,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 6 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_6_VALUE")] LineItemCustomField6Value = 11006,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 7 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_7_VALUE")] LineItemCustomField7Value = 11007,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 8 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_8_VALUE")] LineItemCustomField8Value = 11008,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 9 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_9_VALUE")] LineItemCustomField9Value = 11009,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 10 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_10_VALUE")] LineItemCustomField10Value = 11010,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 11 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_11_VALUE")] LineItemCustomField11Value = 11011,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 12 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_12_VALUE")] LineItemCustomField12Value = 11012,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 13 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_13_VALUE")] LineItemCustomField13Value = 11013,
        /// <summary>
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.line_item_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 14 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("LINE_ITEM_CUSTOM_FIELD_14_VALUE")] LineItemCustomField14Value = 11014,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_0_OPTION_ID")] OrderCustomField0OptionId = 12000,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_1_OPTION_ID")] OrderCustomField1OptionId = 12001,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_2_OPTION_ID")] OrderCustomField2OptionId = 12002,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_3_OPTION_ID")] OrderCustomField3OptionId = 12003,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_4_OPTION_ID")] OrderCustomField4OptionId = 12004,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_5_OPTION_ID")] OrderCustomField5OptionId = 12005,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_6_OPTION_ID")] OrderCustomField6OptionId = 12006,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_7_OPTION_ID")] OrderCustomField7OptionId = 12007,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_8_OPTION_ID")] OrderCustomField8OptionId = 12008,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_9_OPTION_ID")] OrderCustomField9OptionId = 12009,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_10_OPTION_ID")] OrderCustomField10OptionId = 12010,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_11_OPTION_ID")] OrderCustomField11OptionId = 12011,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_12_OPTION_ID")] OrderCustomField12OptionId = 12012,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_13_OPTION_ID")] OrderCustomField13OptionId = 12013,
        /// <summary>
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_14_OPTION_ID")] OrderCustomField14OptionId = 12014,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 0 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_0_VALUE")] OrderCustomField0Value = 13000,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 1 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_1_VALUE")] OrderCustomField1Value = 13001,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 2 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_2_VALUE")] OrderCustomField2Value = 13002,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 3 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_3_VALUE")] OrderCustomField3Value = 13003,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 4 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_4_VALUE")] OrderCustomField4Value = 13004,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 5 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_5_VALUE")] OrderCustomField5Value = 13005,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 6 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_6_VALUE")] OrderCustomField6Value = 13006,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 7 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_7_VALUE")] OrderCustomField7Value = 13007,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 8 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_8_VALUE")] OrderCustomField8Value = 13008,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.order_custom_field_ids`. Treats the value
        /// as a string. Can only be used if the custom field at index 9 is of type
        /// STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_9_VALUE")] OrderCustomField9Value = 13009,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 10 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_10_VALUE")] OrderCustomField10Value = 13010,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 11 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_11_VALUE")] OrderCustomField11Value = 13011,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 12 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_12_VALUE")] OrderCustomField12Value = 13012,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 13 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_13_VALUE")] OrderCustomField13Value = 13013,
        /// <summary>
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 14 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("ORDER_CUSTOM_FIELD_14_VALUE")] OrderCustomField14Value = 13014,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_0_OPTION_ID")] CreativeCustomField0OptionId = 14000,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_1_OPTION_ID")] CreativeCustomField1OptionId = 14001,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_2_OPTION_ID")] CreativeCustomField2OptionId = 14002,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_3_OPTION_ID")] CreativeCustomField3OptionId = 14003,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_4_OPTION_ID")] CreativeCustomField4OptionId = 14004,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_5_OPTION_ID")] CreativeCustomField5OptionId = 14005,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_6_OPTION_ID")] CreativeCustomField6OptionId = 14006,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_7_OPTION_ID")] CreativeCustomField7OptionId = 14007,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_8_OPTION_ID")] CreativeCustomField8OptionId = 14008,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_9_OPTION_ID")] CreativeCustomField9OptionId = 14009,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_10_OPTION_ID")] CreativeCustomField10OptionId = 14010,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_11_OPTION_ID")] CreativeCustomField11OptionId = 14011,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_12_OPTION_ID")] CreativeCustomField12OptionId = 14012,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_13_OPTION_ID")] CreativeCustomField13OptionId = 14013,
        /// <summary>
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_14_OPTION_ID")] CreativeCustomField14OptionId = 14014,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 0 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_0_VALUE")] CreativeCustomField0Value = 15000,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 1 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_1_VALUE")] CreativeCustomField1Value = 15001,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 2 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_2_VALUE")] CreativeCustomField2Value = 15002,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 3 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_3_VALUE")] CreativeCustomField3Value = 15003,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 4 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_4_VALUE")] CreativeCustomField4Value = 15004,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 5 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_5_VALUE")] CreativeCustomField5Value = 15005,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 6 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_6_VALUE")] CreativeCustomField6Value = 15006,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 7 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_7_VALUE")] CreativeCustomField7Value = 15007,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 8 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_8_VALUE")] CreativeCustomField8Value = 15008,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 9 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_9_VALUE")] CreativeCustomField9Value = 15009,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 10 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_10_VALUE")] CreativeCustomField10Value = 15010,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 11 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_11_VALUE")] CreativeCustomField11Value = 15011,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 12 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_12_VALUE")] CreativeCustomField12Value = 15012,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 13 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_13_VALUE")] CreativeCustomField13Value = 15013,
        /// <summary>
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 14 is of
        /// type STRING.
        /// </summary>
        [pbr::OriginalName("CREATIVE_CUSTOM_FIELD_14_VALUE")] CreativeCustomField14Value = 15014,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID")] BackfillLineItemCustomField0OptionId = 16000,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID")] BackfillLineItemCustomField1OptionId = 16001,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID")] BackfillLineItemCustomField2OptionId = 16002,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID")] BackfillLineItemCustomField3OptionId = 16003,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID")] BackfillLineItemCustomField4OptionId = 16004,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID")] BackfillLineItemCustomField5OptionId = 16005,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID")] BackfillLineItemCustomField6OptionId = 16006,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID")] BackfillLineItemCustomField7OptionId = 16007,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID")] BackfillLineItemCustomField8OptionId = 16008,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID")] BackfillLineItemCustomField9OptionId = 16009,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID")] BackfillLineItemCustomField10OptionId = 16010,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID")] BackfillLineItemCustomField11OptionId = 16011,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID")] BackfillLineItemCustomField12OptionId = 16012,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID")] BackfillLineItemCustomField13OptionId = 16013,
        /// <summary>
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID")] BackfillLineItemCustomField14OptionId = 16014,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 0 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE")] BackfillLineItemCustomField0Value = 17000,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 1 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE")] BackfillLineItemCustomField1Value = 17001,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 2 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE")] BackfillLineItemCustomField2Value = 17002,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 3 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE")] BackfillLineItemCustomField3Value = 17003,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 4 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE")] BackfillLineItemCustomField4Value = 17004,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 5 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE")] BackfillLineItemCustomField5Value = 17005,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 6 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE")] BackfillLineItemCustomField6Value = 17006,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 7 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE")] BackfillLineItemCustomField7Value = 17007,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 8 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE")] BackfillLineItemCustomField8Value = 17008,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 9 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE")] BackfillLineItemCustomField9Value = 17009,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 10 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE")] BackfillLineItemCustomField10Value = 17010,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 11 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE")] BackfillLineItemCustomField11Value = 17011,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 12 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE")] BackfillLineItemCustomField12Value = 17012,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 13 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE")] BackfillLineItemCustomField13Value = 17013,
        /// <summary>
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 14 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE")] BackfillLineItemCustomField14Value = 17014,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 0 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID")] BackfillOrderCustomField0OptionId = 18000,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 1 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID")] BackfillOrderCustomField1OptionId = 18001,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 2 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID")] BackfillOrderCustomField2OptionId = 18002,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 3 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID")] BackfillOrderCustomField3OptionId = 18003,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 4 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID")] BackfillOrderCustomField4OptionId = 18004,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 5 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID")] BackfillOrderCustomField5OptionId = 18005,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 6 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID")] BackfillOrderCustomField6OptionId = 18006,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 7 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID")] BackfillOrderCustomField7OptionId = 18007,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 8 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID")] BackfillOrderCustomField8OptionId = 18008,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 9 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID")] BackfillOrderCustomField9OptionId = 18009,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 10 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID")] BackfillOrderCustomField10OptionId = 18010,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 11 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID")] BackfillOrderCustomField11OptionId = 18011,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 12 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID")] BackfillOrderCustomField12OptionId = 18012,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 13 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID")] BackfillOrderCustomField13OptionId = 18013,
        /// <summary>
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 14 of `ReportDefinition.order_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID")] BackfillOrderCustomField14OptionId = 18014,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID
        /// in index 0 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 0 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE")] BackfillOrderCustomField0Value = 19000,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 1 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 1 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE")] BackfillOrderCustomField1Value = 19001,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 2 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 2 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE")] BackfillOrderCustomField2Value = 19002,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 3 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 3 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE")] BackfillOrderCustomField3Value = 19003,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 4 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 4 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE")] BackfillOrderCustomField4Value = 19004,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 5 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 5 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE")] BackfillOrderCustomField5Value = 19005,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 6 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 6 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE")] BackfillOrderCustomField6Value = 19006,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 7 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 7 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE")] BackfillOrderCustomField7Value = 19007,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 8 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 8 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE")] BackfillOrderCustomField8Value = 19008,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 9 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 9 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE")] BackfillOrderCustomField9Value = 19009,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 10 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 10 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE")] BackfillOrderCustomField10Value = 19010,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 11 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 11 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE")] BackfillOrderCustomField11Value = 19011,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 12 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 12 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE")] BackfillOrderCustomField12Value = 19012,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 13 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 13 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE")] BackfillOrderCustomField13Value = 19013,
        /// <summary>
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 14 of `ReportDefinition.order_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 14 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE")] BackfillOrderCustomField14Value = 19014,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 0 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID")] BackfillCreativeCustomField0OptionId = 20000,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 1 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID")] BackfillCreativeCustomField1OptionId = 20001,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 2 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID")] BackfillCreativeCustomField2OptionId = 20002,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 3 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID")] BackfillCreativeCustomField3OptionId = 20003,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 4 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID")] BackfillCreativeCustomField4OptionId = 20004,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 5 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID")] BackfillCreativeCustomField5OptionId = 20005,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 6 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID")] BackfillCreativeCustomField6OptionId = 20006,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 7 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID")] BackfillCreativeCustomField7OptionId = 20007,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 8 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID")] BackfillCreativeCustomField8OptionId = 20008,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 9 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID")] BackfillCreativeCustomField9OptionId = 20009,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID")] BackfillCreativeCustomField10OptionId = 20010,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID")] BackfillCreativeCustomField11OptionId = 20011,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID")] BackfillCreativeCustomField12OptionId = 20012,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID")] BackfillCreativeCustomField13OptionId = 20013,
        /// <summary>
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID")] BackfillCreativeCustomField14OptionId = 20014,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID
        /// in index 0 of `ReportDefinition.creative_custom_field_ids`. Treats the
        /// value as a string. Can only be used if the custom field at index 0 is of
        /// type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE")] BackfillCreativeCustomField0Value = 21000,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 1 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 1 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE")] BackfillCreativeCustomField1Value = 21001,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 2 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 2 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE")] BackfillCreativeCustomField2Value = 21002,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 3 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 3 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE")] BackfillCreativeCustomField3Value = 21003,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 4 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 4 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE")] BackfillCreativeCustomField4Value = 21004,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 5 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 5 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE")] BackfillCreativeCustomField5Value = 21005,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 6 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 6 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE")] BackfillCreativeCustomField6Value = 21006,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 7 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 7 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE")] BackfillCreativeCustomField7Value = 21007,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 8 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 8 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE")] BackfillCreativeCustomField8Value = 21008,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 9 of `ReportDefinition.creative_custom_field_ids`. Treats
        /// the value as a string. Can only be used if the custom field at index 9 is
        /// of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE")] BackfillCreativeCustomField9Value = 21009,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 10 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE")] BackfillCreativeCustomField10Value = 21010,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 11 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE")] BackfillCreativeCustomField11Value = 21011,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 12 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE")] BackfillCreativeCustomField12Value = 21012,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 13 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE")] BackfillCreativeCustomField13Value = 21013,
        /// <summary>
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
        /// Treats the value as a string. Can only be used if the custom field at
        /// index 14 is of type `STRING` or `DROPDOWN`.
        /// </summary>
        [pbr::OriginalName("BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE")] BackfillCreativeCustomField14Value = 21014,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 0 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_0_VALUE_ID")] CustomDimension0ValueId = 100000,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 1 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_1_VALUE_ID")] CustomDimension1ValueId = 100001,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 2 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_2_VALUE_ID")] CustomDimension2ValueId = 100002,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 3 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_3_VALUE_ID")] CustomDimension3ValueId = 100003,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 4 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_4_VALUE_ID")] CustomDimension4ValueId = 100004,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 5 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_5_VALUE_ID")] CustomDimension5ValueId = 100005,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 6 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_6_VALUE_ID")] CustomDimension6ValueId = 100006,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 9 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_7_VALUE_ID")] CustomDimension7ValueId = 100007,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 8 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_8_VALUE_ID")] CustomDimension8ValueId = 100008,
        /// <summary>
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 9 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_9_VALUE_ID")] CustomDimension9ValueId = 100009,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 0 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_0_VALUE")] CustomDimension0Value = 101000,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 1 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_1_VALUE")] CustomDimension1Value = 101001,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 2 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_2_VALUE")] CustomDimension2Value = 101002,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 3 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_3_VALUE")] CustomDimension3Value = 101003,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 4 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_4_VALUE")] CustomDimension4Value = 101004,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 5 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_5_VALUE")] CustomDimension5Value = 101005,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 6 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_6_VALUE")] CustomDimension6Value = 101006,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 7 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_7_VALUE")] CustomDimension7Value = 101007,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 8 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_8_VALUE")] CustomDimension8Value = 101008,
        /// <summary>
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// ID in index 9 of `ReportDefinition.custom_dimension_key_ids`.
        /// </summary>
        [pbr::OriginalName("CUSTOM_DIMENSION_9_VALUE")] CustomDimension9Value = 101009,
      }

      /// <summary>
      /// Reporting metrics.
      /// </summary>
      public enum Metric {
        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        [pbr::OriginalName("METRIC_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The number of people who engaged with your site or app in the specified
        ///  date range from Google Analytics.
        ///
        /// Corresponds to "Active users" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_USERS")] ActiveUsers = 223,
        /// <summary>
        /// Number of impressions with unmuted playback at start.
        ///
        /// Corresponds to "Active View % audible at start" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AUDIBLE_AT_START_PERCENT")] ActiveViewAudibleAtStartPercent = 445,
        /// <summary>
        /// Total Active View audible impressions
        ///
        /// Corresponds to "Total Active View audible impressions" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AUDIBLE_IMPRESSIONS")] ActiveViewAudibleImpressions = 659,
        /// <summary>
        /// Number of impressions with unmuted playback through the entire stream.
        ///
        /// Corresponds to "Active View % audible through completion" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AUDIBLE_THROUGH_COMPLETION_PERCENT")] ActiveViewAudibleThroughCompletionPercent = 446,
        /// <summary>
        /// Number of impressions with unmuted playback through at least 25%.
        ///
        /// Corresponds to "Active View % audible through first quartile" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AUDIBLE_THROUGH_FIRST_QUARTILE_PERCENT")] ActiveViewAudibleThroughFirstQuartilePercent = 447,
        /// <summary>
        /// Number of impressions with unmuted playback through at least 50%.
        ///
        /// Corresponds to "Active View % audible through midpoint" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AUDIBLE_THROUGH_MIDPOINT_PERCENT")] ActiveViewAudibleThroughMidpointPercent = 448,
        /// <summary>
        /// Number of impressions with unmuted playback through at least 75%.
        ///
        /// Corresponds to "Active View % audible through third quartile" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AUDIBLE_THROUGH_THIRD_QUARTILE_PERCENT")] ActiveViewAudibleThroughThirdQuartilePercent = 449,
        /// <summary>
        /// Total Active View audio enabled impressions
        ///
        /// Corresponds to "Total Active View audio eligible impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AUDIO_ENABLED_IMPRESSIONS")] ActiveViewAudioEnabledImpressions = 660,
        /// <summary>
        /// Total Active View audio measurable impressions
        ///
        /// Corresponds to "Total Active View audio measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AUDIO_MEASURABLE_IMPRESSIONS")] ActiveViewAudioMeasurableImpressions = 661,
        /// <summary>
        /// Active View total average time in seconds that specific impressions are
        ///  reported as being viewable.
        ///
        /// Corresponds to "Total Active View average viewable time (seconds)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME")] ActiveViewAverageViewableTime = 61,
        /// <summary>
        /// Total number of impressions that were eligible to measure viewability.
        ///
        /// Corresponds to "Total Active View eligible impressions" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS")] ActiveViewEligibleImpressions = 58,
        /// <summary>
        /// Number of impressions where the ad player is in the background at any
        ///  point during playback with volume > 0.
        ///
        /// Corresponds to "Active View % ever audible while backgrounded" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_EVER_AUDIBLE_BACKGROUNDED_PERCENT")] ActiveViewEverAudibleBackgroundedPercent = 450,
        /// <summary>
        /// Number of impressions where volume > 0 at any point.
        ///
        /// Corresponds to "Active View % ever audible" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_EVER_AUDIBLE_PERCENT")] ActiveViewEverAudiblePercent = 451,
        /// <summary>
        /// Number of impressions where the ad player is in the background at any
        ///  point during playback.
        ///
        /// Corresponds to "Active View % ever backgrounded" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_EVER_BACKGROUNDED_PERCENT")] ActiveViewEverBackgroundedPercent = 452,
        /// <summary>
        /// Number of impressions where volume = 0 at any point.
        ///
        /// Corresponds to "Active View % ever muted" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_EVER_MUTED_PERCENT")] ActiveViewEverMutedPercent = 453,
        /// <summary>
        /// The number of measurable impressions that were played to video
        ///  completion, and also audible and visible at the time of completion.
        ///
        /// Corresponds to "Total Active View impressions audible and visible at
        /// completion" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_IMPRESSIONS_AUDIBLE_AND_VISIBLIE_AT_COMPLETION")] ActiveViewImpressionsAudibleAndVisiblieAtCompletion = 411,
        /// <summary>
        /// The total number of impressions that were sampled and measured by active
        ///  view.
        ///
        /// Corresponds to "Total Active View measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_MEASURABLE_IMPRESSIONS")] ActiveViewMeasurableImpressions = 57,
        /// <summary>
        /// The percentage of total impressions that were measurable by active view
        ///  (out of all the total impressions sampled for active view).
        ///
        /// Corresponds to "Total Active View % measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE")] ActiveViewMeasurableImpressionsRate = 60,
        /// <summary>
        /// Total Active View non-measurable impressions
        ///
        /// Corresponds to "Total Active View non-measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS")] ActiveViewNonMeasurableImpressions = 662,
        /// <summary>
        /// Total Active View non-viewable impressions
        ///
        /// Corresponds to "Total Active View non-viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS")] ActiveViewNonViewableImpressions = 663,
        /// <summary>
        /// Total Active View non-viewable impressions distribution
        ///
        /// Corresponds to "Total Active View non-viewable impression distribution"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION")] ActiveViewNonViewableImpressionsDistribution = 664,
        /// <summary>
        /// Total Active View percent audible impressions
        ///
        /// Corresponds to "Total Active View % audible impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_PERCENT_AUDIBLE_IMPRESSIONS")] ActiveViewPercentAudibleImpressions = 665,
        /// <summary>
        /// Number of impressions where we were able to collect Active View+ signals.
        ///
        /// Corresponds to "Active View+ measurable impressions" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_PLUS_MEASURABLE_COUNT")] ActiveViewPlusMeasurableCount = 454,
        /// <summary>
        /// Revenue generated from Active View impressions.
        ///
        /// Corresponds to "Total Active View revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_REVENUE")] ActiveViewRevenue = 414,
        /// <summary>
        /// Total Active View undetermined impressions distribution
        ///
        /// Corresponds to "Total Active View undetermined impression distribution"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION")] ActiveViewUndeterminedImpressionsDistribution = 666,
        /// <summary>
        /// The total number of impressions viewed on the user's screen.
        ///
        /// Corresponds to "Total Active View viewable impressions" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_VIEWABLE_IMPRESSIONS")] ActiveViewViewableImpressions = 56,
        /// <summary>
        /// Total Active View viewable impressions distribution
        ///
        /// Corresponds to "Total Active View viewable impression distribution" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION")] ActiveViewViewableImpressionsDistribution = 667,
        /// <summary>
        /// The percentage of total impressions viewed on the user's screen (out of
        ///  the total impressions measurable by active view).
        ///
        /// Corresponds to "Total Active View % viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE")] ActiveViewViewableImpressionsRate = 59,
        /// <summary>
        /// Active View AdSense average time in seconds that specific impressions are
        ///  reported as being viewable.
        ///
        /// Corresponds to "AdSense Active View average viewable time (seconds)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME")] AdsenseActiveViewAverageViewableTime = 73,
        /// <summary>
        /// Total number of impressions delivered by AdSense that were eligible to
        ///  measure viewability.
        ///
        /// Corresponds to "AdSense Active View eligible impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS")] AdsenseActiveViewEligibleImpressions = 70,
        /// <summary>
        /// The number of impressions delivered by AdSense that were sampled, and
        ///  measurable by active view.
        ///
        /// Corresponds to "AdSense Active View measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS")] AdsenseActiveViewMeasurableImpressions = 69,
        /// <summary>
        /// The percentage of impressions delivered by AdSense that were measurable
        ///  by active view (out of all AdSense impressions sampled for active view).
        ///
        /// Corresponds to "AdSense Active View % measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE")] AdsenseActiveViewMeasurableImpressionsRate = 72,
        /// <summary>
        /// AdSense Active View non-measurable impressions
        ///
        /// Corresponds to "AdSense Active View non-measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS")] AdsenseActiveViewNonMeasurableImpressions = 642,
        /// <summary>
        /// AdSense Active View non-viewable impressions
        ///
        /// Corresponds to "AdSense Active View non-viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS")] AdsenseActiveViewNonViewableImpressions = 643,
        /// <summary>
        /// AdSense Active View non-viewable impressions distribution
        ///
        /// Corresponds to "AdSense Active View non-viewable impression distribution"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION")] AdsenseActiveViewNonViewableImpressionsDistribution = 644,
        /// <summary>
        /// AdSense Active View undetermined impressions distribution
        ///
        /// Corresponds to "AdSense Active View undetermined impression distribution"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION")] AdsenseActiveViewUndeterminedImpressionsDistribution = 645,
        /// <summary>
        /// The number of impressions delivered by AdSense viewed on the user's
        ///  screen.
        ///
        /// Corresponds to "AdSense Active View viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS")] AdsenseActiveViewViewableImpressions = 68,
        /// <summary>
        /// AdSense Active View viewable impressions distribution
        ///
        /// Corresponds to "AdSense Active View viewable impression distribution" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION")] AdsenseActiveViewViewableImpressionsDistribution = 646,
        /// <summary>
        /// The percentage of impressions delivered by AdSense viewed on the user's
        ///  screen (out of AdSense impressions measurable by active view).
        ///
        /// Corresponds to "AdSense Active View % viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE")] AdsenseActiveViewViewableImpressionsRate = 71,
        /// <summary>
        /// The average effective cost-per-thousand-impressions earned from the ads
        ///  delivered by AdSense through line item dynamic allocation.
        ///
        /// Corresponds to "AdSense average eCPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("ADSENSE_AVERAGE_ECPM")] AdsenseAverageEcpm = 26,
        /// <summary>
        /// Number of clicks delivered by AdSense demand channel.
        ///
        /// Corresponds to "AdSense clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ADSENSE_CLICKS")] AdsenseClicks = 23,
        /// <summary>
        /// The ratio of impressions served by AdSense that resulted in users
        ///  clicking on an ad. The clickthrough rate (CTR) is updated nightly. The
        ///  AdSense CTR is calculated as: (AdSense clicks / AdSense impressions).
        ///
        /// Corresponds to "AdSense CTR" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_CTR")] AdsenseCtr = 24,
        /// <summary>
        /// Total impressions delivered by AdSense.
        ///
        /// Corresponds to "AdSense impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ADSENSE_IMPRESSIONS")] AdsenseImpressions = 22,
        /// <summary>
        /// Ratio of clicks delivered by AdSense through line item dynamic allocation
        ///  in relation to the total clicks delivered.
        ///
        /// Corresponds to "AdSense clicks (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_PERCENT_CLICKS")] AdsensePercentClicks = 28,
        /// <summary>
        /// Ratio of impressions delivered by AdSense through line item dynamic
        ///  allocation in relation to the total impressions delivered.
        ///
        /// Corresponds to "AdSense impressions (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_PERCENT_IMPRESSIONS")] AdsensePercentImpressions = 27,
        /// <summary>
        /// Ratio of revenue generated by AdSense through line item dynamic
        ///  allocation in relation to the total revenue.
        ///
        /// Corresponds to "AdSense revenue (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_PERCENT_REVENUE")] AdsensePercentRevenue = 29,
        /// <summary>
        /// Ratio of revenue generated by AdSense through line item dynamic
        ///  allocation in relation to the total revenue (excluding CPD).
        ///
        /// Corresponds to "AdSense revenue w/o CPD (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ADSENSE_PERCENT_REVENUE_WITHOUT_CPD")] AdsensePercentRevenueWithoutCpd = 30,
        /// <summary>
        /// The total number of times that an AdSense ad is delivered.
        ///
        /// Corresponds to "AdSense responses served" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ADSENSE_RESPONSES_SERVED")] AdsenseResponsesServed = 41,
        /// <summary>
        /// Revenue generated from AdSense through line item dynamic allocation,
        ///  calculated in the network's currency and time zone.
        ///
        /// Corresponds to "AdSense revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("ADSENSE_REVENUE")] AdsenseRevenue = 25,
        /// <summary>
        /// Active View AdExchange average time in seconds that specific impressions
        ///  are reported as being viewable.
        ///
        /// Corresponds to "Ad Exchange Active View average viewable time (seconds)"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME")] AdExchangeActiveViewAverageViewableTime = 79,
        /// <summary>
        /// Total number of impressions delivered by Ad Exchange that were eligible
        ///  to measure viewability.
        ///
        /// Corresponds to "Ad Exchange Active View eligible impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS")] AdExchangeActiveViewEligibleImpressions = 76,
        /// <summary>
        /// The number of impressions delivered by Ad Exchange that were sampled, and
        ///  measurable by active view.
        ///
        /// Corresponds to "Ad Exchange Active View measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS")] AdExchangeActiveViewMeasurableImpressions = 75,
        /// <summary>
        /// The percentage of impressions delivered by Ad Exchange that were
        ///  measurable by active view (out of all Ad Exchange impressions sampled
        ///  for active view).
        ///
        /// Corresponds to "Ad Exchange Active View % measurable impressions" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE")] AdExchangeActiveViewMeasurableImpressionsRate = 78,
        /// <summary>
        /// Ad Exchange Active View non-measurable impressions
        ///
        /// Corresponds to "Ad Exchange Active View non-measurable impressions" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS")] AdExchangeActiveViewNonMeasurableImpressions = 654,
        /// <summary>
        /// Ad Exchange Active View non-viewable impressions
        ///
        /// Corresponds to "Ad Exchange Active View non-viewable impressions" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS")] AdExchangeActiveViewNonViewableImpressions = 655,
        /// <summary>
        /// Ad Exchange Active View non-viewable impressions distribution
        ///
        /// Corresponds to "Ad Exchange Active View non-viewable impression
        /// distribution" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION")] AdExchangeActiveViewNonViewableImpressionsDistribution = 656,
        /// <summary>
        /// Ad Exchange Active View undetermined impressions distribution
        ///
        /// Corresponds to "Ad Exchange Active View undetermined impression
        /// distribution" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION")] AdExchangeActiveViewUndeterminedImpressionsDistribution = 657,
        /// <summary>
        /// The number of impressions delivered by Ad Exchange viewed on the user's
        ///  screen.
        ///
        /// Corresponds to "Ad Exchange Active View viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS")] AdExchangeActiveViewViewableImpressions = 74,
        /// <summary>
        /// Ad Exchange Active View viewable impressions distribution
        ///
        /// Corresponds to "Ad Exchange Active View viewable impression distribution"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION")] AdExchangeActiveViewViewableImpressionsDistribution = 658,
        /// <summary>
        /// The percentage of impressions delivered by Ad Exchange viewed on the
        ///  user's screen (out of Ad Exchange impressions measurable by active
        ///  view).
        ///
        /// Corresponds to "Ad Exchange Active View % viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE")] AdExchangeActiveViewViewableImpressionsRate = 77,
        /// <summary>
        /// The average effective cost-per-thousand-impressions earned from the ads
        ///  delivered by Ad Exchange through line item dynamic allocation.
        ///
        /// Corresponds to "Ad Exchange average eCPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_AVERAGE_ECPM")] AdExchangeAverageEcpm = 18,
        /// <summary>
        /// Number of clicks delivered by the Ad Exchange.
        ///
        /// Corresponds to "Ad Exchange clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_CLICKS")] AdExchangeClicks = 15,
        /// <summary>
        /// The average effective cost-per-click earned from the ads delivered by Ad
        ///  Exchange through line item dynamic allocation.
        ///
        /// Corresponds to "Ad Exchange CPC" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_CPC")] AdExchangeCpc = 244,
        /// <summary>
        /// The ratio of impressions served by the Ad Exchange that resulted in users
        ///  clicking on an ad. The clickthrough rate (CTR) is updated nightly. Ad
        ///  Exchange CTR is calculated as: (Ad Exchange clicks / Ad Exchange
        ///  impressions).
        ///
        /// Corresponds to "Ad Exchange CTR" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_CTR")] AdExchangeCtr = 16,
        /// <summary>
        /// Ratio of impressions delivered by Ad Exchange through line item dynamic
        ///  allocation to ad requests.
        ///
        /// Corresponds to "Ad Exchange delivery rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_DELIVERY_RATE")] AdExchangeDeliveryRate = 245,
        /// <summary>
        /// Total impressions delivered by the Ad Exchange.
        ///
        /// Corresponds to "Ad Exchange impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_IMPRESSIONS")] AdExchangeImpressions = 14,
        /// <summary>
        /// The total number of impressions based on the number of ad viewers.
        ///
        /// Corresponds to "Ad Exchange impressions per ad viewer" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_IMPRESSIONS_PER_AD_VIEWER")] AdExchangeImpressionsPerAdViewer = 427,
        /// <summary>
        /// The total number of impressions based on the number of sessions.
        ///
        /// Corresponds to "Ad Exchange impressions per session" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_IMPRESSIONS_PER_SESSION")] AdExchangeImpressionsPerSession = 428,
        /// <summary>
        /// The increase in revenue gained for won impressions over the applicable
        ///  third party price (the minimum CPM or the best price specified during
        ///  dynamic allocation),
        ///
        /// Corresponds to "Ad Exchange lift earnings" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_LIFT")] AdExchangeLift = 246,
        /// <summary>
        /// The ratio of matched ad requests served by the Ad Exchange that
        ///  resulted in users clicking on an ad. The clickthrough rate (CTR) is
        ///  updated nightly. Ad Exchange Matched Request CTR is calculated as:
        ///  (Ad Exchange clicks / Ad Exchange Macthed Ad Requests).
        ///
        /// Corresponds to "Ad Exchange matched request CTR" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_MATCHED_REQUEST_CTR")] AdExchangeMatchedRequestCtr = 247,
        /// <summary>
        /// The average effective cost per thousand matched ad requests earned from
        ///  the ads delivered by Ad Exchange through line item dynamic allocation.
        ///
        /// Corresponds to "Ad Exchange matched request eCPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_MATCHED_REQUEST_ECPM")] AdExchangeMatchedRequestEcpm = 248,
        /// <summary>
        /// The number of responses served divided by the number of queries eligible
        ///  in ad exchange.
        ///
        /// Corresponds to "Ad Exchange match rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_MATCH_RATE")] AdExchangeMatchRate = 249,
        /// <summary>
        /// Total opportunities from video VAST error within the waterfall for
        ///  backfill ads.
        ///
        /// Corresponds to "Ad Exchange opportunities from errors" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_OPPORTUNITIES_FROM_ERRORS")] AdExchangeOpportunitiesFromErrors = 250,
        /// <summary>
        /// Number of opportunities from impressions within the waterfall for
        ///  backfill ads.
        ///
        /// Corresponds to "Ad Exchange opportunities from impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_OPPORTUNITIES_FROM_IMPRESSIONS")] AdExchangeOpportunitiesFromImpressions = 251,
        /// <summary>
        /// Ratio of clicks delivered by Ad Exchange through line item dynamic
        ///  allocation in relation to the total clicks delivered.
        ///
        /// Corresponds to "Ad Exchange clicks (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_PERCENT_CLICKS")] AdExchangePercentClicks = 20,
        /// <summary>
        /// Ratio of impressions delivered by Ad Exchange through line item dynamic
        ///  allocation in relation to the total impressions delivered.
        ///
        /// Corresponds to "Ad Exchange impressions (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_PERCENT_IMPRESSIONS")] AdExchangePercentImpressions = 19,
        /// <summary>
        /// Ratio of revenue generated by Ad Exchange through line item dynamic
        ///  allocation in relation to the total revenue.
        ///
        /// Corresponds to "Ad Exchange revenue (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_PERCENT_REVENUE")] AdExchangePercentRevenue = 21,
        /// <summary>
        /// Ratio of revenue generated by Ad Exchange through line item dynamic
        ///  allocation in relation to the total revenue (excluding CPD).
        ///
        /// Corresponds to "Ad Exchange revenue w/o CPD (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD")] AdExchangePercentRevenueWithoutCpd = 31,
        /// <summary>
        /// The average effective cost-per-thousand-impressions earned from the ads
        ///  delivered by Ad Exchange through line item dynamic allocation and yield
        ///  group partners.
        ///
        /// Corresponds to "Ad Exchange plus yield group eCPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_PLUS_YIELD_GROUP_ECPM")] AdExchangePlusYieldGroupEcpm = 252,
        /// <summary>
        /// Total impressions delivered by the Ad Exchange and third-party networks.
        ///
        /// Corresponds to "Ad Exchange plus yield group impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_PLUS_YIELD_GROUP_IMPRESSIONS")] AdExchangePlusYieldGroupImpressions = 253,
        /// <summary>
        /// Revenue generated from the Ad Exchange and Yield Group, calculated in
        ///   your network's currency and time zone.
        ///
        /// Corresponds to "Ad Exchange plus yield group revenue" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_PLUS_YIELD_GROUP_REVENUE")] AdExchangePlusYieldGroupRevenue = 254,
        /// <summary>
        /// The total number of times that an Ad Exchange ad is delivered.
        ///
        /// Corresponds to "Ad Exchange responses served" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_RESPONSES_SERVED")] AdExchangeResponsesServed = 42,
        /// <summary>
        /// Revenue generated from the Ad Exchange through line item dynamic
        ///  allocation, calculated in your network's currency and time zone.
        ///
        /// Corresponds to "Ad Exchange revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_REVENUE")] AdExchangeRevenue = 17,
        /// <summary>
        /// The Ad Exchange revenue accrued in the child network's own account but
        ///  paid to their parent network through auto-payment. This metric is only
        ///  relevant for a "Manage Account" child network.
        ///
        /// Corresponds to "Ad Exchange revenue paid through MCM auto-payment" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT")] AdExchangeRevenuePaidThroughMcmAutopayment = 212,
        /// <summary>
        /// The total amount of Ad Exchange revenue based on the
        ///  number of ad viewers.
        ///
        /// Corresponds to "Ad Exchange revenue per ad viewer" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_REVENUE_PER_AD_VIEWER")] AdExchangeRevenuePerAdViewer = 429,
        /// <summary>
        /// The number of programmatic eligible queries in Ad Exchange.
        ///
        /// Corresponds to "Ad Exchange total requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_TOTAL_REQUESTS")] AdExchangeTotalRequests = 255,
        /// <summary>
        /// The ratio of total ad requests served by the Ad Exchange that
        ///  resulted in users clicking on an ad. The clickthrough rate (CTR) is
        ///  updated nightly. Ad Exchange Total Request CTR is calculated as:
        ///  (Ad Exchange clicks / Ad Exchange Total Ad Requests).
        ///
        /// Corresponds to "Ad Exchange total request CTR" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_TOTAL_REQUEST_CTR")] AdExchangeTotalRequestCtr = 256,
        /// <summary>
        /// The average effective cost per thousand ad requests earned from the ads
        ///  delivered by Ad Exchange through line item dynamic allocation and yield
        ///   group partners.
        ///
        /// Corresponds to "Ad Exchange total request eCPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE_TOTAL_REQUEST_ECPM")] AdExchangeTotalRequestEcpm = 257,
        /// <summary>
        /// Length of time in seconds that an ad is visible on the user's screen from
        ///  Google Analytics.
        ///
        /// Corresponds to "Ad exposure (seconds)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AD_EXPOSURE_SECONDS")] AdExposureSeconds = 241,
        /// <summary>
        /// The total number of times that an ad request is sent to the ad server
        ///  including dynamic allocation.
        ///
        /// Corresponds to "Total ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_REQUESTS")] AdRequests = 38,
        /// <summary>
        /// Active View ad server average time in seconds that specific impressions
        ///  are reported as being viewable.
        ///
        /// Corresponds to "Ad server Active View average viewable time (seconds)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME")] AdServerActiveViewAverageViewableTime = 67,
        /// <summary>
        /// Total number of impressions delivered by the ad server that were eligible
        ///  to measure viewability.
        ///
        /// Corresponds to "Ad server Active View eligible impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS")] AdServerActiveViewEligibleImpressions = 64,
        /// <summary>
        /// The number of impressions delivered by the ad server that were sampled,
        ///  and measurable by active view.
        ///
        /// Corresponds to "Ad server Active View measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS")] AdServerActiveViewMeasurableImpressions = 63,
        /// <summary>
        /// The percentage of impressions delivered by the ad server that were
        ///  measurable by active view (out of all the ad server impressions sampled
        ///  for active view).
        ///
        /// Corresponds to "Ad server Active View % measurable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE")] AdServerActiveViewMeasurableImpressionsRate = 66,
        /// <summary>
        /// The number of impressions delivered by Ad Server that were not measured.
        ///  For example, impressions where measurement was attempted but failed.
        ///
        /// Corresponds to "Ad server Active View non-measurable impressions" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_NON_MEASURABLE_IMPRESSIONS")] AdServerActiveViewNonMeasurableImpressions = 332,
        /// <summary>
        /// The number of impressions delivered by Ad Server that were measured by
        ///  active view, but deemed not viewable.
        ///
        /// Corresponds to "Ad server Active View non-viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS")] AdServerActiveViewNonViewableImpressions = 331,
        /// <summary>
        /// The fraction of non-viewable impressions among eligible impressions from
        ///  Ad Server in Active View reporting."
        ///
        /// Corresponds to "Ad server Active View non-viewable impression
        /// distribution" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_NON_VIEWABLE_IMPRESSIONS_DISTRIBUTION")] AdServerActiveViewNonViewableImpressionsDistribution = 334,
        /// <summary>
        /// The fraction of non-eligible impressions among eligible impressions from
        ///  Ad Server in Active View reporting."
        ///
        /// Corresponds to "Ad server Active View undetermined impression
        /// distribution" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_UNDETERMINED_IMPRESSIONS_DISTRIBUTION")] AdServerActiveViewUndeterminedImpressionsDistribution = 335,
        /// <summary>
        /// The number of impressions delivered by the ad server viewed on the user's
        ///  screen.
        ///
        /// Corresponds to "Ad server Active View viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS")] AdServerActiveViewViewableImpressions = 62,
        /// <summary>
        /// The fraction of viewable impressions among eligible impressions from Ad
        ///  Server in Active View reporting.
        ///
        /// Corresponds to "Ad server Active View viewable impression distribution"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_DISTRIBUTION")] AdServerActiveViewViewableImpressionsDistribution = 333,
        /// <summary>
        /// The percentage of impressions delivered by the ad server viewed on the
        ///  user's screen (out of the ad server impressions measurable by active
        ///  view).
        ///
        /// Corresponds to "Ad server Active View % viewable impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE")] AdServerActiveViewViewableImpressionsRate = 65,
        /// <summary>
        /// Average effective cost-per-thousand-impressions earned from the ads
        ///  delivered by the Google Ad Manager server.
        ///
        /// Corresponds to "Ad server average eCPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_AVERAGE_ECPM")] AdServerAverageEcpm = 34,
        /// <summary>
        /// Average effective cost-per-thousand-impressions earned from the ads
        ///  delivered by the Google Ad Manager server, excluding CPD value.
        ///
        /// Corresponds to "Ad server average eCPM w/o CPD" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD")] AdServerAverageEcpmWithoutCpd = 10,
        /// <summary>
        /// Total raw impressions counted when creative begins to render or the
        ///  first frame of a video is shown.
        ///
        /// Corresponds to "Ad server begin to render impressions" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_BEGIN_TO_RENDER_IMPRESSIONS")] AdServerBeginToRenderImpressions = 262,
        /// <summary>
        /// Total clicks served by the Google Ad Manager server. It usually takes
        ///  about 30 minutes for new clicks to be recorded and added to the total
        ///  displayed in reporting.
        ///
        /// Corresponds to "Ad server clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_CLICKS")] AdServerClicks = 7,
        /// <summary>
        /// The number of completed views for ad server.
        ///
        /// Corresponds to "Ad server completed views" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_COMPLETED_VIEWS")] AdServerCompletedViews = 431,
        /// <summary>
        /// Total coviewed impressions delivered by the Ad Server.
        ///
        /// Corresponds to "Ad server impressions (co-viewed)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_COVIEWED_IMPRESSIONS")] AdServerCoviewedImpressions = 554,
        /// <summary>
        /// CPD revenue earned, calculated in your network's currency, for
        ///  the ads delivered by the Google Ad Manager server. Sum of all booked
        ///  revenue.
        ///
        /// Corresponds to "Ad server CPD revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_CPD_REVENUE")] AdServerCpdRevenue = 32,
        /// <summary>
        /// Ratio of impressions served by the Google Ad Manager server that resulted
        ///  in users clicking on an ad. The clickthrough rate (CTR) is updated
        ///  nightly. The ad server CTR is calculated as: (Ad server clicks / Ad
        ///  server impressions).
        ///
        /// Corresponds to "Ad server CTR" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_CTR")] AdServerCtr = 8,
        /// <summary>
        /// Gross revenue earned, calculated in your network's currency, for the ads
        ///  delivered by the Google Ad Manager server.  This includes pre-rev-share
        ///  revenue for Programmatic traffic. This metric is to help with the
        ///  transition from gross to net revenue reporting.
        ///
        /// Corresponds to "Ad server total revenue (gross)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_GROSS_REVENUE")] AdServerGrossRevenue = 483,
        /// <summary>
        /// Gross revenue earned, calculated in your network's currency, for the ads
        ///  delivered by the Google Ad Manager server, excluding CPD revenue. This
        ///  includes pre-rev-share revenue for Programmatic traffic. This metric is
        ///  to help with the transition from gross to net revenue reporting.
        ///
        /// Corresponds to "Ad server CPM and CPC revenue (gross)" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_GROSS_REVENUE_WITHOUT_CPD")] AdServerGrossRevenueWithoutCpd = 484,
        /// <summary>
        /// Total impressions delivered by the Ad Server.
        ///
        /// Corresponds to "Ad server impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_IMPRESSIONS")] AdServerImpressions = 6,
        /// <summary>
        /// Total impressions delivered by the Ad Server with companion impressions.
        ///
        /// Corresponds to "Ad server impressions with companion" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_IMPRESSIONS_WITH_COMPANION")] AdServerImpressionsWithCompanion = 222,
        /// <summary>
        /// Impressions (via begin to render methodology) delivered by the Google Ad
        ///  Manager server considered inactive, as defined by served to a device
        ///  receiving ad or bid requests continuously for a session of greater than
        ///  16 hours without a "reset" event.
        ///
        /// Corresponds to "Ad server inactive begin to render impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS")] AdServerInactiveBeginToRenderImpressions = 338,
        /// <summary>
        /// Ratio of clicks delivered by the Google Ad Manager server in relation to
        ///  the total clicks delivered.
        ///
        /// Corresponds to "Ad server clicks (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_PERCENT_CLICKS")] AdServerPercentClicks = 12,
        /// <summary>
        /// Ratio of impressions delivered by the Google Ad Manager server in
        ///  relation to the total impressions delivered.
        ///
        /// Corresponds to "Ad server impressions (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_PERCENT_IMPRESSIONS")] AdServerPercentImpressions = 11,
        /// <summary>
        /// Ratio of revenue generated by the Google Ad Manager server in relation
        ///  to the total revenue.
        ///
        /// Corresponds to "Ad server revenue (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_PERCENT_REVENUE")] AdServerPercentRevenue = 35,
        /// <summary>
        /// Ratio of revenue generated by the Google Ad Manager server (excluding
        ///  CPD) in relation to the total revenue.
        ///
        /// Corresponds to "Ad server revenue w/o CPD (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD")] AdServerPercentRevenueWithoutCpd = 13,
        /// <summary>
        /// The total number of times that an ad is served by the ad server.
        ///
        /// Corresponds to "Ad server responses served" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_RESPONSES_SERVED")] AdServerResponsesServed = 40,
        /// <summary>
        /// All CPM, CPC, and CPD revenue earned, calculated in your network's
        ///  currency, for the ads delivered by the Google Ad Manager server.
        ///  Sum of all booked revenue.
        ///
        /// Corresponds to "Ad server total revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_REVENUE")] AdServerRevenue = 33,
        /// <summary>
        /// The Google Ad Manager server revenue accrued in the child network's own
        ///  account but paid to their parent network through auto-payment. This
        ///  metric is only relevant for a "Manage Account" child network.
        ///
        /// Corresponds to "Ad server revenue paid through MCM auto-payment" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT")] AdServerRevenuePaidThroughMcmAutopayment = 213,
        /// <summary>
        /// Revenue (excluding CPD) earned, calculated in your network's currency,
        ///  for the ads delivered by the Google Ad Manager server. Sum of all booked
        ///  revenue.
        ///
        /// Corresponds to "Ad server CPM and CPC revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_REVENUE_WITHOUT_CPD")] AdServerRevenueWithoutCpd = 9,
        /// <summary>
        /// The number of clicks delivered by the ad server by explicit custom
        ///  criteria targeting.
        ///
        /// Corresponds to "Ad server targeted clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_TARGETED_CLICKS")] AdServerTargetedClicks = 274,
        /// <summary>
        /// The number of impressions delivered by the ad server by explicit custom
        ///  criteria targeting.
        ///
        /// Corresponds to "Ad server targeted impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_TARGETED_IMPRESSIONS")] AdServerTargetedImpressions = 275,
        /// <summary>
        /// The number of tracked ads delivered by the ad server.
        ///
        /// Corresponds to "Ad server tracked ads" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_TRACKED_ADS")] AdServerTrackedAds = 264,
        /// <summary>
        /// Total raw impressions counted when creative begins to render or the
        ///  first frame of a video is shown, before invalid traffic filtrations by
        ///  Ad Server.
        ///
        /// Corresponds to "Ad server unfiltered begin to render impressions" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_UNFILTERED_BEGIN_TO_RENDER_IMPRESSIONS")] AdServerUnfilteredBeginToRenderImpressions = 261,
        /// <summary>
        /// Total clicks delivered by the Ad Server before spam filtering.
        ///
        /// Corresponds to "Ad server unfiltered clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_UNFILTERED_CLICKS")] AdServerUnfilteredClicks = 259,
        /// <summary>
        /// Total downloaded impressions delivered by the Ad Server before spam
        ///  filtering.
        ///
        /// Corresponds to "Ad server unfiltered downloaded impressions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS")] AdServerUnfilteredDownloadedImpressions = 260,
        /// <summary>
        /// Deprecated. This metric has been renamed to
        /// `AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS`.
        /// The server will normalize any requests using this value to
        /// `AD_SERVER_UNFILTERED_DOWNLOADED_IMPRESSIONS`.
        /// This value will be removed on or after October 1, 2025.
        /// </summary>
        [global::System.ObsoleteAttribute]
        [pbr::OriginalName("AD_SERVER_UNFILTERED_IMPRESSIONS", PreferredAlias = false)] AdServerUnfilteredImpressions = 260,
        /// <summary>
        /// The number of tracked ads delivered by the ad server before invalid
        ///  traffic filtrations.
        ///
        /// Corresponds to "Ad server unfiltered tracked ads" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_SERVER_UNFILTERED_TRACKED_ADS")] AdServerUnfilteredTrackedAds = 263,
        /// <summary>
        /// Length of time in seconds that an ad unit is visible on the user's screen
        ///  from Google Analytics.
        ///
        /// Corresponds to "Ad unit exposure (seconds)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AD_UNIT_EXPOSURE_SECONDS")] AdUnitExposureSeconds = 242,
        /// <summary>
        /// The number of users who viewed an ads on your site or app in the
        ///  specified date range from Google Analytics.
        ///
        /// Corresponds to "Ad viewers" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("AD_VIEWERS")] AdViewers = 425,
        /// <summary>
        /// Number of ads that Ad Manager failed to render in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Ads failed to render" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_ADS_FAILED_TO_RENDER")] AtnAdsFailedToRender = 430,
        /// <summary>
        /// Number of line items that matched an ad request in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Eligible line items" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_ELIGIBLE_LINE_ITEMS")] AtnEligibleLineItems = 342,
        /// <summary>
        /// Number of ad requests that contain eligible line items for the auction in
        ///  the Ads traffic navigator report.
        ///
        /// Corresponds to "Ad requests with eligible line items" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_ELIGIBLE_LINE_ITEMS_AD_REQUESTS")] AtnEligibleLineItemsAdRequests = 343,
        /// <summary>
        /// Number of ad requests that have header bidding trafficking demand in the
        ///  Ads traffic navigator report.
        ///
        /// Corresponds to "Ad requests allowing header bidding trafficking" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_ALLOWED_AD_REQUESTS")] AtnHbtAllowedAdRequests = 344,
        /// <summary>
        /// Number of header bidding trafficking bids that are able to match an ad
        ///  request and enter the auction in the Ads traffic navigator report.
        ///
        /// Corresponds to "Competing header bidding trafficking bids" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_BIDS_IN_AUCTION")] AtnHbtBidsInAuction = 345,
        /// <summary>
        /// Number of header bidding trafficking ad requests with bids in auction in
        ///  the Ads traffic navigator report.
        ///
        /// Corresponds to "Ad requests with competing header bidding trafficking
        /// bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_BIDS_IN_AUCTION_AD_REQUESTS")] AtnHbtBidsInAuctionAdRequests = 346,
        /// <summary>
        /// Number of header bidding trafficking candidate bids that match an ad
        ///  request in the Ads traffic navigator report.
        ///
        /// Corresponds to "Header bidding trafficking bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_CANDIDATE_BIDS")] AtnHbtCandidateBids = 347,
        /// <summary>
        /// Number of invalid header bidding trafficking ad requests in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Invalid ad requests allowing header bidding trafficking"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_INVALID_AD_REQUESTS")] AtnHbtInvalidAdRequests = 348,
        /// <summary>
        /// Number of header bidding trafficking ad requests with no bids in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Header bidding trafficking ad requests with no bids" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_NO_BIDS_AD_REQUESTS")] AtnHbtNoBidsAdRequests = 472,
        /// <summary>
        /// Number of header bidding trafficking bids that didn't match the ad
        ///  request in the Ads traffic navigator report.
        ///
        /// Corresponds to "Rejected header bidding trafficking bids" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_REJECTED_BIDS")] AtnHbtRejectedBids = 349,
        /// <summary>
        /// Number of ad requests with the header bidding trafficking demand that are
        ///  valid in the Ads traffic navigator report.
        ///
        /// Corresponds to "Valid header bidding trafficking ad requests" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_VALID_AD_REQUESTS")] AtnHbtValidAdRequests = 350,
        /// <summary>
        /// Number of header bidding trafficking ad requests with bids in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Header bidding trafficking ad requests with bids" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_HBT_WITH_BIDS_AD_REQUESTS")] AtnHbtWithBidsAdRequests = 473,
        /// <summary>
        /// Ad requests that are not valid in the Ads traffic navigator report.
        ///
        /// Corresponds to "Invalid ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_INVALID_AD_REQUESTS")] AtnInvalidAdRequests = 351,
        /// <summary>
        /// Number of line items with no creative retrieved in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Creative not retrieved" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_LINE_ITEMS_CREATIVE_NOT_RETRIEVED")] AtnLineItemsCreativeNotRetrieved = 476,
        /// <summary>
        /// Number of line items that matched an ad request and entered in auction in
        ///  the Ads traffic navigator report.
        ///
        /// Corresponds to "Competing line items" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_LINE_ITEMS_IN_AUCTION")] AtnLineItemsInAuction = 352,
        /// <summary>
        /// Number of line items that were ranked but did not compete in auction in
        ///  the Ads traffic navigator report.
        ///
        /// Corresponds to "Non-competing line items" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_LINE_ITEMS_NOT_COMPETING")] AtnLineItemsNotCompeting = 515,
        /// <summary>
        /// Number of line items that matched an ad request but were not selected to
        ///  compete in the auction in the Ads traffic navigator report.
        ///
        /// Corresponds to "Not selected to compete" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_LINE_ITEMS_NOT_SELECTED")] AtnLineItemsNotSelected = 353,
        /// <summary>
        /// Number of line item ad requests in auction in the Ads traffic navigator
        ///  report.
        ///
        /// Corresponds to "Ad requests with competing line items" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_LINE_ITEM_IN_AUCTION_AD_REQUESTS")] AtnLineItemInAuctionAdRequests = 354,
        /// <summary>
        /// Number of line item targeted ad requests in the Ads traffic navigator
        ///  report.
        ///
        /// Corresponds to "Ad requests with targeted line items" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_LINE_ITEM_TARGETED_AD_REQUESTS")] AtnLineItemTargetedAdRequests = 355,
        /// <summary>
        /// Number of ad requests with the mediation demand in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Ad requests allowing mediation" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_ALLOWED_AD_REQUESTS")] AtnMediationAllowedAdRequests = 356,
        /// <summary>
        /// Number of invalid mediation ad requests in the Ads traffic navigator
        ///  report.
        ///
        /// Corresponds to "Invalid ad requests allowing mediation" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_INVALID_AD_REQUESTS")] AtnMediationInvalidAdRequests = 357,
        /// <summary>
        /// Number of times the Yield Partner's ad was loaded in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Loaded ads from chains" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_LOADED_ADS_FROM_CHAINS")] AtnMediationLoadedAdsFromChains = 358,
        /// <summary>
        /// Number of ad requests with mediation demand having no partners in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Mediation requests with no partners" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_NO_PARTNER_AD_REQUESTS")] AtnMediationNoPartnerAdRequests = 474,
        /// <summary>
        /// Number of mediation yield partners in auction in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Competing mediation partners" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_PARTNERS_IN_AUCTION")] AtnMediationPartnersInAuction = 359,
        /// <summary>
        /// Number of ad requests in auction that serve mediation chains in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Ad requests with competing mediation partners" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_PARTNERS_IN_AUCTION_AD_REQUESTS")] AtnMediationPartnersInAuctionAdRequests = 360,
        /// <summary>
        /// Number of mediation partners that didn't match an ad request in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Rejected partners" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_REJECTED_PARTNERS")] AtnMediationRejectedPartners = 361,
        /// <summary>
        /// Number of mediation partners that have targeted an ad request and are
        ///  able to match it in the Ads traffic navigator report.
        ///
        /// Corresponds to "Targeted mediation partners" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_TARGETED_PARTNERS")] AtnMediationTargetedPartners = 362,
        /// <summary>
        /// Number of partners on served mediation chains in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Total yield partners" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_TOTAL_YIELD_PARTNERS")] AtnMediationTotalYieldPartners = 442,
        /// <summary>
        /// Number of ads from mediation chains that Ad Manager won't serve in the
        ///  Ads traffic navigator report.
        ///
        /// Corresponds to "Unloaded ads from chains" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_UNLOADED_ADS_FROM_CHAINS")] AtnMediationUnloadedAdsFromChains = 363,
        /// <summary>
        /// Number of times the Yield Partner's mediation chain ad was not reached
        ///  in the Ads traffic navigator report.
        ///
        /// Corresponds to "Unused bids or partners" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_UNUSED_BIDS_OR_PARTNERS")] AtnMediationUnusedBidsOrPartners = 364,
        /// <summary>
        /// Number of ad requests that have mediation demand in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Valid mediation ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_VALID_AD_REQUESTS")] AtnMediationValidAdRequests = 365,
        /// <summary>
        /// Number of ad requests with mediation demand having partners in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Ad requests with targeted mediation partners" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_MEDIATION_WITH_PARTNERS_AD_REQUESTS")] AtnMediationWithPartnersAdRequests = 475,
        /// <summary>
        /// Number of ad requests with programmatic demand that have received a bid
        ///  in the Ads traffic navigator report.
        ///
        /// Corresponds to "Ad requests with bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BIDS")] AtnProgrammaticAdRequestsWithBids = 366,
        /// <summary>
        /// Number of ad requests with programmatic demand that have sent a bid to at
        ///  least one buyer in the Ads traffic navigator report.
        ///
        /// Corresponds to "Ad requests with bid requests sent" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_AD_REQUESTS_WITH_BID_REQUESTS_SENT")] AtnProgrammaticAdRequestsWithBidRequestsSent = 367,
        /// <summary>
        /// Number of ad requests with programmatic demand in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Ad requests allowing programmatic" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_ALLOWED_AD_REQUESTS")] AtnProgrammaticAllowedAdRequests = 368,
        /// <summary>
        /// Number of ads with programmatic bids that entered the auction
        ///  in the Ads traffic navigator report.
        ///
        /// Corresponds to "Competing programmatic bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_BIDS_IN_AUCTION")] AtnProgrammaticBidsInAuction = 369,
        /// <summary>
        /// Number of ad requests that have received eligible programmatic bids to
        ///  compete in the auction in the Ads traffic navigator report.
        ///
        /// Corresponds to "Ad requests with competing programmatic bids" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_BID_IN_AUCTION_AD_REQUESTS")] AtnProgrammaticBidInAuctionAdRequests = 370,
        /// <summary>
        /// Number of programmatic callout bid requests sent to buyers in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Bid requests sent" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_BID_REQUESTS_SENT")] AtnProgrammaticBidRequestsSent = 371,
        /// <summary>
        /// Number of programmatic callout bid requests that resulted with a response
        ///  in the Ads traffic navigator report.
        ///
        /// Corresponds to "Bid requests with response" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_BID_REQUESTS_WITH_RESPONSE")] AtnProgrammaticBidRequestsWithResponse = 372,
        /// <summary>
        /// All buyers that Ad Manager could potentially send a programmatic bid
        ///  request to in the Ads traffic navigator report.
        ///
        /// Corresponds to "Bid request candidates" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_BID_REQUEST_CANDIDATES")] AtnProgrammaticBidRequestCandidates = 373,
        /// <summary>
        /// Number of programmatic callout bid requests with errors in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Bid request errors" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_BID_REQUEST_ERRORS")] AtnProgrammaticBidRequestErrors = 374,
        /// <summary>
        /// Number of ad requests that are ineligible for programmatic in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Invalid ad requests allowing programmatic" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_INELIGIBLE_AD_REQUESTS")] AtnProgrammaticIneligibleAdRequests = 375,
        /// <summary>
        /// Number of programmatic callout bids rejected in the Ads traffic navigator
        ///  report.
        ///
        /// Corresponds to "Rejected bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_REJECTED_BIDS")] AtnProgrammaticRejectedBids = 376,
        /// <summary>
        /// Number of programmatic callout bid requests Ad Manager won't send to
        ///  buyers in the Ads traffic navigator report.
        ///
        /// Corresponds to "Skipped bid requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_SKIPPED_BID_REQUESTS")] AtnProgrammaticSkippedBidRequests = 377,
        /// <summary>
        /// Number of programmatic bids that Ad Manager received from buyers in the
        ///  Ads traffic navigator report.
        ///
        /// Corresponds to "Total programmatic bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_TOTAL_BIDS")] AtnProgrammaticTotalBids = 378,
        /// <summary>
        /// Number of ad requests that allow programmatic in the Ads traffic
        ///  navigator report.
        ///
        /// Corresponds to "Valid ad requests allowing programmatic" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_PROGRAMMATIC_VALID_AD_REQUESTS")] AtnProgrammaticValidAdRequests = 379,
        /// <summary>
        /// Number of line items targeted that didn't match an ad request in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Rejected line items" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_REJECTED_LINE_ITEMS")] AtnRejectedLineItems = 380,
        /// <summary>
        /// Number of mediation chains Ad Manager serves in the Ads traffic navigator
        ///  report.
        ///
        /// Corresponds to "Served mediation chains" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_SERVED_MEDIATION_CHAINS")] AtnServedMediationChains = 381,
        /// <summary>
        /// Number of single ads served in the Ads traffic navigator report.
        ///
        /// Corresponds to "Served single ads" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_SERVED_SINGLE_ADS")] AtnServedSingleAds = 382,
        /// <summary>
        /// Number of line items with targeting that matches an ad request in the Ads
        ///  traffic navigator report.
        ///
        /// Corresponds to "Targeted line items" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_TARGETED_LINE_ITEMS")] AtnTargetedLineItems = 383,
        /// <summary>
        /// Total number of ad requests which counts optimized pod request as a
        ///  single request in the Ads traffic navigator report.
        ///
        /// Corresponds to "Total ad requests (ATN)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_TOTAL_AD_REQUESTS")] AtnTotalAdRequests = 384,
        /// <summary>
        /// Number of competing ads in auction in the Ads traffic navigator report.
        ///
        /// Corresponds to "Total competing ads" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_TOTAL_COMPETING_ADS_IN_AUCTION")] AtnTotalCompetingAdsInAuction = 385,
        /// <summary>
        /// Total number of ads loaded in the Ads traffic navigator report.
        ///
        /// Corresponds to "Total loaded ads" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_TOTAL_LOADED_ADS")] AtnTotalLoadedAds = 387,
        /// <summary>
        /// Ad requests that are valid in the Ads traffic navigator report.
        ///
        /// Corresponds to "Valid ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_VALID_AD_REQUESTS")] AtnValidAdRequests = 389,
        /// <summary>
        /// Number of times the Yield Partner passed-back on a Mediation chain ad in
        ///  the Ads traffic navigator report.
        ///
        /// Corresponds to "Yield group mediation passbacks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ATN_YIELD_GROUP_MEDIATION_PASSBACKS")] AtnYieldGroupMediationPassbacks = 390,
        /// <summary>
        /// eCPM averaged across the Google Ad Manager server, AdSense,
        ///  and Ad Exchange.
        ///
        /// Corresponds to "Total average eCPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AVERAGE_ECPM")] AverageEcpm = 37,
        /// <summary>
        /// eCPM averaged across the Google Ad Manager server (excluding CPD),
        ///  AdSense, and Ad Exchange.
        ///
        /// Corresponds to "Total average eCPM w/o CPD" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AVERAGE_ECPM_WITHOUT_CPD")] AverageEcpmWithoutCpd = 5,
        /// <summary>
        /// Average user engagement seconds per session in Google Analytics.
        ///
        /// Corresponds to "Average engagement time per session (seconds)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AVERAGE_ENGAGEMENT_SECONDS_PER_SESSION")] AverageEngagementSecondsPerSession = 224,
        /// <summary>
        /// Average user engagement seconds per user in Google Analytics.
        ///
        /// Corresponds to "Average engagement time per user (seconds)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AVERAGE_ENGAGEMENT_SECONDS_PER_USER")] AverageEngagementSecondsPerUser = 225,
        /// <summary>
        /// The average number of unique users reached per ad impression.
        ///
        /// Corresponds to "Average impressions/unique visitor" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `REACH`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AVERAGE_IMPRESSIONS_PER_UNIQUE_VISITOR")] AverageImpressionsPerUniqueVisitor = 418,
        /// <summary>
        /// Average total purchase revenue per user in Google Analytics.
        ///
        /// Corresponds to "ARPPU" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AVERAGE_PURCHASE_REVENUE_PER_PAYING_USER")] AveragePurchaseRevenuePerPayingUser = 226,
        /// <summary>
        /// Average revenue earned from each active user in Google Analytics.
        ///
        /// Corresponds to "ARPU" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("AVERAGE_REVENUE_PER_USER")] AverageRevenuePerUser = 227,
        /// <summary>
        /// Average length of a session in Google Analytics.
        ///
        /// Corresponds to "Average session duration (seconds)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("AVERAGE_SESSION_SECONDS")] AverageSessionSeconds = 228,
        /// <summary>
        /// The number of bids.
        ///
        /// Corresponds to "Bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("BIDS")] Bids = 443,
        /// <summary>
        /// The average CPM of the bids submitted by bidders.
        ///
        /// Corresponds to "Average bid CPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("BID_AVERAGE_CPM")] BidAverageCpm = 444,
        /// <summary>
        /// The ratio of (sessions - engaged sessions) / sessions.
        ///
        /// Corresponds to "Bounce rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("BOUNCE_RATE")] BounceRate = 433,
        /// <summary>
        /// The number of times a user clicked on an ad.
        ///
        /// Corresponds to "Total clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("CLICKS")] Clicks = 2,
        /// <summary>
        /// The total number of times that the code for an ad is served by the ad
        ///  server including dynamic allocation.
        ///
        /// Corresponds to "Total code served count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("CODE_SERVED_COUNT")] CodeServedCount = 44,
        /// <summary>
        /// Total amount of CPC revenue.
        ///
        /// Corresponds to "CPC revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("CPC_REVENUE")] CpcRevenue = 440,
        /// <summary>
        /// Total amount of CPM revenue.
        ///
        /// Corresponds to "CPM revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("CPM_REVENUE")] CpmRevenue = 441,
        /// <summary>
        /// Percent of creatives whose load time is between [0, 500ms).
        ///
        /// Corresponds to "Creative load time 0 - 500ms (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("CREATIVE_LOAD_TIME_0_500_PERCENT")] CreativeLoadTime0500Percent = 324,
        /// <summary>
        /// Percent of creatives whose load time is between [1000, 2000ms).
        ///
        /// Corresponds to "Creative load time 1s - 2s (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("CREATIVE_LOAD_TIME_1000_2000_PERCENT")] CreativeLoadTime10002000Percent = 326,
        /// <summary>
        /// Percent of creatives whose load time is between [2000, 4000ms).
        ///
        /// Corresponds to "Creative load time 2s - 4s (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("CREATIVE_LOAD_TIME_2000_4000_PERCENT")] CreativeLoadTime20004000Percent = 327,
        /// <summary>
        /// Percent of creatives whose load time is between [4000, 8000ms).
        ///
        /// Corresponds to "Creative load time 4s - 8s (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("CREATIVE_LOAD_TIME_4000_8000_PERCENT")] CreativeLoadTime40008000Percent = 328,
        /// <summary>
        /// Percent of creatives whose load time is between [500, 1000ms).
        ///
        /// Corresponds to "Creative load time 500ms - 1s (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("CREATIVE_LOAD_TIME_500_1000_PERCENT")] CreativeLoadTime5001000Percent = 325,
        /// <summary>
        /// Percent of creatives load time is greater than 8000ms.
        ///
        /// Corresponds to "Creative load time >8s (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("CREATIVE_LOAD_TIME_GT_8000_PERCENT")] CreativeLoadTimeGt8000Percent = 329,
        /// <summary>
        /// For standard ads, your ad clickthrough rate (CTR) is the number of ad
        ///  clicks divided by the number of individual ad impressions expressed as a
        ///  fraction. Ad CTR = Clicks / Ad impressions.
        ///
        /// Corresponds to "Total CTR" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("CTR")] Ctr = 3,
        /// <summary>
        /// Number of bids received for a deal.
        ///
        /// Corresponds to "Deals bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("DEALS_BIDS")] DealsBids = 542,
        /// <summary>
        /// Bid rate for a deal.
        ///
        /// Corresponds to "Deals bid rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DEALS_BID_RATE")] DealsBidRate = 543,
        /// <summary>
        /// Number of bid requests sent for a deal.
        ///
        /// Corresponds to "Deals bid requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("DEALS_BID_REQUESTS")] DealsBidRequests = 544,
        /// <summary>
        /// Number of winning bids for a deal.
        ///
        /// Corresponds to "Deals winning bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("DEALS_WINNING_BIDS")] DealsWinningBids = 545,
        /// <summary>
        /// Bid win rate for a deal.
        ///
        /// Corresponds to "Deals win rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DEALS_WIN_RATE")] DealsWinRate = 546,
        /// <summary>
        /// Percent of dom load time to 1st ad request in [0, 500ms) range.
        ///
        /// Corresponds to "Page navigation to first ad request time 0 - 500ms (%)"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT")] DomLoadToFirstAdRequest0500Percent = 521,
        /// <summary>
        /// Percent of dom load time to 1st ad request in [1000ms, 2000ms) range.
        ///
        /// Corresponds to "Page navigation to first ad request time 1s - 2s (%)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT")] DomLoadToFirstAdRequest10002000Percent = 522,
        /// <summary>
        /// Percent of dom load time to 1st ad request in [2000ms, 4000ms) range.
        ///
        /// Corresponds to "Page navigation to first ad request time 2s - 4s (%)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT")] DomLoadToFirstAdRequest20004000Percent = 523,
        /// <summary>
        /// Percent of dom load time to 1st ad request in [4000ms, 8000ms) range.
        ///
        /// Corresponds to "Page navigation to first ad request time 4s - 8s (%)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT")] DomLoadToFirstAdRequest40008000Percent = 524,
        /// <summary>
        /// Percent of dom load time to 1st ad request in [500ms, 1000ms) range.
        ///
        /// Corresponds to "Page navigation to first ad request time 500ms - 1s (%)"
        /// in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT")] DomLoadToFirstAdRequest5001000Percent = 525,
        /// <summary>
        /// Percent of dom load time to 1st ad request in [8000ms, +inf) range.
        ///
        /// Corresponds to "Page navigation to first ad request time >8s (%)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT")] DomLoadToFirstAdRequestGt8000Percent = 520,
        /// <summary>
        /// Percent of dom load time to tag load time in [0, 500ms) range.
        ///
        /// Corresponds to "Page navigation to tag loaded time 0 - 500ms (%)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_TAG_LOAD_TIME_0_500_PERCENT")] DomLoadToTagLoadTime0500Percent = 526,
        /// <summary>
        /// Percent of dom load time to tag load time in [1000ms, 2000ms) range.
        ///
        /// Corresponds to "Page navigation to tag loaded time 1s - 2s (%)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_TAG_LOAD_TIME_1000_2000_PERCENT")] DomLoadToTagLoadTime10002000Percent = 527,
        /// <summary>
        /// Percent of dom load time to tag load time in [2000ms, 4000ms) range.
        ///
        /// Corresponds to "Page navigation to tag loaded time 2s - 4s (%)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_TAG_LOAD_TIME_2000_4000_PERCENT")] DomLoadToTagLoadTime20004000Percent = 528,
        /// <summary>
        /// Percent of dom load time to tag load time in [4000ms, 8000ms) range.
        ///
        /// Corresponds to "Page navigation to tag loaded time 4s - 8s (%)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_TAG_LOAD_TIME_4000_8000_PERCENT")] DomLoadToTagLoadTime40008000Percent = 529,
        /// <summary>
        /// Percent of dom load time to tag load time in [500ms, 1000ms) range.
        ///
        /// Corresponds to "Page navigation to tag loaded time 500ms - 1s (%)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_TAG_LOAD_TIME_500_1000_PERCENT")] DomLoadToTagLoadTime5001000Percent = 531,
        /// <summary>
        /// Percent of dom load time to tag load time in [8000ms, +inf) range.
        ///
        /// Corresponds to "Page navigation to tag loaded time >8s (%)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DOM_LOAD_TO_TAG_LOAD_TIME_GT_8000_PERCENT")] DomLoadToTagLoadTimeGt8000Percent = 530,
        /// <summary>
        /// Percentage of ad responses that didn't result in an impression.
        ///
        /// Corresponds to "Drop-off rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("DROPOFF_RATE")] DropoffRate = 415,
        /// <summary>
        /// Engaged session count from Google Analytics.
        ///
        /// Corresponds to "Engaged sessions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("ENGAGED_SESSIONS")] EngagedSessions = 229,
        /// <summary>
        /// Engaged sessions per user from Google Analytics.
        ///
        /// Corresponds to "Engaged sessions per user" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("ENGAGED_SESSIONS_PER_USER")] EngagedSessionsPerUser = 230,
        /// <summary>
        /// The ratio of engaged sessions to sessions.
        ///
        /// Corresponds to "Engagement rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("ENGAGEMENT_RATE")] EngagementRate = 426,
        /// <summary>
        /// Percentage of European regulations messages where the user consented to
        ///  all of the purposes and vendors.
        ///
        /// Corresponds to "European regulations consent rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("EUROPEAN_REGULATIONS_CONSENT_RATE")] EuropeanRegulationsConsentRate = 270,
        /// <summary>
        /// Percentage of European regulations messages where users made a consent
        ///  choice after selecting "Manage options".
        ///
        /// Corresponds to "European regulations custom consent rate" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("EUROPEAN_REGULATIONS_CUSTOM_CONSENT_RATE")] EuropeanRegulationsCustomConsentRate = 271,
        /// <summary>
        /// Number of times a European regulations message was shown to users.
        ///
        /// Corresponds to "European regulations messages shown" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("EUROPEAN_REGULATIONS_MESSAGES_SHOWN")] EuropeanRegulationsMessagesShown = 272,
        /// <summary>
        /// Percentage of European regulations messages where the user rejected all
        ///  purposes and vendors.
        ///
        /// Corresponds to "European regulations no consent rate" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("EUROPEAN_REGULATIONS_NO_CONSENT_RATE")] EuropeanRegulationsNoConsentRate = 273,
        /// <summary>
        /// The rate at which an ad request is filled by the ad server including
        ///  dynamic allocation.
        ///
        /// Corresponds to "Total fill rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("FILL_RATE")] FillRate = 258,
        /// <summary>
        /// The number of clicks joined with Google Analytics data.
        ///
        /// Corresponds to "Google Analytics clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_CLICKS")] GoogleAnalyticsClicks = 231,
        /// <summary>
        /// The click-through rate from Google Analytics data.
        ///
        /// Corresponds to "Google Analytics CTR" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_CTR")] GoogleAnalyticsCtr = 232,
        /// <summary>
        /// The eCPM revenue data from Google Analytics.
        ///
        /// Corresponds to "Google Analytics eCPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_ECPM")] GoogleAnalyticsEcpm = 233,
        /// <summary>
        /// The number of impressions joined with Google Analytics data.
        ///
        /// Corresponds to "Google Analytics impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_IMPRESSIONS")] GoogleAnalyticsImpressions = 234,
        /// <summary>
        /// The amount of revenue joined with Google Analytics data.
        ///
        /// Corresponds to "Google Analytics revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_REVENUE")] GoogleAnalyticsRevenue = 235,
        /// <summary>
        /// Number of views of a web site or mobile screen from Google Analytics.
        ///
        /// Corresponds to "Views" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_VIEWS")] GoogleAnalyticsViews = 236,
        /// <summary>
        /// Number of views per user from Google Analytics.
        ///
        /// Corresponds to "Views per user" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("GOOGLE_ANALYTICS_VIEWS_PER_USER")] GoogleAnalyticsViewsPerUser = 237,
        /// <summary>
        /// The number of coviewed impressions sold by Google in partner sales.
        ///
        /// Corresponds to "Google-sold auction impressions (co-viewed)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS")] GoogleSoldAuctionCoviewedImpressions = 129,
        /// <summary>
        /// The number of auction impressions sold by Google in partner sales.
        ///
        /// Corresponds to "Google-sold auction impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_SOLD_AUCTION_IMPRESSIONS")] GoogleSoldAuctionImpressions = 128,
        /// <summary>
        /// The number of coviewed impressions sold by Google in partner sales.
        ///
        /// Corresponds to "Google-sold impressions (co-viewed)" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_SOLD_COVIEWED_IMPRESSIONS")] GoogleSoldCoviewedImpressions = 131,
        /// <summary>
        /// The number of impressions sold by Google in partner sales.
        ///
        /// Corresponds to "Google-sold impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_SOLD_IMPRESSIONS")] GoogleSoldImpressions = 130,
        /// <summary>
        /// The number of coviewed impressions sold by Google in partner sales.
        ///
        /// Corresponds to "Google-sold reservation impressions (co-viewed)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS")] GoogleSoldReservationCoviewedImpressions = 127,
        /// <summary>
        /// The number of reservation impressions sold by Google in partner sales.
        ///
        /// Corresponds to "Google-sold reservation impressions" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("GOOGLE_SOLD_RESERVATION_IMPRESSIONS")] GoogleSoldReservationImpressions = 126,
        /// <summary>
        /// Total impressions from the Google Ad Manager server, AdSense,
        ///  Ad Exchange, and yield group partners.
        ///
        /// Corresponds to "Total impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("IMPRESSIONS")] Impressions = 1,
        /// <summary>
        /// The number of impressions (via begin to render methodology) considered
        ///  inactive, as defined by served to a device receiving ad or bid requests
        ///  continuously for a session of greater than 16 hours without a "reset"
        ///  event. Only applied to CTV ads.
        ///
        /// Corresponds to "Inactive begin to render impressions" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("INACTIVE_BEGIN_TO_RENDER_IMPRESSIONS")] InactiveBeginToRenderImpressions = 407,
        /// <summary>
        /// The total number of inventory shares
        ///
        /// Corresponds to "Inventory shares" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARES")] InventoryShares = 547,
        /// <summary>
        /// The total number of partner unfilled opportunities from an inventory
        ///  share
        ///
        /// Corresponds to "Inventory share partner unfilled opportunities" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("INVENTORY_SHARE_PARTNER_UNFILLED_OPPORTUNITIES")] InventorySharePartnerUnfilledOpportunities = 548,
        /// <summary>
        /// The number of invoiced impressions.
        ///
        /// Corresponds to "Invoiced impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("INVOICED_IMPRESSIONS")] InvoicedImpressions = 404,
        /// <summary>
        /// The number of invoiced unfilled impressions.
        ///
        /// Corresponds to "Invoiced unfilled impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("INVOICED_UNFILLED_IMPRESSIONS")] InvoicedUnfilledImpressions = 405,
        /// <summary>
        /// The number of mediation chains that were filled.
        ///
        /// Corresponds to "Mediation chains filled" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("MEDIATION_CHAINS_FILLED")] MediationChainsFilled = 584,
        /// <summary>
        /// The number of impressions where the user chose to mute the ad.
        ///
        /// Corresponds to "Total muted impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("MUTED_IMPRESSIONS")] MutedImpressions = 412,
        /// <summary>
        /// The number of impressions that had the "Mute This Ad" overlay applied.
        ///
        /// Corresponds to "Total mute eligible impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("MUTE_ELIGIBLE_IMPRESSIONS")] MuteEligibleImpressions = 409,
        /// <summary>
        /// The total number of opportunities from impressions and errors.
        ///
        /// Corresponds to "Total opportunities" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("OPPORTUNITIES")] Opportunities = 463,
        /// <summary>
        /// The number of impressions that were overdelivered.
        ///
        /// Corresponds to "Total overdelivered impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("OVERDELIVERED_IMPRESSIONS")] OverdeliveredImpressions = 432,
        /// <summary>
        /// The number of filled pod requests (filled by partner or Google) in
        ///  partner sales.
        ///
        /// Corresponds to "Filled pod requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PARTNER_SALES_FILLED_POD_REQUESTS")] PartnerSalesFilledPodRequests = 135,
        /// <summary>
        /// The percent of filled requests to total ad requests in
        ///  partner sales.
        ///
        /// Corresponds to "Fill rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("PARTNER_SALES_FILL_RATE")] PartnerSalesFillRate = 136,
        /// <summary>
        /// The percent of partner filled requests to total ad requests
        ///  in partner sales.
        ///
        /// Corresponds to "Partner match rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("PARTNER_SALES_PARTNER_MATCH_RATE")] PartnerSalesPartnerMatchRate = 137,
        /// <summary>
        /// The number of queries eligible for partner sales.
        ///
        /// Corresponds to "Total partner sales ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PARTNER_SALES_QUERIES")] PartnerSalesQueries = 132,
        /// <summary>
        /// The number of partner unfilled impressions in partner sales.
        ///  If a pod request is not filled by partner but filled by Google, this
        ///  metric will still count 1.
        ///
        /// Corresponds to "Partner unfilled impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PARTNER_SALES_UNFILLED_IMPRESSIONS")] PartnerSalesUnfilledImpressions = 133,
        /// <summary>
        /// The number of partner unmatched queries in partner sales.
        ///  If an ad request is not filled by partner but filled by Google, this
        ///  metric will still count 1.
        ///
        /// Corresponds to "Partner unmatched ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PARTNER_SALES_UNMATCHED_QUERIES")] PartnerSalesUnmatchedQueries = 134,
        /// <summary>
        /// The number of code served sold by partner in partner sales.
        ///
        /// Corresponds to "Partner-sold code served count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PARTNER_SOLD_CODE_SERVED")] PartnerSoldCodeServed = 125,
        /// <summary>
        /// The number of coviewed impressions sold by partner in partner sales.
        ///
        /// Corresponds to "Partner-sold impressions (co-viewed)" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PARTNER_SOLD_COVIEWED_IMPRESSIONS")] PartnerSoldCoviewedImpressions = 124,
        /// <summary>
        /// The number of impressions sold by partner in partner sales.
        ///
        /// Corresponds to "Partner-sold impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PARTNER_SOLD_IMPRESSIONS")] PartnerSoldImpressions = 123,
        /// <summary>
        /// The total number of ad requests eligible for programmatic inventory,
        ///  including Programmatic Guaranteed, Preferred Deals, backfill, and open
        ///  auction.
        ///
        /// Corresponds to "Programmatic eligible ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PROGRAMMATIC_ELIGIBLE_AD_REQUESTS")] ProgrammaticEligibleAdRequests = 177,
        /// <summary>
        /// The number of programmatic responses served divided by the number of
        ///  programmatic eligible ad requests. Includes Ad Exchange, Open Bidding,
        ///  and Preferred Deals.
        ///
        /// Corresponds to "Programmatic match rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("PROGRAMMATIC_MATCH_RATE")] ProgrammaticMatchRate = 178,
        /// <summary>
        /// Total number of ad responses served from programmatic demand sources.
        ///  Includes Ad Exchange, Open Bidding, and Preferred Deals.
        ///
        ///  Differs from AD_EXCHANGE_RESPONSES_SERVED, which doesn't include Open
        ///  Bidding ad requests.
        ///
        /// Corresponds to "Programmatic responses served" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("PROGRAMMATIC_RESPONSES_SERVED")] ProgrammaticResponsesServed = 176,
        /// <summary>
        /// Number of impressions for reach reports.
        ///
        /// Corresponds to "Total reach impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `REACH`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("REACH_IMPRESSIONS")] ReachImpressions = 416,
        /// <summary>
        /// The total number of times that an ad is served by the ad server including
        ///  dynamic allocation.
        ///
        /// Corresponds to "Total responses served" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RESPONSES_SERVED")] ResponsesServed = 39,
        /// <summary>
        /// Retention of users in Google Analytics
        ///
        /// Corresponds to "Retention" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("RETENTION")] Retention = 238,
        /// <summary>
        /// Total amount of CPM, CPC, and CPD revenue based on the number of units
        ///  served by the Google Ad Manager server, AdSense, Ad Exchange, and
        ///  third-party Mediation networks.
        ///
        /// Corresponds to "Total revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("REVENUE")] Revenue = 36,
        /// <summary>
        /// The total revenue accrued in the child network's own account but paid to
        ///  their parent network through auto-payment. This metric is only relevant
        ///  for a "Manage Account" child network.
        ///
        /// Corresponds to "Total revenue paid through MCM auto-payment" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT")] RevenuePaidThroughMcmAutopayment = 214,
        /// <summary>
        /// Total amount of revenue (excluding CPD) based on the number of units
        ///  served by the Google Ad Manager server, AdSense, Ad Exchange, and
        ///  third-party Mediation networks.
        ///
        /// Corresponds to "Total CPM and CPC revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("REVENUE_WITHOUT_CPD")] RevenueWithoutCpd = 4,
        /// <summary>
        /// The number of rewards granted to users from watching ads.
        ///
        /// Corresponds to "Total rewards granted" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("REWARDS_GRANTED")] RewardsGranted = 413,
        /// <summary>
        /// The average amount of time (in seconds) that each rich media ad is
        ///  displayed to users.
        ///
        /// Corresponds to "Average display time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_AVERAGE_DISPLAY_TIME")] RichMediaAverageDisplayTime = 587,
        /// <summary>
        /// The average amount of time (in seconds) that a user interacts with a rich
        ///  media ad.
        ///
        /// Corresponds to "Average interaction time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_AVERAGE_INTERACTION_TIME")] RichMediaAverageInteractionTime = 588,
        /// <summary>
        /// The total number of times a backup image is served in place of a rich
        ///  media ad.
        ///
        /// Corresponds to "Backup image impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_BACKUP_IMAGES")] RichMediaBackupImages = 589,
        /// <summary>
        /// The number of times a user interacts with a specific part of a rich media
        ///  ad.
        ///
        /// Corresponds to "Custom event - count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_CUSTOM_EVENT_COUNT")] RichMediaCustomEventCount = 599,
        /// <summary>
        /// The amount of time (in seconds) that a user interacts with a specific
        ///  part of a rich media ad.
        ///
        /// Corresponds to "Custom event - time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_CUSTOM_EVENT_TIME")] RichMediaCustomEventTime = 600,
        /// <summary>
        /// The amount of time (in seconds) that each rich media ad is displayed to
        ///  users.
        ///
        /// Corresponds to "Total display time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_DISPLAY_TIME")] RichMediaDisplayTime = 590,
        /// <summary>
        /// The average amount of time (in seconds) that an expanding ad is viewed in
        ///  an expanded state.
        ///
        /// Corresponds to "Average expanding time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_EXPANDING_TIME")] RichMediaExpandingTime = 591,
        /// <summary>
        /// The number of times an expanding ad was expanded.
        ///
        /// Corresponds to "Total expansions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_EXPANSIONS")] RichMediaExpansions = 592,
        /// <summary>
        /// The number of times a user opens a rich media ad in full screen mode.
        ///
        /// Corresponds to "Full-screen impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_FULL_SCREEN_IMPRESSIONS")] RichMediaFullScreenImpressions = 593,
        /// <summary>
        /// The number of times that a user interacts with a rich media ad.
        ///
        /// Corresponds to "Total interactions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_INTERACTION_COUNT")] RichMediaInteractionCount = 594,
        /// <summary>
        /// The ratio of rich media ad interactions to the number of times the ad
        ///  was displayed.
        ///
        /// Corresponds to "Interaction rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_INTERACTION_RATE")] RichMediaInteractionRate = 595,
        /// <summary>
        /// The total amount of time (in seconds) that a user interacts with a rich
        ///  media ad.
        ///
        /// Corresponds to "Interaction time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_INTERACTION_TIME")] RichMediaInteractionTime = 596,
        /// <summary>
        /// The number of impressions where a user interacted with a rich media ad.
        ///
        /// Corresponds to "Interactive impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_INTERACTIVE_IMPRESSIONS")] RichMediaInteractiveImpressions = 597,
        /// <summary>
        /// The number of times that a user manually closes a rich media ad.
        ///
        /// Corresponds to "Manual closes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_MANUAL_CLOSES")] RichMediaManualCloses = 598,
        /// <summary>
        /// The number of times a rich media video was fully played.
        ///
        /// Corresponds to "Rich media video completes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_COMPLETES")] RichMediaVideoCompletes = 503,
        /// <summary>
        /// The number of times a user clicked on the graphical controls of a video
        ///  player.
        ///
        /// Corresponds to "Rich media total video interactions" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_INTERACTIONS")] RichMediaVideoInteractions = 505,
        /// <summary>
        /// The ratio of video interactions to video plays. Represented as a
        ///  percentage.
        ///
        /// Corresponds to "Rich media video interaction rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_INTERACTION_RATE")] RichMediaVideoInteractionRate = 504,
        /// <summary>
        /// The number of times a rich media video was played up to midpoint.
        ///
        /// Corresponds to "Rich media video midpoints" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_MIDPOINTS")] RichMediaVideoMidpoints = 506,
        /// <summary>
        /// The number of times a rich media video was muted.
        ///
        /// Corresponds to "Rich media video mutes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_MUTES")] RichMediaVideoMutes = 507,
        /// <summary>
        /// The number of times a rich media video was paused.
        ///
        /// Corresponds to "Rich media video pauses" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_PAUSES")] RichMediaVideoPauses = 508,
        /// <summary>
        /// The number of times a rich media video was played.
        ///
        /// Corresponds to "Rich media video plays" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_PLAYS")] RichMediaVideoPlays = 509,
        /// <summary>
        /// The number of times a rich media video was restarted.
        ///
        /// Corresponds to "Rich media video replays" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_REPLAYS")] RichMediaVideoReplays = 510,
        /// <summary>
        /// The number of times a rich media video was stopped.
        ///
        /// Corresponds to "Rich media video stops" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_STOPS")] RichMediaVideoStops = 511,
        /// <summary>
        /// The number of times a rich media video was unmuted.
        ///
        /// Corresponds to "Rich media video unmutes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_UNMUTES")] RichMediaVideoUnmutes = 512,
        /// <summary>
        /// The percentage of a video watched by a user.
        ///
        /// Corresponds to "Rich media video view rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_VIEW_RATE")] RichMediaVideoViewRate = 513,
        /// <summary>
        /// The average amount of time(seconds) that a rich media video was viewed
        ///  per view.
        ///
        /// Corresponds to "Rich media video average view time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("RICH_MEDIA_VIDEO_VIEW_TIME")] RichMediaVideoViewTime = 514,
        /// <summary>
        /// The number of forecasted impressions not reserved by any line item.
        ///
        /// Corresponds to "Available impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SELL_THROUGH_AVAILABLE_IMPRESSIONS")] SellThroughAvailableImpressions = 477,
        /// <summary>
        /// The total number of forecasted impressions.
        ///
        /// Corresponds to "Forecasted impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SELL_THROUGH_FORECASTED_IMPRESSIONS")] SellThroughForecastedImpressions = 478,
        /// <summary>
        /// The number of forecasted impressions reserved by line items.
        ///
        /// Corresponds to "Reserved impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SELL_THROUGH_RESERVED_IMPRESSIONS")] SellThroughReservedImpressions = 479,
        /// <summary>
        /// The fraction of forecasted impressions reserved by line items.
        ///
        /// Corresponds to "Sell-through rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("SELL_THROUGH_SELL_THROUGH_RATE")] SellThroughSellThroughRate = 480,
        /// <summary>
        /// The average latency in milliseconds across all server-side unwrapping
        ///  callout requests. There is no special handling for error or timeout
        ///  responses. This reflects the entire chain of a parent callout request,
        ///  which may result in multiple child callouts. This metric is not sliced
        ///  by child callout dimensions.
        ///
        /// Corresponds to "Server-side unwrapping average latency (milliseconds)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("SERVER_SIDE_UNWRAPPING_AVERAGE_LATENCY_MS")] ServerSideUnwrappingAverageLatencyMs = 434,
        /// <summary>
        /// The total number of server-side unwrapping callout requests.
        ///
        /// Corresponds to "Server-side unwrapping callouts" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SERVER_SIDE_UNWRAPPING_CALLOUTS")] ServerSideUnwrappingCallouts = 435,
        /// <summary>
        /// The total number of server-side unwrapping callouts that returned an
        ///  empty response. Timeouts are not considered empty responses.
        ///
        /// Corresponds to "Server-side unwrapping empty responses" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SERVER_SIDE_UNWRAPPING_EMPTY_RESPONSES")] ServerSideUnwrappingEmptyResponses = 436,
        /// <summary>
        /// The total number of server-side unwrapping callouts that returned an
        ///  error response. Timeouts and empty responses are not considered errors.
        ///
        /// Corresponds to "Server-side unwrapping error responses" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SERVER_SIDE_UNWRAPPING_ERROR_RESPONSES")] ServerSideUnwrappingErrorResponses = 437,
        /// <summary>
        /// The total number of successfully unwrapped, non-empty server-side
        ///  wrapping callouts. Successful unwrapping does not indicate that the
        ///  resulting creative was served.
        ///
        /// Corresponds to "Server-side unwrapping successful responses" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SERVER_SIDE_UNWRAPPING_SUCCESSFUL_RESPONSES")] ServerSideUnwrappingSuccessfulResponses = 438,
        /// <summary>
        /// The total number of server-side unwrapping callouts that timed out before
        ///  returning a response.
        ///
        /// Corresponds to "Server-side unwrapping timeouts" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SERVER_SIDE_UNWRAPPING_TIMEOUTS")] ServerSideUnwrappingTimeouts = 439,
        /// <summary>
        /// Count of sessions from Google Analytics.
        ///
        /// Corresponds to "Sessions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("SESSIONS")] Sessions = 239,
        /// <summary>
        /// Percent of tag load time to 1st ad request in [0, 500ms) range.
        ///
        /// Corresponds to "Tag loaded to first ad request time 0 - 500ms (%)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("TAG_LOAD_TO_FIRST_AD_REQUEST_0_500_PERCENT")] TagLoadToFirstAdRequest0500Percent = 455,
        /// <summary>
        /// Percent of tag load time to 1st ad request in [1000ms, 2000ms) range.
        ///
        /// Corresponds to "Tag loaded to first ad request time 1s - 2s (%)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("TAG_LOAD_TO_FIRST_AD_REQUEST_1000_2000_PERCENT")] TagLoadToFirstAdRequest10002000Percent = 457,
        /// <summary>
        /// Percent of tag load time to 1st ad request in [2000ms, 4000ms) range.
        ///
        /// Corresponds to "Tag loaded to first ad request time 2s - 4s (%)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("TAG_LOAD_TO_FIRST_AD_REQUEST_2000_4000_PERCENT")] TagLoadToFirstAdRequest20004000Percent = 458,
        /// <summary>
        /// Percent of tag load time to 1st ad request in [4000ms, 8000ms) range.
        ///
        /// Corresponds to "Tag loaded to first ad request time 4s - 8s (%)" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("TAG_LOAD_TO_FIRST_AD_REQUEST_4000_8000_PERCENT")] TagLoadToFirstAdRequest40008000Percent = 459,
        /// <summary>
        /// Percent of tag load time to 1st ad request in [500ms, 1000ms) range.
        ///
        /// Corresponds to "Tag loaded to first ad request time 500ms - 1s (%)" in
        /// the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("TAG_LOAD_TO_FIRST_AD_REQUEST_500_1000_PERCENT")] TagLoadToFirstAdRequest5001000Percent = 456,
        /// <summary>
        /// Percent of tag load time to 1st ad request in [8000ms, +inf) range.
        ///
        /// Corresponds to "Tag loaded to first ad request time >8s (%)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("TAG_LOAD_TO_FIRST_AD_REQUEST_GT_8000_PERCENT")] TagLoadToFirstAdRequestGt8000Percent = 460,
        /// <summary>
        /// The total number of clicks delivered including line item-level dynamic
        ///  allocation by explicit custom criteria targeting.
        ///
        /// Corresponds to "Total targeted clicks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("TARGETED_CLICKS")] TargetedClicks = 276,
        /// <summary>
        /// The total number of impressions delivered including line item-level
        ///  dynamic allocation by explicit custom criteria targeting.
        ///
        /// Corresponds to "Total targeted impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("TARGETED_IMPRESSIONS")] TargetedImpressions = 277,
        /// <summary>
        /// The total number of missed impressions due to the ad servers' inability
        ///  to find ads to serve including dynamic allocation.
        ///
        /// Corresponds to "Unfilled impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("UNFILLED_IMPRESSIONS")] UnfilledImpressions = 45,
        /// <summary>
        /// The total number of unique users who viewed the ad.
        ///
        /// Corresponds to "Total unique visitors" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `REACH`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("UNIQUE_VISITORS")] UniqueVisitors = 417,
        /// <summary>
        /// The number of impressions impacted by Chrome Ads Intervention due to CPU
        ///  usage.
        ///
        /// Corresponds to "Total unloaded impressions due to CPU" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("UNLOADED_IMPRESSIONS_DUE_TO_CPU")] UnloadedImpressionsDueToCpu = 408,
        /// <summary>
        /// The number of impressions impacted by Chrome Ads Intervention due to
        ///  network usage.
        ///
        /// Corresponds to "Total unloaded impressions due to Network" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("UNLOADED_IMPRESSIONS_DUE_TO_NETWORK")] UnloadedImpressionsDueToNetwork = 406,
        /// <summary>
        /// The total number of times that an ad is not returned by the ad server.
        ///
        /// Corresponds to "Total unmatched ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("UNMATCHED_AD_REQUESTS")] UnmatchedAdRequests = 43,
        /// <summary>
        /// The percentage of unviewed impressions due to other reasons.
        ///
        /// Corresponds to "Other non-viewable impression reasons (%)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("UNVIEWED_REASON_OTHER_PERCENT")] UnviewedReasonOtherPercent = 550,
        /// <summary>
        /// The percentage of unviewed impressions due to slot never entered
        ///  viewport.
        ///
        /// Corresponds to "Slot never entered viewport (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("UNVIEWED_REASON_SLOT_NEVER_ENTERED_VIEWPORT_PERCENT")] UnviewedReasonSlotNeverEnteredViewportPercent = 553,
        /// <summary>
        /// The percentage of unviewed impressions due to scrolled past before ad
        ///  filled.
        ///
        /// Corresponds to "User scrolled before ad filled (%)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_FILLED_PERCENT")] UnviewedReasonUserScrolledBeforeAdFilledPercent = 551,
        /// <summary>
        /// The percentage of unviewed impressions due to scrolled past before ad
        ///  loaded.
        ///
        /// Corresponds to "User scrolled/navigated before ad loaded (%)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("UNVIEWED_REASON_USER_SCROLLED_BEFORE_AD_LOADED_PERCENT")] UnviewedReasonUserScrolledBeforeAdLoadedPercent = 552,
        /// <summary>
        /// The percentage of unviewed impressions due to insufficient time on
        ///  screen.
        ///
        /// Corresponds to "User scrolled/navigated before 1 second (%)" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `AD_SPEED`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("UNVIEWED_REASON_USER_SCROLLED_BEFORE_ONE_SECOND_PERCENT")] UnviewedReasonUserScrolledBeforeOneSecondPercent = 549,
        /// <summary>
        /// Time of users interacting with web site or mobile app from Google
        ///  Analytics in seconds.
        ///
        /// Corresponds to "User engagement duration (seconds)" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_ENGAGEMENT_DURATION_IN_SECONDS")] UserEngagementDurationInSeconds = 240,
        /// <summary>
        /// Fraction of page views where users had ad blocker extensions installed.
        ///  Includes only Desktop page views.
        ///
        /// Corresponds to "Ad blocking extension rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_AD_BLOCKING_EXTENSION_RATE")] UserMessagesAdBlockingExtensionRate = 486,
        /// <summary>
        /// Number of ad-blocking messages shown in the selected date range that
        ///  resulted in users adding the site to their allowlist to view ads
        ///
        /// Corresponds to "Ad blocking recovery message conversions" in the Ad
        /// Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_AD_BLOCKING_RECOVERY_ALLOWLISTED_COUNT")] UserMessagesAdBlockingRecoveryAllowlistedCount = 487,
        /// <summary>
        /// Number of times an ad blocking recovery message was shown to users.
        ///
        /// Corresponds to "Ad blocking recovery messages shown" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_AD_BLOCKING_RECOVERY_MESSAGES_SHOWN")] UserMessagesAdBlockingRecoveryMessagesShown = 488,
        /// <summary>
        /// The number of page views generated by users with an ad blocking extension
        ///  installed who were shown the ad blocking recovery message and later
        ///  allowed ads.
        ///
        /// Corresponds to "Allow-ads page views" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_ALLOW_ADS_PAGEVIEWS")] UserMessagesAllowAdsPageviews = 489,
        /// <summary>
        /// Number of times a US state regulations message was shown to users.
        ///
        /// Corresponds to "US states messages shown" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_CCPA_MESSAGES_SHOWN")] UserMessagesCcpaMessagesShown = 490,
        /// <summary>
        /// Number of iOS ATT alerts that were triggered by an IDFA message (IDFA
        ///  messages can be IDFA explainers or GDPR messages).
        ///
        /// Corresponds to "IDFA ATT alerts shown" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_IDFA_ATT_ALERTS_SHOWN")] UserMessagesIdfaAttAlertsShown = 491,
        /// <summary>
        /// Number of iOS ATT alerts triggered by the IDFA message where the user
        ///  chose to allow tracking.
        ///
        /// Corresponds to "IDFA ATT consent" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_IDFA_ATT_CONSENT")] UserMessagesIdfaAttConsent = 492,
        /// <summary>
        /// Percentage of iOS ATT alerts triggered by the IDFA message where the
        ///  outcome was to allow tracking.
        ///
        /// Corresponds to "IDFA ATT consent rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_IDFA_ATT_CONSENT_RATE")] UserMessagesIdfaAttConsentRate = 493,
        /// <summary>
        /// Number of iOS ATT alerts triggered by the IDFA message where the user
        ///  chose to deny tracking.
        ///
        /// Corresponds to "IDFA ATT decline consent" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_IDFA_ATT_DECLINE_CONSENT")] UserMessagesIdfaAttDeclineConsent = 494,
        /// <summary>
        /// Percentage of iOS ATT alerts triggered by the IDFA message where the user
        ///  chose to deny tracking.
        ///
        /// Corresponds to "IDFA ATT decline rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_IDFA_ATT_DECLINE_RATE")] UserMessagesIdfaAttDeclineRate = 495,
        /// <summary>
        /// Number of times an IDFA explainer message was shown to users.
        ///
        /// Corresponds to "IDFA explainers shown" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_IDFA_EXPLAINERS_SHOWN")] UserMessagesIdfaExplainersShown = 496,
        /// <summary>
        /// Number of times a European regulations message was shown immediately
        ///  before the iOS ATT alert.
        ///
        /// Corresponds to "IDFA IAB messages shown" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_IDFA_IAB_MESSAGES_SHOWN")] UserMessagesIdfaIabMessagesShown = 497,
        /// <summary>
        /// Number of IDFA explainer messages where the user didn't choose anything.
        ///
        /// Corresponds to "IDFA no decision" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_IDFA_NO_DECISION")] UserMessagesIdfaNoDecision = 498,
        /// <summary>
        /// Number of times an Offerwall message was shown to users.
        ///
        /// Corresponds to "Offerwall messages shown" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN")] UserMessagesOfferwallMessagesShown = 121,
        /// <summary>
        /// The number of messages where the user gained an entitlement.
        ///
        /// Corresponds to "Monetized Offerwall engagements" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS")] UserMessagesOfferwallSuccessfulEngagements = 122,
        /// <summary>
        /// The number of pages viewed by users after gaining an entitlement. Only
        ///  counts pages included for Offerwall.
        ///
        /// Corresponds to "Post-offerwall page views" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_POST_OFFERWALL_PAGEVIEWS")] UserMessagesPostOfferwallPageviews = 499,
        /// <summary>
        /// Revenue earned through Offerwall, including Rewarded ad revenue and
        ///  third-party integrations.
        ///
        /// Corresponds to "Estimated Offerwall revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_TOTAL_ESTIMATED_REVENUE")] UserMessagesTotalEstimatedRevenue = 500,
        /// <summary>
        /// Number of times an ads personalization controls message was shown to
        ///  users.
        ///
        /// Corresponds to "Ads personalization messages shown" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_UPTC_MESSAGES_SHOWN")] UserMessagesUptcMessagesShown = 501,
        /// <summary>
        /// Percentage of ads personalization controls messages where users chose the
        ///  opt-out option.
        ///
        /// Corresponds to "Personalization opt-out ratio" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `PRIVACY_AND_MESSAGING`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("USER_MESSAGES_UPTC_PERSONALIZATION_OPT_OUT_RATIO")] UserMessagesUptcPersonalizationOptOutRatio = 502,
        /// <summary>
        /// The number of errors of type 100 in reporting.
        ///
        /// Corresponds to "VAST error 100 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_100_COUNT")] VideoError100Count = 180,
        /// <summary>
        /// The number of errors of type 101 in reporting.
        ///
        /// Corresponds to "VAST error 101 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_101_COUNT")] VideoError101Count = 181,
        /// <summary>
        /// The number of errors of type 102 in reporting.
        ///
        /// Corresponds to "VAST error 102 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_102_COUNT")] VideoError102Count = 182,
        /// <summary>
        /// The number of errors of type 200 in reporting.
        ///
        /// Corresponds to "VAST error 200 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_200_COUNT")] VideoError200Count = 183,
        /// <summary>
        /// The number of errors of type 201 in reporting.
        ///
        /// Corresponds to "VAST error 201 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_201_COUNT")] VideoError201Count = 184,
        /// <summary>
        /// The number of errors of type 202 in reporting.
        ///
        /// Corresponds to "VAST error 202 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_202_COUNT")] VideoError202Count = 185,
        /// <summary>
        /// The number of errors of type 203 in reporting.
        ///
        /// Corresponds to "VAST error 203 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_203_COUNT")] VideoError203Count = 186,
        /// <summary>
        /// The number of errors of type 300 in reporting.
        ///
        /// Corresponds to "VAST error 300 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_300_COUNT")] VideoError300Count = 187,
        /// <summary>
        /// The number of errors of type 301 in reporting.
        ///
        /// Corresponds to "VAST error 301 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_301_COUNT")] VideoError301Count = 188,
        /// <summary>
        /// The number of errors of type 302 in reporting.
        ///
        /// Corresponds to "VAST error 302 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_302_COUNT")] VideoError302Count = 189,
        /// <summary>
        /// The number of errors of type 303 in reporting.
        ///
        /// Corresponds to "VAST error 303 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_303_COUNT")] VideoError303Count = 190,
        /// <summary>
        /// The number of errors of type 400 in reporting.
        ///
        /// Corresponds to "VAST error 400 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_400_COUNT")] VideoError400Count = 191,
        /// <summary>
        /// The number of errors of type 401 in reporting.
        ///
        /// Corresponds to "VAST error 401 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_401_COUNT")] VideoError401Count = 192,
        /// <summary>
        /// The number of errors of type 402 in reporting.
        ///
        /// Corresponds to "VAST error 402 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_402_COUNT")] VideoError402Count = 193,
        /// <summary>
        /// The number of errors of type 403 in reporting.
        ///
        /// Corresponds to "VAST error 403 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_403_COUNT")] VideoError403Count = 194,
        /// <summary>
        /// The number of errors of type 405 in reporting.
        ///
        /// Corresponds to "VAST error 405 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_405_COUNT")] VideoError405Count = 195,
        /// <summary>
        /// The number of errors of type 406 in reporting.
        ///
        /// Corresponds to "VAST error 406 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_406_COUNT")] VideoError406Count = 196,
        /// <summary>
        /// The number of errors of type 407 in reporting.
        ///
        /// Corresponds to "VAST error 407 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_407_COUNT")] VideoError407Count = 197,
        /// <summary>
        /// The number of errors of type 408 in reporting.
        ///
        /// Corresponds to "VAST error 408 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_408_COUNT")] VideoError408Count = 198,
        /// <summary>
        /// The number of errors of type 409 in reporting.
        ///
        /// Corresponds to "VAST error 409 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_409_COUNT")] VideoError409Count = 199,
        /// <summary>
        /// The number of errors of type 410 in reporting.
        ///
        /// Corresponds to "VAST error 410 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_410_COUNT")] VideoError410Count = 200,
        /// <summary>
        /// The number of errors of type 500 in reporting.
        ///
        /// Corresponds to "VAST error 500 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_500_COUNT")] VideoError500Count = 201,
        /// <summary>
        /// The number of errors of type 501 in reporting.
        ///
        /// Corresponds to "VAST error 501 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_501_COUNT")] VideoError501Count = 202,
        /// <summary>
        /// The number of errors of type 502 in reporting.
        ///
        /// Corresponds to "VAST error 502 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_502_COUNT")] VideoError502Count = 203,
        /// <summary>
        /// The number of errors of type 503 in reporting.
        ///
        /// Corresponds to "VAST error 503 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_503_COUNT")] VideoError503Count = 204,
        /// <summary>
        /// The number of errors of type 600 in reporting.
        ///
        /// Corresponds to "VAST error 600 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_600_COUNT")] VideoError600Count = 205,
        /// <summary>
        /// The number of errors of type 601 in reporting.
        ///
        /// Corresponds to "VAST error 601 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_601_COUNT")] VideoError601Count = 206,
        /// <summary>
        /// The number of errors of type 602 in reporting.
        ///
        /// Corresponds to "VAST error 602 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_602_COUNT")] VideoError602Count = 207,
        /// <summary>
        /// The number of errors of type 603 in reporting.
        ///
        /// Corresponds to "VAST error 603 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_603_COUNT")] VideoError603Count = 208,
        /// <summary>
        /// The number of errors of type 604 in reporting.
        ///
        /// Corresponds to "VAST error 604 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_604_COUNT")] VideoError604Count = 209,
        /// <summary>
        /// The number of errors of type 900 in reporting.
        ///
        /// Corresponds to "VAST error 900 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_900_COUNT")] VideoError900Count = 210,
        /// <summary>
        /// The number of errors of type 901 in reporting.
        ///
        /// Corresponds to "VAST error 901 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_ERROR_901_COUNT")] VideoError901Count = 211,
        /// <summary>
        /// The number of user interactions with a video, on average, such as pause,
        ///  full screen, mute, etc.
        ///
        /// Corresponds to "Average interaction rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE")] VideoInteractionAverageInteractionRate = 92,
        /// <summary>
        /// The number of times a user collapses a video, either to its original size
        ///  or to a different size.
        ///
        /// Corresponds to "Collapses" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_COLLAPSES")] VideoInteractionCollapses = 93,
        /// <summary>
        /// The number of times a user expands a video.
        ///
        /// Corresponds to "Expands" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_EXPANDS")] VideoInteractionExpands = 95,
        /// <summary>
        /// The number of times ad clip played in full screen mode.
        ///
        /// Corresponds to "Full screens" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_FULL_SCREENS")] VideoInteractionFullScreens = 96,
        /// <summary>
        /// The number of times video player was in mute state during play of ad
        ///  clip.
        ///
        /// Corresponds to "Mutes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_MUTES")] VideoInteractionMutes = 97,
        /// <summary>
        /// The number of times user paused ad clip.
        ///
        /// Corresponds to "Pauses" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_PAUSES")] VideoInteractionPauses = 98,
        /// <summary>
        /// The number of times the user unpaused the video.
        ///
        /// Corresponds to "Resumes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_RESUMES")] VideoInteractionResumes = 99,
        /// <summary>
        /// The number of times a user rewinds the video.
        ///
        /// Corresponds to "Rewinds" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_REWINDS")] VideoInteractionRewinds = 100,
        /// <summary>
        /// The number of times a user unmutes the video.
        ///
        /// Corresponds to "Unmutes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_UNMUTES")] VideoInteractionUnmutes = 101,
        /// <summary>
        /// The number of times a skippable video is skipped.
        ///
        /// Corresponds to "Skips" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_INTERACTION_VIDEO_SKIPS")] VideoInteractionVideoSkips = 102,
        /// <summary>
        /// The number of views for monetizable video content.
        ///
        /// Corresponds to "Monetizable content views" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_MONETIZABLE_CONTENT_VIEWS")] VideoMonetizableContentViews = 601,
        /// <summary>
        /// The number of total creative serves in video realtime reporting.
        ///
        /// Corresponds to "Total creative serves" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_CREATIVE_SERVES")] VideoRealTimeCreativeServes = 139,
        /// <summary>
        /// The number of errors of type 100 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 100 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_100_COUNT")] VideoRealTimeError100Count = 143,
        /// <summary>
        /// The number of errors of type 101 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 101 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_101_COUNT")] VideoRealTimeError101Count = 144,
        /// <summary>
        /// The number of errors of type 102 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 102 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_102_COUNT")] VideoRealTimeError102Count = 145,
        /// <summary>
        /// The number of errors of type 200 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 200 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_200_COUNT")] VideoRealTimeError200Count = 146,
        /// <summary>
        /// The number of errors of type 201 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 201 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_201_COUNT")] VideoRealTimeError201Count = 147,
        /// <summary>
        /// The number of errors of type 202 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 202 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_202_COUNT")] VideoRealTimeError202Count = 148,
        /// <summary>
        /// The number of errors of type 203 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 203 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_203_COUNT")] VideoRealTimeError203Count = 149,
        /// <summary>
        /// The number of errors of type 300 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 300 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_300_COUNT")] VideoRealTimeError300Count = 150,
        /// <summary>
        /// The number of errors of type 301 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 301 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_301_COUNT")] VideoRealTimeError301Count = 151,
        /// <summary>
        /// The number of errors of type 302 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 302 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_302_COUNT")] VideoRealTimeError302Count = 152,
        /// <summary>
        /// The number of errors of type 303 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 303 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_303_COUNT")] VideoRealTimeError303Count = 153,
        /// <summary>
        /// The number of errors of type 400 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 400 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_400_COUNT")] VideoRealTimeError400Count = 154,
        /// <summary>
        /// The number of errors of type 401 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 401 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_401_COUNT")] VideoRealTimeError401Count = 155,
        /// <summary>
        /// The number of errors of type 402 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 402 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_402_COUNT")] VideoRealTimeError402Count = 156,
        /// <summary>
        /// The number of errors of type 403 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 403 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_403_COUNT")] VideoRealTimeError403Count = 157,
        /// <summary>
        /// The number of errors of type 405 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 405 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_405_COUNT")] VideoRealTimeError405Count = 158,
        /// <summary>
        /// The number of errors of type 406 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 406 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_406_COUNT")] VideoRealTimeError406Count = 159,
        /// <summary>
        /// The number of errors of type 407 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 407 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_407_COUNT")] VideoRealTimeError407Count = 160,
        /// <summary>
        /// The number of errors of type 408 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 408 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_408_COUNT")] VideoRealTimeError408Count = 161,
        /// <summary>
        /// The number of errors of type 409 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 409 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_409_COUNT")] VideoRealTimeError409Count = 162,
        /// <summary>
        /// The number of errors of type 410 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 410 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_410_COUNT")] VideoRealTimeError410Count = 163,
        /// <summary>
        /// The number of errors of type 500 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 500 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_500_COUNT")] VideoRealTimeError500Count = 164,
        /// <summary>
        /// The number of errors of type 501 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 501 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_501_COUNT")] VideoRealTimeError501Count = 165,
        /// <summary>
        /// The number of errors of type 502 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 502 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_502_COUNT")] VideoRealTimeError502Count = 166,
        /// <summary>
        /// The number of errors of type 503 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 503 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_503_COUNT")] VideoRealTimeError503Count = 167,
        /// <summary>
        /// The number of errors of type 600 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 600 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_600_COUNT")] VideoRealTimeError600Count = 168,
        /// <summary>
        /// The number of errors of type 601 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 601 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_601_COUNT")] VideoRealTimeError601Count = 169,
        /// <summary>
        /// The number of errors of type 602 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 602 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_602_COUNT")] VideoRealTimeError602Count = 170,
        /// <summary>
        /// The number of errors of type 603 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 603 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_603_COUNT")] VideoRealTimeError603Count = 171,
        /// <summary>
        /// The number of errors of type 604 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 604 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_604_COUNT")] VideoRealTimeError604Count = 172,
        /// <summary>
        /// The number of errors of type 900 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 900 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_900_COUNT")] VideoRealTimeError900Count = 173,
        /// <summary>
        /// The number of errors of type 901 in video realtime reporting.
        ///
        /// Corresponds to "VAST error 901 count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_ERROR_901_COUNT")] VideoRealTimeError901Count = 174,
        /// <summary>
        /// The number of total impressions in video realtime reporting.
        ///
        /// Corresponds to "Total impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_IMPRESSIONS")] VideoRealTimeImpressions = 138,
        /// <summary>
        /// The number of matched queries in video realtime reporting.
        ///
        /// Corresponds to "Total responses served" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_MATCHED_QUERIES")] VideoRealTimeMatchedQueries = 140,
        /// <summary>
        /// The number of all errors in video realtime reporting.
        ///
        /// Corresponds to "Total error count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_TOTAL_ERROR_COUNT")] VideoRealTimeTotalErrorCount = 175,
        /// <summary>
        /// The number of total queries in video realtime reporting.
        ///
        /// Corresponds to "Total ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_TOTAL_QUERIES")] VideoRealTimeTotalQueries = 142,
        /// <summary>
        /// The number of unmatched queries in video realtime reporting.
        ///
        /// Corresponds to "Total unmatched ad requests" in the Ad Manager UI.
        ///
        /// Compatible with the following report types:
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_REAL_TIME_UNMATCHED_QUERIES")] VideoRealTimeUnmatchedQueries = 141,
        /// <summary>
        /// Number of times that the publisher specified a video ad played
        ///  automatically.
        ///
        /// Corresponds to "Auto-plays" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_AUTO_PLAYS")] VideoViewershipAutoPlays = 103,
        /// <summary>
        /// Average percentage of the video watched by users.
        ///
        /// Corresponds to "Average view rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE")] VideoViewershipAverageViewRate = 104,
        /// <summary>
        /// Average time(seconds) users watched the video.
        ///
        /// Corresponds to "Average view time" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME")] VideoViewershipAverageViewTime = 105,
        /// <summary>
        /// Number of times that the publisher specified a video ad was clicked to
        ///  play.
        ///
        /// Corresponds to "Click-to-plays" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_CLICK_TO_PLAYS")] VideoViewershipClickToPlays = 106,
        /// <summary>
        /// The number of times the video played to completion.
        ///
        /// Corresponds to "Completes" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_COMPLETES")] VideoViewershipCompletes = 107,
        /// <summary>
        /// Percentage of times the video played to the end.
        ///
        /// Corresponds to "Completion rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_COMPLETION_RATE")] VideoViewershipCompletionRate = 108,
        /// <summary>
        /// The number of engaged views: ad is viewed to completion or for 30s,
        ///  whichever comes first.
        ///
        /// Corresponds to "Engaged views" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_ENGAGED_VIEWS")] VideoViewershipEngagedViews = 109,
        /// <summary>
        /// The number of times the video played to 25% of its length.
        ///
        /// Corresponds to "First quartiles" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_FIRST_QUARTILES")] VideoViewershipFirstQuartiles = 110,
        /// <summary>
        /// The number of times the video reached its midpoint during play.
        ///
        /// Corresponds to "Midpoints" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_MIDPOINTS")] VideoViewershipMidpoints = 111,
        /// <summary>
        /// The number of times a skip button is shown in video.
        ///
        /// Corresponds to "Skip buttons shown" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN")] VideoViewershipSkipButtonsShown = 112,
        /// <summary>
        /// The number of impressions where the video was played.
        ///
        /// Corresponds to "Starts" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_STARTS")] VideoViewershipStarts = 113,
        /// <summary>
        /// The number of times the video played to 75% of its length.
        ///
        /// Corresponds to "Third quartiles" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_THIRD_QUARTILES")] VideoViewershipThirdQuartiles = 114,
        /// <summary>
        /// The number of times an error occurred, such as a VAST redirect error, a
        ///  video playback error, or an invalid response error.
        ///
        /// Corresponds to "Total error count" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT")] VideoViewershipTotalErrorCount = 115,
        /// <summary>
        /// The percentage of video error count.
        ///
        /// Corresponds to "Total error rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE")] VideoViewershipTotalErrorRate = 94,
        /// <summary>
        /// Duration of the video creative.
        ///
        /// Corresponds to "Video length" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_VIDEO_LENGTH")] VideoViewershipVideoLength = 116,
        /// <summary>
        /// View-through rate represented as a percentage.
        ///
        /// Corresponds to "Video view through rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `PERCENT`
        /// </summary>
        [pbr::OriginalName("VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE")] VideoViewershipViewThroughRate = 117,
        /// <summary>
        /// Number of winning bids received from Open Bidding buyers, even when the
        ///  winning bid is placed at the end of a mediation for mobile apps chain.
        ///
        /// Corresponds to "Yield group auctions won" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_AUCTIONS_WON")] YieldGroupAuctionsWon = 80,
        /// <summary>
        /// Number of bids received from Open Bidding buyers, regardless of whether
        ///  the returned bid competes in an auction.
        ///
        /// Corresponds to "Yield group bids" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_BIDS")] YieldGroupBids = 81,
        /// <summary>
        /// Number of bids received from Open Bidding buyers that competed in
        ///  the auction.
        ///
        /// Corresponds to "Yield group bids in auction" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_BIDS_IN_AUCTION")] YieldGroupBidsInAuction = 82,
        /// <summary>
        /// Number of times a yield partner is asked to return bid to fill
        ///  a yield group request.
        ///
        /// Corresponds to "Yield group callouts" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_CALLOUTS")] YieldGroupCallouts = 83,
        /// <summary>
        /// The estimated net rate for yield groups or individual
        ///  yield group partners.
        ///
        /// Corresponds to "Yield group estimated CPM" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_ESTIMATED_CPM")] YieldGroupEstimatedCpm = 88,
        /// <summary>
        /// Total net revenue earned by a yield group, based upon the yield group
        ///  estimated CPM and yield group impressions recorded.
        ///
        /// Corresponds to "Yield group estimated revenue" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_ESTIMATED_REVENUE")] YieldGroupEstimatedRevenue = 87,
        /// <summary>
        /// Number of matched yield group requests where a yield partner delivered
        ///  their ad to publisher inventory.
        ///
        /// Corresponds to "Yield group impressions" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_IMPRESSIONS")] YieldGroupImpressions = 85,
        /// <summary>
        /// Yield group Mediation fill rate indicating how often a network
        ///  fills an ad request.
        ///
        /// Corresponds to "Yield group mediation fill rate" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_MEDIATION_FILL_RATE")] YieldGroupMediationFillRate = 89,
        /// <summary>
        /// Total requests where a Mediation chain was served.
        ///
        /// Corresponds to "Yield group mediation matched queries" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_MEDIATION_MATCHED_QUERIES")] YieldGroupMediationMatchedQueries = 86,
        /// <summary>
        /// The number of mediation chain passback across all channels.
        ///
        /// Corresponds to "Yield group mediation passbacks" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_MEDIATION_PASSBACKS")] YieldGroupMediationPassbacks = 118,
        /// <summary>
        /// Revenue per thousand impressions based on data collected by Ad Manager
        ///  from third-party ad network reports.
        ///
        /// Corresponds to "Yield group mediation third party ECPM" in the Ad Manager
        /// UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `DOUBLE`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM")] YieldGroupMediationThirdPartyEcpm = 90,
        /// <summary>
        /// The yield group revenue accrued in the child network's own account but
        ///  paid to their parent network through auto-payment. This metric is only
        ///  relevant for a "Manage Account" child network.
        ///
        /// Corresponds to "Yield group revenue paid through MCM auto-payment" in the
        /// Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `MONEY`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_REVENUE_PAID_THROUGH_MCM_AUTOPAYMENT")] YieldGroupRevenuePaidThroughMcmAutopayment = 215,
        /// <summary>
        /// Number of times a yield group buyer successfully returned a bid in
        ///  response to a yield group callout.
        ///
        /// Corresponds to "Yield group successful responses" in the Ad Manager UI.
        ///
        /// Compatible with the following report types: `HISTORICAL`
        ///
        /// Data format: `INTEGER`
        /// </summary>
        [pbr::OriginalName("YIELD_GROUP_SUCCESSFUL_RESPONSES")] YieldGroupSuccessfulResponses = 84,
      }

      /// <summary>
      /// Valid time period columns.
      /// </summary>
      public enum TimePeriodColumn {
        /// <summary>
        /// Default value. Report will have no time period column.
        /// </summary>
        [pbr::OriginalName("TIME_PERIOD_COLUMN_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// A column for each date in the report.
        /// </summary>
        [pbr::OriginalName("TIME_PERIOD_COLUMN_DATE")] Date = 1,
        /// <summary>
        /// A column for each week in the report.
        /// </summary>
        [pbr::OriginalName("TIME_PERIOD_COLUMN_WEEK")] Week = 2,
        /// <summary>
        /// A column for each month in the report.
        /// </summary>
        [pbr::OriginalName("TIME_PERIOD_COLUMN_MONTH")] Month = 3,
        /// <summary>
        /// A column for each quarter in the report.
        /// </summary>
        [pbr::OriginalName("TIME_PERIOD_COLUMN_QUARTER")] Quarter = 4,
      }

      /// <summary>
      /// Possible metric value types to add.
      /// </summary>
      public enum MetricValueType {
        /// <summary>
        /// The values for the primary date_range.
        /// </summary>
        [pbr::OriginalName("PRIMARY")] Primary = 0,
        /// <summary>
        /// Each metrics' percent of the total for the primary date_range.
        /// </summary>
        [pbr::OriginalName("PRIMARY_PERCENT_OF_TOTAL")] PrimaryPercentOfTotal = 1,
        /// <summary>
        /// The values for the comparison_date_range.
        /// </summary>
        [pbr::OriginalName("COMPARISON")] Comparison = 2,
        /// <summary>
        /// Each metrics' percent of the total for the comparison_date_range.
        /// </summary>
        [pbr::OriginalName("COMPARISON_PERCENT_OF_TOTAL")] ComparisonPercentOfTotal = 3,
        /// <summary>
        /// The absolute change between the primary and comparison date ranges.
        /// </summary>
        [pbr::OriginalName("ABSOLUTE_CHANGE")] AbsoluteChange = 4,
        /// <summary>
        /// The relative change between the primary and comparison date ranges.
        /// </summary>
        [pbr::OriginalName("RELATIVE_CHANGE")] RelativeChange = 5,
      }

      /// <summary>
      /// The source to determine the time zone for the report.
      /// </summary>
      public enum TimeZoneSource {
        /// <summary>
        /// Unspecified default value.
        /// </summary>
        [pbr::OriginalName("TIME_ZONE_SOURCE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Use the publisher's time zone in network settings.
        /// </summary>
        [pbr::OriginalName("PUBLISHER")] Publisher = 1,
        /// <summary>
        /// Use the time zone of the ad exchange.
        /// Only compatible with Ad Exchange dimensions and metrics.
        /// </summary>
        [pbr::OriginalName("AD_EXCHANGE")] AdExchange = 2,
        /// <summary>
        /// Use UTC time zone.
        /// Only compatible with Revenue Verification reports.
        /// </summary>
        [pbr::OriginalName("UTC")] Utc = 3,
        /// <summary>
        /// Use the time zone provided in the ReportDefinition.time_zone field.
        /// Has limited dimension and metric compatibility compared with PUBLISHER,
        /// and reports may take longer to run since the dates are dynamically
        /// calculated at request time.
        /// </summary>
        [pbr::OriginalName("PROVIDED")] Provided = 4,
      }

      /// <summary>
      /// A dimension or a metric in a report.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Field : pb::IMessage<Field>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Field> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.AdManager.V1.ReportDefinition.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Field() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Field(Field other) : this() {
          switch (other.FieldCase) {
            case FieldOneofCase.Dimension:
              Dimension = other.Dimension;
              break;
            case FieldOneofCase.Metric:
              Metric = other.Metric;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Field Clone() {
          return new Field(this);
        }

        /// <summary>Field number for the "dimension" field.</summary>
        public const int DimensionFieldNumber = 1;
        /// <summary>
        /// The dimension this field represents.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension Dimension {
          get { return HasDimension ? (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension) field_ : global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension.Unspecified; }
          set {
            field_ = value;
            fieldCase_ = FieldOneofCase.Dimension;
          }
        }
        /// <summary>Gets whether the "dimension" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDimension {
          get { return fieldCase_ == FieldOneofCase.Dimension; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "dimension" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDimension() {
          if (HasDimension) {
            ClearField();
          }
        }

        /// <summary>Field number for the "metric" field.</summary>
        public const int MetricFieldNumber = 2;
        /// <summary>
        /// The metric this field represents.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric Metric {
          get { return HasMetric ? (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric) field_ : global::Google.Ads.AdManager.V1.ReportDefinition.Types.Metric.Unspecified; }
          set {
            field_ = value;
            fieldCase_ = FieldOneofCase.Metric;
          }
        }
        /// <summary>Gets whether the "metric" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMetric {
          get { return fieldCase_ == FieldOneofCase.Metric; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "metric" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMetric() {
          if (HasMetric) {
            ClearField();
          }
        }

        private object field_;
        /// <summary>Enum of possible cases for the "field" oneof.</summary>
        public enum FieldOneofCase {
          None = 0,
          Dimension = 1,
          Metric = 2,
        }
        private FieldOneofCase fieldCase_ = FieldOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FieldOneofCase FieldCase {
          get { return fieldCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearField() {
          fieldCase_ = FieldOneofCase.None;
          field_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Field);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Field other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Dimension != other.Dimension) return false;
          if (Metric != other.Metric) return false;
          if (FieldCase != other.FieldCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasDimension) hash ^= Dimension.GetHashCode();
          if (HasMetric) hash ^= Metric.GetHashCode();
          hash ^= (int) fieldCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasDimension) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Dimension);
          }
          if (HasMetric) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Metric);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasDimension) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Dimension);
          }
          if (HasMetric) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Metric);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasDimension) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dimension);
          }
          if (HasMetric) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Metric);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Field other) {
          if (other == null) {
            return;
          }
          switch (other.FieldCase) {
            case FieldOneofCase.Dimension:
              Dimension = other.Dimension;
              break;
            case FieldOneofCase.Metric:
              Metric = other.Metric;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                field_ = input.ReadEnum();
                fieldCase_ = FieldOneofCase.Dimension;
                break;
              }
              case 16: {
                field_ = input.ReadEnum();
                fieldCase_ = FieldOneofCase.Metric;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                field_ = input.ReadEnum();
                fieldCase_ = FieldOneofCase.Dimension;
                break;
              }
              case 16: {
                field_ = input.ReadEnum();
                fieldCase_ = FieldOneofCase.Metric;
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// A date range for a report.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class DateRange : pb::IMessage<DateRange>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DateRange> _parser = new pb::MessageParser<DateRange>(() => new DateRange());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<DateRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.AdManager.V1.ReportDefinition.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DateRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DateRange(DateRange other) : this() {
          switch (other.DateRangeTypeCase) {
            case DateRangeTypeOneofCase.Fixed:
              Fixed = other.Fixed.Clone();
              break;
            case DateRangeTypeOneofCase.Relative:
              Relative = other.Relative;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DateRange Clone() {
          return new DateRange(this);
        }

        /// <summary>Field number for the "fixed" field.</summary>
        public const int FixedFieldNumber = 1;
        /// <summary>
        /// A fixed date range.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange Fixed {
          get { return dateRangeTypeCase_ == DateRangeTypeOneofCase.Fixed ? (global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange) dateRangeType_ : null; }
          set {
            dateRangeType_ = value;
            dateRangeTypeCase_ = value == null ? DateRangeTypeOneofCase.None : DateRangeTypeOneofCase.Fixed;
          }
        }

        /// <summary>Field number for the "relative" field.</summary>
        public const int RelativeFieldNumber = 2;
        /// <summary>
        /// A relative date range.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.RelativeDateRange Relative {
          get { return HasRelative ? (global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.RelativeDateRange) dateRangeType_ : global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.RelativeDateRange.Unspecified; }
          set {
            dateRangeType_ = value;
            dateRangeTypeCase_ = DateRangeTypeOneofCase.Relative;
          }
        }
        /// <summary>Gets whether the "relative" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRelative {
          get { return dateRangeTypeCase_ == DateRangeTypeOneofCase.Relative; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "relative" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRelative() {
          if (HasRelative) {
            ClearDateRangeType();
          }
        }

        private object dateRangeType_;
        /// <summary>Enum of possible cases for the "date_range_type" oneof.</summary>
        public enum DateRangeTypeOneofCase {
          None = 0,
          Fixed = 1,
          Relative = 2,
        }
        private DateRangeTypeOneofCase dateRangeTypeCase_ = DateRangeTypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DateRangeTypeOneofCase DateRangeTypeCase {
          get { return dateRangeTypeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDateRangeType() {
          dateRangeTypeCase_ = DateRangeTypeOneofCase.None;
          dateRangeType_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as DateRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(DateRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Fixed, other.Fixed)) return false;
          if (Relative != other.Relative) return false;
          if (DateRangeTypeCase != other.DateRangeTypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (dateRangeTypeCase_ == DateRangeTypeOneofCase.Fixed) hash ^= Fixed.GetHashCode();
          if (HasRelative) hash ^= Relative.GetHashCode();
          hash ^= (int) dateRangeTypeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (dateRangeTypeCase_ == DateRangeTypeOneofCase.Fixed) {
            output.WriteRawTag(10);
            output.WriteMessage(Fixed);
          }
          if (HasRelative) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Relative);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (dateRangeTypeCase_ == DateRangeTypeOneofCase.Fixed) {
            output.WriteRawTag(10);
            output.WriteMessage(Fixed);
          }
          if (HasRelative) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Relative);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (dateRangeTypeCase_ == DateRangeTypeOneofCase.Fixed) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Fixed);
          }
          if (HasRelative) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Relative);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(DateRange other) {
          if (other == null) {
            return;
          }
          switch (other.DateRangeTypeCase) {
            case DateRangeTypeOneofCase.Fixed:
              if (Fixed == null) {
                Fixed = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange();
              }
              Fixed.MergeFrom(other.Fixed);
              break;
            case DateRangeTypeOneofCase.Relative:
              Relative = other.Relative;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange();
                if (dateRangeTypeCase_ == DateRangeTypeOneofCase.Fixed) {
                  subBuilder.MergeFrom(Fixed);
                }
                input.ReadMessage(subBuilder);
                Fixed = subBuilder;
                break;
              }
              case 16: {
                dateRangeType_ = input.ReadEnum();
                dateRangeTypeCase_ = DateRangeTypeOneofCase.Relative;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Types.FixedDateRange();
                if (dateRangeTypeCase_ == DateRangeTypeOneofCase.Fixed) {
                  subBuilder.MergeFrom(Fixed);
                }
                input.ReadMessage(subBuilder);
                Fixed = subBuilder;
                break;
              }
              case 16: {
                dateRangeType_ = input.ReadEnum();
                dateRangeTypeCase_ = DateRangeTypeOneofCase.Relative;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the DateRange message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// Options for relative date ranges.
          /// </summary>
          public enum RelativeDateRange {
            /// <summary>
            /// Default value. This value is unused.
            /// </summary>
            [pbr::OriginalName("RELATIVE_DATE_RANGE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// The date the report is run.
            /// </summary>
            [pbr::OriginalName("TODAY")] Today = 1,
            /// <summary>
            /// The date a day before the date that the report is run.
            /// </summary>
            [pbr::OriginalName("YESTERDAY")] Yesterday = 2,
            /// <summary>
            /// The full week in which this report is run. Could include dates in
            /// the future.
            /// </summary>
            [pbr::OriginalName("THIS_WEEK")] ThisWeek = 3,
            /// <summary>
            /// From the beginning of the calendar week (Monday to Sunday) in which the
            /// up to and including the day the report is run.
            /// </summary>
            [pbr::OriginalName("THIS_WEEK_TO_DATE")] ThisWeekToDate = 29,
            /// <summary>
            /// The full month in which this report is run. Could include dates in
            /// the future.
            /// </summary>
            [pbr::OriginalName("THIS_MONTH")] ThisMonth = 4,
            /// <summary>
            /// From the beginning of the calendar month in which the report is run, to
            /// up to and including the day the report is run.
            /// </summary>
            [pbr::OriginalName("THIS_MONTH_TO_DATE")] ThisMonthToDate = 26,
            /// <summary>
            /// The full quarter in which this report is run. Could include dates
            /// in the future.
            /// </summary>
            [pbr::OriginalName("THIS_QUARTER")] ThisQuarter = 5,
            /// <summary>
            /// From the beginning of the calendar quarter in which the report is run,
            /// up to and including the day the report is run.
            /// </summary>
            [pbr::OriginalName("THIS_QUARTER_TO_DATE")] ThisQuarterToDate = 27,
            /// <summary>
            /// The full year in which this report is run. Could include dates in
            /// the future.
            /// </summary>
            [pbr::OriginalName("THIS_YEAR")] ThisYear = 6,
            /// <summary>
            /// From the beginning of the calendar year in which the report is run, to
            /// up to and including the day the report is run.
            /// </summary>
            [pbr::OriginalName("THIS_YEAR_TO_DATE")] ThisYearToDate = 28,
            /// <summary>
            /// The entire previous calendar week, Monday to Sunday (inclusive),
            /// preceding the calendar week the report is run.
            /// </summary>
            [pbr::OriginalName("LAST_WEEK")] LastWeek = 7,
            /// <summary>
            /// The entire previous calendar month preceding the calendar month the
            /// report is run.
            /// </summary>
            [pbr::OriginalName("LAST_MONTH")] LastMonth = 8,
            /// <summary>
            /// The entire previous calendar quarter preceding the calendar quarter the
            /// report is run.
            /// </summary>
            [pbr::OriginalName("LAST_QUARTER")] LastQuarter = 9,
            /// <summary>
            /// The entire previous calendar year preceding the calendar year the
            /// report is run.
            /// </summary>
            [pbr::OriginalName("LAST_YEAR")] LastYear = 10,
            /// <summary>
            /// The 7 days preceding the day the report is run.
            /// </summary>
            [pbr::OriginalName("LAST_7_DAYS")] Last7Days = 11,
            /// <summary>
            /// The 30 days preceding the day the report is run.
            /// </summary>
            [pbr::OriginalName("LAST_30_DAYS")] Last30Days = 12,
            /// <summary>
            /// The 60 days preceding the day the report is run.
            /// </summary>
            [pbr::OriginalName("LAST_60_DAYS")] Last60Days = 13,
            /// <summary>
            /// The 90 days preceding the day the report is run.
            /// </summary>
            [pbr::OriginalName("LAST_90_DAYS")] Last90Days = 14,
            /// <summary>
            /// The 180 days preceding the day the report is run.
            /// </summary>
            [pbr::OriginalName("LAST_180_DAYS")] Last180Days = 15,
            /// <summary>
            /// The 360 days preceding the day the report is run.
            /// </summary>
            [pbr::OriginalName("LAST_360_DAYS")] Last360Days = 16,
            /// <summary>
            /// The 365 days preceding the day the report is run.
            /// </summary>
            [pbr::OriginalName("LAST_365_DAYS")] Last365Days = 17,
            /// <summary>
            /// The entire previous 3 calendar months preceding the calendar month the
            /// report is run.
            /// </summary>
            [pbr::OriginalName("LAST_3_MONTHS")] Last3Months = 18,
            /// <summary>
            /// The entire previous 6 calendar months preceding the calendar month the
            /// report is run.
            /// </summary>
            [pbr::OriginalName("LAST_6_MONTHS")] Last6Months = 19,
            /// <summary>
            /// The entire previous 6 calendar months preceding the calendar month the
            /// report is run.
            /// </summary>
            [pbr::OriginalName("LAST_12_MONTHS")] Last12Months = 20,
            /// <summary>
            /// From 3 years before the report is run, to the day before the report is
            /// run, inclusive.
            /// </summary>
            [pbr::OriginalName("ALL_AVAILABLE")] AllAvailable = 21,
            /// <summary>
            /// The date a day after the date that the report is run.
            /// </summary>
            [pbr::OriginalName("TOMORROW")] Tomorrow = 30,
            /// <summary>
            /// The 90 days following the day the report is run.
            /// </summary>
            [pbr::OriginalName("NEXT_90_DAYS")] Next90Days = 31,
            /// <summary>
            /// The entire calendar month following the calendar month the report is
            /// run.
            /// </summary>
            [pbr::OriginalName("NEXT_MONTH")] NextMonth = 32,
            /// <summary>
            /// The entire 3 calendar months following the calendar month the report
            /// is run.
            /// </summary>
            [pbr::OriginalName("NEXT_3_MONTHS")] Next3Months = 33,
            /// <summary>
            /// The entire 12 calendar months following the calendar month the report
            /// is run.
            /// </summary>
            [pbr::OriginalName("NEXT_12_MONTHS")] Next12Months = 34,
            /// <summary>
            /// The entire calendar week, Monday to Sunday (inclusive), following the
            /// calendar week the report is run.
            /// </summary>
            [pbr::OriginalName("NEXT_WEEK")] NextWeek = 35,
            /// <summary>
            /// The entire calendar quarter following the calendar quarter the report
            /// is run.
            /// </summary>
            [pbr::OriginalName("NEXT_QUARTER")] NextQuarter = 36,
            /// <summary>
            /// From the date a day after the date that the report is run, to the end
            /// of the calendar month following the calendar month the report is run.
            /// </summary>
            [pbr::OriginalName("TO_END_OF_NEXT_MONTH")] ToEndOfNextMonth = 37,
            /// <summary>
            /// Only valid when used in the comparison_date_range field. The complete
            /// period preceding the date period provided in date_range.
            ///
            /// In the case where date_range is a FixedDateRange of N days, this will
            /// be a period of N days where the end date is the date preceding the
            /// start date of the date_range.
            ///
            /// In the case where date_range is a RelativeDateRange, this will be a
            /// period of the same timeframe preceding the date_range. In the case
            /// where the date_range does not capture the full period because a report
            /// is run in the middle of that period, this will still be the full
            /// preceding period. For example, if date_range is THIS_WEEK, but the
            /// report is run on a Wednesday, THIS_WEEK will be Monday - Wednesday, but
            /// PREVIOUS_PERIOD will be Monday - Sunday.
            /// </summary>
            [pbr::OriginalName("PREVIOUS_PERIOD")] PreviousPeriod = 22,
            /// <summary>
            /// Only valid when used in the comparison_date_range field. The period
            /// starting 1 year prior to the date period provided in date_range.
            ///
            /// In the case where date_range is a FixedDateRange, this will be a date
            /// range starting 1 year prior to the date_range start date and ending 1
            /// year prior to the date_range end date.
            ///
            /// In the case where date_range is a RelativeDateRange, this will be a
            /// period of the same timeframe exactly 1 year prior to the date_range.
            /// In the case where the date_range does not capture the full period
            /// because a report is run in the middle of that period, this will still
            /// be the full period 1 year prior. For example, if date range is
            /// THIS_WEEK, but the report is run on a Wednesday, THIS_WEEK will be
            /// Monday - Wednesday, but SAME_PERIOD_PREVIOUS_YEAR will be Monday -
            /// Sunday.
            /// </summary>
            [pbr::OriginalName("SAME_PERIOD_PREVIOUS_YEAR")] SamePeriodPreviousYear = 24,
          }

          /// <summary>
          /// A date range between two fixed dates (inclusive of end date).
          /// </summary>
          [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
          public sealed partial class FixedDateRange : pb::IMessage<FixedDateRange>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<FixedDateRange> _parser = new pb::MessageParser<FixedDateRange>(() => new FixedDateRange());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<FixedDateRange> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Ads.AdManager.V1.ReportDefinition.Types.DateRange.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FixedDateRange() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FixedDateRange(FixedDateRange other) : this() {
              startDate_ = other.startDate_ != null ? other.startDate_.Clone() : null;
              endDate_ = other.endDate_ != null ? other.endDate_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FixedDateRange Clone() {
              return new FixedDateRange(this);
            }

            /// <summary>Field number for the "start_date" field.</summary>
            public const int StartDateFieldNumber = 1;
            private global::Google.Type.Date startDate_;
            /// <summary>
            /// Required. The start date of this date range.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Google.Type.Date StartDate {
              get { return startDate_; }
              set {
                startDate_ = value;
              }
            }

            /// <summary>Field number for the "end_date" field.</summary>
            public const int EndDateFieldNumber = 2;
            private global::Google.Type.Date endDate_;
            /// <summary>
            /// Required. The end date (inclusive) of this date range.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Google.Type.Date EndDate {
              get { return endDate_; }
              set {
                endDate_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as FixedDateRange);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(FixedDateRange other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(StartDate, other.StartDate)) return false;
              if (!object.Equals(EndDate, other.EndDate)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (startDate_ != null) hash ^= StartDate.GetHashCode();
              if (endDate_ != null) hash ^= EndDate.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (startDate_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(StartDate);
              }
              if (endDate_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(EndDate);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (startDate_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(StartDate);
              }
              if (endDate_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(EndDate);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (startDate_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDate);
              }
              if (endDate_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDate);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(FixedDateRange other) {
              if (other == null) {
                return;
              }
              if (other.startDate_ != null) {
                if (startDate_ == null) {
                  StartDate = new global::Google.Type.Date();
                }
                StartDate.MergeFrom(other.StartDate);
              }
              if (other.endDate_ != null) {
                if (endDate_ == null) {
                  EndDate = new global::Google.Type.Date();
                }
                EndDate.MergeFrom(other.EndDate);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (startDate_ == null) {
                      StartDate = new global::Google.Type.Date();
                    }
                    input.ReadMessage(StartDate);
                    break;
                  }
                  case 18: {
                    if (endDate_ == null) {
                      EndDate = new global::Google.Type.Date();
                    }
                    input.ReadMessage(EndDate);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (startDate_ == null) {
                      StartDate = new global::Google.Type.Date();
                    }
                    input.ReadMessage(StartDate);
                    break;
                  }
                  case 18: {
                    if (endDate_ == null) {
                      EndDate = new global::Google.Type.Date();
                    }
                    input.ReadMessage(EndDate);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      /// <summary>
      /// A filter over one or more fields.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Filter : pb::IMessage<Filter>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Filter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.AdManager.V1.ReportDefinition.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Filter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Filter(Filter other) : this() {
          switch (other.TypeCase) {
            case TypeOneofCase.FieldFilter:
              FieldFilter = other.FieldFilter.Clone();
              break;
            case TypeOneofCase.NotFilter:
              NotFilter = other.NotFilter.Clone();
              break;
            case TypeOneofCase.AndFilter:
              AndFilter = other.AndFilter.Clone();
              break;
            case TypeOneofCase.OrFilter:
              OrFilter = other.OrFilter.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Filter Clone() {
          return new Filter(this);
        }

        /// <summary>Field number for the "field_filter" field.</summary>
        public const int FieldFilterFieldNumber = 1;
        /// <summary>
        /// A filter on a single field.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter FieldFilter {
          get { return typeCase_ == TypeOneofCase.FieldFilter ? (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.FieldFilter;
          }
        }

        /// <summary>Field number for the "not_filter" field.</summary>
        public const int NotFilterFieldNumber = 2;
        /// <summary>
        /// A filter whose result is negated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter NotFilter {
          get { return typeCase_ == TypeOneofCase.NotFilter ? (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.NotFilter;
          }
        }

        /// <summary>Field number for the "and_filter" field.</summary>
        public const int AndFilterFieldNumber = 3;
        /// <summary>
        /// A list of filters whose results are AND-ed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList AndFilter {
          get { return typeCase_ == TypeOneofCase.AndFilter ? (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.AndFilter;
          }
        }

        /// <summary>Field number for the "or_filter" field.</summary>
        public const int OrFilterFieldNumber = 4;
        /// <summary>
        /// A list of filters whose results are OR-ed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList OrFilter {
          get { return typeCase_ == TypeOneofCase.OrFilter ? (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList) type_ : null; }
          set {
            type_ = value;
            typeCase_ = value == null ? TypeOneofCase.None : TypeOneofCase.OrFilter;
          }
        }

        private object type_;
        /// <summary>Enum of possible cases for the "type" oneof.</summary>
        public enum TypeOneofCase {
          None = 0,
          FieldFilter = 1,
          NotFilter = 2,
          AndFilter = 3,
          OrFilter = 4,
        }
        private TypeOneofCase typeCase_ = TypeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TypeOneofCase TypeCase {
          get { return typeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearType() {
          typeCase_ = TypeOneofCase.None;
          type_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Filter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Filter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(FieldFilter, other.FieldFilter)) return false;
          if (!object.Equals(NotFilter, other.NotFilter)) return false;
          if (!object.Equals(AndFilter, other.AndFilter)) return false;
          if (!object.Equals(OrFilter, other.OrFilter)) return false;
          if (TypeCase != other.TypeCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (typeCase_ == TypeOneofCase.FieldFilter) hash ^= FieldFilter.GetHashCode();
          if (typeCase_ == TypeOneofCase.NotFilter) hash ^= NotFilter.GetHashCode();
          if (typeCase_ == TypeOneofCase.AndFilter) hash ^= AndFilter.GetHashCode();
          if (typeCase_ == TypeOneofCase.OrFilter) hash ^= OrFilter.GetHashCode();
          hash ^= (int) typeCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (typeCase_ == TypeOneofCase.FieldFilter) {
            output.WriteRawTag(10);
            output.WriteMessage(FieldFilter);
          }
          if (typeCase_ == TypeOneofCase.NotFilter) {
            output.WriteRawTag(18);
            output.WriteMessage(NotFilter);
          }
          if (typeCase_ == TypeOneofCase.AndFilter) {
            output.WriteRawTag(26);
            output.WriteMessage(AndFilter);
          }
          if (typeCase_ == TypeOneofCase.OrFilter) {
            output.WriteRawTag(34);
            output.WriteMessage(OrFilter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (typeCase_ == TypeOneofCase.FieldFilter) {
            output.WriteRawTag(10);
            output.WriteMessage(FieldFilter);
          }
          if (typeCase_ == TypeOneofCase.NotFilter) {
            output.WriteRawTag(18);
            output.WriteMessage(NotFilter);
          }
          if (typeCase_ == TypeOneofCase.AndFilter) {
            output.WriteRawTag(26);
            output.WriteMessage(AndFilter);
          }
          if (typeCase_ == TypeOneofCase.OrFilter) {
            output.WriteRawTag(34);
            output.WriteMessage(OrFilter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (typeCase_ == TypeOneofCase.FieldFilter) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FieldFilter);
          }
          if (typeCase_ == TypeOneofCase.NotFilter) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotFilter);
          }
          if (typeCase_ == TypeOneofCase.AndFilter) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(AndFilter);
          }
          if (typeCase_ == TypeOneofCase.OrFilter) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OrFilter);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Filter other) {
          if (other == null) {
            return;
          }
          switch (other.TypeCase) {
            case TypeOneofCase.FieldFilter:
              if (FieldFilter == null) {
                FieldFilter = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter();
              }
              FieldFilter.MergeFrom(other.FieldFilter);
              break;
            case TypeOneofCase.NotFilter:
              if (NotFilter == null) {
                NotFilter = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter();
              }
              NotFilter.MergeFrom(other.NotFilter);
              break;
            case TypeOneofCase.AndFilter:
              if (AndFilter == null) {
                AndFilter = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList();
              }
              AndFilter.MergeFrom(other.AndFilter);
              break;
            case TypeOneofCase.OrFilter:
              if (OrFilter == null) {
                OrFilter = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList();
              }
              OrFilter.MergeFrom(other.OrFilter);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter();
                if (typeCase_ == TypeOneofCase.FieldFilter) {
                  subBuilder.MergeFrom(FieldFilter);
                }
                input.ReadMessage(subBuilder);
                FieldFilter = subBuilder;
                break;
              }
              case 18: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter();
                if (typeCase_ == TypeOneofCase.NotFilter) {
                  subBuilder.MergeFrom(NotFilter);
                }
                input.ReadMessage(subBuilder);
                NotFilter = subBuilder;
                break;
              }
              case 26: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList();
                if (typeCase_ == TypeOneofCase.AndFilter) {
                  subBuilder.MergeFrom(AndFilter);
                }
                input.ReadMessage(subBuilder);
                AndFilter = subBuilder;
                break;
              }
              case 34: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList();
                if (typeCase_ == TypeOneofCase.OrFilter) {
                  subBuilder.MergeFrom(OrFilter);
                }
                input.ReadMessage(subBuilder);
                OrFilter = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FieldFilter();
                if (typeCase_ == TypeOneofCase.FieldFilter) {
                  subBuilder.MergeFrom(FieldFilter);
                }
                input.ReadMessage(subBuilder);
                FieldFilter = subBuilder;
                break;
              }
              case 18: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter();
                if (typeCase_ == TypeOneofCase.NotFilter) {
                  subBuilder.MergeFrom(NotFilter);
                }
                input.ReadMessage(subBuilder);
                NotFilter = subBuilder;
                break;
              }
              case 26: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList();
                if (typeCase_ == TypeOneofCase.AndFilter) {
                  subBuilder.MergeFrom(AndFilter);
                }
                input.ReadMessage(subBuilder);
                AndFilter = subBuilder;
                break;
              }
              case 34: {
                global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList subBuilder = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.FilterList();
                if (typeCase_ == TypeOneofCase.OrFilter) {
                  subBuilder.MergeFrom(OrFilter);
                }
                input.ReadMessage(subBuilder);
                OrFilter = subBuilder;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Filter message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// Supported filter operations.
          /// </summary>
          public enum Operation {
            /// <summary>
            /// For scalar operands, checks if the operand is in the set of provided
            /// filter values.
            ///
            /// For list operands, checks if any element in the operand is in the set
            /// of provided filter values.
            ///
            /// Default value.
            /// </summary>
            [pbr::OriginalName("IN")] In = 0,
            /// <summary>
            /// For scalar operands, checks that the operand is not in the set of
            /// provided filter values.
            ///
            /// For list operands, checks that none of the elements in the operand
            /// is in the set of provided filter values.
            /// </summary>
            [pbr::OriginalName("NOT_IN")] NotIn = 1,
            /// <summary>
            /// For scalar string operands, checks if the operand contains any of the
            /// provided filter substrings.
            ///
            /// For string list operands, checks if any string in the operand contains
            /// any of the provided filter substrings.
            /// </summary>
            [pbr::OriginalName("CONTAINS")] Contains = 2,
            /// <summary>
            /// For scalar string operands, checks that the operand contains none of
            /// the provided filter substrings.
            ///
            /// For string list operands, checks that none of the strings in the
            /// operand contain none of the provided filter substrings.
            /// </summary>
            [pbr::OriginalName("NOT_CONTAINS")] NotContains = 3,
            /// <summary>
            /// Operand is less than the provided filter value.
            /// </summary>
            [pbr::OriginalName("LESS_THAN")] LessThan = 4,
            /// <summary>
            /// Operand is less than or equal to provided filter value.
            /// </summary>
            [pbr::OriginalName("LESS_THAN_EQUALS")] LessThanEquals = 5,
            /// <summary>
            /// Operand is greater than provided filter value.
            /// </summary>
            [pbr::OriginalName("GREATER_THAN")] GreaterThan = 6,
            /// <summary>
            /// Operand is greater than or equal to provided filter value.
            /// </summary>
            [pbr::OriginalName("GREATER_THAN_EQUALS")] GreaterThanEquals = 7,
            /// <summary>
            /// Operand is between provided filter values.
            /// </summary>
            [pbr::OriginalName("BETWEEN")] Between = 8,
            /// <summary>
            /// Operand matches against a regular expression or set of regular
            /// expressions (one must match).
            /// </summary>
            [pbr::OriginalName("MATCHES")] Matches = 9,
            /// <summary>
            /// Operand negative matches against a regular expression or set of regular
            /// expressions (none must match).
            /// </summary>
            [pbr::OriginalName("NOT_MATCHES")] NotMatches = 10,
          }

          /// <summary>
          /// A filter on a specific field.
          /// </summary>
          [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
          public sealed partial class FieldFilter : pb::IMessage<FieldFilter>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<FieldFilter> _parser = new pb::MessageParser<FieldFilter>(() => new FieldFilter());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<FieldFilter> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FieldFilter() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FieldFilter(FieldFilter other) : this() {
              _hasBits0 = other._hasBits0;
              field_ = other.field_ != null ? other.field_.Clone() : null;
              operation_ = other.operation_;
              values_ = other.values_.Clone();
              slice_ = other.slice_ != null ? other.slice_.Clone() : null;
              timePeriodIndex_ = other.timePeriodIndex_;
              metricValueType_ = other.metricValueType_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FieldFilter Clone() {
              return new FieldFilter(this);
            }

            /// <summary>Field number for the "field" field.</summary>
            public const int FieldFieldNumber = 1;
            private global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field field_;
            /// <summary>
            /// Required. The field to filter on.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field Field {
              get { return field_; }
              set {
                field_ = value;
              }
            }

            /// <summary>Field number for the "operation" field.</summary>
            public const int OperationFieldNumber = 2;
            private global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation operation_ = global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation.In;
            /// <summary>
            /// Required. The operation of this filter.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation Operation {
              get { return operation_; }
              set {
                operation_ = value;
              }
            }

            /// <summary>Field number for the "values" field.</summary>
            public const int ValuesFieldNumber = 3;
            private static readonly pb::FieldCodec<global::Google.Ads.AdManager.V1.ReportValue> _repeated_values_codec
                = pb::FieldCodec.ForMessage(26, global::Google.Ads.AdManager.V1.ReportValue.Parser);
            private readonly pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportValue> values_ = new pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportValue>();
            /// <summary>
            /// Required. Values to filter to.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportValue> Values {
              get { return values_; }
            }

            /// <summary>Field number for the "slice" field.</summary>
            public const int SliceFieldNumber = 4;
            private global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice slice_;
            /// <summary>
            /// Optional. Use to filter on a specific slice of data.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice Slice {
              get { return slice_; }
              set {
                slice_ = value;
              }
            }

            /// <summary>Field number for the "time_period_index" field.</summary>
            public const int TimePeriodIndexFieldNumber = 5;
            private readonly static int TimePeriodIndexDefaultValue = 0;

            private int timePeriodIndex_;
            /// <summary>
            /// Optional. When using time period columns, use this to filter on a
            /// specific column.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int TimePeriodIndex {
              get { if ((_hasBits0 & 1) != 0) { return timePeriodIndex_; } else { return TimePeriodIndexDefaultValue; } }
              set {
                _hasBits0 |= 1;
                timePeriodIndex_ = value;
              }
            }
            /// <summary>Gets whether the "time_period_index" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasTimePeriodIndex {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "time_period_index" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearTimePeriodIndex() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "metric_value_type" field.</summary>
            public const int MetricValueTypeFieldNumber = 6;
            private readonly static global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType MetricValueTypeDefaultValue = global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType.Primary;

            private global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType metricValueType_;
            /// <summary>
            /// Optional. Use to specify which metric value type to filter on. Defaults
            /// to PRIMARY.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType MetricValueType {
              get { if ((_hasBits0 & 2) != 0) { return metricValueType_; } else { return MetricValueTypeDefaultValue; } }
              set {
                _hasBits0 |= 2;
                metricValueType_ = value;
              }
            }
            /// <summary>Gets whether the "metric_value_type" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasMetricValueType {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "metric_value_type" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearMetricValueType() {
              _hasBits0 &= ~2;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as FieldFilter);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(FieldFilter other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Field, other.Field)) return false;
              if (Operation != other.Operation) return false;
              if(!values_.Equals(other.values_)) return false;
              if (!object.Equals(Slice, other.Slice)) return false;
              if (TimePeriodIndex != other.TimePeriodIndex) return false;
              if (MetricValueType != other.MetricValueType) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (field_ != null) hash ^= Field.GetHashCode();
              if (Operation != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation.In) hash ^= Operation.GetHashCode();
              hash ^= values_.GetHashCode();
              if (slice_ != null) hash ^= Slice.GetHashCode();
              if (HasTimePeriodIndex) hash ^= TimePeriodIndex.GetHashCode();
              if (HasMetricValueType) hash ^= MetricValueType.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (field_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Field);
              }
              if (Operation != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation.In) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Operation);
              }
              values_.WriteTo(output, _repeated_values_codec);
              if (slice_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(Slice);
              }
              if (HasTimePeriodIndex) {
                output.WriteRawTag(40);
                output.WriteInt32(TimePeriodIndex);
              }
              if (HasMetricValueType) {
                output.WriteRawTag(48);
                output.WriteEnum((int) MetricValueType);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (field_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Field);
              }
              if (Operation != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation.In) {
                output.WriteRawTag(16);
                output.WriteEnum((int) Operation);
              }
              values_.WriteTo(ref output, _repeated_values_codec);
              if (slice_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(Slice);
              }
              if (HasTimePeriodIndex) {
                output.WriteRawTag(40);
                output.WriteInt32(TimePeriodIndex);
              }
              if (HasMetricValueType) {
                output.WriteRawTag(48);
                output.WriteEnum((int) MetricValueType);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (field_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
              }
              if (Operation != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation.In) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
              }
              size += values_.CalculateSize(_repeated_values_codec);
              if (slice_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slice);
              }
              if (HasTimePeriodIndex) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimePeriodIndex);
              }
              if (HasMetricValueType) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MetricValueType);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(FieldFilter other) {
              if (other == null) {
                return;
              }
              if (other.field_ != null) {
                if (field_ == null) {
                  Field = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field();
                }
                Field.MergeFrom(other.Field);
              }
              if (other.Operation != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation.In) {
                Operation = other.Operation;
              }
              values_.Add(other.values_);
              if (other.slice_ != null) {
                if (slice_ == null) {
                  Slice = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice();
                }
                Slice.MergeFrom(other.Slice);
              }
              if (other.HasTimePeriodIndex) {
                TimePeriodIndex = other.TimePeriodIndex;
              }
              if (other.HasMetricValueType) {
                MetricValueType = other.MetricValueType;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (field_ == null) {
                      Field = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field();
                    }
                    input.ReadMessage(Field);
                    break;
                  }
                  case 16: {
                    Operation = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    values_.AddEntriesFrom(input, _repeated_values_codec);
                    break;
                  }
                  case 34: {
                    if (slice_ == null) {
                      Slice = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice();
                    }
                    input.ReadMessage(Slice);
                    break;
                  }
                  case 40: {
                    TimePeriodIndex = input.ReadInt32();
                    break;
                  }
                  case 48: {
                    MetricValueType = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType) input.ReadEnum();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (field_ == null) {
                      Field = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field();
                    }
                    input.ReadMessage(Field);
                    break;
                  }
                  case 16: {
                    Operation = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Types.Operation) input.ReadEnum();
                    break;
                  }
                  case 26: {
                    values_.AddEntriesFrom(ref input, _repeated_values_codec);
                    break;
                  }
                  case 34: {
                    if (slice_ == null) {
                      Slice = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice();
                    }
                    input.ReadMessage(Slice);
                    break;
                  }
                  case 40: {
                    TimePeriodIndex = input.ReadInt32();
                    break;
                  }
                  case 48: {
                    MetricValueType = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType) input.ReadEnum();
                    break;
                  }
                }
              }
            }
            #endif

          }

          /// <summary>
          /// A list of filters.
          /// </summary>
          [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
          public sealed partial class FilterList : pb::IMessage<FilterList>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<FilterList> _parser = new pb::MessageParser<FilterList>(() => new FilterList());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<FilterList> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FilterList() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FilterList(FilterList other) : this() {
              filters_ = other.filters_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public FilterList Clone() {
              return new FilterList(this);
            }

            /// <summary>Field number for the "filters" field.</summary>
            public const int FiltersFieldNumber = 1;
            private static readonly pb::FieldCodec<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> _repeated_filters_codec
                = pb::FieldCodec.ForMessage(10, global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Parser);
            private readonly pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> filters_ = new pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter>();
            /// <summary>
            /// Required. A list of filters.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> Filters {
              get { return filters_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as FilterList);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(FilterList other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!filters_.Equals(other.filters_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= filters_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              filters_.WriteTo(output, _repeated_filters_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              filters_.WriteTo(ref output, _repeated_filters_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              size += filters_.CalculateSize(_repeated_filters_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(FilterList other) {
              if (other == null) {
                return;
              }
              filters_.Add(other.filters_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    filters_.AddEntriesFrom(input, _repeated_filters_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    filters_.AddEntriesFrom(ref input, _repeated_filters_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      /// <summary>
      /// Represents a sorting in a report.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Sort : pb::IMessage<Sort>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Sort> _parser = new pb::MessageParser<Sort>(() => new Sort());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Sort> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.AdManager.V1.ReportDefinition.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Sort() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Sort(Sort other) : this() {
          _hasBits0 = other._hasBits0;
          field_ = other.field_ != null ? other.field_.Clone() : null;
          descending_ = other.descending_;
          slice_ = other.slice_ != null ? other.slice_.Clone() : null;
          timePeriodIndex_ = other.timePeriodIndex_;
          metricValueType_ = other.metricValueType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Sort Clone() {
          return new Sort(this);
        }

        /// <summary>Field number for the "field" field.</summary>
        public const int FieldFieldNumber = 1;
        private global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field field_;
        /// <summary>
        /// Required. A field (dimension or metric) to sort by.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field Field {
          get { return field_; }
          set {
            field_ = value;
          }
        }

        /// <summary>Field number for the "descending" field.</summary>
        public const int DescendingFieldNumber = 2;
        private bool descending_;
        /// <summary>
        /// Optional. The sort order. If true the sort will be descending.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Descending {
          get { return descending_; }
          set {
            descending_ = value;
          }
        }

        /// <summary>Field number for the "slice" field.</summary>
        public const int SliceFieldNumber = 3;
        private global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice slice_;
        /// <summary>
        /// Optional. Use to sort on a specific slice of data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice Slice {
          get { return slice_; }
          set {
            slice_ = value;
          }
        }

        /// <summary>Field number for the "time_period_index" field.</summary>
        public const int TimePeriodIndexFieldNumber = 4;
        private readonly static int TimePeriodIndexDefaultValue = 0;

        private int timePeriodIndex_;
        /// <summary>
        /// Optional. When using time period columns, use this to sort on a specific
        /// column.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int TimePeriodIndex {
          get { if ((_hasBits0 & 1) != 0) { return timePeriodIndex_; } else { return TimePeriodIndexDefaultValue; } }
          set {
            _hasBits0 |= 1;
            timePeriodIndex_ = value;
          }
        }
        /// <summary>Gets whether the "time_period_index" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTimePeriodIndex {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "time_period_index" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTimePeriodIndex() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "metric_value_type" field.</summary>
        public const int MetricValueTypeFieldNumber = 5;
        private readonly static global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType MetricValueTypeDefaultValue = global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType.Primary;

        private global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType metricValueType_;
        /// <summary>
        /// Optional. Use to specify which metric value type to sort on. Defaults to
        /// PRIMARY.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType MetricValueType {
          get { if ((_hasBits0 & 2) != 0) { return metricValueType_; } else { return MetricValueTypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            metricValueType_ = value;
          }
        }
        /// <summary>Gets whether the "metric_value_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMetricValueType {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "metric_value_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMetricValueType() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Sort);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Sort other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Field, other.Field)) return false;
          if (Descending != other.Descending) return false;
          if (!object.Equals(Slice, other.Slice)) return false;
          if (TimePeriodIndex != other.TimePeriodIndex) return false;
          if (MetricValueType != other.MetricValueType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (field_ != null) hash ^= Field.GetHashCode();
          if (Descending != false) hash ^= Descending.GetHashCode();
          if (slice_ != null) hash ^= Slice.GetHashCode();
          if (HasTimePeriodIndex) hash ^= TimePeriodIndex.GetHashCode();
          if (HasMetricValueType) hash ^= MetricValueType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
          if (Descending != false) {
            output.WriteRawTag(16);
            output.WriteBool(Descending);
          }
          if (slice_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Slice);
          }
          if (HasTimePeriodIndex) {
            output.WriteRawTag(32);
            output.WriteInt32(TimePeriodIndex);
          }
          if (HasMetricValueType) {
            output.WriteRawTag(40);
            output.WriteEnum((int) MetricValueType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (field_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Field);
          }
          if (Descending != false) {
            output.WriteRawTag(16);
            output.WriteBool(Descending);
          }
          if (slice_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Slice);
          }
          if (HasTimePeriodIndex) {
            output.WriteRawTag(32);
            output.WriteInt32(TimePeriodIndex);
          }
          if (HasMetricValueType) {
            output.WriteRawTag(40);
            output.WriteEnum((int) MetricValueType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (field_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
          }
          if (Descending != false) {
            size += 1 + 1;
          }
          if (slice_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Slice);
          }
          if (HasTimePeriodIndex) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimePeriodIndex);
          }
          if (HasMetricValueType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MetricValueType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Sort other) {
          if (other == null) {
            return;
          }
          if (other.field_ != null) {
            if (field_ == null) {
              Field = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field();
            }
            Field.MergeFrom(other.Field);
          }
          if (other.Descending != false) {
            Descending = other.Descending;
          }
          if (other.slice_ != null) {
            if (slice_ == null) {
              Slice = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice();
            }
            Slice.MergeFrom(other.Slice);
          }
          if (other.HasTimePeriodIndex) {
            TimePeriodIndex = other.TimePeriodIndex;
          }
          if (other.HasMetricValueType) {
            MetricValueType = other.MetricValueType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (field_ == null) {
                  Field = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field();
                }
                input.ReadMessage(Field);
                break;
              }
              case 16: {
                Descending = input.ReadBool();
                break;
              }
              case 26: {
                if (slice_ == null) {
                  Slice = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice();
                }
                input.ReadMessage(Slice);
                break;
              }
              case 32: {
                TimePeriodIndex = input.ReadInt32();
                break;
              }
              case 40: {
                MetricValueType = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (field_ == null) {
                  Field = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Field();
                }
                input.ReadMessage(Field);
                break;
              }
              case 16: {
                Descending = input.ReadBool();
                break;
              }
              case 26: {
                if (slice_ == null) {
                  Slice = new global::Google.Ads.AdManager.V1.ReportDefinition.Types.Slice();
                }
                input.ReadMessage(Slice);
                break;
              }
              case 32: {
                TimePeriodIndex = input.ReadInt32();
                break;
              }
              case 40: {
                MetricValueType = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.MetricValueType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Use to specify a slice of data.
      ///
      /// For example, in a report, to focus on just data from the US, specify
      /// `COUNTRY_NAME` for dimension and value: `"United States"`.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Slice : pb::IMessage<Slice>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Slice> _parser = new pb::MessageParser<Slice>(() => new Slice());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Slice> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.AdManager.V1.ReportDefinition.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Slice() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Slice(Slice other) : this() {
          dimension_ = other.dimension_;
          value_ = other.value_ != null ? other.value_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Slice Clone() {
          return new Slice(this);
        }

        /// <summary>Field number for the "dimension" field.</summary>
        public const int DimensionFieldNumber = 1;
        private global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension dimension_ = global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension.Unspecified;
        /// <summary>
        /// Required. The dimension to slice on.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension Dimension {
          get { return dimension_; }
          set {
            dimension_ = value;
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private global::Google.Ads.AdManager.V1.ReportValue value_;
        /// <summary>
        /// Required. The value of the dimension.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Ads.AdManager.V1.ReportValue Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Slice);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Slice other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Dimension != other.Dimension) return false;
          if (!object.Equals(Value, other.Value)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Dimension != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension.Unspecified) hash ^= Dimension.GetHashCode();
          if (value_ != null) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Dimension != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Dimension);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Dimension != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Dimension);
          }
          if (value_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Dimension != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dimension);
          }
          if (value_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Slice other) {
          if (other == null) {
            return;
          }
          if (other.Dimension != global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension.Unspecified) {
            Dimension = other.Dimension;
          }
          if (other.value_ != null) {
            if (value_ == null) {
              Value = new global::Google.Ads.AdManager.V1.ReportValue();
            }
            Value.MergeFrom(other.Value);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Dimension = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension) input.ReadEnum();
                break;
              }
              case 18: {
                if (value_ == null) {
                  Value = new global::Google.Ads.AdManager.V1.ReportValue();
                }
                input.ReadMessage(Value);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Dimension = (global::Google.Ads.AdManager.V1.ReportDefinition.Types.Dimension) input.ReadEnum();
                break;
              }
              case 18: {
                if (value_ == null) {
                  Value = new global::Google.Ads.AdManager.V1.ReportValue();
                }
                input.ReadMessage(Value);
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// A flag for a report. Flags are used show if certain thresholds are met.
      /// Result rows that match the filter will have the corresponding
      /// [MetricValueGroup.flagValues][MetricValueGroup] index set to true.
      /// For more information about flags see:
      /// https://support.google.com/admanager/answer/15079975
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Flag : pb::IMessage<Flag>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Flag> _parser = new pb::MessageParser<Flag>(() => new Flag());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Flag> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Ads.AdManager.V1.ReportDefinition.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Flag() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Flag(Flag other) : this() {
          filters_ = other.filters_.Clone();
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Flag Clone() {
          return new Flag(this);
        }

        /// <summary>Field number for the "filters" field.</summary>
        public const int FiltersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> _repeated_filters_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter.Parser);
        private readonly pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> filters_ = new pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter>();
        /// <summary>
        /// Required. Filters to apply for the flag.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Google.Ads.AdManager.V1.ReportDefinition.Types.Filter> Filters {
          get { return filters_; }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private string name_ = "";
        /// <summary>
        /// Optional. Name of the flag.
        /// The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
        /// the colored flags that appear in the UI. The UI won't display flags
        /// with other names, but they are available for use by API clients.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Flag);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Flag other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!filters_.Equals(other.filters_)) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= filters_.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          filters_.WriteTo(output, _repeated_filters_codec);
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          filters_.WriteTo(ref output, _repeated_filters_codec);
          if (Name.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += filters_.CalculateSize(_repeated_filters_codec);
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Flag other) {
          if (other == null) {
            return;
          }
          filters_.Add(other.filters_);
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                filters_.AddEntriesFrom(input, _repeated_filters_codec);
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                filters_.AddEntriesFrom(ref input, _repeated_filters_codec);
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
