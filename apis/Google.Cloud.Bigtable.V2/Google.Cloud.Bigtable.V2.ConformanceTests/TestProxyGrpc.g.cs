// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: test_proxy.proto
// </auto-generated>
// Original file comments:
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy {
  /// <summary>
  /// Note that all RPCs are unary, even when the equivalent client binding call
  /// may be streaming. This is an intentional simplification.
  ///
  /// Most methods have sync (default) and async variants. For async variants,
  /// the proxy is expected to perform the async operation, then wait for results
  /// before delivering them back to the driver client.
  ///
  /// Operations that may have interesting concurrency characteristics are
  /// represented explicitly in the API (see ReadRowsRequest.cancel_after_rows).
  /// We include such operations only when they can be meaningfully performed
  /// through client bindings.
  ///
  /// Users should generally avoid setting deadlines for requests to the Proxy
  /// because operations are not cancelable. If the deadline is set anyway, please
  /// understand that the underlying operation will continue to be executed even
  /// after the deadline expires.
  /// </summary>
  public static partial class CloudBigtableV2TestProxy
  {
    static readonly string __ServiceName = "google.bigtable.testproxy.CloudBigtableV2TestProxy";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest> __Marshaller_google_bigtable_testproxy_CreateClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse> __Marshaller_google_bigtable_testproxy_CreateClientResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest> __Marshaller_google_bigtable_testproxy_CloseClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse> __Marshaller_google_bigtable_testproxy_CloseClientResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest> __Marshaller_google_bigtable_testproxy_RemoveClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse> __Marshaller_google_bigtable_testproxy_RemoveClientResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest> __Marshaller_google_bigtable_testproxy_ReadRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> __Marshaller_google_bigtable_testproxy_RowResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest> __Marshaller_google_bigtable_testproxy_ReadRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult> __Marshaller_google_bigtable_testproxy_RowsResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest> __Marshaller_google_bigtable_testproxy_MutateRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult> __Marshaller_google_bigtable_testproxy_MutateRowResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest> __Marshaller_google_bigtable_testproxy_MutateRowsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult> __Marshaller_google_bigtable_testproxy_MutateRowsResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest> __Marshaller_google_bigtable_testproxy_CheckAndMutateRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult> __Marshaller_google_bigtable_testproxy_CheckAndMutateRowResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest> __Marshaller_google_bigtable_testproxy_SampleRowKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult> __Marshaller_google_bigtable_testproxy_SampleRowKeysResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest> __Marshaller_google_bigtable_testproxy_ReadModifyWriteRowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest> __Marshaller_google_bigtable_testproxy_ExecuteQueryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult> __Marshaller_google_bigtable_testproxy_ExecuteQueryResult = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse> __Method_CreateClient = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateClient",
        __Marshaller_google_bigtable_testproxy_CreateClientRequest,
        __Marshaller_google_bigtable_testproxy_CreateClientResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse> __Method_CloseClient = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CloseClient",
        __Marshaller_google_bigtable_testproxy_CloseClientRequest,
        __Marshaller_google_bigtable_testproxy_CloseClientResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse> __Method_RemoveClient = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveClient",
        __Marshaller_google_bigtable_testproxy_RemoveClientRequest,
        __Marshaller_google_bigtable_testproxy_RemoveClientResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> __Method_ReadRow = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadRow",
        __Marshaller_google_bigtable_testproxy_ReadRowRequest,
        __Marshaller_google_bigtable_testproxy_RowResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult> __Method_ReadRows = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadRows",
        __Marshaller_google_bigtable_testproxy_ReadRowsRequest,
        __Marshaller_google_bigtable_testproxy_RowsResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult> __Method_MutateRow = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MutateRow",
        __Marshaller_google_bigtable_testproxy_MutateRowRequest,
        __Marshaller_google_bigtable_testproxy_MutateRowResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult> __Method_BulkMutateRows = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BulkMutateRows",
        __Marshaller_google_bigtable_testproxy_MutateRowsRequest,
        __Marshaller_google_bigtable_testproxy_MutateRowsResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult> __Method_CheckAndMutateRow = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckAndMutateRow",
        __Marshaller_google_bigtable_testproxy_CheckAndMutateRowRequest,
        __Marshaller_google_bigtable_testproxy_CheckAndMutateRowResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult> __Method_SampleRowKeys = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SampleRowKeys",
        __Marshaller_google_bigtable_testproxy_SampleRowKeysRequest,
        __Marshaller_google_bigtable_testproxy_SampleRowKeysResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> __Method_ReadModifyWriteRow = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReadModifyWriteRow",
        __Marshaller_google_bigtable_testproxy_ReadModifyWriteRowRequest,
        __Marshaller_google_bigtable_testproxy_RowResult);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult> __Method_ExecuteQuery = new grpc::Method<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExecuteQuery",
        __Marshaller_google_bigtable_testproxy_ExecuteQueryRequest,
        __Marshaller_google_bigtable_testproxy_ExecuteQueryResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.TestProxyReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CloudBigtableV2TestProxy</summary>
    [grpc::BindServiceMethod(typeof(CloudBigtableV2TestProxy), "BindService")]
    public abstract partial class CloudBigtableV2TestProxyBase
    {
      /// <summary>
      /// Client management:
      ///
      /// Creates a client in the proxy.
      /// Each client has its own dedicated channel(s), and can be used concurrently
      /// and independently with other clients.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse> CreateClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Closes a client in the proxy, making it not accept new requests.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse> CloseClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a client in the proxy, making it inaccessible. Client closing
      /// should be done by CloseClient() separately.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse> RemoveClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Bigtable operations: for each operation, you should use the synchronous or
      /// asynchronous variant of the client method based on the `use_async_method`
      /// setting of the client instance. For starters, you can choose to implement
      /// one variant, and return UNIMPLEMENTED status for the other.
      ///
      /// Reads a row with the client instance.
      /// The result row may not be present in the response.
      /// Callers should check for it (e.g. calling has_row() in C++).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> ReadRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reads rows with the client instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult> ReadRows(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Writes a row with the client instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult> MutateRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Writes multiple rows with the client instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult> BulkMutateRows(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Performs a check-and-mutate-row operation with the client instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult> CheckAndMutateRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains a row key sampling with the client instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult> SampleRowKeys(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Performs a read-modify-write operation with the client.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> ReadModifyWriteRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Executes a BTQL query with the client.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult> ExecuteQuery(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CloudBigtableV2TestProxy</summary>
    public partial class CloudBigtableV2TestProxyClient : grpc::ClientBase<CloudBigtableV2TestProxyClient>
    {
      /// <summary>Creates a new client for CloudBigtableV2TestProxy</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudBigtableV2TestProxyClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CloudBigtableV2TestProxy that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CloudBigtableV2TestProxyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudBigtableV2TestProxyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CloudBigtableV2TestProxyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Client management:
      ///
      /// Creates a client in the proxy.
      /// Each client has its own dedicated channel(s), and can be used concurrently
      /// and independently with other clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse CreateClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Client management:
      ///
      /// Creates a client in the proxy.
      /// Each client has its own dedicated channel(s), and can be used concurrently
      /// and independently with other clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse CreateClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateClient, null, options, request);
      }
      /// <summary>
      /// Client management:
      ///
      /// Creates a client in the proxy.
      /// Each client has its own dedicated channel(s), and can be used concurrently
      /// and independently with other clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse> CreateClientAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Client management:
      ///
      /// Creates a client in the proxy.
      /// Each client has its own dedicated channel(s), and can be used concurrently
      /// and independently with other clients.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse> CreateClientAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateClient, null, options, request);
      }
      /// <summary>
      /// Closes a client in the proxy, making it not accept new requests.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse CloseClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Closes a client in the proxy, making it not accept new requests.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse CloseClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseClient, null, options, request);
      }
      /// <summary>
      /// Closes a client in the proxy, making it not accept new requests.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse> CloseClientAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Closes a client in the proxy, making it not accept new requests.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse> CloseClientAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseClient, null, options, request);
      }
      /// <summary>
      /// Removes a client in the proxy, making it inaccessible. Client closing
      /// should be done by CloseClient() separately.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse RemoveClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a client in the proxy, making it inaccessible. Client closing
      /// should be done by CloseClient() separately.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse RemoveClient(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveClient, null, options, request);
      }
      /// <summary>
      /// Removes a client in the proxy, making it inaccessible. Client closing
      /// should be done by CloseClient() separately.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse> RemoveClientAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a client in the proxy, making it inaccessible. Client closing
      /// should be done by CloseClient() separately.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse> RemoveClientAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveClient, null, options, request);
      }
      /// <summary>
      /// Bigtable operations: for each operation, you should use the synchronous or
      /// asynchronous variant of the client method based on the `use_async_method`
      /// setting of the client instance. For starters, you can choose to implement
      /// one variant, and return UNIMPLEMENTED status for the other.
      ///
      /// Reads a row with the client instance.
      /// The result row may not be present in the response.
      /// Callers should check for it (e.g. calling has_row() in C++).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult ReadRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bigtable operations: for each operation, you should use the synchronous or
      /// asynchronous variant of the client method based on the `use_async_method`
      /// setting of the client instance. For starters, you can choose to implement
      /// one variant, and return UNIMPLEMENTED status for the other.
      ///
      /// Reads a row with the client instance.
      /// The result row may not be present in the response.
      /// Callers should check for it (e.g. calling has_row() in C++).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult ReadRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadRow, null, options, request);
      }
      /// <summary>
      /// Bigtable operations: for each operation, you should use the synchronous or
      /// asynchronous variant of the client method based on the `use_async_method`
      /// setting of the client instance. For starters, you can choose to implement
      /// one variant, and return UNIMPLEMENTED status for the other.
      ///
      /// Reads a row with the client instance.
      /// The result row may not be present in the response.
      /// Callers should check for it (e.g. calling has_row() in C++).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> ReadRowAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Bigtable operations: for each operation, you should use the synchronous or
      /// asynchronous variant of the client method based on the `use_async_method`
      /// setting of the client instance. For starters, you can choose to implement
      /// one variant, and return UNIMPLEMENTED status for the other.
      ///
      /// Reads a row with the client instance.
      /// The result row may not be present in the response.
      /// Callers should check for it (e.g. calling has_row() in C++).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> ReadRowAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadRow, null, options, request);
      }
      /// <summary>
      /// Reads rows with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult ReadRows(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads rows with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult ReadRows(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadRows, null, options, request);
      }
      /// <summary>
      /// Reads rows with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult> ReadRowsAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadRowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reads rows with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult> ReadRowsAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadRows, null, options, request);
      }
      /// <summary>
      /// Writes a row with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult MutateRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Writes a row with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult MutateRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MutateRow, null, options, request);
      }
      /// <summary>
      /// Writes a row with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult> MutateRowAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MutateRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Writes a row with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult> MutateRowAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MutateRow, null, options, request);
      }
      /// <summary>
      /// Writes multiple rows with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult BulkMutateRows(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkMutateRows(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Writes multiple rows with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult BulkMutateRows(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BulkMutateRows, null, options, request);
      }
      /// <summary>
      /// Writes multiple rows with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult> BulkMutateRowsAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkMutateRowsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Writes multiple rows with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult> BulkMutateRowsAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BulkMutateRows, null, options, request);
      }
      /// <summary>
      /// Performs a check-and-mutate-row operation with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult CheckAndMutateRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckAndMutateRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a check-and-mutate-row operation with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult CheckAndMutateRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckAndMutateRow, null, options, request);
      }
      /// <summary>
      /// Performs a check-and-mutate-row operation with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult> CheckAndMutateRowAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckAndMutateRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a check-and-mutate-row operation with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult> CheckAndMutateRowAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckAndMutateRow, null, options, request);
      }
      /// <summary>
      /// Obtains a row key sampling with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult SampleRowKeys(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SampleRowKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a row key sampling with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult SampleRowKeys(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SampleRowKeys, null, options, request);
      }
      /// <summary>
      /// Obtains a row key sampling with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult> SampleRowKeysAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SampleRowKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains a row key sampling with the client instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult> SampleRowKeysAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SampleRowKeys, null, options, request);
      }
      /// <summary>
      /// Performs a read-modify-write operation with the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult ReadModifyWriteRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadModifyWriteRow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a read-modify-write operation with the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult ReadModifyWriteRow(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReadModifyWriteRow, null, options, request);
      }
      /// <summary>
      /// Performs a read-modify-write operation with the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> ReadModifyWriteRowAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadModifyWriteRowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a read-modify-write operation with the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult> ReadModifyWriteRowAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReadModifyWriteRow, null, options, request);
      }
      /// <summary>
      /// Executes a BTQL query with the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult ExecuteQuery(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes a BTQL query with the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult ExecuteQuery(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExecuteQuery, null, options, request);
      }
      /// <summary>
      /// Executes a BTQL query with the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult> ExecuteQueryAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecuteQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Executes a BTQL query with the client.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult> ExecuteQueryAsync(global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExecuteQuery, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CloudBigtableV2TestProxyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CloudBigtableV2TestProxyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(CloudBigtableV2TestProxyBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateClient, serviceImpl.CreateClient)
          .AddMethod(__Method_CloseClient, serviceImpl.CloseClient)
          .AddMethod(__Method_RemoveClient, serviceImpl.RemoveClient)
          .AddMethod(__Method_ReadRow, serviceImpl.ReadRow)
          .AddMethod(__Method_ReadRows, serviceImpl.ReadRows)
          .AddMethod(__Method_MutateRow, serviceImpl.MutateRow)
          .AddMethod(__Method_BulkMutateRows, serviceImpl.BulkMutateRows)
          .AddMethod(__Method_CheckAndMutateRow, serviceImpl.CheckAndMutateRow)
          .AddMethod(__Method_SampleRowKeys, serviceImpl.SampleRowKeys)
          .AddMethod(__Method_ReadModifyWriteRow, serviceImpl.ReadModifyWriteRow)
          .AddMethod(__Method_ExecuteQuery, serviceImpl.ExecuteQuery).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CloudBigtableV2TestProxyBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CreateClientResponse>(serviceImpl.CreateClient));
      serviceBinder.AddMethod(__Method_CloseClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CloseClientResponse>(serviceImpl.CloseClient));
      serviceBinder.AddMethod(__Method_RemoveClient, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RemoveClientResponse>(serviceImpl.RemoveClient));
      serviceBinder.AddMethod(__Method_ReadRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult>(serviceImpl.ReadRow));
      serviceBinder.AddMethod(__Method_ReadRows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadRowsRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowsResult>(serviceImpl.ReadRows));
      serviceBinder.AddMethod(__Method_MutateRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowResult>(serviceImpl.MutateRow));
      serviceBinder.AddMethod(__Method_BulkMutateRows, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.MutateRowsResult>(serviceImpl.BulkMutateRows));
      serviceBinder.AddMethod(__Method_CheckAndMutateRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.CheckAndMutateRowResult>(serviceImpl.CheckAndMutateRow));
      serviceBinder.AddMethod(__Method_SampleRowKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.SampleRowKeysResult>(serviceImpl.SampleRowKeys));
      serviceBinder.AddMethod(__Method_ReadModifyWriteRow, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ReadModifyWriteRowRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.RowResult>(serviceImpl.ReadModifyWriteRow));
      serviceBinder.AddMethod(__Method_ExecuteQuery, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryRequest, global::Google.Cloud.Bigtable.V2.ConformanceTests.TestProxy.ExecuteQueryResult>(serviceImpl.ExecuteQuery));
    }

  }
}
#endregion
