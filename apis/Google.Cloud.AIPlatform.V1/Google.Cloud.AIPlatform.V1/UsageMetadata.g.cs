// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/aiplatform/v1/usage_metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.AIPlatform.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/aiplatform/v1/usage_metadata.proto</summary>
  public static partial class UsageMetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/aiplatform/v1/usage_metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UsageMetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9nb29nbGUvY2xvdWQvYWlwbGF0Zm9ybS92MS91c2FnZV9tZXRhZGF0YS5w",
            "cm90bxIaZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEaH2dvb2dsZS9hcGkv",
            "ZmllbGRfYmVoYXZpb3IucHJvdG8aKGdvb2dsZS9jbG91ZC9haXBsYXRmb3Jt",
            "L3YxL2NvbnRlbnQucHJvdG8i4gUKDVVzYWdlTWV0YWRhdGESGgoScHJvbXB0",
            "X3Rva2VuX2NvdW50GAEgASgFEh4KFmNhbmRpZGF0ZXNfdG9rZW5fY291bnQY",
            "AiABKAUSGQoRdG90YWxfdG9rZW5fY291bnQYAyABKAUSKAobdG9vbF91c2Vf",
            "cHJvbXB0X3Rva2VuX2NvdW50GA0gASgFQgPgQQMSIQoUdGhvdWdodHNfdG9r",
            "ZW5fY291bnQYDiABKAVCA+BBAxInChpjYWNoZWRfY29udGVudF90b2tlbl9j",
            "b3VudBgFIAEoBUID4EEDElIKFXByb21wdF90b2tlbnNfZGV0YWlscxgJIAMo",
            "CzIuLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLk1vZGFsaXR5VG9rZW5D",
            "b3VudEID4EEDElEKFGNhY2hlX3Rva2Vuc19kZXRhaWxzGAogAygLMi4uZ29v",
            "Z2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTW9kYWxpdHlUb2tlbkNvdW50QgPg",
            "QQMSVgoZY2FuZGlkYXRlc190b2tlbnNfZGV0YWlscxgLIAMoCzIuLmdvb2ds",
            "ZS5jbG91ZC5haXBsYXRmb3JtLnYxLk1vZGFsaXR5VG9rZW5Db3VudEID4EED",
            "ElsKHnRvb2xfdXNlX3Byb21wdF90b2tlbnNfZGV0YWlscxgMIAMoCzIuLmdv",
            "b2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLk1vZGFsaXR5VG9rZW5Db3VudEID",
            "4EEDElAKDHRyYWZmaWNfdHlwZRgIIAEoDjI1Lmdvb2dsZS5jbG91ZC5haXBs",
            "YXRmb3JtLnYxLlVzYWdlTWV0YWRhdGEuVHJhZmZpY1R5cGVCA+BBAyJWCgtU",
            "cmFmZmljVHlwZRIcChhUUkFGRklDX1RZUEVfVU5TUEVDSUZJRUQQABINCglP",
            "Tl9ERU1BTkQQARIaChZQUk9WSVNJT05FRF9USFJPVUdIUFVUEAJC0AEKHmNv",
            "bS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MUISVXNhZ2VNZXRhZGF0YVBy",
            "b3RvUAFaPmNsb3VkLmdvb2dsZS5jb20vZ28vYWlwbGF0Zm9ybS9hcGl2MS9h",
            "aXBsYXRmb3JtcGI7YWlwbGF0Zm9ybXBiqgIaR29vZ2xlLkNsb3VkLkFJUGxh",
            "dGZvcm0uVjHKAhpHb29nbGVcQ2xvdWRcQUlQbGF0Zm9ybVxWMeoCHUdvb2ds",
            "ZTo6Q2xvdWQ6OkFJUGxhdGZvcm06OlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Cloud.AIPlatform.V1.ContentReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.AIPlatform.V1.UsageMetadata), global::Google.Cloud.AIPlatform.V1.UsageMetadata.Parser, new[]{ "PromptTokenCount", "CandidatesTokenCount", "TotalTokenCount", "ToolUsePromptTokenCount", "ThoughtsTokenCount", "CachedContentTokenCount", "PromptTokensDetails", "CacheTokensDetails", "CandidatesTokensDetails", "ToolUsePromptTokensDetails", "TrafficType" }, null, new[]{ typeof(global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Usage metadata about the content generation request and response.
  /// This message provides a detailed breakdown of token usage and other
  /// relevant metrics.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UsageMetadata : pb::IMessage<UsageMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UsageMetadata> _parser = new pb::MessageParser<UsageMetadata>(() => new UsageMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UsageMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.AIPlatform.V1.UsageMetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UsageMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UsageMetadata(UsageMetadata other) : this() {
      promptTokenCount_ = other.promptTokenCount_;
      candidatesTokenCount_ = other.candidatesTokenCount_;
      totalTokenCount_ = other.totalTokenCount_;
      toolUsePromptTokenCount_ = other.toolUsePromptTokenCount_;
      thoughtsTokenCount_ = other.thoughtsTokenCount_;
      cachedContentTokenCount_ = other.cachedContentTokenCount_;
      promptTokensDetails_ = other.promptTokensDetails_.Clone();
      cacheTokensDetails_ = other.cacheTokensDetails_.Clone();
      candidatesTokensDetails_ = other.candidatesTokensDetails_.Clone();
      toolUsePromptTokensDetails_ = other.toolUsePromptTokensDetails_.Clone();
      trafficType_ = other.trafficType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UsageMetadata Clone() {
      return new UsageMetadata(this);
    }

    /// <summary>Field number for the "prompt_token_count" field.</summary>
    public const int PromptTokenCountFieldNumber = 1;
    private int promptTokenCount_;
    /// <summary>
    /// The total number of tokens in the prompt. This includes any text, images,
    /// or other media provided in the request. When `cached_content` is set,
    /// this also includes the number of tokens in the cached content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PromptTokenCount {
      get { return promptTokenCount_; }
      set {
        promptTokenCount_ = value;
      }
    }

    /// <summary>Field number for the "candidates_token_count" field.</summary>
    public const int CandidatesTokenCountFieldNumber = 2;
    private int candidatesTokenCount_;
    /// <summary>
    /// The total number of tokens in the generated candidates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CandidatesTokenCount {
      get { return candidatesTokenCount_; }
      set {
        candidatesTokenCount_ = value;
      }
    }

    /// <summary>Field number for the "total_token_count" field.</summary>
    public const int TotalTokenCountFieldNumber = 3;
    private int totalTokenCount_;
    /// <summary>
    /// The total number of tokens for the entire request. This is the sum of
    /// `prompt_token_count`, `candidates_token_count`,
    /// `tool_use_prompt_token_count`, and `thoughts_token_count`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalTokenCount {
      get { return totalTokenCount_; }
      set {
        totalTokenCount_ = value;
      }
    }

    /// <summary>Field number for the "tool_use_prompt_token_count" field.</summary>
    public const int ToolUsePromptTokenCountFieldNumber = 13;
    private int toolUsePromptTokenCount_;
    /// <summary>
    /// Output only. The number of tokens in the results from tool executions,
    /// which are provided back to the model as input, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToolUsePromptTokenCount {
      get { return toolUsePromptTokenCount_; }
      set {
        toolUsePromptTokenCount_ = value;
      }
    }

    /// <summary>Field number for the "thoughts_token_count" field.</summary>
    public const int ThoughtsTokenCountFieldNumber = 14;
    private int thoughtsTokenCount_;
    /// <summary>
    /// Output only. The number of tokens that were part of the model's generated
    /// "thoughts" output, if applicable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThoughtsTokenCount {
      get { return thoughtsTokenCount_; }
      set {
        thoughtsTokenCount_ = value;
      }
    }

    /// <summary>Field number for the "cached_content_token_count" field.</summary>
    public const int CachedContentTokenCountFieldNumber = 5;
    private int cachedContentTokenCount_;
    /// <summary>
    /// Output only. The number of tokens in the cached content that was used for
    /// this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CachedContentTokenCount {
      get { return cachedContentTokenCount_; }
      set {
        cachedContentTokenCount_ = value;
      }
    }

    /// <summary>Field number for the "prompt_tokens_details" field.</summary>
    public const int PromptTokensDetailsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> _repeated_promptTokensDetails_codec
        = pb::FieldCodec.ForMessage(74, global::Google.Cloud.AIPlatform.V1.ModalityTokenCount.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> promptTokensDetails_ = new pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount>();
    /// <summary>
    /// Output only. A detailed breakdown of the token count for each modality in
    /// the prompt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> PromptTokensDetails {
      get { return promptTokensDetails_; }
    }

    /// <summary>Field number for the "cache_tokens_details" field.</summary>
    public const int CacheTokensDetailsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> _repeated_cacheTokensDetails_codec
        = pb::FieldCodec.ForMessage(82, global::Google.Cloud.AIPlatform.V1.ModalityTokenCount.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> cacheTokensDetails_ = new pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount>();
    /// <summary>
    /// Output only. A detailed breakdown of the token count for each modality in
    /// the cached content.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> CacheTokensDetails {
      get { return cacheTokensDetails_; }
    }

    /// <summary>Field number for the "candidates_tokens_details" field.</summary>
    public const int CandidatesTokensDetailsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> _repeated_candidatesTokensDetails_codec
        = pb::FieldCodec.ForMessage(90, global::Google.Cloud.AIPlatform.V1.ModalityTokenCount.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> candidatesTokensDetails_ = new pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount>();
    /// <summary>
    /// Output only. A detailed breakdown of the token count for each modality in
    /// the generated candidates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> CandidatesTokensDetails {
      get { return candidatesTokensDetails_; }
    }

    /// <summary>Field number for the "tool_use_prompt_tokens_details" field.</summary>
    public const int ToolUsePromptTokensDetailsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> _repeated_toolUsePromptTokensDetails_codec
        = pb::FieldCodec.ForMessage(98, global::Google.Cloud.AIPlatform.V1.ModalityTokenCount.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> toolUsePromptTokensDetails_ = new pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount>();
    /// <summary>
    /// Output only. A detailed breakdown by modality of the token counts from the
    /// results of tool executions, which are provided back to the model as input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.AIPlatform.V1.ModalityTokenCount> ToolUsePromptTokensDetails {
      get { return toolUsePromptTokensDetails_; }
    }

    /// <summary>Field number for the "traffic_type" field.</summary>
    public const int TrafficTypeFieldNumber = 8;
    private global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType trafficType_ = global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType.Unspecified;
    /// <summary>
    /// Output only. The traffic type for this request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType TrafficType {
      get { return trafficType_; }
      set {
        trafficType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UsageMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UsageMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PromptTokenCount != other.PromptTokenCount) return false;
      if (CandidatesTokenCount != other.CandidatesTokenCount) return false;
      if (TotalTokenCount != other.TotalTokenCount) return false;
      if (ToolUsePromptTokenCount != other.ToolUsePromptTokenCount) return false;
      if (ThoughtsTokenCount != other.ThoughtsTokenCount) return false;
      if (CachedContentTokenCount != other.CachedContentTokenCount) return false;
      if(!promptTokensDetails_.Equals(other.promptTokensDetails_)) return false;
      if(!cacheTokensDetails_.Equals(other.cacheTokensDetails_)) return false;
      if(!candidatesTokensDetails_.Equals(other.candidatesTokensDetails_)) return false;
      if(!toolUsePromptTokensDetails_.Equals(other.toolUsePromptTokensDetails_)) return false;
      if (TrafficType != other.TrafficType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PromptTokenCount != 0) hash ^= PromptTokenCount.GetHashCode();
      if (CandidatesTokenCount != 0) hash ^= CandidatesTokenCount.GetHashCode();
      if (TotalTokenCount != 0) hash ^= TotalTokenCount.GetHashCode();
      if (ToolUsePromptTokenCount != 0) hash ^= ToolUsePromptTokenCount.GetHashCode();
      if (ThoughtsTokenCount != 0) hash ^= ThoughtsTokenCount.GetHashCode();
      if (CachedContentTokenCount != 0) hash ^= CachedContentTokenCount.GetHashCode();
      hash ^= promptTokensDetails_.GetHashCode();
      hash ^= cacheTokensDetails_.GetHashCode();
      hash ^= candidatesTokensDetails_.GetHashCode();
      hash ^= toolUsePromptTokensDetails_.GetHashCode();
      if (TrafficType != global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType.Unspecified) hash ^= TrafficType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PromptTokenCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PromptTokenCount);
      }
      if (CandidatesTokenCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CandidatesTokenCount);
      }
      if (TotalTokenCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalTokenCount);
      }
      if (CachedContentTokenCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CachedContentTokenCount);
      }
      if (TrafficType != global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) TrafficType);
      }
      promptTokensDetails_.WriteTo(output, _repeated_promptTokensDetails_codec);
      cacheTokensDetails_.WriteTo(output, _repeated_cacheTokensDetails_codec);
      candidatesTokensDetails_.WriteTo(output, _repeated_candidatesTokensDetails_codec);
      toolUsePromptTokensDetails_.WriteTo(output, _repeated_toolUsePromptTokensDetails_codec);
      if (ToolUsePromptTokenCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ToolUsePromptTokenCount);
      }
      if (ThoughtsTokenCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ThoughtsTokenCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PromptTokenCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PromptTokenCount);
      }
      if (CandidatesTokenCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CandidatesTokenCount);
      }
      if (TotalTokenCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalTokenCount);
      }
      if (CachedContentTokenCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CachedContentTokenCount);
      }
      if (TrafficType != global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) TrafficType);
      }
      promptTokensDetails_.WriteTo(ref output, _repeated_promptTokensDetails_codec);
      cacheTokensDetails_.WriteTo(ref output, _repeated_cacheTokensDetails_codec);
      candidatesTokensDetails_.WriteTo(ref output, _repeated_candidatesTokensDetails_codec);
      toolUsePromptTokensDetails_.WriteTo(ref output, _repeated_toolUsePromptTokensDetails_codec);
      if (ToolUsePromptTokenCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ToolUsePromptTokenCount);
      }
      if (ThoughtsTokenCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ThoughtsTokenCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PromptTokenCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PromptTokenCount);
      }
      if (CandidatesTokenCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CandidatesTokenCount);
      }
      if (TotalTokenCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTokenCount);
      }
      if (ToolUsePromptTokenCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToolUsePromptTokenCount);
      }
      if (ThoughtsTokenCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThoughtsTokenCount);
      }
      if (CachedContentTokenCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CachedContentTokenCount);
      }
      size += promptTokensDetails_.CalculateSize(_repeated_promptTokensDetails_codec);
      size += cacheTokensDetails_.CalculateSize(_repeated_cacheTokensDetails_codec);
      size += candidatesTokensDetails_.CalculateSize(_repeated_candidatesTokensDetails_codec);
      size += toolUsePromptTokensDetails_.CalculateSize(_repeated_toolUsePromptTokensDetails_codec);
      if (TrafficType != global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrafficType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UsageMetadata other) {
      if (other == null) {
        return;
      }
      if (other.PromptTokenCount != 0) {
        PromptTokenCount = other.PromptTokenCount;
      }
      if (other.CandidatesTokenCount != 0) {
        CandidatesTokenCount = other.CandidatesTokenCount;
      }
      if (other.TotalTokenCount != 0) {
        TotalTokenCount = other.TotalTokenCount;
      }
      if (other.ToolUsePromptTokenCount != 0) {
        ToolUsePromptTokenCount = other.ToolUsePromptTokenCount;
      }
      if (other.ThoughtsTokenCount != 0) {
        ThoughtsTokenCount = other.ThoughtsTokenCount;
      }
      if (other.CachedContentTokenCount != 0) {
        CachedContentTokenCount = other.CachedContentTokenCount;
      }
      promptTokensDetails_.Add(other.promptTokensDetails_);
      cacheTokensDetails_.Add(other.cacheTokensDetails_);
      candidatesTokensDetails_.Add(other.candidatesTokensDetails_);
      toolUsePromptTokensDetails_.Add(other.toolUsePromptTokensDetails_);
      if (other.TrafficType != global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType.Unspecified) {
        TrafficType = other.TrafficType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PromptTokenCount = input.ReadInt32();
            break;
          }
          case 16: {
            CandidatesTokenCount = input.ReadInt32();
            break;
          }
          case 24: {
            TotalTokenCount = input.ReadInt32();
            break;
          }
          case 40: {
            CachedContentTokenCount = input.ReadInt32();
            break;
          }
          case 64: {
            TrafficType = (global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType) input.ReadEnum();
            break;
          }
          case 74: {
            promptTokensDetails_.AddEntriesFrom(input, _repeated_promptTokensDetails_codec);
            break;
          }
          case 82: {
            cacheTokensDetails_.AddEntriesFrom(input, _repeated_cacheTokensDetails_codec);
            break;
          }
          case 90: {
            candidatesTokensDetails_.AddEntriesFrom(input, _repeated_candidatesTokensDetails_codec);
            break;
          }
          case 98: {
            toolUsePromptTokensDetails_.AddEntriesFrom(input, _repeated_toolUsePromptTokensDetails_codec);
            break;
          }
          case 104: {
            ToolUsePromptTokenCount = input.ReadInt32();
            break;
          }
          case 112: {
            ThoughtsTokenCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PromptTokenCount = input.ReadInt32();
            break;
          }
          case 16: {
            CandidatesTokenCount = input.ReadInt32();
            break;
          }
          case 24: {
            TotalTokenCount = input.ReadInt32();
            break;
          }
          case 40: {
            CachedContentTokenCount = input.ReadInt32();
            break;
          }
          case 64: {
            TrafficType = (global::Google.Cloud.AIPlatform.V1.UsageMetadata.Types.TrafficType) input.ReadEnum();
            break;
          }
          case 74: {
            promptTokensDetails_.AddEntriesFrom(ref input, _repeated_promptTokensDetails_codec);
            break;
          }
          case 82: {
            cacheTokensDetails_.AddEntriesFrom(ref input, _repeated_cacheTokensDetails_codec);
            break;
          }
          case 90: {
            candidatesTokensDetails_.AddEntriesFrom(ref input, _repeated_candidatesTokensDetails_codec);
            break;
          }
          case 98: {
            toolUsePromptTokensDetails_.AddEntriesFrom(ref input, _repeated_toolUsePromptTokensDetails_codec);
            break;
          }
          case 104: {
            ToolUsePromptTokenCount = input.ReadInt32();
            break;
          }
          case 112: {
            ThoughtsTokenCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the UsageMetadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// The type of traffic that this request was processed with, indicating which
      /// quota gets consumed.
      /// </summary>
      public enum TrafficType {
        /// <summary>
        /// Unspecified request traffic type.
        /// </summary>
        [pbr::OriginalName("TRAFFIC_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Type for Pay-As-You-Go traffic.
        /// </summary>
        [pbr::OriginalName("ON_DEMAND")] OnDemand = 1,
        /// <summary>
        /// Type for Provisioned Throughput traffic.
        /// </summary>
        [pbr::OriginalName("PROVISIONED_THROUGHPUT")] ProvisionedThroughput = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
