// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/managedkafka/v1/managed_kafka_connect.proto
// </auto-generated>
// Original file comments:
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.ManagedKafka.V1 {
  /// <summary>
  /// The service that a client application uses to manage Apache Kafka Connect
  /// clusters and connectors.
  /// </summary>
  public static partial class ManagedKafkaConnect
  {
    static readonly string __ServiceName = "google.cloud.managedkafka.v1.ManagedKafkaConnect";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest> __Marshaller_google_cloud_managedkafka_v1_ListConnectClustersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse> __Marshaller_google_cloud_managedkafka_v1_ListConnectClustersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest> __Marshaller_google_cloud_managedkafka_v1_GetConnectClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.ConnectCluster> __Marshaller_google_cloud_managedkafka_v1_ConnectCluster = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.ConnectCluster.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest> __Marshaller_google_cloud_managedkafka_v1_CreateConnectClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest> __Marshaller_google_cloud_managedkafka_v1_UpdateConnectClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest> __Marshaller_google_cloud_managedkafka_v1_DeleteConnectClusterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest> __Marshaller_google_cloud_managedkafka_v1_ListConnectorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse> __Marshaller_google_cloud_managedkafka_v1_ListConnectorsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest> __Marshaller_google_cloud_managedkafka_v1_GetConnectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.Connector> __Marshaller_google_cloud_managedkafka_v1_Connector = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.Connector.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest> __Marshaller_google_cloud_managedkafka_v1_CreateConnectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest> __Marshaller_google_cloud_managedkafka_v1_UpdateConnectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest> __Marshaller_google_cloud_managedkafka_v1_DeleteConnectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest> __Marshaller_google_cloud_managedkafka_v1_PauseConnectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse> __Marshaller_google_cloud_managedkafka_v1_PauseConnectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest> __Marshaller_google_cloud_managedkafka_v1_ResumeConnectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse> __Marshaller_google_cloud_managedkafka_v1_ResumeConnectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest> __Marshaller_google_cloud_managedkafka_v1_RestartConnectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse> __Marshaller_google_cloud_managedkafka_v1_RestartConnectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest> __Marshaller_google_cloud_managedkafka_v1_StopConnectorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse> __Marshaller_google_cloud_managedkafka_v1_StopConnectorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest, global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse> __Method_ListConnectClusters = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest, global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConnectClusters",
        __Marshaller_google_cloud_managedkafka_v1_ListConnectClustersRequest,
        __Marshaller_google_cloud_managedkafka_v1_ListConnectClustersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest, global::Google.Cloud.ManagedKafka.V1.ConnectCluster> __Method_GetConnectCluster = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest, global::Google.Cloud.ManagedKafka.V1.ConnectCluster>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnectCluster",
        __Marshaller_google_cloud_managedkafka_v1_GetConnectClusterRequest,
        __Marshaller_google_cloud_managedkafka_v1_ConnectCluster);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest, global::Google.LongRunning.Operation> __Method_CreateConnectCluster = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateConnectCluster",
        __Marshaller_google_cloud_managedkafka_v1_CreateConnectClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest, global::Google.LongRunning.Operation> __Method_UpdateConnectCluster = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateConnectCluster",
        __Marshaller_google_cloud_managedkafka_v1_UpdateConnectClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest, global::Google.LongRunning.Operation> __Method_DeleteConnectCluster = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConnectCluster",
        __Marshaller_google_cloud_managedkafka_v1_DeleteConnectClusterRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest, global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse> __Method_ListConnectors = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest, global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListConnectors",
        __Marshaller_google_cloud_managedkafka_v1_ListConnectorsRequest,
        __Marshaller_google_cloud_managedkafka_v1_ListConnectorsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector> __Method_GetConnector = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnector",
        __Marshaller_google_cloud_managedkafka_v1_GetConnectorRequest,
        __Marshaller_google_cloud_managedkafka_v1_Connector);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector> __Method_CreateConnector = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateConnector",
        __Marshaller_google_cloud_managedkafka_v1_CreateConnectorRequest,
        __Marshaller_google_cloud_managedkafka_v1_Connector);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector> __Method_UpdateConnector = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateConnector",
        __Marshaller_google_cloud_managedkafka_v1_UpdateConnectorRequest,
        __Marshaller_google_cloud_managedkafka_v1_Connector);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteConnector = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteConnector",
        __Marshaller_google_cloud_managedkafka_v1_DeleteConnectorRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest, global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse> __Method_PauseConnector = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest, global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PauseConnector",
        __Marshaller_google_cloud_managedkafka_v1_PauseConnectorRequest,
        __Marshaller_google_cloud_managedkafka_v1_PauseConnectorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest, global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse> __Method_ResumeConnector = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest, global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResumeConnector",
        __Marshaller_google_cloud_managedkafka_v1_ResumeConnectorRequest,
        __Marshaller_google_cloud_managedkafka_v1_ResumeConnectorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest, global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse> __Method_RestartConnector = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest, global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestartConnector",
        __Marshaller_google_cloud_managedkafka_v1_RestartConnectorRequest,
        __Marshaller_google_cloud_managedkafka_v1_RestartConnectorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest, global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse> __Method_StopConnector = new grpc::Method<global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest, global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopConnector",
        __Marshaller_google_cloud_managedkafka_v1_StopConnectorRequest,
        __Marshaller_google_cloud_managedkafka_v1_StopConnectorResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.ManagedKafka.V1.ManagedKafkaConnectReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ManagedKafkaConnect</summary>
    [grpc::BindServiceMethod(typeof(ManagedKafkaConnect), "BindService")]
    public abstract partial class ManagedKafkaConnectBase
    {
      /// <summary>
      /// Lists the Kafka Connect clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse> ListConnectClusters(global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.ConnectCluster> GetConnectCluster(global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new Kafka Connect cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateConnectCluster(global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdateConnectCluster(global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a single Connect cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeleteConnectCluster(global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the connectors in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse> ListConnectors(global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the properties of a single connector.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.Connector> GetConnector(global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new connector in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.Connector> CreateConnector(global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the properties of a connector.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.Connector> UpdateConnector(global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a connector.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteConnector(global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Pauses the connector and its tasks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse> PauseConnector(global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resumes the connector and its tasks.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse> ResumeConnector(global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Restarts the connector.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse> RestartConnector(global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stops the connector.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse> StopConnector(global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ManagedKafkaConnect</summary>
    public partial class ManagedKafkaConnectClient : grpc::ClientBase<ManagedKafkaConnectClient>
    {
      /// <summary>Creates a new client for ManagedKafkaConnect</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ManagedKafkaConnectClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ManagedKafkaConnect that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ManagedKafkaConnectClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ManagedKafkaConnectClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ManagedKafkaConnectClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Lists the Kafka Connect clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse ListConnectClusters(global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConnectClusters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Kafka Connect clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse ListConnectClusters(global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConnectClusters, null, options, request);
      }
      /// <summary>
      /// Lists the Kafka Connect clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse> ListConnectClustersAsync(global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConnectClustersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Kafka Connect clusters in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse> ListConnectClustersAsync(global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConnectClusters, null, options, request);
      }
      /// <summary>
      /// Returns the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.ConnectCluster GetConnectCluster(global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.ConnectCluster GetConnectCluster(global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnectCluster, null, options, request);
      }
      /// <summary>
      /// Returns the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.ConnectCluster> GetConnectClusterAsync(global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.ConnectCluster> GetConnectClusterAsync(global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnectCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new Kafka Connect cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateConnectCluster(global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnectCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Kafka Connect cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateConnectCluster(global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateConnectCluster, null, options, request);
      }
      /// <summary>
      /// Creates a new Kafka Connect cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateConnectClusterAsync(global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnectClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Kafka Connect cluster in a given project and location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateConnectClusterAsync(global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateConnectCluster, null, options, request);
      }
      /// <summary>
      /// Updates the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateConnectCluster(global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConnectCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdateConnectCluster(global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateConnectCluster, null, options, request);
      }
      /// <summary>
      /// Updates the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateConnectClusterAsync(global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConnectClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the properties of a single Kafka Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdateConnectClusterAsync(global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateConnectCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a single Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteConnectCluster(global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnectCluster(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeleteConnectCluster(global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConnectCluster, null, options, request);
      }
      /// <summary>
      /// Deletes a single Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteConnectClusterAsync(global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnectClusterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a single Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeleteConnectClusterAsync(global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConnectCluster, null, options, request);
      }
      /// <summary>
      /// Lists the connectors in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse ListConnectors(global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConnectors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the connectors in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse ListConnectors(global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListConnectors, null, options, request);
      }
      /// <summary>
      /// Lists the connectors in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse> ListConnectorsAsync(global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListConnectorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the connectors in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse> ListConnectorsAsync(global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListConnectors, null, options, request);
      }
      /// <summary>
      /// Returns the properties of a single connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.Connector GetConnector(global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the properties of a single connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.Connector GetConnector(global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnector, null, options, request);
      }
      /// <summary>
      /// Returns the properties of a single connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.Connector> GetConnectorAsync(global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the properties of a single connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.Connector> GetConnectorAsync(global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnector, null, options, request);
      }
      /// <summary>
      /// Creates a new connector in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.Connector CreateConnector(global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new connector in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.Connector CreateConnector(global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateConnector, null, options, request);
      }
      /// <summary>
      /// Creates a new connector in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.Connector> CreateConnectorAsync(global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateConnectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new connector in a given Connect cluster.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.Connector> CreateConnectorAsync(global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateConnector, null, options, request);
      }
      /// <summary>
      /// Updates the properties of a connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.Connector UpdateConnector(global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConnector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the properties of a connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.Connector UpdateConnector(global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateConnector, null, options, request);
      }
      /// <summary>
      /// Updates the properties of a connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.Connector> UpdateConnectorAsync(global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateConnectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the properties of a connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.Connector> UpdateConnectorAsync(global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateConnector, null, options, request);
      }
      /// <summary>
      /// Deletes a connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteConnector(global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteConnector(global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteConnector, null, options, request);
      }
      /// <summary>
      /// Deletes a connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteConnectorAsync(global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteConnectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteConnectorAsync(global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteConnector, null, options, request);
      }
      /// <summary>
      /// Pauses the connector and its tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse PauseConnector(global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseConnector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pauses the connector and its tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse PauseConnector(global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PauseConnector, null, options, request);
      }
      /// <summary>
      /// Pauses the connector and its tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse> PauseConnectorAsync(global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseConnectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Pauses the connector and its tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse> PauseConnectorAsync(global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PauseConnector, null, options, request);
      }
      /// <summary>
      /// Resumes the connector and its tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse ResumeConnector(global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResumeConnector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resumes the connector and its tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse ResumeConnector(global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResumeConnector, null, options, request);
      }
      /// <summary>
      /// Resumes the connector and its tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse> ResumeConnectorAsync(global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResumeConnectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resumes the connector and its tasks.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse> ResumeConnectorAsync(global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResumeConnector, null, options, request);
      }
      /// <summary>
      /// Restarts the connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse RestartConnector(global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestartConnector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restarts the connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse RestartConnector(global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestartConnector, null, options, request);
      }
      /// <summary>
      /// Restarts the connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse> RestartConnectorAsync(global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RestartConnectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Restarts the connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse> RestartConnectorAsync(global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestartConnector, null, options, request);
      }
      /// <summary>
      /// Stops the connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse StopConnector(global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopConnector(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops the connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse StopConnector(global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopConnector, null, options, request);
      }
      /// <summary>
      /// Stops the connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse> StopConnectorAsync(global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopConnectorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops the connector.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse> StopConnectorAsync(global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopConnector, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ManagedKafkaConnectClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ManagedKafkaConnectClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ManagedKafkaConnectBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListConnectClusters, serviceImpl.ListConnectClusters)
          .AddMethod(__Method_GetConnectCluster, serviceImpl.GetConnectCluster)
          .AddMethod(__Method_CreateConnectCluster, serviceImpl.CreateConnectCluster)
          .AddMethod(__Method_UpdateConnectCluster, serviceImpl.UpdateConnectCluster)
          .AddMethod(__Method_DeleteConnectCluster, serviceImpl.DeleteConnectCluster)
          .AddMethod(__Method_ListConnectors, serviceImpl.ListConnectors)
          .AddMethod(__Method_GetConnector, serviceImpl.GetConnector)
          .AddMethod(__Method_CreateConnector, serviceImpl.CreateConnector)
          .AddMethod(__Method_UpdateConnector, serviceImpl.UpdateConnector)
          .AddMethod(__Method_DeleteConnector, serviceImpl.DeleteConnector)
          .AddMethod(__Method_PauseConnector, serviceImpl.PauseConnector)
          .AddMethod(__Method_ResumeConnector, serviceImpl.ResumeConnector)
          .AddMethod(__Method_RestartConnector, serviceImpl.RestartConnector)
          .AddMethod(__Method_StopConnector, serviceImpl.StopConnector).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ManagedKafkaConnectBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListConnectClusters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.ListConnectClustersRequest, global::Google.Cloud.ManagedKafka.V1.ListConnectClustersResponse>(serviceImpl.ListConnectClusters));
      serviceBinder.AddMethod(__Method_GetConnectCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.GetConnectClusterRequest, global::Google.Cloud.ManagedKafka.V1.ConnectCluster>(serviceImpl.GetConnectCluster));
      serviceBinder.AddMethod(__Method_CreateConnectCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.CreateConnectClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateConnectCluster));
      serviceBinder.AddMethod(__Method_UpdateConnectCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.UpdateConnectClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdateConnectCluster));
      serviceBinder.AddMethod(__Method_DeleteConnectCluster, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.DeleteConnectClusterRequest, global::Google.LongRunning.Operation>(serviceImpl.DeleteConnectCluster));
      serviceBinder.AddMethod(__Method_ListConnectors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.ListConnectorsRequest, global::Google.Cloud.ManagedKafka.V1.ListConnectorsResponse>(serviceImpl.ListConnectors));
      serviceBinder.AddMethod(__Method_GetConnector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.GetConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector>(serviceImpl.GetConnector));
      serviceBinder.AddMethod(__Method_CreateConnector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.CreateConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector>(serviceImpl.CreateConnector));
      serviceBinder.AddMethod(__Method_UpdateConnector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.UpdateConnectorRequest, global::Google.Cloud.ManagedKafka.V1.Connector>(serviceImpl.UpdateConnector));
      serviceBinder.AddMethod(__Method_DeleteConnector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.DeleteConnectorRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteConnector));
      serviceBinder.AddMethod(__Method_PauseConnector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.PauseConnectorRequest, global::Google.Cloud.ManagedKafka.V1.PauseConnectorResponse>(serviceImpl.PauseConnector));
      serviceBinder.AddMethod(__Method_ResumeConnector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.ResumeConnectorRequest, global::Google.Cloud.ManagedKafka.V1.ResumeConnectorResponse>(serviceImpl.ResumeConnector));
      serviceBinder.AddMethod(__Method_RestartConnector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.RestartConnectorRequest, global::Google.Cloud.ManagedKafka.V1.RestartConnectorResponse>(serviceImpl.RestartConnector));
      serviceBinder.AddMethod(__Method_StopConnector, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.ManagedKafka.V1.StopConnectorRequest, global::Google.Cloud.ManagedKafka.V1.StopConnectorResponse>(serviceImpl.StopConnector));
    }

  }
}
#endregion
