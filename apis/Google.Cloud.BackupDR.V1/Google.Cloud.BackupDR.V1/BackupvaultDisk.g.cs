// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/backupdr/v1/backupvault_disk.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.BackupDR.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/backupdr/v1/backupvault_disk.proto</summary>
  public static partial class BackupvaultDiskReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/backupdr/v1/backupvault_disk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BackupvaultDiskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9nb29nbGUvY2xvdWQvYmFja3VwZHIvdjEvYmFja3VwdmF1bHRfZGlzay5w",
            "cm90bxIYZ29vZ2xlLmNsb3VkLmJhY2t1cGRyLnYxGh9nb29nbGUvYXBpL2Zp",
            "ZWxkX2JlaGF2aW9yLnByb3RvGhlnb29nbGUvYXBpL3Jlc291cmNlLnByb3Rv",
            "Gi5nb29nbGUvY2xvdWQvYmFja3VwZHIvdjEvYmFja3VwdmF1bHRfZ2NlLnBy",
            "b3RvIkAKFURpc2tUYXJnZXRFbnZpcm9ubWVudBIUCgdwcm9qZWN0GAEgASgJ",
            "QgPgQQISEQoEem9uZRgCIAEoCUID4EECImQKG1JlZ2lvbkRpc2tUYXJnZXRF",
            "bnZpcm9ubWVudBIUCgdwcm9qZWN0GAEgASgJQgPgQQISEwoGcmVnaW9uGAIg",
            "ASgJQgPgQQISGgoNcmVwbGljYV96b25lcxgDIAMoCUID4EECIqULChVEaXNr",
            "UmVzdG9yZVByb3BlcnRpZXMSFgoEbmFtZRgBIAEoCUID4EECSACIAQESHQoL",
            "ZGVzY3JpcHRpb24YAiABKAlCA+BBAUgBiAEBEhkKB3NpemVfZ2IYAyABKANC",
            "A+BBAkgCiAEBEhUKCGxpY2Vuc2VzGAQgAygJQgPgQQESRwoQZ3Vlc3Rfb3Nf",
            "ZmVhdHVyZRgFIAMoCzIoLmdvb2dsZS5jbG91ZC5iYWNrdXBkci52MS5HdWVz",
            "dE9zRmVhdHVyZUID4EEBElYKE2Rpc2tfZW5jcnlwdGlvbl9rZXkYBiABKAsy",
            "Ly5nb29nbGUuY2xvdWQuYmFja3VwZHIudjEuQ3VzdG9tZXJFbmNyeXB0aW9u",
            "S2V5QgPgQQFIA4gBARIrChlwaHlzaWNhbF9ibG9ja19zaXplX2J5dGVzGAcg",
            "ASgDQgPgQQFIBIgBARIiChBwcm92aXNpb25lZF9pb3BzGAggASgDQgPgQQFI",
            "BYgBARIoChZwcm92aXNpb25lZF90aHJvdWdocHV0GAkgASgDQgPgQQFIBogB",
            "ARItChtlbmFibGVfY29uZmlkZW50aWFsX2NvbXB1dGUYCiABKAhCA+BBAUgH",
            "iAEBEkUKDHN0b3JhZ2VfcG9vbBgLIAEoCUIq4EEB+kEkCiJjb21wdXRlLmdv",
            "b2dsZWFwaXMuY29tL1N0b3JhZ2VQb29sSAiIAQESWQoLYWNjZXNzX21vZGUY",
            "DCABKA4yOi5nb29nbGUuY2xvdWQuYmFja3VwZHIudjEuRGlza1Jlc3RvcmVQ",
            "cm9wZXJ0aWVzLkFjY2Vzc01vZGVCA+BBAUgJiAEBElwKDGFyY2hpdGVjdHVy",
            "ZRgOIAEoDjI8Lmdvb2dsZS5jbG91ZC5iYWNrdXBkci52MS5EaXNrUmVzdG9y",
            "ZVByb3BlcnRpZXMuQXJjaGl0ZWN0dXJlQgPgQQFICogBARIcCg9yZXNvdXJj",
            "ZV9wb2xpY3kYDyADKAlCA+BBARIWCgR0eXBlGBAgASgJQgPgQQJIC4gBARJQ",
            "CgZsYWJlbHMYESADKAsyOy5nb29nbGUuY2xvdWQuYmFja3VwZHIudjEuRGlz",
            "a1Jlc3RvcmVQcm9wZXJ0aWVzLkxhYmVsc0VudHJ5QgPgQQESbAoVcmVzb3Vy",
            "Y2VfbWFuYWdlcl90YWdzGBIgAygLMkguZ29vZ2xlLmNsb3VkLmJhY2t1cGRy",
            "LnYxLkRpc2tSZXN0b3JlUHJvcGVydGllcy5SZXNvdXJjZU1hbmFnZXJUYWdz",
            "RW50cnlCA+BBARotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAk6AjgBGjoKGFJlc291cmNlTWFuYWdlclRhZ3NFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIkwKCkFjY2Vzc01vZGUSFQoR",
            "UkVBRF9XUklURV9TSU5HTEUQABITCg9SRUFEX1dSSVRFX01BTlkQARISCg5S",
            "RUFEX09OTFlfTUFOWRACIkMKDEFyY2hpdGVjdHVyZRIcChhBUkNISVRFQ1RV",
            "UkVfVU5TUEVDSUZJRUQQABIKCgZYODZfNjQQARIJCgVBUk02NBACQgcKBV9u",
            "YW1lQg4KDF9kZXNjcmlwdGlvbkIKCghfc2l6ZV9nYkIWChRfZGlza19lbmNy",
            "eXB0aW9uX2tleUIcChpfcGh5c2ljYWxfYmxvY2tfc2l6ZV9ieXRlc0ITChFf",
            "cHJvdmlzaW9uZWRfaW9wc0IZChdfcHJvdmlzaW9uZWRfdGhyb3VnaHB1dEIe",
            "ChxfZW5hYmxlX2NvbmZpZGVudGlhbF9jb21wdXRlQg8KDV9zdG9yYWdlX3Bv",
            "b2xCDgoMX2FjY2Vzc19tb2RlQg8KDV9hcmNoaXRlY3R1cmVCBwoFX3R5cGUi",
            "/wMKFERpc2tCYWNrdXBQcm9wZXJ0aWVzEhgKC2Rlc2NyaXB0aW9uGAEgASgJ",
            "SACIAQESEAoIbGljZW5zZXMYAiADKAkSQgoQZ3Vlc3Rfb3NfZmVhdHVyZRgD",
            "IAMoCzIoLmdvb2dsZS5jbG91ZC5iYWNrdXBkci52MS5HdWVzdE9zRmVhdHVy",
            "ZRJWCgxhcmNoaXRlY3R1cmUYBCABKA4yOy5nb29nbGUuY2xvdWQuYmFja3Vw",
            "ZHIudjEuRGlza0JhY2t1cFByb3BlcnRpZXMuQXJjaGl0ZWN0dXJlSAGIAQES",
            "EQoEdHlwZRgFIAEoCUgCiAEBEhQKB3NpemVfZ2IYBiABKANIA4gBARITCgZy",
            "ZWdpb24YByABKAlIBIgBARIRCgR6b25lGAggASgJSAWIAQESFQoNcmVwbGlj",
            "YV96b25lcxgJIAMoCRIYCgtzb3VyY2VfZGlzaxgKIAEoCUgGiAEBIkMKDEFy",
            "Y2hpdGVjdHVyZRIcChhBUkNISVRFQ1RVUkVfVU5TUEVDSUZJRUQQABIKCgZY",
            "ODZfNjQQARIJCgVBUk02NBACQg4KDF9kZXNjcmlwdGlvbkIPCg1fYXJjaGl0",
            "ZWN0dXJlQgcKBV90eXBlQgoKCF9zaXplX2diQgkKB19yZWdpb25CBwoFX3pv",
            "bmVCDgoMX3NvdXJjZV9kaXNrIlwKGERpc2tEYXRhU291cmNlUHJvcGVydGll",
            "cxIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEgwKBHR5cGUY",
            "AyABKAkSDwoHc2l6ZV9nYhgEIAEoA0KoAgocY29tLmdvb2dsZS5jbG91ZC5i",
            "YWNrdXBkci52MUIUQmFja3VwdmF1bHREaXNrUHJvdG9QAVo4Y2xvdWQuZ29v",
            "Z2xlLmNvbS9nby9iYWNrdXBkci9hcGl2MS9iYWNrdXBkcnBiO2JhY2t1cGRy",
            "cGKqAhhHb29nbGUuQ2xvdWQuQmFja3VwRFIuVjHKAhhHb29nbGVcQ2xvdWRc",
            "QmFja3VwRFJcVjHqAhtHb29nbGU6OkNsb3VkOjpCYWNrdXBEUjo6VjHqQWEK",
            "ImNvbXB1dGUuZ29vZ2xlYXBpcy5jb20vU3RvcmFnZVBvb2wSO3Byb2plY3Rz",
            "L3twcm9qZWN0fS96b25lcy97em9uZX0vc3RvcmFnZVBvb2xzL3tzdG9yYWdl",
            "X3Bvb2x9YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Cloud.BackupDR.V1.BackupvaultGceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BackupDR.V1.DiskTargetEnvironment), global::Google.Cloud.BackupDR.V1.DiskTargetEnvironment.Parser, new[]{ "Project", "Zone" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BackupDR.V1.RegionDiskTargetEnvironment), global::Google.Cloud.BackupDR.V1.RegionDiskTargetEnvironment.Parser, new[]{ "Project", "Region", "ReplicaZones" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BackupDR.V1.DiskRestoreProperties), global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Parser, new[]{ "Name", "Description", "SizeGb", "Licenses", "GuestOsFeature", "DiskEncryptionKey", "PhysicalBlockSizeBytes", "ProvisionedIops", "ProvisionedThroughput", "EnableConfidentialCompute", "StoragePool", "AccessMode", "Architecture", "ResourcePolicy", "Type", "Labels", "ResourceManagerTags" }, new[]{ "Name", "Description", "SizeGb", "DiskEncryptionKey", "PhysicalBlockSizeBytes", "ProvisionedIops", "ProvisionedThroughput", "EnableConfidentialCompute", "StoragePool", "AccessMode", "Architecture", "Type" }, new[]{ typeof(global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.AccessMode), typeof(global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.Architecture) }, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BackupDR.V1.DiskBackupProperties), global::Google.Cloud.BackupDR.V1.DiskBackupProperties.Parser, new[]{ "Description", "Licenses", "GuestOsFeature", "Architecture", "Type", "SizeGb", "Region", "Zone", "ReplicaZones", "SourceDisk" }, new[]{ "Description", "Architecture", "Type", "SizeGb", "Region", "Zone", "SourceDisk" }, new[]{ typeof(global::Google.Cloud.BackupDR.V1.DiskBackupProperties.Types.Architecture) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.BackupDR.V1.DiskDataSourceProperties), global::Google.Cloud.BackupDR.V1.DiskDataSourceProperties.Parser, new[]{ "Name", "Description", "Type", "SizeGb" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// DiskTargetEnvironment represents the target environment for the disk.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DiskTargetEnvironment : pb::IMessage<DiskTargetEnvironment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiskTargetEnvironment> _parser = new pb::MessageParser<DiskTargetEnvironment>(() => new DiskTargetEnvironment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DiskTargetEnvironment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BackupDR.V1.BackupvaultDiskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskTargetEnvironment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskTargetEnvironment(DiskTargetEnvironment other) : this() {
      project_ = other.project_;
      zone_ = other.zone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskTargetEnvironment Clone() {
      return new DiskTargetEnvironment(this);
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 1;
    private string project_ = "";
    /// <summary>
    /// Required. Target project for the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Project {
      get { return project_; }
      set {
        project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 2;
    private string zone_ = "";
    /// <summary>
    /// Required. Target zone for the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Zone {
      get { return zone_; }
      set {
        zone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DiskTargetEnvironment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DiskTargetEnvironment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Project != other.Project) return false;
      if (Zone != other.Zone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Project.Length != 0) hash ^= Project.GetHashCode();
      if (Zone.Length != 0) hash ^= Zone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Project.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Project);
      }
      if (Zone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Project.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Project);
      }
      if (Zone.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Zone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Project.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
      }
      if (Zone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DiskTargetEnvironment other) {
      if (other == null) {
        return;
      }
      if (other.Project.Length != 0) {
        Project = other.Project;
      }
      if (other.Zone.Length != 0) {
        Zone = other.Zone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Project = input.ReadString();
            break;
          }
          case 18: {
            Zone = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Project = input.ReadString();
            break;
          }
          case 18: {
            Zone = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// RegionDiskTargetEnvironment represents the target environment for the disk.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RegionDiskTargetEnvironment : pb::IMessage<RegionDiskTargetEnvironment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegionDiskTargetEnvironment> _parser = new pb::MessageParser<RegionDiskTargetEnvironment>(() => new RegionDiskTargetEnvironment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RegionDiskTargetEnvironment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BackupDR.V1.BackupvaultDiskReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RegionDiskTargetEnvironment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RegionDiskTargetEnvironment(RegionDiskTargetEnvironment other) : this() {
      project_ = other.project_;
      region_ = other.region_;
      replicaZones_ = other.replicaZones_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RegionDiskTargetEnvironment Clone() {
      return new RegionDiskTargetEnvironment(this);
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 1;
    private string project_ = "";
    /// <summary>
    /// Required. Target project for the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Project {
      get { return project_; }
      set {
        project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 2;
    private string region_ = "";
    /// <summary>
    /// Required. Target region for the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Region {
      get { return region_; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "replica_zones" field.</summary>
    public const int ReplicaZonesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_replicaZones_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> replicaZones_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Required. Target URLs of the replica zones for the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ReplicaZones {
      get { return replicaZones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RegionDiskTargetEnvironment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RegionDiskTargetEnvironment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Project != other.Project) return false;
      if (Region != other.Region) return false;
      if(!replicaZones_.Equals(other.replicaZones_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Project.Length != 0) hash ^= Project.GetHashCode();
      if (Region.Length != 0) hash ^= Region.GetHashCode();
      hash ^= replicaZones_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Project.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Project);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Region);
      }
      replicaZones_.WriteTo(output, _repeated_replicaZones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Project.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Project);
      }
      if (Region.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Region);
      }
      replicaZones_.WriteTo(ref output, _repeated_replicaZones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Project.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
      }
      if (Region.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      size += replicaZones_.CalculateSize(_repeated_replicaZones_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RegionDiskTargetEnvironment other) {
      if (other == null) {
        return;
      }
      if (other.Project.Length != 0) {
        Project = other.Project;
      }
      if (other.Region.Length != 0) {
        Region = other.Region;
      }
      replicaZones_.Add(other.replicaZones_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Project = input.ReadString();
            break;
          }
          case 18: {
            Region = input.ReadString();
            break;
          }
          case 26: {
            replicaZones_.AddEntriesFrom(input, _repeated_replicaZones_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Project = input.ReadString();
            break;
          }
          case 18: {
            Region = input.ReadString();
            break;
          }
          case 26: {
            replicaZones_.AddEntriesFrom(ref input, _repeated_replicaZones_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// DiskRestoreProperties represents the properties of a Disk restore.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DiskRestoreProperties : pb::IMessage<DiskRestoreProperties>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiskRestoreProperties> _parser = new pb::MessageParser<DiskRestoreProperties>(() => new DiskRestoreProperties());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DiskRestoreProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BackupDR.V1.BackupvaultDiskReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskRestoreProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskRestoreProperties(DiskRestoreProperties other) : this() {
      _hasBits0 = other._hasBits0;
      name_ = other.name_;
      description_ = other.description_;
      sizeGb_ = other.sizeGb_;
      licenses_ = other.licenses_.Clone();
      guestOsFeature_ = other.guestOsFeature_.Clone();
      diskEncryptionKey_ = other.diskEncryptionKey_ != null ? other.diskEncryptionKey_.Clone() : null;
      physicalBlockSizeBytes_ = other.physicalBlockSizeBytes_;
      provisionedIops_ = other.provisionedIops_;
      provisionedThroughput_ = other.provisionedThroughput_;
      enableConfidentialCompute_ = other.enableConfidentialCompute_;
      storagePool_ = other.storagePool_;
      accessMode_ = other.accessMode_;
      architecture_ = other.architecture_;
      resourcePolicy_ = other.resourcePolicy_.Clone();
      type_ = other.type_;
      labels_ = other.labels_.Clone();
      resourceManagerTags_ = other.resourceManagerTags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskRestoreProperties Clone() {
      return new DiskRestoreProperties(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// Required. Name of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// Optional. An optional description of this resource. Provide this property
    /// when you create the resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "size_gb" field.</summary>
    public const int SizeGbFieldNumber = 3;
    private readonly static long SizeGbDefaultValue = 0L;

    private long sizeGb_;
    /// <summary>
    /// Required. The size of the disk in GB.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SizeGb {
      get { if ((_hasBits0 & 1) != 0) { return sizeGb_; } else { return SizeGbDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sizeGb_ = value;
      }
    }
    /// <summary>Gets whether the "size_gb" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSizeGb {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "size_gb" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSizeGb() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "licenses" field.</summary>
    public const int LicensesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_licenses_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> licenses_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional. A list of publicly available licenses that are applicable to this
    /// backup. This is applicable if the original image had licenses attached,
    /// e.g. Windows image
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Licenses {
      get { return licenses_; }
    }

    /// <summary>Field number for the "guest_os_feature" field.</summary>
    public const int GuestOsFeatureFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Google.Cloud.BackupDR.V1.GuestOsFeature> _repeated_guestOsFeature_codec
        = pb::FieldCodec.ForMessage(42, global::Google.Cloud.BackupDR.V1.GuestOsFeature.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BackupDR.V1.GuestOsFeature> guestOsFeature_ = new pbc::RepeatedField<global::Google.Cloud.BackupDR.V1.GuestOsFeature>();
    /// <summary>
    /// Optional. A list of features to enable in the guest operating system. This
    /// is applicable only for bootable images.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.BackupDR.V1.GuestOsFeature> GuestOsFeature {
      get { return guestOsFeature_; }
    }

    /// <summary>Field number for the "disk_encryption_key" field.</summary>
    public const int DiskEncryptionKeyFieldNumber = 6;
    private global::Google.Cloud.BackupDR.V1.CustomerEncryptionKey diskEncryptionKey_;
    /// <summary>
    /// Optional. Encrypts the disk using a
    /// customer-supplied encryption key or a customer-managed encryption key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.BackupDR.V1.CustomerEncryptionKey DiskEncryptionKey {
      get { return diskEncryptionKey_; }
      set {
        diskEncryptionKey_ = value;
      }
    }

    /// <summary>Field number for the "physical_block_size_bytes" field.</summary>
    public const int PhysicalBlockSizeBytesFieldNumber = 7;
    private readonly static long PhysicalBlockSizeBytesDefaultValue = 0L;

    private long physicalBlockSizeBytes_;
    /// <summary>
    /// Optional. Physical block size of the persistent disk, in bytes.
    /// If not present in a request, a default value is used.
    /// Currently, the supported size is 4096.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PhysicalBlockSizeBytes {
      get { if ((_hasBits0 & 2) != 0) { return physicalBlockSizeBytes_; } else { return PhysicalBlockSizeBytesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        physicalBlockSizeBytes_ = value;
      }
    }
    /// <summary>Gets whether the "physical_block_size_bytes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPhysicalBlockSizeBytes {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "physical_block_size_bytes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPhysicalBlockSizeBytes() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "provisioned_iops" field.</summary>
    public const int ProvisionedIopsFieldNumber = 8;
    private readonly static long ProvisionedIopsDefaultValue = 0L;

    private long provisionedIops_;
    /// <summary>
    /// Optional. Indicates how many IOPS to provision for the disk. This sets the
    /// number of I/O operations per second that the disk can handle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ProvisionedIops {
      get { if ((_hasBits0 & 4) != 0) { return provisionedIops_; } else { return ProvisionedIopsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        provisionedIops_ = value;
      }
    }
    /// <summary>Gets whether the "provisioned_iops" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProvisionedIops {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "provisioned_iops" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProvisionedIops() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "provisioned_throughput" field.</summary>
    public const int ProvisionedThroughputFieldNumber = 9;
    private readonly static long ProvisionedThroughputDefaultValue = 0L;

    private long provisionedThroughput_;
    /// <summary>
    /// Optional. Indicates how much throughput to provision for the disk. This
    /// sets the number of throughput MB per second that the disk can handle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ProvisionedThroughput {
      get { if ((_hasBits0 & 8) != 0) { return provisionedThroughput_; } else { return ProvisionedThroughputDefaultValue; } }
      set {
        _hasBits0 |= 8;
        provisionedThroughput_ = value;
      }
    }
    /// <summary>Gets whether the "provisioned_throughput" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProvisionedThroughput {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "provisioned_throughput" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProvisionedThroughput() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "enable_confidential_compute" field.</summary>
    public const int EnableConfidentialComputeFieldNumber = 10;
    private readonly static bool EnableConfidentialComputeDefaultValue = false;

    private bool enableConfidentialCompute_;
    /// <summary>
    /// Optional. Indicates whether this disk is using confidential compute mode.
    /// Encryption with a Cloud KMS key is required to enable this option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EnableConfidentialCompute {
      get { if ((_hasBits0 & 16) != 0) { return enableConfidentialCompute_; } else { return EnableConfidentialComputeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        enableConfidentialCompute_ = value;
      }
    }
    /// <summary>Gets whether the "enable_confidential_compute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEnableConfidentialCompute {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "enable_confidential_compute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEnableConfidentialCompute() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "storage_pool" field.</summary>
    public const int StoragePoolFieldNumber = 11;
    private readonly static string StoragePoolDefaultValue = "";

    private string storagePool_;
    /// <summary>
    /// Optional. The storage pool in which the new disk is created. You can
    /// provide this as a partial or full URL to the resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StoragePool {
      get { return storagePool_ ?? StoragePoolDefaultValue; }
      set {
        storagePool_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "storage_pool" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStoragePool {
      get { return storagePool_ != null; }
    }
    /// <summary>Clears the value of the "storage_pool" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStoragePool() {
      storagePool_ = null;
    }

    /// <summary>Field number for the "access_mode" field.</summary>
    public const int AccessModeFieldNumber = 12;
    private readonly static global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.AccessMode AccessModeDefaultValue = global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.AccessMode.ReadWriteSingle;

    private global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.AccessMode accessMode_;
    /// <summary>
    /// Optional. The access mode of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.AccessMode AccessMode {
      get { if ((_hasBits0 & 32) != 0) { return accessMode_; } else { return AccessModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        accessMode_ = value;
      }
    }
    /// <summary>Gets whether the "access_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccessMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "access_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccessMode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "architecture" field.</summary>
    public const int ArchitectureFieldNumber = 14;
    private readonly static global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.Architecture ArchitectureDefaultValue = global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.Architecture.Unspecified;

    private global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.Architecture architecture_;
    /// <summary>
    /// Optional. The architecture of the source disk. Valid values are
    /// ARM64 or X86_64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.Architecture Architecture {
      get { if ((_hasBits0 & 64) != 0) { return architecture_; } else { return ArchitectureDefaultValue; } }
      set {
        _hasBits0 |= 64;
        architecture_ = value;
      }
    }
    /// <summary>Gets whether the "architecture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasArchitecture {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "architecture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearArchitecture() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "resource_policy" field.</summary>
    public const int ResourcePolicyFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_resourcePolicy_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> resourcePolicy_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional. Resource policies applied to this disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ResourcePolicy {
      get { return resourcePolicy_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 16;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// Required. URL of the disk type resource describing which disk type to use
    /// to create the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 17;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 138);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Optional. Labels to apply to this disk. These can be modified later using
    /// &lt;code>setLabels&lt;/code> method. Label values can be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "resource_manager_tags" field.</summary>
    public const int ResourceManagerTagsFieldNumber = 18;
    private static readonly pbc::MapField<string, string>.Codec _map_resourceManagerTags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 146);
    private readonly pbc::MapField<string, string> resourceManagerTags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Optional. Resource manager tags to be bound to the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> ResourceManagerTags {
      get { return resourceManagerTags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DiskRestoreProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DiskRestoreProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (SizeGb != other.SizeGb) return false;
      if(!licenses_.Equals(other.licenses_)) return false;
      if(!guestOsFeature_.Equals(other.guestOsFeature_)) return false;
      if (!object.Equals(DiskEncryptionKey, other.DiskEncryptionKey)) return false;
      if (PhysicalBlockSizeBytes != other.PhysicalBlockSizeBytes) return false;
      if (ProvisionedIops != other.ProvisionedIops) return false;
      if (ProvisionedThroughput != other.ProvisionedThroughput) return false;
      if (EnableConfidentialCompute != other.EnableConfidentialCompute) return false;
      if (StoragePool != other.StoragePool) return false;
      if (AccessMode != other.AccessMode) return false;
      if (Architecture != other.Architecture) return false;
      if(!resourcePolicy_.Equals(other.resourcePolicy_)) return false;
      if (Type != other.Type) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!ResourceManagerTags.Equals(other.ResourceManagerTags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasName) hash ^= Name.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasSizeGb) hash ^= SizeGb.GetHashCode();
      hash ^= licenses_.GetHashCode();
      hash ^= guestOsFeature_.GetHashCode();
      if (diskEncryptionKey_ != null) hash ^= DiskEncryptionKey.GetHashCode();
      if (HasPhysicalBlockSizeBytes) hash ^= PhysicalBlockSizeBytes.GetHashCode();
      if (HasProvisionedIops) hash ^= ProvisionedIops.GetHashCode();
      if (HasProvisionedThroughput) hash ^= ProvisionedThroughput.GetHashCode();
      if (HasEnableConfidentialCompute) hash ^= EnableConfidentialCompute.GetHashCode();
      if (HasStoragePool) hash ^= StoragePool.GetHashCode();
      if (HasAccessMode) hash ^= AccessMode.GetHashCode();
      if (HasArchitecture) hash ^= Architecture.GetHashCode();
      hash ^= resourcePolicy_.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= ResourceManagerTags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (HasSizeGb) {
        output.WriteRawTag(24);
        output.WriteInt64(SizeGb);
      }
      licenses_.WriteTo(output, _repeated_licenses_codec);
      guestOsFeature_.WriteTo(output, _repeated_guestOsFeature_codec);
      if (diskEncryptionKey_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DiskEncryptionKey);
      }
      if (HasPhysicalBlockSizeBytes) {
        output.WriteRawTag(56);
        output.WriteInt64(PhysicalBlockSizeBytes);
      }
      if (HasProvisionedIops) {
        output.WriteRawTag(64);
        output.WriteInt64(ProvisionedIops);
      }
      if (HasProvisionedThroughput) {
        output.WriteRawTag(72);
        output.WriteInt64(ProvisionedThroughput);
      }
      if (HasEnableConfidentialCompute) {
        output.WriteRawTag(80);
        output.WriteBool(EnableConfidentialCompute);
      }
      if (HasStoragePool) {
        output.WriteRawTag(90);
        output.WriteString(StoragePool);
      }
      if (HasAccessMode) {
        output.WriteRawTag(96);
        output.WriteEnum((int) AccessMode);
      }
      if (HasArchitecture) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Architecture);
      }
      resourcePolicy_.WriteTo(output, _repeated_resourcePolicy_codec);
      if (HasType) {
        output.WriteRawTag(130, 1);
        output.WriteString(Type);
      }
      labels_.WriteTo(output, _map_labels_codec);
      resourceManagerTags_.WriteTo(output, _map_resourceManagerTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasName) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (HasDescription) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (HasSizeGb) {
        output.WriteRawTag(24);
        output.WriteInt64(SizeGb);
      }
      licenses_.WriteTo(ref output, _repeated_licenses_codec);
      guestOsFeature_.WriteTo(ref output, _repeated_guestOsFeature_codec);
      if (diskEncryptionKey_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DiskEncryptionKey);
      }
      if (HasPhysicalBlockSizeBytes) {
        output.WriteRawTag(56);
        output.WriteInt64(PhysicalBlockSizeBytes);
      }
      if (HasProvisionedIops) {
        output.WriteRawTag(64);
        output.WriteInt64(ProvisionedIops);
      }
      if (HasProvisionedThroughput) {
        output.WriteRawTag(72);
        output.WriteInt64(ProvisionedThroughput);
      }
      if (HasEnableConfidentialCompute) {
        output.WriteRawTag(80);
        output.WriteBool(EnableConfidentialCompute);
      }
      if (HasStoragePool) {
        output.WriteRawTag(90);
        output.WriteString(StoragePool);
      }
      if (HasAccessMode) {
        output.WriteRawTag(96);
        output.WriteEnum((int) AccessMode);
      }
      if (HasArchitecture) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Architecture);
      }
      resourcePolicy_.WriteTo(ref output, _repeated_resourcePolicy_codec);
      if (HasType) {
        output.WriteRawTag(130, 1);
        output.WriteString(Type);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      resourceManagerTags_.WriteTo(ref output, _map_resourceManagerTags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasSizeGb) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SizeGb);
      }
      size += licenses_.CalculateSize(_repeated_licenses_codec);
      size += guestOsFeature_.CalculateSize(_repeated_guestOsFeature_codec);
      if (diskEncryptionKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiskEncryptionKey);
      }
      if (HasPhysicalBlockSizeBytes) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PhysicalBlockSizeBytes);
      }
      if (HasProvisionedIops) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProvisionedIops);
      }
      if (HasProvisionedThroughput) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProvisionedThroughput);
      }
      if (HasEnableConfidentialCompute) {
        size += 1 + 1;
      }
      if (HasStoragePool) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StoragePool);
      }
      if (HasAccessMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AccessMode);
      }
      if (HasArchitecture) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Architecture);
      }
      size += resourcePolicy_.CalculateSize(_repeated_resourcePolicy_codec);
      if (HasType) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      size += resourceManagerTags_.CalculateSize(_map_resourceManagerTags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DiskRestoreProperties other) {
      if (other == null) {
        return;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasSizeGb) {
        SizeGb = other.SizeGb;
      }
      licenses_.Add(other.licenses_);
      guestOsFeature_.Add(other.guestOsFeature_);
      if (other.diskEncryptionKey_ != null) {
        if (diskEncryptionKey_ == null) {
          DiskEncryptionKey = new global::Google.Cloud.BackupDR.V1.CustomerEncryptionKey();
        }
        DiskEncryptionKey.MergeFrom(other.DiskEncryptionKey);
      }
      if (other.HasPhysicalBlockSizeBytes) {
        PhysicalBlockSizeBytes = other.PhysicalBlockSizeBytes;
      }
      if (other.HasProvisionedIops) {
        ProvisionedIops = other.ProvisionedIops;
      }
      if (other.HasProvisionedThroughput) {
        ProvisionedThroughput = other.ProvisionedThroughput;
      }
      if (other.HasEnableConfidentialCompute) {
        EnableConfidentialCompute = other.EnableConfidentialCompute;
      }
      if (other.HasStoragePool) {
        StoragePool = other.StoragePool;
      }
      if (other.HasAccessMode) {
        AccessMode = other.AccessMode;
      }
      if (other.HasArchitecture) {
        Architecture = other.Architecture;
      }
      resourcePolicy_.Add(other.resourcePolicy_);
      if (other.HasType) {
        Type = other.Type;
      }
      labels_.MergeFrom(other.labels_);
      resourceManagerTags_.MergeFrom(other.resourceManagerTags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            SizeGb = input.ReadInt64();
            break;
          }
          case 34: {
            licenses_.AddEntriesFrom(input, _repeated_licenses_codec);
            break;
          }
          case 42: {
            guestOsFeature_.AddEntriesFrom(input, _repeated_guestOsFeature_codec);
            break;
          }
          case 50: {
            if (diskEncryptionKey_ == null) {
              DiskEncryptionKey = new global::Google.Cloud.BackupDR.V1.CustomerEncryptionKey();
            }
            input.ReadMessage(DiskEncryptionKey);
            break;
          }
          case 56: {
            PhysicalBlockSizeBytes = input.ReadInt64();
            break;
          }
          case 64: {
            ProvisionedIops = input.ReadInt64();
            break;
          }
          case 72: {
            ProvisionedThroughput = input.ReadInt64();
            break;
          }
          case 80: {
            EnableConfidentialCompute = input.ReadBool();
            break;
          }
          case 90: {
            StoragePool = input.ReadString();
            break;
          }
          case 96: {
            AccessMode = (global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.AccessMode) input.ReadEnum();
            break;
          }
          case 112: {
            Architecture = (global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.Architecture) input.ReadEnum();
            break;
          }
          case 122: {
            resourcePolicy_.AddEntriesFrom(input, _repeated_resourcePolicy_codec);
            break;
          }
          case 130: {
            Type = input.ReadString();
            break;
          }
          case 138: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 146: {
            resourceManagerTags_.AddEntriesFrom(input, _map_resourceManagerTags_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 24: {
            SizeGb = input.ReadInt64();
            break;
          }
          case 34: {
            licenses_.AddEntriesFrom(ref input, _repeated_licenses_codec);
            break;
          }
          case 42: {
            guestOsFeature_.AddEntriesFrom(ref input, _repeated_guestOsFeature_codec);
            break;
          }
          case 50: {
            if (diskEncryptionKey_ == null) {
              DiskEncryptionKey = new global::Google.Cloud.BackupDR.V1.CustomerEncryptionKey();
            }
            input.ReadMessage(DiskEncryptionKey);
            break;
          }
          case 56: {
            PhysicalBlockSizeBytes = input.ReadInt64();
            break;
          }
          case 64: {
            ProvisionedIops = input.ReadInt64();
            break;
          }
          case 72: {
            ProvisionedThroughput = input.ReadInt64();
            break;
          }
          case 80: {
            EnableConfidentialCompute = input.ReadBool();
            break;
          }
          case 90: {
            StoragePool = input.ReadString();
            break;
          }
          case 96: {
            AccessMode = (global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.AccessMode) input.ReadEnum();
            break;
          }
          case 112: {
            Architecture = (global::Google.Cloud.BackupDR.V1.DiskRestoreProperties.Types.Architecture) input.ReadEnum();
            break;
          }
          case 122: {
            resourcePolicy_.AddEntriesFrom(ref input, _repeated_resourcePolicy_codec);
            break;
          }
          case 130: {
            Type = input.ReadString();
            break;
          }
          case 138: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
          case 146: {
            resourceManagerTags_.AddEntriesFrom(ref input, _map_resourceManagerTags_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DiskRestoreProperties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// The supported access modes of the disk.
      /// </summary>
      public enum AccessMode {
        /// <summary>
        /// The default AccessMode, means the disk can be attached to single instance
        /// in RW mode.
        /// </summary>
        [pbr::OriginalName("READ_WRITE_SINGLE")] ReadWriteSingle = 0,
        /// <summary>
        /// The AccessMode means the disk can be attached to multiple instances in RW
        /// mode.
        /// </summary>
        [pbr::OriginalName("READ_WRITE_MANY")] ReadWriteMany = 1,
        /// <summary>
        /// The AccessMode means the disk can be attached to multiple instances in RO
        /// mode.
        /// </summary>
        [pbr::OriginalName("READ_ONLY_MANY")] ReadOnlyMany = 2,
      }

      /// <summary>
      /// Architecture of the source disk.
      /// </summary>
      public enum Architecture {
        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        [pbr::OriginalName("ARCHITECTURE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Disks with architecture X86_64
        /// </summary>
        [pbr::OriginalName("X86_64")] X8664 = 1,
        /// <summary>
        /// Disks with architecture ARM64
        /// </summary>
        [pbr::OriginalName("ARM64")] Arm64 = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// DiskBackupProperties represents the properties of a Disk backup.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DiskBackupProperties : pb::IMessage<DiskBackupProperties>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiskBackupProperties> _parser = new pb::MessageParser<DiskBackupProperties>(() => new DiskBackupProperties());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DiskBackupProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BackupDR.V1.BackupvaultDiskReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskBackupProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskBackupProperties(DiskBackupProperties other) : this() {
      _hasBits0 = other._hasBits0;
      description_ = other.description_;
      licenses_ = other.licenses_.Clone();
      guestOsFeature_ = other.guestOsFeature_.Clone();
      architecture_ = other.architecture_;
      type_ = other.type_;
      sizeGb_ = other.sizeGb_;
      region_ = other.region_;
      zone_ = other.zone_;
      replicaZones_ = other.replicaZones_.Clone();
      sourceDisk_ = other.sourceDisk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskBackupProperties Clone() {
      return new DiskBackupProperties(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// A description of the source disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "licenses" field.</summary>
    public const int LicensesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_licenses_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> licenses_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of publicly available licenses that are applicable to this backup.
    /// This is applicable if the original image had licenses attached, e.g.
    /// Windows image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> Licenses {
      get { return licenses_; }
    }

    /// <summary>Field number for the "guest_os_feature" field.</summary>
    public const int GuestOsFeatureFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Google.Cloud.BackupDR.V1.GuestOsFeature> _repeated_guestOsFeature_codec
        = pb::FieldCodec.ForMessage(26, global::Google.Cloud.BackupDR.V1.GuestOsFeature.Parser);
    private readonly pbc::RepeatedField<global::Google.Cloud.BackupDR.V1.GuestOsFeature> guestOsFeature_ = new pbc::RepeatedField<global::Google.Cloud.BackupDR.V1.GuestOsFeature>();
    /// <summary>
    /// A list of guest OS features that are applicable to this backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Cloud.BackupDR.V1.GuestOsFeature> GuestOsFeature {
      get { return guestOsFeature_; }
    }

    /// <summary>Field number for the "architecture" field.</summary>
    public const int ArchitectureFieldNumber = 4;
    private readonly static global::Google.Cloud.BackupDR.V1.DiskBackupProperties.Types.Architecture ArchitectureDefaultValue = global::Google.Cloud.BackupDR.V1.DiskBackupProperties.Types.Architecture.Unspecified;

    private global::Google.Cloud.BackupDR.V1.DiskBackupProperties.Types.Architecture architecture_;
    /// <summary>
    /// The architecture of the source disk. Valid values are
    /// ARM64 or X86_64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.BackupDR.V1.DiskBackupProperties.Types.Architecture Architecture {
      get { if ((_hasBits0 & 1) != 0) { return architecture_; } else { return ArchitectureDefaultValue; } }
      set {
        _hasBits0 |= 1;
        architecture_ = value;
      }
    }
    /// <summary>Gets whether the "architecture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasArchitecture {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "architecture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearArchitecture() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private readonly static string TypeDefaultValue = "";

    private string type_;
    /// <summary>
    /// The URL of the type of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_ ?? TypeDefaultValue; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasType {
      get { return type_ != null; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearType() {
      type_ = null;
    }

    /// <summary>Field number for the "size_gb" field.</summary>
    public const int SizeGbFieldNumber = 6;
    private readonly static long SizeGbDefaultValue = 0L;

    private long sizeGb_;
    /// <summary>
    /// Size(in GB) of the source disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SizeGb {
      get { if ((_hasBits0 & 2) != 0) { return sizeGb_; } else { return SizeGbDefaultValue; } }
      set {
        _hasBits0 |= 2;
        sizeGb_ = value;
      }
    }
    /// <summary>Gets whether the "size_gb" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSizeGb {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "size_gb" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSizeGb() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "region" field.</summary>
    public const int RegionFieldNumber = 7;
    private readonly static string RegionDefaultValue = "";

    private string region_;
    /// <summary>
    /// Region and zone are mutually exclusive fields.
    /// The URL of the region of the source disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Region {
      get { return region_ ?? RegionDefaultValue; }
      set {
        region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "region" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRegion {
      get { return region_ != null; }
    }
    /// <summary>Clears the value of the "region" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRegion() {
      region_ = null;
    }

    /// <summary>Field number for the "zone" field.</summary>
    public const int ZoneFieldNumber = 8;
    private readonly static string ZoneDefaultValue = "";

    private string zone_;
    /// <summary>
    /// The URL of the Zone where the source disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Zone {
      get { return zone_ ?? ZoneDefaultValue; }
      set {
        zone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "zone" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasZone {
      get { return zone_ != null; }
    }
    /// <summary>Clears the value of the "zone" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearZone() {
      zone_ = null;
    }

    /// <summary>Field number for the "replica_zones" field.</summary>
    public const int ReplicaZonesFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_replicaZones_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> replicaZones_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The URL of the Zones where the source disk should be replicated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ReplicaZones {
      get { return replicaZones_; }
    }

    /// <summary>Field number for the "source_disk" field.</summary>
    public const int SourceDiskFieldNumber = 10;
    private readonly static string SourceDiskDefaultValue = "";

    private string sourceDisk_;
    /// <summary>
    /// The source disk used to create this backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SourceDisk {
      get { return sourceDisk_ ?? SourceDiskDefaultValue; }
      set {
        sourceDisk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "source_disk" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSourceDisk {
      get { return sourceDisk_ != null; }
    }
    /// <summary>Clears the value of the "source_disk" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSourceDisk() {
      sourceDisk_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DiskBackupProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DiskBackupProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if(!licenses_.Equals(other.licenses_)) return false;
      if(!guestOsFeature_.Equals(other.guestOsFeature_)) return false;
      if (Architecture != other.Architecture) return false;
      if (Type != other.Type) return false;
      if (SizeGb != other.SizeGb) return false;
      if (Region != other.Region) return false;
      if (Zone != other.Zone) return false;
      if(!replicaZones_.Equals(other.replicaZones_)) return false;
      if (SourceDisk != other.SourceDisk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDescription) hash ^= Description.GetHashCode();
      hash ^= licenses_.GetHashCode();
      hash ^= guestOsFeature_.GetHashCode();
      if (HasArchitecture) hash ^= Architecture.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (HasSizeGb) hash ^= SizeGb.GetHashCode();
      if (HasRegion) hash ^= Region.GetHashCode();
      if (HasZone) hash ^= Zone.GetHashCode();
      hash ^= replicaZones_.GetHashCode();
      if (HasSourceDisk) hash ^= SourceDisk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDescription) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      licenses_.WriteTo(output, _repeated_licenses_codec);
      guestOsFeature_.WriteTo(output, _repeated_guestOsFeature_codec);
      if (HasArchitecture) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Architecture);
      }
      if (HasType) {
        output.WriteRawTag(42);
        output.WriteString(Type);
      }
      if (HasSizeGb) {
        output.WriteRawTag(48);
        output.WriteInt64(SizeGb);
      }
      if (HasRegion) {
        output.WriteRawTag(58);
        output.WriteString(Region);
      }
      if (HasZone) {
        output.WriteRawTag(66);
        output.WriteString(Zone);
      }
      replicaZones_.WriteTo(output, _repeated_replicaZones_codec);
      if (HasSourceDisk) {
        output.WriteRawTag(82);
        output.WriteString(SourceDisk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDescription) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      licenses_.WriteTo(ref output, _repeated_licenses_codec);
      guestOsFeature_.WriteTo(ref output, _repeated_guestOsFeature_codec);
      if (HasArchitecture) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Architecture);
      }
      if (HasType) {
        output.WriteRawTag(42);
        output.WriteString(Type);
      }
      if (HasSizeGb) {
        output.WriteRawTag(48);
        output.WriteInt64(SizeGb);
      }
      if (HasRegion) {
        output.WriteRawTag(58);
        output.WriteString(Region);
      }
      if (HasZone) {
        output.WriteRawTag(66);
        output.WriteString(Zone);
      }
      replicaZones_.WriteTo(ref output, _repeated_replicaZones_codec);
      if (HasSourceDisk) {
        output.WriteRawTag(82);
        output.WriteString(SourceDisk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += licenses_.CalculateSize(_repeated_licenses_codec);
      size += guestOsFeature_.CalculateSize(_repeated_guestOsFeature_codec);
      if (HasArchitecture) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Architecture);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasSizeGb) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SizeGb);
      }
      if (HasRegion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
      }
      if (HasZone) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Zone);
      }
      size += replicaZones_.CalculateSize(_repeated_replicaZones_codec);
      if (HasSourceDisk) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceDisk);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DiskBackupProperties other) {
      if (other == null) {
        return;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      licenses_.Add(other.licenses_);
      guestOsFeature_.Add(other.guestOsFeature_);
      if (other.HasArchitecture) {
        Architecture = other.Architecture;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasSizeGb) {
        SizeGb = other.SizeGb;
      }
      if (other.HasRegion) {
        Region = other.Region;
      }
      if (other.HasZone) {
        Zone = other.Zone;
      }
      replicaZones_.Add(other.replicaZones_);
      if (other.HasSourceDisk) {
        SourceDisk = other.SourceDisk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            licenses_.AddEntriesFrom(input, _repeated_licenses_codec);
            break;
          }
          case 26: {
            guestOsFeature_.AddEntriesFrom(input, _repeated_guestOsFeature_codec);
            break;
          }
          case 32: {
            Architecture = (global::Google.Cloud.BackupDR.V1.DiskBackupProperties.Types.Architecture) input.ReadEnum();
            break;
          }
          case 42: {
            Type = input.ReadString();
            break;
          }
          case 48: {
            SizeGb = input.ReadInt64();
            break;
          }
          case 58: {
            Region = input.ReadString();
            break;
          }
          case 66: {
            Zone = input.ReadString();
            break;
          }
          case 74: {
            replicaZones_.AddEntriesFrom(input, _repeated_replicaZones_codec);
            break;
          }
          case 82: {
            SourceDisk = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            licenses_.AddEntriesFrom(ref input, _repeated_licenses_codec);
            break;
          }
          case 26: {
            guestOsFeature_.AddEntriesFrom(ref input, _repeated_guestOsFeature_codec);
            break;
          }
          case 32: {
            Architecture = (global::Google.Cloud.BackupDR.V1.DiskBackupProperties.Types.Architecture) input.ReadEnum();
            break;
          }
          case 42: {
            Type = input.ReadString();
            break;
          }
          case 48: {
            SizeGb = input.ReadInt64();
            break;
          }
          case 58: {
            Region = input.ReadString();
            break;
          }
          case 66: {
            Zone = input.ReadString();
            break;
          }
          case 74: {
            replicaZones_.AddEntriesFrom(ref input, _repeated_replicaZones_codec);
            break;
          }
          case 82: {
            SourceDisk = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DiskBackupProperties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Architecture of the source disk.
      /// </summary>
      public enum Architecture {
        /// <summary>
        /// Default value. This value is unused.
        /// </summary>
        [pbr::OriginalName("ARCHITECTURE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Disks with architecture X86_64
        /// </summary>
        [pbr::OriginalName("X86_64")] X8664 = 1,
        /// <summary>
        /// Disks with architecture ARM64
        /// </summary>
        [pbr::OriginalName("ARM64")] Arm64 = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// DiskDataSourceProperties represents the properties of a
  /// Disk resource that are stored in the DataSource.
  /// .
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DiskDataSourceProperties : pb::IMessage<DiskDataSourceProperties>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DiskDataSourceProperties> _parser = new pb::MessageParser<DiskDataSourceProperties>(() => new DiskDataSourceProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DiskDataSourceProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.BackupDR.V1.BackupvaultDiskReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskDataSourceProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskDataSourceProperties(DiskDataSourceProperties other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      type_ = other.type_;
      sizeGb_ = other.sizeGb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DiskDataSourceProperties Clone() {
      return new DiskDataSourceProperties(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the disk backed up by the datasource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// The description of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    /// <summary>
    /// The type of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size_gb" field.</summary>
    public const int SizeGbFieldNumber = 4;
    private long sizeGb_;
    /// <summary>
    /// The size of the disk in GB.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SizeGb {
      get { return sizeGb_; }
      set {
        sizeGb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DiskDataSourceProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DiskDataSourceProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Type != other.Type) return false;
      if (SizeGb != other.SizeGb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (SizeGb != 0L) hash ^= SizeGb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (SizeGb != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SizeGb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      if (SizeGb != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SizeGb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (SizeGb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SizeGb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DiskDataSourceProperties other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.SizeGb != 0L) {
        SizeGb = other.SizeGb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            SizeGb = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 32: {
            SizeGb = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
