// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/weather_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Geo.Weather.V1 {
  /// <summary>
  /// Service definition for the Weather API.
  /// </summary>
  public static partial class Weather
  {
    static readonly string __ServiceName = "google.maps.weather.v1.Weather";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest> __Marshaller_google_maps_weather_v1_LookupCurrentConditionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse> __Marshaller_google_maps_weather_v1_LookupCurrentConditionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupForecastHoursRequest> __Marshaller_google_maps_weather_v1_LookupForecastHoursRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupForecastHoursRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupForecastHoursResponse> __Marshaller_google_maps_weather_v1_LookupForecastHoursResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupForecastHoursResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupForecastDaysRequest> __Marshaller_google_maps_weather_v1_LookupForecastDaysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupForecastDaysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupForecastDaysResponse> __Marshaller_google_maps_weather_v1_LookupForecastDaysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupForecastDaysResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupHistoryHoursRequest> __Marshaller_google_maps_weather_v1_LookupHistoryHoursRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupHistoryHoursRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupHistoryHoursResponse> __Marshaller_google_maps_weather_v1_LookupHistoryHoursResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupHistoryHoursResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupPublicAlertsRequest> __Marshaller_google_maps_weather_v1_LookupPublicAlertsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupPublicAlertsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Geo.Weather.V1.LookupPublicAlertsResponse> __Marshaller_google_maps_weather_v1_LookupPublicAlertsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Geo.Weather.V1.LookupPublicAlertsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest, global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse> __Method_LookupCurrentConditions = new grpc::Method<global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest, global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookupCurrentConditions",
        __Marshaller_google_maps_weather_v1_LookupCurrentConditionsRequest,
        __Marshaller_google_maps_weather_v1_LookupCurrentConditionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Geo.Weather.V1.LookupForecastHoursRequest, global::Google.Geo.Weather.V1.LookupForecastHoursResponse> __Method_LookupForecastHours = new grpc::Method<global::Google.Geo.Weather.V1.LookupForecastHoursRequest, global::Google.Geo.Weather.V1.LookupForecastHoursResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookupForecastHours",
        __Marshaller_google_maps_weather_v1_LookupForecastHoursRequest,
        __Marshaller_google_maps_weather_v1_LookupForecastHoursResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Geo.Weather.V1.LookupForecastDaysRequest, global::Google.Geo.Weather.V1.LookupForecastDaysResponse> __Method_LookupForecastDays = new grpc::Method<global::Google.Geo.Weather.V1.LookupForecastDaysRequest, global::Google.Geo.Weather.V1.LookupForecastDaysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookupForecastDays",
        __Marshaller_google_maps_weather_v1_LookupForecastDaysRequest,
        __Marshaller_google_maps_weather_v1_LookupForecastDaysResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Geo.Weather.V1.LookupHistoryHoursRequest, global::Google.Geo.Weather.V1.LookupHistoryHoursResponse> __Method_LookupHistoryHours = new grpc::Method<global::Google.Geo.Weather.V1.LookupHistoryHoursRequest, global::Google.Geo.Weather.V1.LookupHistoryHoursResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookupHistoryHours",
        __Marshaller_google_maps_weather_v1_LookupHistoryHoursRequest,
        __Marshaller_google_maps_weather_v1_LookupHistoryHoursResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Geo.Weather.V1.LookupPublicAlertsRequest, global::Google.Geo.Weather.V1.LookupPublicAlertsResponse> __Method_LookupPublicAlerts = new grpc::Method<global::Google.Geo.Weather.V1.LookupPublicAlertsRequest, global::Google.Geo.Weather.V1.LookupPublicAlertsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LookupPublicAlerts",
        __Marshaller_google_maps_weather_v1_LookupPublicAlertsRequest,
        __Marshaller_google_maps_weather_v1_LookupPublicAlertsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Weather</summary>
    [grpc::BindServiceMethod(typeof(Weather), "BindService")]
    public abstract partial class WeatherBase
    {
      /// <summary>
      /// Returns the current weather conditions at a given location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse> LookupCurrentConditions(global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns up to 240 hours of hourly forecasts at a given location, starting
      /// from the current hour.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Geo.Weather.V1.LookupForecastHoursResponse> LookupForecastHours(global::Google.Geo.Weather.V1.LookupForecastHoursRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns up to 10 days of daily forecasts at a given location, starting from
      /// the current day.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Geo.Weather.V1.LookupForecastDaysResponse> LookupForecastDays(global::Google.Geo.Weather.V1.LookupForecastDaysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns up to 24 hours of hourly historical weather data at a given
      /// location, starting from the last hour.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Geo.Weather.V1.LookupHistoryHoursResponse> LookupHistoryHours(global::Google.Geo.Weather.V1.LookupHistoryHoursRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns public weather alerts for a given location.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Geo.Weather.V1.LookupPublicAlertsResponse> LookupPublicAlerts(global::Google.Geo.Weather.V1.LookupPublicAlertsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Weather</summary>
    public partial class WeatherClient : grpc::ClientBase<WeatherClient>
    {
      /// <summary>Creates a new client for Weather</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WeatherClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Weather that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WeatherClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WeatherClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WeatherClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the current weather conditions at a given location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse LookupCurrentConditions(global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupCurrentConditions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the current weather conditions at a given location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse LookupCurrentConditions(global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookupCurrentConditions, null, options, request);
      }
      /// <summary>
      /// Returns the current weather conditions at a given location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse> LookupCurrentConditionsAsync(global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupCurrentConditionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the current weather conditions at a given location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse> LookupCurrentConditionsAsync(global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookupCurrentConditions, null, options, request);
      }
      /// <summary>
      /// Returns up to 240 hours of hourly forecasts at a given location, starting
      /// from the current hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupForecastHoursResponse LookupForecastHours(global::Google.Geo.Weather.V1.LookupForecastHoursRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupForecastHours(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns up to 240 hours of hourly forecasts at a given location, starting
      /// from the current hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupForecastHoursResponse LookupForecastHours(global::Google.Geo.Weather.V1.LookupForecastHoursRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookupForecastHours, null, options, request);
      }
      /// <summary>
      /// Returns up to 240 hours of hourly forecasts at a given location, starting
      /// from the current hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupForecastHoursResponse> LookupForecastHoursAsync(global::Google.Geo.Weather.V1.LookupForecastHoursRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupForecastHoursAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns up to 240 hours of hourly forecasts at a given location, starting
      /// from the current hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupForecastHoursResponse> LookupForecastHoursAsync(global::Google.Geo.Weather.V1.LookupForecastHoursRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookupForecastHours, null, options, request);
      }
      /// <summary>
      /// Returns up to 10 days of daily forecasts at a given location, starting from
      /// the current day.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupForecastDaysResponse LookupForecastDays(global::Google.Geo.Weather.V1.LookupForecastDaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupForecastDays(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns up to 10 days of daily forecasts at a given location, starting from
      /// the current day.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupForecastDaysResponse LookupForecastDays(global::Google.Geo.Weather.V1.LookupForecastDaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookupForecastDays, null, options, request);
      }
      /// <summary>
      /// Returns up to 10 days of daily forecasts at a given location, starting from
      /// the current day.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupForecastDaysResponse> LookupForecastDaysAsync(global::Google.Geo.Weather.V1.LookupForecastDaysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupForecastDaysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns up to 10 days of daily forecasts at a given location, starting from
      /// the current day.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupForecastDaysResponse> LookupForecastDaysAsync(global::Google.Geo.Weather.V1.LookupForecastDaysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookupForecastDays, null, options, request);
      }
      /// <summary>
      /// Returns up to 24 hours of hourly historical weather data at a given
      /// location, starting from the last hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupHistoryHoursResponse LookupHistoryHours(global::Google.Geo.Weather.V1.LookupHistoryHoursRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupHistoryHours(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns up to 24 hours of hourly historical weather data at a given
      /// location, starting from the last hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupHistoryHoursResponse LookupHistoryHours(global::Google.Geo.Weather.V1.LookupHistoryHoursRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookupHistoryHours, null, options, request);
      }
      /// <summary>
      /// Returns up to 24 hours of hourly historical weather data at a given
      /// location, starting from the last hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupHistoryHoursResponse> LookupHistoryHoursAsync(global::Google.Geo.Weather.V1.LookupHistoryHoursRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupHistoryHoursAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns up to 24 hours of hourly historical weather data at a given
      /// location, starting from the last hour.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupHistoryHoursResponse> LookupHistoryHoursAsync(global::Google.Geo.Weather.V1.LookupHistoryHoursRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookupHistoryHours, null, options, request);
      }
      /// <summary>
      /// Returns public weather alerts for a given location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupPublicAlertsResponse LookupPublicAlerts(global::Google.Geo.Weather.V1.LookupPublicAlertsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupPublicAlerts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns public weather alerts for a given location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Geo.Weather.V1.LookupPublicAlertsResponse LookupPublicAlerts(global::Google.Geo.Weather.V1.LookupPublicAlertsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LookupPublicAlerts, null, options, request);
      }
      /// <summary>
      /// Returns public weather alerts for a given location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupPublicAlertsResponse> LookupPublicAlertsAsync(global::Google.Geo.Weather.V1.LookupPublicAlertsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupPublicAlertsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns public weather alerts for a given location.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Geo.Weather.V1.LookupPublicAlertsResponse> LookupPublicAlertsAsync(global::Google.Geo.Weather.V1.LookupPublicAlertsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LookupPublicAlerts, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WeatherClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WeatherClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WeatherBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_LookupCurrentConditions, serviceImpl.LookupCurrentConditions)
          .AddMethod(__Method_LookupForecastHours, serviceImpl.LookupForecastHours)
          .AddMethod(__Method_LookupForecastDays, serviceImpl.LookupForecastDays)
          .AddMethod(__Method_LookupHistoryHours, serviceImpl.LookupHistoryHours)
          .AddMethod(__Method_LookupPublicAlerts, serviceImpl.LookupPublicAlerts).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WeatherBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_LookupCurrentConditions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest, global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse>(serviceImpl.LookupCurrentConditions));
      serviceBinder.AddMethod(__Method_LookupForecastHours, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Geo.Weather.V1.LookupForecastHoursRequest, global::Google.Geo.Weather.V1.LookupForecastHoursResponse>(serviceImpl.LookupForecastHours));
      serviceBinder.AddMethod(__Method_LookupForecastDays, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Geo.Weather.V1.LookupForecastDaysRequest, global::Google.Geo.Weather.V1.LookupForecastDaysResponse>(serviceImpl.LookupForecastDays));
      serviceBinder.AddMethod(__Method_LookupHistoryHours, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Geo.Weather.V1.LookupHistoryHoursRequest, global::Google.Geo.Weather.V1.LookupHistoryHoursResponse>(serviceImpl.LookupHistoryHours));
      serviceBinder.AddMethod(__Method_LookupPublicAlerts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Geo.Weather.V1.LookupPublicAlertsRequest, global::Google.Geo.Weather.V1.LookupPublicAlertsResponse>(serviceImpl.LookupPublicAlerts));
    }

  }
}
#endregion
