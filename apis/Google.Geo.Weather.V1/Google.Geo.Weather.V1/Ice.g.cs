// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/ice.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Geo.Weather.V1 {

  /// <summary>Holder for reflection information generated from google/maps/weather/v1/ice.proto</summary>
  public static partial class IceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/weather/v1/ice.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBnb29nbGUvbWFwcy93ZWF0aGVyL3YxL2ljZS5wcm90bxIWZ29vZ2xlLm1h",
            "cHMud2VhdGhlci52MSKoAQoMSWNlVGhpY2tuZXNzEhYKCXRoaWNrbmVzcxgB",
            "IAEoAkgAiAEBEjcKBHVuaXQYAiABKA4yKS5nb29nbGUubWFwcy53ZWF0aGVy",
            "LnYxLkljZVRoaWNrbmVzcy5Vbml0IjkKBFVuaXQSFAoQVU5JVF9VTlNQRUNJ",
            "RklFRBAAEg8KC01JTExJTUVURVJTEAESCgoGSU5DSEVTEAJCDAoKX3RoaWNr",
            "bmVzc0KcAQoaY29tLmdvb2dsZS5tYXBzLndlYXRoZXIudjFCCEljZVByb3Rv",
            "UAFaOmNsb3VkLmdvb2dsZS5jb20vZ28vbWFwcy93ZWF0aGVyL2FwaXYxL3dl",
            "YXRoZXJwYjt3ZWF0aGVycGKiAgVHTVdWMaoCFUdvb2dsZS5HZW8uV2VhdGhl",
            "ci5WMcoCFUdvb2dsZVxHZW9cV2VhdGhlclxWMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.IceThickness), global::Google.Geo.Weather.V1.IceThickness.Parser, new[]{ "Thickness", "Unit" }, new[]{ "Thickness" }, new[]{ typeof(global::Google.Geo.Weather.V1.IceThickness.Types.Unit) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents ice thickness conditions.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class IceThickness : pb::IMessage<IceThickness>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IceThickness> _parser = new pb::MessageParser<IceThickness>(() => new IceThickness());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<IceThickness> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.IceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IceThickness() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IceThickness(IceThickness other) : this() {
      _hasBits0 = other._hasBits0;
      thickness_ = other.thickness_;
      unit_ = other.unit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public IceThickness Clone() {
      return new IceThickness(this);
    }

    /// <summary>Field number for the "thickness" field.</summary>
    public const int ThicknessFieldNumber = 1;
    private readonly static float ThicknessDefaultValue = 0F;

    private float thickness_;
    /// <summary>
    /// The ice thickness value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Thickness {
      get { if ((_hasBits0 & 1) != 0) { return thickness_; } else { return ThicknessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        thickness_ = value;
      }
    }
    /// <summary>Gets whether the "thickness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThickness {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thickness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThickness() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 2;
    private global::Google.Geo.Weather.V1.IceThickness.Types.Unit unit_ = global::Google.Geo.Weather.V1.IceThickness.Types.Unit.Unspecified;
    /// <summary>
    /// The code that represents the unit used to measure the ice thickness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.IceThickness.Types.Unit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as IceThickness);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(IceThickness other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Thickness, other.Thickness)) return false;
      if (Unit != other.Unit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Thickness);
      if (Unit != global::Google.Geo.Weather.V1.IceThickness.Types.Unit.Unspecified) hash ^= Unit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasThickness) {
        output.WriteRawTag(13);
        output.WriteFloat(Thickness);
      }
      if (Unit != global::Google.Geo.Weather.V1.IceThickness.Types.Unit.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasThickness) {
        output.WriteRawTag(13);
        output.WriteFloat(Thickness);
      }
      if (Unit != global::Google.Geo.Weather.V1.IceThickness.Types.Unit.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasThickness) {
        size += 1 + 4;
      }
      if (Unit != global::Google.Geo.Weather.V1.IceThickness.Types.Unit.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(IceThickness other) {
      if (other == null) {
        return;
      }
      if (other.HasThickness) {
        Thickness = other.Thickness;
      }
      if (other.Unit != global::Google.Geo.Weather.V1.IceThickness.Types.Unit.Unspecified) {
        Unit = other.Unit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Thickness = input.ReadFloat();
            break;
          }
          case 16: {
            Unit = (global::Google.Geo.Weather.V1.IceThickness.Types.Unit) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Thickness = input.ReadFloat();
            break;
          }
          case 16: {
            Unit = (global::Google.Geo.Weather.V1.IceThickness.Types.Unit) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the IceThickness message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Represents the unit used to measure the ice thickness.
      /// </summary>
      public enum Unit {
        /// <summary>
        /// The unit is not specified.
        /// </summary>
        [pbr::OriginalName("UNIT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The thickness is measured in millimeters.
        /// </summary>
        [pbr::OriginalName("MILLIMETERS")] Millimeters = 1,
        /// <summary>
        /// The thickness is measured in inches.
        /// </summary>
        [pbr::OriginalName("INCHES")] Inches = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
