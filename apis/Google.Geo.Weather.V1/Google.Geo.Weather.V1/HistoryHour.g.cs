// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/history_hour.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Geo.Weather.V1 {

  /// <summary>Holder for reflection information generated from google/maps/weather/v1/history_hour.proto</summary>
  public static partial class HistoryHourReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/weather/v1/history_hour.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HistoryHourReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cilnb29nbGUvbWFwcy93ZWF0aGVyL3YxL2hpc3RvcnlfaG91ci5wcm90bxIW",
            "Z29vZ2xlLm1hcHMud2VhdGhlci52MRopZ29vZ2xlL21hcHMvd2VhdGhlci92",
            "MS9haXJfcHJlc3N1cmUucHJvdG8aIGdvb2dsZS9tYXBzL3dlYXRoZXIvdjEv",
            "aWNlLnByb3RvGipnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3ByZWNpcGl0YXRp",
            "b24ucHJvdG8aKGdvb2dsZS9tYXBzL3dlYXRoZXIvdjEvdGVtcGVyYXR1cmUu",
            "cHJvdG8aJ2dvb2dsZS9tYXBzL3dlYXRoZXIvdjEvdmlzaWJpbGl0eS5wcm90",
            "bxouZ29vZ2xlL21hcHMvd2VhdGhlci92MS93ZWF0aGVyX2NvbmRpdGlvbi5w",
            "cm90bxohZ29vZ2xlL21hcHMvd2VhdGhlci92MS93aW5kLnByb3RvGhpnb29n",
            "bGUvdHlwZS9kYXRldGltZS5wcm90bxoaZ29vZ2xlL3R5cGUvaW50ZXJ2YWwu",
            "cHJvdG8iowgKC0hpc3RvcnlIb3VyEicKCGludGVydmFsGAEgASgLMhUuZ29v",
            "Z2xlLnR5cGUuSW50ZXJ2YWwSMAoRZGlzcGxheV9kYXRlX3RpbWUYAiABKAsy",
            "FS5nb29nbGUudHlwZS5EYXRlVGltZRIXCgppc19kYXl0aW1lGAMgASgISACI",
            "AQESQwoRd2VhdGhlcl9jb25kaXRpb24YBCABKAsyKC5nb29nbGUubWFwcy53",
            "ZWF0aGVyLnYxLldlYXRoZXJDb25kaXRpb24SOAoLdGVtcGVyYXR1cmUYBSAB",
            "KAsyIy5nb29nbGUubWFwcy53ZWF0aGVyLnYxLlRlbXBlcmF0dXJlEkMKFmZl",
            "ZWxzX2xpa2VfdGVtcGVyYXR1cmUYBiABKAsyIy5nb29nbGUubWFwcy53ZWF0",
            "aGVyLnYxLlRlbXBlcmF0dXJlEjYKCWRld19wb2ludBgHIAEoCzIjLmdvb2ds",
            "ZS5tYXBzLndlYXRoZXIudjEuVGVtcGVyYXR1cmUSNwoKaGVhdF9pbmRleBgI",
            "IAEoCzIjLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuVGVtcGVyYXR1cmUSNwoK",
            "d2luZF9jaGlsbBgJIAEoCzIjLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuVGVt",
            "cGVyYXR1cmUSQQoUd2V0X2J1bGJfdGVtcGVyYXR1cmUYCiABKAsyIy5nb29n",
            "bGUubWFwcy53ZWF0aGVyLnYxLlRlbXBlcmF0dXJlEh4KEXJlbGF0aXZlX2h1",
            "bWlkaXR5GAsgASgFSAGIAQESFQoIdXZfaW5kZXgYDCABKAVIAogBARI8Cg1w",
            "cmVjaXBpdGF0aW9uGA0gASgLMiUuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5Q",
            "cmVjaXBpdGF0aW9uEiUKGHRodW5kZXJzdG9ybV9wcm9iYWJpbGl0eRgOIAEo",
            "BUgDiAEBEjkKDGFpcl9wcmVzc3VyZRgPIAEoCzIjLmdvb2dsZS5tYXBzLndl",
            "YXRoZXIudjEuQWlyUHJlc3N1cmUSKgoEd2luZBgQIAEoCzIcLmdvb2dsZS5t",
            "YXBzLndlYXRoZXIudjEuV2luZBI2Cgp2aXNpYmlsaXR5GBEgASgLMiIuZ29v",
            "Z2xlLm1hcHMud2VhdGhlci52MS5WaXNpYmlsaXR5EhgKC2Nsb3VkX2NvdmVy",
            "GBIgASgFSASIAQESOwoNaWNlX3RoaWNrbmVzcxgTIAEoCzIkLmdvb2dsZS5t",
            "YXBzLndlYXRoZXIudjEuSWNlVGhpY2tuZXNzQg0KC19pc19kYXl0aW1lQhQK",
            "El9yZWxhdGl2ZV9odW1pZGl0eUILCglfdXZfaW5kZXhCGwoZX3RodW5kZXJz",
            "dG9ybV9wcm9iYWJpbGl0eUIOCgxfY2xvdWRfY292ZXJCpAEKGmNvbS5nb29n",
            "bGUubWFwcy53ZWF0aGVyLnYxQhBIaXN0b3J5SG91clByb3RvUAFaOmNsb3Vk",
            "Lmdvb2dsZS5jb20vZ28vbWFwcy93ZWF0aGVyL2FwaXYxL3dlYXRoZXJwYjt3",
            "ZWF0aGVycGKiAgVHTVdWMaoCFUdvb2dsZS5HZW8uV2VhdGhlci5WMcoCFUdv",
            "b2dsZVxHZW9cV2VhdGhlclxWMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Geo.Weather.V1.AirPressureReflection.Descriptor, global::Google.Geo.Weather.V1.IceReflection.Descriptor, global::Google.Geo.Weather.V1.PrecipitationReflection.Descriptor, global::Google.Geo.Weather.V1.TemperatureReflection.Descriptor, global::Google.Geo.Weather.V1.VisibilityReflection.Descriptor, global::Google.Geo.Weather.V1.WeatherConditionReflection.Descriptor, global::Google.Geo.Weather.V1.WindReflection.Descriptor, global::Google.Type.DatetimeReflection.Descriptor, global::Google.Type.IntervalReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.HistoryHour), global::Google.Geo.Weather.V1.HistoryHour.Parser, new[]{ "Interval", "DisplayDateTime", "IsDaytime", "WeatherCondition", "Temperature", "FeelsLikeTemperature", "DewPoint", "HeatIndex", "WindChill", "WetBulbTemperature", "RelativeHumidity", "UvIndex", "Precipitation", "ThunderstormProbability", "AirPressure", "Wind", "Visibility", "CloudCover", "IceThickness" }, new[]{ "IsDaytime", "RelativeHumidity", "UvIndex", "ThunderstormProbability", "CloudCover" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents an hourly history record at a given location.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class HistoryHour : pb::IMessage<HistoryHour>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HistoryHour> _parser = new pb::MessageParser<HistoryHour>(() => new HistoryHour());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HistoryHour> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.HistoryHourReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HistoryHour() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HistoryHour(HistoryHour other) : this() {
      _hasBits0 = other._hasBits0;
      interval_ = other.interval_ != null ? other.interval_.Clone() : null;
      displayDateTime_ = other.displayDateTime_ != null ? other.displayDateTime_.Clone() : null;
      isDaytime_ = other.isDaytime_;
      weatherCondition_ = other.weatherCondition_ != null ? other.weatherCondition_.Clone() : null;
      temperature_ = other.temperature_ != null ? other.temperature_.Clone() : null;
      feelsLikeTemperature_ = other.feelsLikeTemperature_ != null ? other.feelsLikeTemperature_.Clone() : null;
      dewPoint_ = other.dewPoint_ != null ? other.dewPoint_.Clone() : null;
      heatIndex_ = other.heatIndex_ != null ? other.heatIndex_.Clone() : null;
      windChill_ = other.windChill_ != null ? other.windChill_.Clone() : null;
      wetBulbTemperature_ = other.wetBulbTemperature_ != null ? other.wetBulbTemperature_.Clone() : null;
      relativeHumidity_ = other.relativeHumidity_;
      uvIndex_ = other.uvIndex_;
      precipitation_ = other.precipitation_ != null ? other.precipitation_.Clone() : null;
      thunderstormProbability_ = other.thunderstormProbability_;
      airPressure_ = other.airPressure_ != null ? other.airPressure_.Clone() : null;
      wind_ = other.wind_ != null ? other.wind_.Clone() : null;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      cloudCover_ = other.cloudCover_;
      iceThickness_ = other.iceThickness_ != null ? other.iceThickness_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HistoryHour Clone() {
      return new HistoryHour(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private global::Google.Type.Interval interval_;
    /// <summary>
    /// The one hour interval (in UTC time) this historical data is valid for (the
    /// timestamps are rounded down to the closest hour).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.Interval Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "display_date_time" field.</summary>
    public const int DisplayDateTimeFieldNumber = 2;
    private global::Google.Type.DateTime displayDateTime_;
    /// <summary>
    /// The local date and time in the time zone of the location (civil time) which
    /// this hourly record is calculated for. This field may be used for display
    /// purposes on the client.
    /// Note: this date will consist of the year, month, day, hour and offset from
    /// UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.DateTime DisplayDateTime {
      get { return displayDateTime_; }
      set {
        displayDateTime_ = value;
      }
    }

    /// <summary>Field number for the "is_daytime" field.</summary>
    public const int IsDaytimeFieldNumber = 3;
    private readonly static bool IsDaytimeDefaultValue = false;

    private bool isDaytime_;
    /// <summary>
    /// True if this hour is between the local sunrise (inclusive) and sunset
    /// (exclusive) times. Otherwise, it is nighttime (between the sunset and the
    /// next sunrise).
    /// Note: this hour will be considered as daytime or nighttime if the interval
    /// intersects with the local sunrise and sunset times respectively (e.g.: if
    /// the interval is from 5am to 6am and sunrise is at 5:59am, then is_daytime
    /// will be true).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDaytime {
      get { if ((_hasBits0 & 1) != 0) { return isDaytime_; } else { return IsDaytimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isDaytime_ = value;
      }
    }
    /// <summary>Gets whether the "is_daytime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsDaytime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_daytime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsDaytime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "weather_condition" field.</summary>
    public const int WeatherConditionFieldNumber = 4;
    private global::Google.Geo.Weather.V1.WeatherCondition weatherCondition_;
    /// <summary>
    /// The historical weather condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.WeatherCondition WeatherCondition {
      get { return weatherCondition_; }
      set {
        weatherCondition_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 5;
    private global::Google.Geo.Weather.V1.Temperature temperature_;
    /// <summary>
    /// The historical temperature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "feels_like_temperature" field.</summary>
    public const int FeelsLikeTemperatureFieldNumber = 6;
    private global::Google.Geo.Weather.V1.Temperature feelsLikeTemperature_;
    /// <summary>
    /// The measure of how the temperature felt like at the requested
    /// location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature FeelsLikeTemperature {
      get { return feelsLikeTemperature_; }
      set {
        feelsLikeTemperature_ = value;
      }
    }

    /// <summary>Field number for the "dew_point" field.</summary>
    public const int DewPointFieldNumber = 7;
    private global::Google.Geo.Weather.V1.Temperature dewPoint_;
    /// <summary>
    /// The historical dew point temperature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature DewPoint {
      get { return dewPoint_; }
      set {
        dewPoint_ = value;
      }
    }

    /// <summary>Field number for the "heat_index" field.</summary>
    public const int HeatIndexFieldNumber = 8;
    private global::Google.Geo.Weather.V1.Temperature heatIndex_;
    /// <summary>
    /// The historical heat index temperature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature HeatIndex {
      get { return heatIndex_; }
      set {
        heatIndex_ = value;
      }
    }

    /// <summary>Field number for the "wind_chill" field.</summary>
    public const int WindChillFieldNumber = 9;
    private global::Google.Geo.Weather.V1.Temperature windChill_;
    /// <summary>
    /// The historical wind chill, air temperature exposed on the skin.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature WindChill {
      get { return windChill_; }
      set {
        windChill_ = value;
      }
    }

    /// <summary>Field number for the "wet_bulb_temperature" field.</summary>
    public const int WetBulbTemperatureFieldNumber = 10;
    private global::Google.Geo.Weather.V1.Temperature wetBulbTemperature_;
    /// <summary>
    /// The historical wet bulb temperature, lowest temperature achievable by
    /// evaporating water.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature WetBulbTemperature {
      get { return wetBulbTemperature_; }
      set {
        wetBulbTemperature_ = value;
      }
    }

    /// <summary>Field number for the "relative_humidity" field.</summary>
    public const int RelativeHumidityFieldNumber = 11;
    private readonly static int RelativeHumidityDefaultValue = 0;

    private int relativeHumidity_;
    /// <summary>
    /// The historical percent of relative humidity (values from 0 to 100).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RelativeHumidity {
      get { if ((_hasBits0 & 2) != 0) { return relativeHumidity_; } else { return RelativeHumidityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        relativeHumidity_ = value;
      }
    }
    /// <summary>Gets whether the "relative_humidity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRelativeHumidity {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "relative_humidity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRelativeHumidity() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "uv_index" field.</summary>
    public const int UvIndexFieldNumber = 12;
    private readonly static int UvIndexDefaultValue = 0;

    private int uvIndex_;
    /// <summary>
    /// The historical ultraviolet (UV) index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UvIndex {
      get { if ((_hasBits0 & 4) != 0) { return uvIndex_; } else { return UvIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        uvIndex_ = value;
      }
    }
    /// <summary>Gets whether the "uv_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUvIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "uv_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUvIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "precipitation" field.</summary>
    public const int PrecipitationFieldNumber = 13;
    private global::Google.Geo.Weather.V1.Precipitation precipitation_;
    /// <summary>
    /// The historical precipitation probability and amount of precipitation
    /// accumulated over the last hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Precipitation Precipitation {
      get { return precipitation_; }
      set {
        precipitation_ = value;
      }
    }

    /// <summary>Field number for the "thunderstorm_probability" field.</summary>
    public const int ThunderstormProbabilityFieldNumber = 14;
    private readonly static int ThunderstormProbabilityDefaultValue = 0;

    private int thunderstormProbability_;
    /// <summary>
    /// The historical thunderstorm probability (values from 0 to 100).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThunderstormProbability {
      get { if ((_hasBits0 & 8) != 0) { return thunderstormProbability_; } else { return ThunderstormProbabilityDefaultValue; } }
      set {
        _hasBits0 |= 8;
        thunderstormProbability_ = value;
      }
    }
    /// <summary>Gets whether the "thunderstorm_probability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThunderstormProbability {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "thunderstorm_probability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThunderstormProbability() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "air_pressure" field.</summary>
    public const int AirPressureFieldNumber = 15;
    private global::Google.Geo.Weather.V1.AirPressure airPressure_;
    /// <summary>
    /// The historical air pressure conditions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.AirPressure AirPressure {
      get { return airPressure_; }
      set {
        airPressure_ = value;
      }
    }

    /// <summary>Field number for the "wind" field.</summary>
    public const int WindFieldNumber = 16;
    private global::Google.Geo.Weather.V1.Wind wind_;
    /// <summary>
    /// The historical wind conditions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Wind Wind {
      get { return wind_; }
      set {
        wind_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 17;
    private global::Google.Geo.Weather.V1.Visibility visibility_;
    /// <summary>
    /// The historical visibility.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "cloud_cover" field.</summary>
    public const int CloudCoverFieldNumber = 18;
    private readonly static int CloudCoverDefaultValue = 0;

    private int cloudCover_;
    /// <summary>
    /// The historical percentage of the sky covered by clouds (values from 0 to
    /// 100).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CloudCover {
      get { if ((_hasBits0 & 16) != 0) { return cloudCover_; } else { return CloudCoverDefaultValue; } }
      set {
        _hasBits0 |= 16;
        cloudCover_ = value;
      }
    }
    /// <summary>Gets whether the "cloud_cover" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCloudCover {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cloud_cover" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCloudCover() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "ice_thickness" field.</summary>
    public const int IceThicknessFieldNumber = 19;
    private global::Google.Geo.Weather.V1.IceThickness iceThickness_;
    /// <summary>
    /// The historical ice thickness.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.IceThickness IceThickness {
      get { return iceThickness_; }
      set {
        iceThickness_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HistoryHour);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HistoryHour other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(DisplayDateTime, other.DisplayDateTime)) return false;
      if (IsDaytime != other.IsDaytime) return false;
      if (!object.Equals(WeatherCondition, other.WeatherCondition)) return false;
      if (!object.Equals(Temperature, other.Temperature)) return false;
      if (!object.Equals(FeelsLikeTemperature, other.FeelsLikeTemperature)) return false;
      if (!object.Equals(DewPoint, other.DewPoint)) return false;
      if (!object.Equals(HeatIndex, other.HeatIndex)) return false;
      if (!object.Equals(WindChill, other.WindChill)) return false;
      if (!object.Equals(WetBulbTemperature, other.WetBulbTemperature)) return false;
      if (RelativeHumidity != other.RelativeHumidity) return false;
      if (UvIndex != other.UvIndex) return false;
      if (!object.Equals(Precipitation, other.Precipitation)) return false;
      if (ThunderstormProbability != other.ThunderstormProbability) return false;
      if (!object.Equals(AirPressure, other.AirPressure)) return false;
      if (!object.Equals(Wind, other.Wind)) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (CloudCover != other.CloudCover) return false;
      if (!object.Equals(IceThickness, other.IceThickness)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (displayDateTime_ != null) hash ^= DisplayDateTime.GetHashCode();
      if (HasIsDaytime) hash ^= IsDaytime.GetHashCode();
      if (weatherCondition_ != null) hash ^= WeatherCondition.GetHashCode();
      if (temperature_ != null) hash ^= Temperature.GetHashCode();
      if (feelsLikeTemperature_ != null) hash ^= FeelsLikeTemperature.GetHashCode();
      if (dewPoint_ != null) hash ^= DewPoint.GetHashCode();
      if (heatIndex_ != null) hash ^= HeatIndex.GetHashCode();
      if (windChill_ != null) hash ^= WindChill.GetHashCode();
      if (wetBulbTemperature_ != null) hash ^= WetBulbTemperature.GetHashCode();
      if (HasRelativeHumidity) hash ^= RelativeHumidity.GetHashCode();
      if (HasUvIndex) hash ^= UvIndex.GetHashCode();
      if (precipitation_ != null) hash ^= Precipitation.GetHashCode();
      if (HasThunderstormProbability) hash ^= ThunderstormProbability.GetHashCode();
      if (airPressure_ != null) hash ^= AirPressure.GetHashCode();
      if (wind_ != null) hash ^= Wind.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (HasCloudCover) hash ^= CloudCover.GetHashCode();
      if (iceThickness_ != null) hash ^= IceThickness.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (interval_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Interval);
      }
      if (displayDateTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DisplayDateTime);
      }
      if (HasIsDaytime) {
        output.WriteRawTag(24);
        output.WriteBool(IsDaytime);
      }
      if (weatherCondition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeatherCondition);
      }
      if (temperature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Temperature);
      }
      if (feelsLikeTemperature_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FeelsLikeTemperature);
      }
      if (dewPoint_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DewPoint);
      }
      if (heatIndex_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(HeatIndex);
      }
      if (windChill_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(WindChill);
      }
      if (wetBulbTemperature_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WetBulbTemperature);
      }
      if (HasRelativeHumidity) {
        output.WriteRawTag(88);
        output.WriteInt32(RelativeHumidity);
      }
      if (HasUvIndex) {
        output.WriteRawTag(96);
        output.WriteInt32(UvIndex);
      }
      if (precipitation_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Precipitation);
      }
      if (HasThunderstormProbability) {
        output.WriteRawTag(112);
        output.WriteInt32(ThunderstormProbability);
      }
      if (airPressure_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(AirPressure);
      }
      if (wind_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Wind);
      }
      if (visibility_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Visibility);
      }
      if (HasCloudCover) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CloudCover);
      }
      if (iceThickness_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(IceThickness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (interval_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Interval);
      }
      if (displayDateTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DisplayDateTime);
      }
      if (HasIsDaytime) {
        output.WriteRawTag(24);
        output.WriteBool(IsDaytime);
      }
      if (weatherCondition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeatherCondition);
      }
      if (temperature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Temperature);
      }
      if (feelsLikeTemperature_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FeelsLikeTemperature);
      }
      if (dewPoint_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DewPoint);
      }
      if (heatIndex_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(HeatIndex);
      }
      if (windChill_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(WindChill);
      }
      if (wetBulbTemperature_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(WetBulbTemperature);
      }
      if (HasRelativeHumidity) {
        output.WriteRawTag(88);
        output.WriteInt32(RelativeHumidity);
      }
      if (HasUvIndex) {
        output.WriteRawTag(96);
        output.WriteInt32(UvIndex);
      }
      if (precipitation_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Precipitation);
      }
      if (HasThunderstormProbability) {
        output.WriteRawTag(112);
        output.WriteInt32(ThunderstormProbability);
      }
      if (airPressure_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(AirPressure);
      }
      if (wind_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Wind);
      }
      if (visibility_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Visibility);
      }
      if (HasCloudCover) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CloudCover);
      }
      if (iceThickness_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(IceThickness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (displayDateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayDateTime);
      }
      if (HasIsDaytime) {
        size += 1 + 1;
      }
      if (weatherCondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeatherCondition);
      }
      if (temperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Temperature);
      }
      if (feelsLikeTemperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeelsLikeTemperature);
      }
      if (dewPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DewPoint);
      }
      if (heatIndex_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeatIndex);
      }
      if (windChill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindChill);
      }
      if (wetBulbTemperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WetBulbTemperature);
      }
      if (HasRelativeHumidity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelativeHumidity);
      }
      if (HasUvIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UvIndex);
      }
      if (precipitation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Precipitation);
      }
      if (HasThunderstormProbability) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThunderstormProbability);
      }
      if (airPressure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirPressure);
      }
      if (wind_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Wind);
      }
      if (visibility_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (HasCloudCover) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CloudCover);
      }
      if (iceThickness_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IceThickness);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HistoryHour other) {
      if (other == null) {
        return;
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          Interval = new global::Google.Type.Interval();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.displayDateTime_ != null) {
        if (displayDateTime_ == null) {
          DisplayDateTime = new global::Google.Type.DateTime();
        }
        DisplayDateTime.MergeFrom(other.DisplayDateTime);
      }
      if (other.HasIsDaytime) {
        IsDaytime = other.IsDaytime;
      }
      if (other.weatherCondition_ != null) {
        if (weatherCondition_ == null) {
          WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
        }
        WeatherCondition.MergeFrom(other.WeatherCondition);
      }
      if (other.temperature_ != null) {
        if (temperature_ == null) {
          Temperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        Temperature.MergeFrom(other.Temperature);
      }
      if (other.feelsLikeTemperature_ != null) {
        if (feelsLikeTemperature_ == null) {
          FeelsLikeTemperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        FeelsLikeTemperature.MergeFrom(other.FeelsLikeTemperature);
      }
      if (other.dewPoint_ != null) {
        if (dewPoint_ == null) {
          DewPoint = new global::Google.Geo.Weather.V1.Temperature();
        }
        DewPoint.MergeFrom(other.DewPoint);
      }
      if (other.heatIndex_ != null) {
        if (heatIndex_ == null) {
          HeatIndex = new global::Google.Geo.Weather.V1.Temperature();
        }
        HeatIndex.MergeFrom(other.HeatIndex);
      }
      if (other.windChill_ != null) {
        if (windChill_ == null) {
          WindChill = new global::Google.Geo.Weather.V1.Temperature();
        }
        WindChill.MergeFrom(other.WindChill);
      }
      if (other.wetBulbTemperature_ != null) {
        if (wetBulbTemperature_ == null) {
          WetBulbTemperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        WetBulbTemperature.MergeFrom(other.WetBulbTemperature);
      }
      if (other.HasRelativeHumidity) {
        RelativeHumidity = other.RelativeHumidity;
      }
      if (other.HasUvIndex) {
        UvIndex = other.UvIndex;
      }
      if (other.precipitation_ != null) {
        if (precipitation_ == null) {
          Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
        }
        Precipitation.MergeFrom(other.Precipitation);
      }
      if (other.HasThunderstormProbability) {
        ThunderstormProbability = other.ThunderstormProbability;
      }
      if (other.airPressure_ != null) {
        if (airPressure_ == null) {
          AirPressure = new global::Google.Geo.Weather.V1.AirPressure();
        }
        AirPressure.MergeFrom(other.AirPressure);
      }
      if (other.wind_ != null) {
        if (wind_ == null) {
          Wind = new global::Google.Geo.Weather.V1.Wind();
        }
        Wind.MergeFrom(other.Wind);
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Google.Geo.Weather.V1.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.HasCloudCover) {
        CloudCover = other.CloudCover;
      }
      if (other.iceThickness_ != null) {
        if (iceThickness_ == null) {
          IceThickness = new global::Google.Geo.Weather.V1.IceThickness();
        }
        IceThickness.MergeFrom(other.IceThickness);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (interval_ == null) {
              Interval = new global::Google.Type.Interval();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 18: {
            if (displayDateTime_ == null) {
              DisplayDateTime = new global::Google.Type.DateTime();
            }
            input.ReadMessage(DisplayDateTime);
            break;
          }
          case 24: {
            IsDaytime = input.ReadBool();
            break;
          }
          case 34: {
            if (weatherCondition_ == null) {
              WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
            }
            input.ReadMessage(WeatherCondition);
            break;
          }
          case 42: {
            if (temperature_ == null) {
              Temperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(Temperature);
            break;
          }
          case 50: {
            if (feelsLikeTemperature_ == null) {
              FeelsLikeTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(FeelsLikeTemperature);
            break;
          }
          case 58: {
            if (dewPoint_ == null) {
              DewPoint = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(DewPoint);
            break;
          }
          case 66: {
            if (heatIndex_ == null) {
              HeatIndex = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(HeatIndex);
            break;
          }
          case 74: {
            if (windChill_ == null) {
              WindChill = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(WindChill);
            break;
          }
          case 82: {
            if (wetBulbTemperature_ == null) {
              WetBulbTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(WetBulbTemperature);
            break;
          }
          case 88: {
            RelativeHumidity = input.ReadInt32();
            break;
          }
          case 96: {
            UvIndex = input.ReadInt32();
            break;
          }
          case 106: {
            if (precipitation_ == null) {
              Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
            }
            input.ReadMessage(Precipitation);
            break;
          }
          case 112: {
            ThunderstormProbability = input.ReadInt32();
            break;
          }
          case 122: {
            if (airPressure_ == null) {
              AirPressure = new global::Google.Geo.Weather.V1.AirPressure();
            }
            input.ReadMessage(AirPressure);
            break;
          }
          case 130: {
            if (wind_ == null) {
              Wind = new global::Google.Geo.Weather.V1.Wind();
            }
            input.ReadMessage(Wind);
            break;
          }
          case 138: {
            if (visibility_ == null) {
              Visibility = new global::Google.Geo.Weather.V1.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 144: {
            CloudCover = input.ReadInt32();
            break;
          }
          case 154: {
            if (iceThickness_ == null) {
              IceThickness = new global::Google.Geo.Weather.V1.IceThickness();
            }
            input.ReadMessage(IceThickness);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (interval_ == null) {
              Interval = new global::Google.Type.Interval();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 18: {
            if (displayDateTime_ == null) {
              DisplayDateTime = new global::Google.Type.DateTime();
            }
            input.ReadMessage(DisplayDateTime);
            break;
          }
          case 24: {
            IsDaytime = input.ReadBool();
            break;
          }
          case 34: {
            if (weatherCondition_ == null) {
              WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
            }
            input.ReadMessage(WeatherCondition);
            break;
          }
          case 42: {
            if (temperature_ == null) {
              Temperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(Temperature);
            break;
          }
          case 50: {
            if (feelsLikeTemperature_ == null) {
              FeelsLikeTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(FeelsLikeTemperature);
            break;
          }
          case 58: {
            if (dewPoint_ == null) {
              DewPoint = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(DewPoint);
            break;
          }
          case 66: {
            if (heatIndex_ == null) {
              HeatIndex = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(HeatIndex);
            break;
          }
          case 74: {
            if (windChill_ == null) {
              WindChill = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(WindChill);
            break;
          }
          case 82: {
            if (wetBulbTemperature_ == null) {
              WetBulbTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(WetBulbTemperature);
            break;
          }
          case 88: {
            RelativeHumidity = input.ReadInt32();
            break;
          }
          case 96: {
            UvIndex = input.ReadInt32();
            break;
          }
          case 106: {
            if (precipitation_ == null) {
              Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
            }
            input.ReadMessage(Precipitation);
            break;
          }
          case 112: {
            ThunderstormProbability = input.ReadInt32();
            break;
          }
          case 122: {
            if (airPressure_ == null) {
              AirPressure = new global::Google.Geo.Weather.V1.AirPressure();
            }
            input.ReadMessage(AirPressure);
            break;
          }
          case 130: {
            if (wind_ == null) {
              Wind = new global::Google.Geo.Weather.V1.Wind();
            }
            input.ReadMessage(Wind);
            break;
          }
          case 138: {
            if (visibility_ == null) {
              Visibility = new global::Google.Geo.Weather.V1.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 144: {
            CloudCover = input.ReadInt32();
            break;
          }
          case 154: {
            if (iceThickness_ == null) {
              IceThickness = new global::Google.Geo.Weather.V1.IceThickness();
            }
            input.ReadMessage(IceThickness);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
