// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/precipitation.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Geo.Weather.V1 {

  /// <summary>Holder for reflection information generated from google/maps/weather/v1/precipitation.proto</summary>
  public static partial class PrecipitationReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/weather/v1/precipitation.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PrecipitationReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cipnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3ByZWNpcGl0YXRpb24ucHJvdG8S",
            "Fmdvb2dsZS5tYXBzLndlYXRoZXIudjEi6wEKDVByZWNpcGl0YXRpb24SRQoL",
            "cHJvYmFiaWxpdHkYASABKAsyMC5nb29nbGUubWFwcy53ZWF0aGVyLnYxLlBy",
            "ZWNpcGl0YXRpb25Qcm9iYWJpbGl0eRJLCghzbm93X3FwZhgDIAEoCzI5Lmdv",
            "b2dsZS5tYXBzLndlYXRoZXIudjEuUXVhbnRpdGF0aXZlUHJlY2lwaXRhdGlv",
            "bkZvcmVjYXN0EkYKA3FwZhgEIAEoCzI5Lmdvb2dsZS5tYXBzLndlYXRoZXIu",
            "djEuUXVhbnRpdGF0aXZlUHJlY2lwaXRhdGlvbkZvcmVjYXN0InUKGFByZWNp",
            "cGl0YXRpb25Qcm9iYWJpbGl0eRIUCgdwZXJjZW50GAEgASgFSACIAQESNwoE",
            "dHlwZRgCIAEoDjIpLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuUHJlY2lwaXRh",
            "dGlvblR5cGVCCgoIX3BlcmNlbnQi0AEKIVF1YW50aXRhdGl2ZVByZWNpcGl0",
            "YXRpb25Gb3JlY2FzdBIVCghxdWFudGl0eRgBIAEoAkgAiAEBEkwKBHVuaXQY",
            "AiABKA4yPi5nb29nbGUubWFwcy53ZWF0aGVyLnYxLlF1YW50aXRhdGl2ZVBy",
            "ZWNpcGl0YXRpb25Gb3JlY2FzdC5Vbml0IjkKBFVuaXQSFAoQVU5JVF9VTlNQ",
            "RUNJRklFRBAAEg8KC01JTExJTUVURVJTEAMSCgoGSU5DSEVTEAJCCwoJX3F1",
            "YW50aXR5KqYBChFQcmVjaXBpdGF0aW9uVHlwZRIiCh5QUkVDSVBJVEFUSU9O",
            "X1RZUEVfVU5TUEVDSUZJRUQQABIICgROT05FEAgSCAoEU05PVxABEggKBFJB",
            "SU4QAhIOCgpMSUdIVF9SQUlOEAMSDgoKSEVBVllfUkFJThAEEhEKDVJBSU5f",
            "QU5EX1NOT1cQBRIJCgVTTEVFVBAGEhEKDUZSRUVaSU5HX1JBSU4QB0KmAQoa",
            "Y29tLmdvb2dsZS5tYXBzLndlYXRoZXIudjFCElByZWNpcGl0YXRpb25Qcm90",
            "b1ABWjpjbG91ZC5nb29nbGUuY29tL2dvL21hcHMvd2VhdGhlci9hcGl2MS93",
            "ZWF0aGVycGI7d2VhdGhlcnBiogIFR01XVjGqAhVHb29nbGUuR2VvLldlYXRo",
            "ZXIuVjHKAhVHb29nbGVcR2VvXFdlYXRoZXJcVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Geo.Weather.V1.PrecipitationType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.Precipitation), global::Google.Geo.Weather.V1.Precipitation.Parser, new[]{ "Probability", "SnowQpf", "Qpf" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.PrecipitationProbability), global::Google.Geo.Weather.V1.PrecipitationProbability.Parser, new[]{ "Percent", "Type" }, new[]{ "Percent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast), global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Parser, new[]{ "Quantity", "Unit" }, new[]{ "Quantity" }, new[]{ typeof(global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Represents the type of precipitation at a given location.
  /// </summary>
  public enum PrecipitationType {
    /// <summary>
    /// Unspecified precipitation type.
    /// </summary>
    [pbr::OriginalName("PRECIPITATION_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// No precipitation.
    /// </summary>
    [pbr::OriginalName("NONE")] None = 8,
    /// <summary>
    /// Snow precipitation.
    /// </summary>
    [pbr::OriginalName("SNOW")] Snow = 1,
    /// <summary>
    /// Rain precipitation.
    /// </summary>
    [pbr::OriginalName("RAIN")] Rain = 2,
    /// <summary>
    /// Light rain precipitation.
    /// </summary>
    [pbr::OriginalName("LIGHT_RAIN")] LightRain = 3,
    /// <summary>
    /// Heavy rain precipitation.
    /// </summary>
    [pbr::OriginalName("HEAVY_RAIN")] HeavyRain = 4,
    /// <summary>
    /// Both rain and snow precipitations.
    /// </summary>
    [pbr::OriginalName("RAIN_AND_SNOW")] RainAndSnow = 5,
    /// <summary>
    /// Sleet precipitation.
    /// </summary>
    [pbr::OriginalName("SLEET")] Sleet = 6,
    /// <summary>
    /// Freezing rain precipitation.
    /// </summary>
    [pbr::OriginalName("FREEZING_RAIN")] FreezingRain = 7,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Represents a set of precipitation values at a given location.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Precipitation : pb::IMessage<Precipitation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Precipitation> _parser = new pb::MessageParser<Precipitation>(() => new Precipitation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Precipitation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.PrecipitationReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Precipitation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Precipitation(Precipitation other) : this() {
      probability_ = other.probability_ != null ? other.probability_.Clone() : null;
      snowQpf_ = other.snowQpf_ != null ? other.snowQpf_.Clone() : null;
      qpf_ = other.qpf_ != null ? other.qpf_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Precipitation Clone() {
      return new Precipitation(this);
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 1;
    private global::Google.Geo.Weather.V1.PrecipitationProbability probability_;
    /// <summary>
    /// The probability of precipitation (values from 0 to 100).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.PrecipitationProbability Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "snow_qpf" field.</summary>
    public const int SnowQpfFieldNumber = 3;
    private global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast snowQpf_;
    /// <summary>
    /// The amount of snow, measured as liquid water equivalent, that has
    /// accumulated over a period of time. Note: QPF is an abbreviation for
    /// Quantitative Precipitation Forecast (please see the
    /// QuantitativePrecipitationForecast definition for more details).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast SnowQpf {
      get { return snowQpf_; }
      set {
        snowQpf_ = value;
      }
    }

    /// <summary>Field number for the "qpf" field.</summary>
    public const int QpfFieldNumber = 4;
    private global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast qpf_;
    /// <summary>
    /// The amount of rain, measured as liquid water equivalent, that has
    /// accumulated over a period of time. Note: QPF is an abbreviation for
    /// Quantitative Precipitation Forecast (please see the
    /// QuantitativePrecipitationForecast definition for more details).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast Qpf {
      get { return qpf_; }
      set {
        qpf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Precipitation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Precipitation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Probability, other.Probability)) return false;
      if (!object.Equals(SnowQpf, other.SnowQpf)) return false;
      if (!object.Equals(Qpf, other.Qpf)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (probability_ != null) hash ^= Probability.GetHashCode();
      if (snowQpf_ != null) hash ^= SnowQpf.GetHashCode();
      if (qpf_ != null) hash ^= Qpf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (probability_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Probability);
      }
      if (snowQpf_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SnowQpf);
      }
      if (qpf_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Qpf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (probability_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Probability);
      }
      if (snowQpf_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SnowQpf);
      }
      if (qpf_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Qpf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (probability_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Probability);
      }
      if (snowQpf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SnowQpf);
      }
      if (qpf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Qpf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Precipitation other) {
      if (other == null) {
        return;
      }
      if (other.probability_ != null) {
        if (probability_ == null) {
          Probability = new global::Google.Geo.Weather.V1.PrecipitationProbability();
        }
        Probability.MergeFrom(other.Probability);
      }
      if (other.snowQpf_ != null) {
        if (snowQpf_ == null) {
          SnowQpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
        }
        SnowQpf.MergeFrom(other.SnowQpf);
      }
      if (other.qpf_ != null) {
        if (qpf_ == null) {
          Qpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
        }
        Qpf.MergeFrom(other.Qpf);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (probability_ == null) {
              Probability = new global::Google.Geo.Weather.V1.PrecipitationProbability();
            }
            input.ReadMessage(Probability);
            break;
          }
          case 26: {
            if (snowQpf_ == null) {
              SnowQpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
            }
            input.ReadMessage(SnowQpf);
            break;
          }
          case 34: {
            if (qpf_ == null) {
              Qpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
            }
            input.ReadMessage(Qpf);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (probability_ == null) {
              Probability = new global::Google.Geo.Weather.V1.PrecipitationProbability();
            }
            input.ReadMessage(Probability);
            break;
          }
          case 26: {
            if (snowQpf_ == null) {
              SnowQpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
            }
            input.ReadMessage(SnowQpf);
            break;
          }
          case 34: {
            if (qpf_ == null) {
              Qpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
            }
            input.ReadMessage(Qpf);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents the probability of precipitation at a given location.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PrecipitationProbability : pb::IMessage<PrecipitationProbability>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PrecipitationProbability> _parser = new pb::MessageParser<PrecipitationProbability>(() => new PrecipitationProbability());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PrecipitationProbability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.PrecipitationReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrecipitationProbability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrecipitationProbability(PrecipitationProbability other) : this() {
      _hasBits0 = other._hasBits0;
      percent_ = other.percent_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PrecipitationProbability Clone() {
      return new PrecipitationProbability(this);
    }

    /// <summary>Field number for the "percent" field.</summary>
    public const int PercentFieldNumber = 1;
    private readonly static int PercentDefaultValue = 0;

    private int percent_;
    /// <summary>
    /// A percentage from 0 to 100 that indicates the chances of precipitation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Percent {
      get { if ((_hasBits0 & 1) != 0) { return percent_; } else { return PercentDefaultValue; } }
      set {
        _hasBits0 |= 1;
        percent_ = value;
      }
    }
    /// <summary>Gets whether the "percent" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPercent {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "percent" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPercent() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Google.Geo.Weather.V1.PrecipitationType type_ = global::Google.Geo.Weather.V1.PrecipitationType.Unspecified;
    /// <summary>
    /// A code that indicates the type of precipitation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.PrecipitationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PrecipitationProbability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PrecipitationProbability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Percent != other.Percent) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPercent) hash ^= Percent.GetHashCode();
      if (Type != global::Google.Geo.Weather.V1.PrecipitationType.Unspecified) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasPercent) {
        output.WriteRawTag(8);
        output.WriteInt32(Percent);
      }
      if (Type != global::Google.Geo.Weather.V1.PrecipitationType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPercent) {
        output.WriteRawTag(8);
        output.WriteInt32(Percent);
      }
      if (Type != global::Google.Geo.Weather.V1.PrecipitationType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPercent) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Percent);
      }
      if (Type != global::Google.Geo.Weather.V1.PrecipitationType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PrecipitationProbability other) {
      if (other == null) {
        return;
      }
      if (other.HasPercent) {
        Percent = other.Percent;
      }
      if (other.Type != global::Google.Geo.Weather.V1.PrecipitationType.Unspecified) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Percent = input.ReadInt32();
            break;
          }
          case 16: {
            Type = (global::Google.Geo.Weather.V1.PrecipitationType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Percent = input.ReadInt32();
            break;
          }
          case 16: {
            Type = (global::Google.Geo.Weather.V1.PrecipitationType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents the expected amount of melted precipitation accumulated over a
  /// specified time period over a specified area (reference:
  /// https://en.wikipedia.org/wiki/Quantitative_precipitation_forecast) -
  /// usually abbreviated QPF for short.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class QuantitativePrecipitationForecast : pb::IMessage<QuantitativePrecipitationForecast>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QuantitativePrecipitationForecast> _parser = new pb::MessageParser<QuantitativePrecipitationForecast>(() => new QuantitativePrecipitationForecast());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<QuantitativePrecipitationForecast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.PrecipitationReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuantitativePrecipitationForecast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuantitativePrecipitationForecast(QuantitativePrecipitationForecast other) : this() {
      _hasBits0 = other._hasBits0;
      quantity_ = other.quantity_;
      unit_ = other.unit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public QuantitativePrecipitationForecast Clone() {
      return new QuantitativePrecipitationForecast(this);
    }

    /// <summary>Field number for the "quantity" field.</summary>
    public const int QuantityFieldNumber = 1;
    private readonly static float QuantityDefaultValue = 0F;

    private float quantity_;
    /// <summary>
    /// The amount of precipitation, measured as liquid water equivalent, that has
    /// accumulated over a period of time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Quantity {
      get { if ((_hasBits0 & 1) != 0) { return quantity_; } else { return QuantityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        quantity_ = value;
      }
    }
    /// <summary>Gets whether the "quantity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasQuantity {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "quantity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearQuantity() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 2;
    private global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit unit_ = global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit.Unspecified;
    /// <summary>
    /// The code of the unit used to measure the amount of accumulated
    /// precipitation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as QuantitativePrecipitationForecast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(QuantitativePrecipitationForecast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Quantity, other.Quantity)) return false;
      if (Unit != other.Unit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuantity) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Quantity);
      if (Unit != global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit.Unspecified) hash ^= Unit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuantity) {
        output.WriteRawTag(13);
        output.WriteFloat(Quantity);
      }
      if (Unit != global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuantity) {
        output.WriteRawTag(13);
        output.WriteFloat(Quantity);
      }
      if (Unit != global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasQuantity) {
        size += 1 + 4;
      }
      if (Unit != global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(QuantitativePrecipitationForecast other) {
      if (other == null) {
        return;
      }
      if (other.HasQuantity) {
        Quantity = other.Quantity;
      }
      if (other.Unit != global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit.Unspecified) {
        Unit = other.Unit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Quantity = input.ReadFloat();
            break;
          }
          case 16: {
            Unit = (global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Quantity = input.ReadFloat();
            break;
          }
          case 16: {
            Unit = (global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast.Types.Unit) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the QuantitativePrecipitationForecast message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Represents the unit used to measure the amount of accumulated
      /// precipitation.
      /// </summary>
      public enum Unit {
        /// <summary>
        /// Unspecified precipitation unit.
        /// </summary>
        [pbr::OriginalName("UNIT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The amount of precipitation is measured in millimeters.
        /// </summary>
        [pbr::OriginalName("MILLIMETERS")] Millimeters = 3,
        /// <summary>
        /// The amount of precipitation is measured in inches.
        /// </summary>
        [pbr::OriginalName("INCHES")] Inches = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
