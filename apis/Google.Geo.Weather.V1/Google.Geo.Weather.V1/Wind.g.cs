// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/wind.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Geo.Weather.V1 {

  /// <summary>Holder for reflection information generated from google/maps/weather/v1/wind.proto</summary>
  public static partial class WindReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/weather/v1/wind.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WindReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3dpbmQucHJvdG8SFmdvb2dsZS5t",
            "YXBzLndlYXRoZXIudjEiowEKBFdpbmQSOAoJZGlyZWN0aW9uGAEgASgLMiUu",
            "Z29vZ2xlLm1hcHMud2VhdGhlci52MS5XaW5kRGlyZWN0aW9uEjAKBXNwZWVk",
            "GAIgASgLMiEuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5XaW5kU3BlZWQSLwoE",
            "Z3VzdBgDIAEoCzIhLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuV2luZFNwZWVk",
            "Im4KDVdpbmREaXJlY3Rpb24SFAoHZGVncmVlcxgBIAEoBUgAiAEBEjsKCGNh",
            "cmRpbmFsGAIgASgOMikuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5DYXJkaW5h",
            "bERpcmVjdGlvbkIKCghfZGVncmVlcyJaCglXaW5kU3BlZWQSEgoFdmFsdWUY",
            "ASABKAJIAIgBARIvCgR1bml0GAIgASgOMiEuZ29vZ2xlLm1hcHMud2VhdGhl",
            "ci52MS5TcGVlZFVuaXRCCAoGX3ZhbHVlKsECChFDYXJkaW5hbERpcmVjdGlv",
            "bhIiCh5DQVJESU5BTF9ESVJFQ1RJT05fVU5TUEVDSUZJRUQQABIJCgVOT1JU",
            "SBABEhMKD05PUlRIX05PUlRIRUFTVBACEg0KCU5PUlRIRUFTVBADEhIKDkVB",
            "U1RfTk9SVEhFQVNUEAQSCAoERUFTVBAFEhIKDkVBU1RfU09VVEhFQVNUEAYS",
            "DQoJU09VVEhFQVNUEAcSEwoPU09VVEhfU09VVEhFQVNUEAgSCQoFU09VVEgQ",
            "CRITCg9TT1VUSF9TT1VUSFdFU1QQChINCglTT1VUSFdFU1QQCxISCg5XRVNU",
            "X1NPVVRIV0VTVBAMEggKBFdFU1QQDRISCg5XRVNUX05PUlRIV0VTVBAOEg0K",
            "CU5PUlRIV0VTVBAPEhMKD05PUlRIX05PUlRIV0VTVBAQKlQKCVNwZWVkVW5p",
            "dBIaChZTUEVFRF9VTklUX1VOU1BFQ0lGSUVEEAASFwoTS0lMT01FVEVSU19Q",
            "RVJfSE9VUhABEhIKDk1JTEVTX1BFUl9IT1VSEAJCnQEKGmNvbS5nb29nbGUu",
            "bWFwcy53ZWF0aGVyLnYxQglXaW5kUHJvdG9QAVo6Y2xvdWQuZ29vZ2xlLmNv",
            "bS9nby9tYXBzL3dlYXRoZXIvYXBpdjEvd2VhdGhlcnBiO3dlYXRoZXJwYqIC",
            "BUdNV1YxqgIVR29vZ2xlLkdlby5XZWF0aGVyLlYxygIVR29vZ2xlXEdlb1xX",
            "ZWF0aGVyXFYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Geo.Weather.V1.CardinalDirection), typeof(global::Google.Geo.Weather.V1.SpeedUnit), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.Wind), global::Google.Geo.Weather.V1.Wind.Parser, new[]{ "Direction", "Speed", "Gust" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.WindDirection), global::Google.Geo.Weather.V1.WindDirection.Parser, new[]{ "Degrees", "Cardinal" }, new[]{ "Degrees" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.WindSpeed), global::Google.Geo.Weather.V1.WindSpeed.Parser, new[]{ "Value", "Unit" }, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Represents a cardinal direction (including ordinal directions).
  /// </summary>
  public enum CardinalDirection {
    /// <summary>
    /// The cardinal direction is unspecified.
    /// </summary>
    [pbr::OriginalName("CARDINAL_DIRECTION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// The north cardinal direction.
    /// </summary>
    [pbr::OriginalName("NORTH")] North = 1,
    /// <summary>
    /// The north-northeast secondary intercardinal direction.
    /// </summary>
    [pbr::OriginalName("NORTH_NORTHEAST")] NorthNortheast = 2,
    /// <summary>
    /// The northeast intercardinal direction.
    /// </summary>
    [pbr::OriginalName("NORTHEAST")] Northeast = 3,
    /// <summary>
    /// The east-northeast secondary intercardinal direction.
    /// </summary>
    [pbr::OriginalName("EAST_NORTHEAST")] EastNortheast = 4,
    /// <summary>
    /// The east cardinal direction.
    /// </summary>
    [pbr::OriginalName("EAST")] East = 5,
    /// <summary>
    /// The east-southeast secondary intercardinal direction.
    /// </summary>
    [pbr::OriginalName("EAST_SOUTHEAST")] EastSoutheast = 6,
    /// <summary>
    /// The southeast intercardinal direction.
    /// </summary>
    [pbr::OriginalName("SOUTHEAST")] Southeast = 7,
    /// <summary>
    /// The south-southeast secondary intercardinal direction.
    /// </summary>
    [pbr::OriginalName("SOUTH_SOUTHEAST")] SouthSoutheast = 8,
    /// <summary>
    /// The south cardinal direction.
    /// </summary>
    [pbr::OriginalName("SOUTH")] South = 9,
    /// <summary>
    /// The south-southwest secondary intercardinal direction.
    /// </summary>
    [pbr::OriginalName("SOUTH_SOUTHWEST")] SouthSouthwest = 10,
    /// <summary>
    /// The southwest intercardinal direction.
    /// </summary>
    [pbr::OriginalName("SOUTHWEST")] Southwest = 11,
    /// <summary>
    /// The west-southwest secondary intercardinal direction.
    /// </summary>
    [pbr::OriginalName("WEST_SOUTHWEST")] WestSouthwest = 12,
    /// <summary>
    /// The west cardinal direction.
    /// </summary>
    [pbr::OriginalName("WEST")] West = 13,
    /// <summary>
    /// The west-northwest secondary intercardinal direction.
    /// </summary>
    [pbr::OriginalName("WEST_NORTHWEST")] WestNorthwest = 14,
    /// <summary>
    /// The northwest intercardinal direction.
    /// </summary>
    [pbr::OriginalName("NORTHWEST")] Northwest = 15,
    /// <summary>
    /// The north-northwest secondary intercardinal direction.
    /// </summary>
    [pbr::OriginalName("NORTH_NORTHWEST")] NorthNorthwest = 16,
  }

  /// <summary>
  /// Represents the unit used to measure speed.
  /// </summary>
  public enum SpeedUnit {
    /// <summary>
    /// The speed unit is unspecified.
    /// </summary>
    [pbr::OriginalName("SPEED_UNIT_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// The speed is measured in kilometers per hour.
    /// </summary>
    [pbr::OriginalName("KILOMETERS_PER_HOUR")] KilometersPerHour = 1,
    /// <summary>
    /// The speed is measured in miles per hour.
    /// </summary>
    [pbr::OriginalName("MILES_PER_HOUR")] MilesPerHour = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Represents a set of wind properties.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Wind : pb::IMessage<Wind>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Wind> _parser = new pb::MessageParser<Wind>(() => new Wind());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Wind> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WindReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Wind() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Wind(Wind other) : this() {
      direction_ = other.direction_ != null ? other.direction_.Clone() : null;
      speed_ = other.speed_ != null ? other.speed_.Clone() : null;
      gust_ = other.gust_ != null ? other.gust_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Wind Clone() {
      return new Wind(this);
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 1;
    private global::Google.Geo.Weather.V1.WindDirection direction_;
    /// <summary>
    /// The direction of the wind, the angle it is coming from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.WindDirection Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private global::Google.Geo.Weather.V1.WindSpeed speed_;
    /// <summary>
    /// The speed of the wind.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.WindSpeed Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "gust" field.</summary>
    public const int GustFieldNumber = 3;
    private global::Google.Geo.Weather.V1.WindSpeed gust_;
    /// <summary>
    /// The wind gust (sudden increase in the wind speed).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.WindSpeed Gust {
      get { return gust_; }
      set {
        gust_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Wind);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Wind other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Direction, other.Direction)) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(Gust, other.Gust)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (direction_ != null) hash ^= Direction.GetHashCode();
      if (speed_ != null) hash ^= Speed.GetHashCode();
      if (gust_ != null) hash ^= Gust.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (direction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Direction);
      }
      if (speed_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Speed);
      }
      if (gust_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Gust);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (direction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Direction);
      }
      if (speed_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Speed);
      }
      if (gust_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Gust);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (speed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speed);
      }
      if (gust_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gust);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Wind other) {
      if (other == null) {
        return;
      }
      if (other.direction_ != null) {
        if (direction_ == null) {
          Direction = new global::Google.Geo.Weather.V1.WindDirection();
        }
        Direction.MergeFrom(other.Direction);
      }
      if (other.speed_ != null) {
        if (speed_ == null) {
          Speed = new global::Google.Geo.Weather.V1.WindSpeed();
        }
        Speed.MergeFrom(other.Speed);
      }
      if (other.gust_ != null) {
        if (gust_ == null) {
          Gust = new global::Google.Geo.Weather.V1.WindSpeed();
        }
        Gust.MergeFrom(other.Gust);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (direction_ == null) {
              Direction = new global::Google.Geo.Weather.V1.WindDirection();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 18: {
            if (speed_ == null) {
              Speed = new global::Google.Geo.Weather.V1.WindSpeed();
            }
            input.ReadMessage(Speed);
            break;
          }
          case 26: {
            if (gust_ == null) {
              Gust = new global::Google.Geo.Weather.V1.WindSpeed();
            }
            input.ReadMessage(Gust);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (direction_ == null) {
              Direction = new global::Google.Geo.Weather.V1.WindDirection();
            }
            input.ReadMessage(Direction);
            break;
          }
          case 18: {
            if (speed_ == null) {
              Speed = new global::Google.Geo.Weather.V1.WindSpeed();
            }
            input.ReadMessage(Speed);
            break;
          }
          case 26: {
            if (gust_ == null) {
              Gust = new global::Google.Geo.Weather.V1.WindSpeed();
            }
            input.ReadMessage(Gust);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents the direction from which the wind originates.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class WindDirection : pb::IMessage<WindDirection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WindDirection> _parser = new pb::MessageParser<WindDirection>(() => new WindDirection());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WindDirection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WindReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WindDirection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WindDirection(WindDirection other) : this() {
      _hasBits0 = other._hasBits0;
      degrees_ = other.degrees_;
      cardinal_ = other.cardinal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WindDirection Clone() {
      return new WindDirection(this);
    }

    /// <summary>Field number for the "degrees" field.</summary>
    public const int DegreesFieldNumber = 1;
    private readonly static int DegreesDefaultValue = 0;

    private int degrees_;
    /// <summary>
    /// The direction of the wind in degrees (values from 0 to 360).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Degrees {
      get { if ((_hasBits0 & 1) != 0) { return degrees_; } else { return DegreesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        degrees_ = value;
      }
    }
    /// <summary>Gets whether the "degrees" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDegrees {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "degrees" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDegrees() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cardinal" field.</summary>
    public const int CardinalFieldNumber = 2;
    private global::Google.Geo.Weather.V1.CardinalDirection cardinal_ = global::Google.Geo.Weather.V1.CardinalDirection.Unspecified;
    /// <summary>
    /// The code that represents the cardinal direction from which the wind is
    /// blowing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.CardinalDirection Cardinal {
      get { return cardinal_; }
      set {
        cardinal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WindDirection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WindDirection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Degrees != other.Degrees) return false;
      if (Cardinal != other.Cardinal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDegrees) hash ^= Degrees.GetHashCode();
      if (Cardinal != global::Google.Geo.Weather.V1.CardinalDirection.Unspecified) hash ^= Cardinal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDegrees) {
        output.WriteRawTag(8);
        output.WriteInt32(Degrees);
      }
      if (Cardinal != global::Google.Geo.Weather.V1.CardinalDirection.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Cardinal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDegrees) {
        output.WriteRawTag(8);
        output.WriteInt32(Degrees);
      }
      if (Cardinal != global::Google.Geo.Weather.V1.CardinalDirection.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Cardinal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDegrees) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Degrees);
      }
      if (Cardinal != global::Google.Geo.Weather.V1.CardinalDirection.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cardinal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WindDirection other) {
      if (other == null) {
        return;
      }
      if (other.HasDegrees) {
        Degrees = other.Degrees;
      }
      if (other.Cardinal != global::Google.Geo.Weather.V1.CardinalDirection.Unspecified) {
        Cardinal = other.Cardinal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Degrees = input.ReadInt32();
            break;
          }
          case 16: {
            Cardinal = (global::Google.Geo.Weather.V1.CardinalDirection) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Degrees = input.ReadInt32();
            break;
          }
          case 16: {
            Cardinal = (global::Google.Geo.Weather.V1.CardinalDirection) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents the speed of the wind.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class WindSpeed : pb::IMessage<WindSpeed>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WindSpeed> _parser = new pb::MessageParser<WindSpeed>(() => new WindSpeed());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WindSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WindReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WindSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WindSpeed(WindSpeed other) : this() {
      _hasBits0 = other._hasBits0;
      value_ = other.value_;
      unit_ = other.unit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WindSpeed Clone() {
      return new WindSpeed(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private readonly static float ValueDefaultValue = 0F;

    private float value_;
    /// <summary>
    /// The value of the wind speed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Value {
      get { if ((_hasBits0 & 1) != 0) { return value_; } else { return ValueDefaultValue; } }
      set {
        _hasBits0 |= 1;
        value_ = value;
      }
    }
    /// <summary>Gets whether the "value" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasValue {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "value" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearValue() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 2;
    private global::Google.Geo.Weather.V1.SpeedUnit unit_ = global::Google.Geo.Weather.V1.SpeedUnit.Unspecified;
    /// <summary>
    /// The code that represents the unit used to measure the wind speed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.SpeedUnit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WindSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WindSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Unit != other.Unit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (Unit != global::Google.Geo.Weather.V1.SpeedUnit.Unspecified) hash ^= Unit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasValue) {
        output.WriteRawTag(13);
        output.WriteFloat(Value);
      }
      if (Unit != global::Google.Geo.Weather.V1.SpeedUnit.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasValue) {
        output.WriteRawTag(13);
        output.WriteFloat(Value);
      }
      if (Unit != global::Google.Geo.Weather.V1.SpeedUnit.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasValue) {
        size += 1 + 4;
      }
      if (Unit != global::Google.Geo.Weather.V1.SpeedUnit.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WindSpeed other) {
      if (other == null) {
        return;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.Unit != global::Google.Geo.Weather.V1.SpeedUnit.Unspecified) {
        Unit = other.Unit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Value = input.ReadFloat();
            break;
          }
          case 16: {
            Unit = (global::Google.Geo.Weather.V1.SpeedUnit) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Value = input.ReadFloat();
            break;
          }
          case 16: {
            Unit = (global::Google.Geo.Weather.V1.SpeedUnit) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
