// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/weather_condition.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Geo.Weather.V1 {

  /// <summary>Holder for reflection information generated from google/maps/weather/v1/weather_condition.proto</summary>
  public static partial class WeatherConditionReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/weather/v1/weather_condition.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeatherConditionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci5nb29nbGUvbWFwcy93ZWF0aGVyL3YxL3dlYXRoZXJfY29uZGl0aW9uLnBy",
            "b3RvEhZnb29nbGUubWFwcy53ZWF0aGVyLnYxGiBnb29nbGUvdHlwZS9sb2Nh",
            "bGl6ZWRfdGV4dC5wcm90byLoBwoQV2VhdGhlckNvbmRpdGlvbhIVCg1pY29u",
            "X2Jhc2VfdXJpGAEgASgJEi8KC2Rlc2NyaXB0aW9uGAIgASgLMhouZ29vZ2xl",
            "LnR5cGUuTG9jYWxpemVkVGV4dBI7CgR0eXBlGAMgASgOMi0uZ29vZ2xlLm1h",
            "cHMud2VhdGhlci52MS5XZWF0aGVyQ29uZGl0aW9uLlR5cGUizgYKBFR5cGUS",
            "FAoQVFlQRV9VTlNQRUNJRklFRBAAEgkKBUNMRUFSEAESEAoMTU9TVExZX0NM",
            "RUFSEAISEQoNUEFSVExZX0NMT1VEWRADEhEKDU1PU1RMWV9DTE9VRFkQBBIK",
            "CgZDTE9VRFkQBRIJCgVXSU5EWRAGEhEKDVdJTkRfQU5EX1JBSU4QBxIWChJM",
            "SUdIVF9SQUlOX1NIT1dFUlMQCBIVChFDSEFOQ0VfT0ZfU0hPV0VSUxAJEhUK",
            "EVNDQVRURVJFRF9TSE9XRVJTEAoSEAoMUkFJTl9TSE9XRVJTEAwSFgoSSEVB",
            "VllfUkFJTl9TSE9XRVJTEA0SGgoWTElHSFRfVE9fTU9ERVJBVEVfUkFJThAO",
            "EhoKFk1PREVSQVRFX1RPX0hFQVZZX1JBSU4QDxIICgRSQUlOEBASDgoKTElH",
            "SFRfUkFJThAREg4KCkhFQVZZX1JBSU4QEhIbChdSQUlOX1BFUklPRElDQUxM",
            "WV9IRUFWWRATEhYKEkxJR0hUX1NOT1dfU0hPV0VSUxAUEhoKFkNIQU5DRV9P",
            "Rl9TTk9XX1NIT1dFUlMQFRIaChZTQ0FUVEVSRURfU05PV19TSE9XRVJTEBYS",
            "EAoMU05PV19TSE9XRVJTEBcSFgoSSEVBVllfU05PV19TSE9XRVJTEBgSGgoW",
            "TElHSFRfVE9fTU9ERVJBVEVfU05PVxAZEhoKFk1PREVSQVRFX1RPX0hFQVZZ",
            "X1NOT1cQGhIICgRTTk9XEBsSDgoKTElHSFRfU05PVxAcEg4KCkhFQVZZX1NO",
            "T1cQHRINCglTTk9XU1RPUk0QHhIbChdTTk9XX1BFUklPRElDQUxMWV9IRUFW",
            "WRAfEhQKEEhFQVZZX1NOT1dfU1RPUk0QIBIQCgxCTE9XSU5HX1NOT1cQIRIR",
            "Cg1SQUlOX0FORF9TTk9XECISCAoESEFJTBAjEhAKDEhBSUxfU0hPV0VSUxAk",
            "EhAKDFRIVU5ERVJTVE9STRAlEhEKDVRIVU5ERVJTSE9XRVIQJhIbChdMSUdI",
            "VF9USFVOREVSU1RPUk1fUkFJThAnEhsKF1NDQVRURVJFRF9USFVOREVSU1RP",
            "Uk1TECgSFgoSSEVBVllfVEhVTkRFUlNUT1JNEClCqQEKGmNvbS5nb29nbGUu",
            "bWFwcy53ZWF0aGVyLnYxQhVXZWF0aGVyQ29uZGl0aW9uUHJvdG9QAVo6Y2xv",
            "dWQuZ29vZ2xlLmNvbS9nby9tYXBzL3dlYXRoZXIvYXBpdjEvd2VhdGhlcnBi",
            "O3dlYXRoZXJwYqICBUdNV1YxqgIVR29vZ2xlLkdlby5XZWF0aGVyLlYxygIV",
            "R29vZ2xlXEdlb1xXZWF0aGVyXFYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Type.LocalizedTextReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.WeatherCondition), global::Google.Geo.Weather.V1.WeatherCondition.Parser, new[]{ "IconBaseUri", "Description", "Type" }, null, new[]{ typeof(global::Google.Geo.Weather.V1.WeatherCondition.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents a weather condition for a given location at a given period of
  /// time.
  ///
  /// Disclaimer: Weather icons and condition codes are subject to change. Google
  /// may introduce new codes and icons or update existing ones as needed. We
  /// encourage you to refer to this documentation regularly for the most
  /// up-to-date information.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class WeatherCondition : pb::IMessage<WeatherCondition>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WeatherCondition> _parser = new pb::MessageParser<WeatherCondition>(() => new WeatherCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WeatherCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherConditionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherCondition(WeatherCondition other) : this() {
      iconBaseUri_ = other.iconBaseUri_;
      description_ = other.description_ != null ? other.description_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WeatherCondition Clone() {
      return new WeatherCondition(this);
    }

    /// <summary>Field number for the "icon_base_uri" field.</summary>
    public const int IconBaseUriFieldNumber = 1;
    private string iconBaseUri_ = "";
    /// <summary>
    /// The base URI for the icon not including the file type extension. To display
    /// the icon, append a theme if desired and the file type extension (`.png` or
    /// `.svg`) to this URI. By default, the icon is light themed, but `_dark` can
    /// be appended for dark mode. For example:
    /// "https://maps.gstatic.com/weather/v1/dust.svg" or
    /// "https://maps.gstatic.com/weather/v1/dust_dark.svg", where `icon_base_uri`
    /// is "https://maps.gstatic.com/weather/v1/dust".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string IconBaseUri {
      get { return iconBaseUri_; }
      set {
        iconBaseUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private global::Google.Type.LocalizedText description_;
    /// <summary>
    /// The textual description for this weather condition (localized).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.LocalizedText Description {
      get { return description_; }
      set {
        description_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Google.Geo.Weather.V1.WeatherCondition.Types.Type type_ = global::Google.Geo.Weather.V1.WeatherCondition.Types.Type.Unspecified;
    /// <summary>
    /// The type of weather condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.WeatherCondition.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WeatherCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WeatherCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IconBaseUri != other.IconBaseUri) return false;
      if (!object.Equals(Description, other.Description)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (IconBaseUri.Length != 0) hash ^= IconBaseUri.GetHashCode();
      if (description_ != null) hash ^= Description.GetHashCode();
      if (Type != global::Google.Geo.Weather.V1.WeatherCondition.Types.Type.Unspecified) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IconBaseUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IconBaseUri);
      }
      if (description_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Description);
      }
      if (Type != global::Google.Geo.Weather.V1.WeatherCondition.Types.Type.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IconBaseUri.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IconBaseUri);
      }
      if (description_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Description);
      }
      if (Type != global::Google.Geo.Weather.V1.WeatherCondition.Types.Type.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (IconBaseUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconBaseUri);
      }
      if (description_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Description);
      }
      if (Type != global::Google.Geo.Weather.V1.WeatherCondition.Types.Type.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WeatherCondition other) {
      if (other == null) {
        return;
      }
      if (other.IconBaseUri.Length != 0) {
        IconBaseUri = other.IconBaseUri;
      }
      if (other.description_ != null) {
        if (description_ == null) {
          Description = new global::Google.Type.LocalizedText();
        }
        Description.MergeFrom(other.Description);
      }
      if (other.Type != global::Google.Geo.Weather.V1.WeatherCondition.Types.Type.Unspecified) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            IconBaseUri = input.ReadString();
            break;
          }
          case 18: {
            if (description_ == null) {
              Description = new global::Google.Type.LocalizedText();
            }
            input.ReadMessage(Description);
            break;
          }
          case 24: {
            Type = (global::Google.Geo.Weather.V1.WeatherCondition.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            IconBaseUri = input.ReadString();
            break;
          }
          case 18: {
            if (description_ == null) {
              Description = new global::Google.Type.LocalizedText();
            }
            input.ReadMessage(Description);
            break;
          }
          case 24: {
            Type = (global::Google.Geo.Weather.V1.WeatherCondition.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WeatherCondition message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Marks the weather condition type in a forecast element's context.
      /// </summary>
      public enum Type {
        /// <summary>
        /// The weather condition is unspecified.
        /// </summary>
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// No clouds.
        /// </summary>
        [pbr::OriginalName("CLEAR")] Clear = 1,
        /// <summary>
        /// Periodic clouds.
        /// </summary>
        [pbr::OriginalName("MOSTLY_CLEAR")] MostlyClear = 2,
        /// <summary>
        /// Party cloudy (some clouds).
        /// </summary>
        [pbr::OriginalName("PARTLY_CLOUDY")] PartlyCloudy = 3,
        /// <summary>
        /// Mostly cloudy (more clouds than sun).
        /// </summary>
        [pbr::OriginalName("MOSTLY_CLOUDY")] MostlyCloudy = 4,
        /// <summary>
        /// Cloudy (all clouds, no sun).
        /// </summary>
        [pbr::OriginalName("CLOUDY")] Cloudy = 5,
        /// <summary>
        /// High wind.
        /// </summary>
        [pbr::OriginalName("WINDY")] Windy = 6,
        /// <summary>
        /// High wind with precipitation.
        /// </summary>
        [pbr::OriginalName("WIND_AND_RAIN")] WindAndRain = 7,
        /// <summary>
        /// Light intermittent rain.
        /// </summary>
        [pbr::OriginalName("LIGHT_RAIN_SHOWERS")] LightRainShowers = 8,
        /// <summary>
        /// Chance of intermittent rain.
        /// </summary>
        [pbr::OriginalName("CHANCE_OF_SHOWERS")] ChanceOfShowers = 9,
        /// <summary>
        /// Intermittent rain.
        /// </summary>
        [pbr::OriginalName("SCATTERED_SHOWERS")] ScatteredShowers = 10,
        /// <summary>
        /// Showers are considered to be rainfall that has a shorter duration than
        /// rain, and is characterized by suddenness in terms of start and stop
        /// times, and rapid changes in intensity.
        /// </summary>
        [pbr::OriginalName("RAIN_SHOWERS")] RainShowers = 12,
        /// <summary>
        /// Intense showers.
        /// </summary>
        [pbr::OriginalName("HEAVY_RAIN_SHOWERS")] HeavyRainShowers = 13,
        /// <summary>
        /// Rain (light to moderate in quantity).
        /// </summary>
        [pbr::OriginalName("LIGHT_TO_MODERATE_RAIN")] LightToModerateRain = 14,
        /// <summary>
        /// Rain (moderate to heavy in quantity).
        /// </summary>
        [pbr::OriginalName("MODERATE_TO_HEAVY_RAIN")] ModerateToHeavyRain = 15,
        /// <summary>
        /// Moderate rain.
        /// </summary>
        [pbr::OriginalName("RAIN")] Rain = 16,
        /// <summary>
        /// Light rain.
        /// </summary>
        [pbr::OriginalName("LIGHT_RAIN")] LightRain = 17,
        /// <summary>
        /// Heavy rain.
        /// </summary>
        [pbr::OriginalName("HEAVY_RAIN")] HeavyRain = 18,
        /// <summary>
        /// Rain periodically heavy.
        /// </summary>
        [pbr::OriginalName("RAIN_PERIODICALLY_HEAVY")] RainPeriodicallyHeavy = 19,
        /// <summary>
        /// Light snow that is falling at varying intensities for brief periods of
        /// time.
        /// </summary>
        [pbr::OriginalName("LIGHT_SNOW_SHOWERS")] LightSnowShowers = 20,
        /// <summary>
        /// Chance of snow showers.
        /// </summary>
        [pbr::OriginalName("CHANCE_OF_SNOW_SHOWERS")] ChanceOfSnowShowers = 21,
        /// <summary>
        /// Snow that is falling at varying intensities for brief periods of time.
        /// </summary>
        [pbr::OriginalName("SCATTERED_SNOW_SHOWERS")] ScatteredSnowShowers = 22,
        /// <summary>
        /// Snow showers.
        /// </summary>
        [pbr::OriginalName("SNOW_SHOWERS")] SnowShowers = 23,
        /// <summary>
        /// Heavy snow showers.
        /// </summary>
        [pbr::OriginalName("HEAVY_SNOW_SHOWERS")] HeavySnowShowers = 24,
        /// <summary>
        /// Light to moderate snow.
        /// </summary>
        [pbr::OriginalName("LIGHT_TO_MODERATE_SNOW")] LightToModerateSnow = 25,
        /// <summary>
        /// Moderate to heavy snow.
        /// </summary>
        [pbr::OriginalName("MODERATE_TO_HEAVY_SNOW")] ModerateToHeavySnow = 26,
        /// <summary>
        /// Moderate snow.
        /// </summary>
        [pbr::OriginalName("SNOW")] Snow = 27,
        /// <summary>
        /// Light snow.
        /// </summary>
        [pbr::OriginalName("LIGHT_SNOW")] LightSnow = 28,
        /// <summary>
        /// Heavy snow.
        /// </summary>
        [pbr::OriginalName("HEAVY_SNOW")] HeavySnow = 29,
        /// <summary>
        /// Snow with possible thunder and lightning.
        /// </summary>
        [pbr::OriginalName("SNOWSTORM")] Snowstorm = 30,
        /// <summary>
        /// Snow, at times heavy.
        /// </summary>
        [pbr::OriginalName("SNOW_PERIODICALLY_HEAVY")] SnowPeriodicallyHeavy = 31,
        /// <summary>
        /// Heavy snow with possible thunder and lightning.
        /// </summary>
        [pbr::OriginalName("HEAVY_SNOW_STORM")] HeavySnowStorm = 32,
        /// <summary>
        /// Snow with intense wind.
        /// </summary>
        [pbr::OriginalName("BLOWING_SNOW")] BlowingSnow = 33,
        /// <summary>
        /// Rain and snow mix.
        /// </summary>
        [pbr::OriginalName("RAIN_AND_SNOW")] RainAndSnow = 34,
        /// <summary>
        /// Hail.
        /// </summary>
        [pbr::OriginalName("HAIL")] Hail = 35,
        /// <summary>
        /// Hail that is falling at varying intensities for brief periods of time.
        /// </summary>
        [pbr::OriginalName("HAIL_SHOWERS")] HailShowers = 36,
        /// <summary>
        /// Thunderstorm.
        /// </summary>
        [pbr::OriginalName("THUNDERSTORM")] Thunderstorm = 37,
        /// <summary>
        /// A shower of rain accompanied by thunder and lightning.
        /// </summary>
        [pbr::OriginalName("THUNDERSHOWER")] Thundershower = 38,
        /// <summary>
        /// Light thunderstorm rain.
        /// </summary>
        [pbr::OriginalName("LIGHT_THUNDERSTORM_RAIN")] LightThunderstormRain = 39,
        /// <summary>
        /// Thunderstorms that has rain in various intensities for brief periods of
        /// time.
        /// </summary>
        [pbr::OriginalName("SCATTERED_THUNDERSTORMS")] ScatteredThunderstorms = 40,
        /// <summary>
        /// Heavy thunderstorm.
        /// </summary>
        [pbr::OriginalName("HEAVY_THUNDERSTORM")] HeavyThunderstorm = 41,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
