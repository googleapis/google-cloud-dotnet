// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/weather_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Geo.Weather.V1 {

  /// <summary>Holder for reflection information generated from google/maps/weather/v1/weather_service.proto</summary>
  public static partial class WeatherServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/weather/v1/weather_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WeatherServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cixnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3dlYXRoZXJfc2VydmljZS5wcm90",
            "bxIWZ29vZ2xlLm1hcHMud2VhdGhlci52MRocZ29vZ2xlL2FwaS9hbm5vdGF0",
            "aW9ucy5wcm90bxoXZ29vZ2xlL2FwaS9jbGllbnQucHJvdG8aH2dvb2dsZS9h",
            "cGkvZmllbGRfYmVoYXZpb3IucHJvdG8aKWdvb2dsZS9tYXBzL3dlYXRoZXIv",
            "djEvYWlyX3ByZXNzdXJlLnByb3RvGilnb29nbGUvbWFwcy93ZWF0aGVyL3Yx",
            "L2ZvcmVjYXN0X2RheS5wcm90bxoqZ29vZ2xlL21hcHMvd2VhdGhlci92MS9m",
            "b3JlY2FzdF9ob3VyLnByb3RvGilnb29nbGUvbWFwcy93ZWF0aGVyL3YxL2hp",
            "c3RvcnlfaG91ci5wcm90bxoqZ29vZ2xlL21hcHMvd2VhdGhlci92MS9wcmVj",
            "aXBpdGF0aW9uLnByb3RvGihnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3RlbXBl",
            "cmF0dXJlLnByb3RvGilnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3VuaXRzX3N5",
            "c3RlbS5wcm90bxonZ29vZ2xlL21hcHMvd2VhdGhlci92MS92aXNpYmlsaXR5",
            "LnByb3RvGi5nb29nbGUvbWFwcy93ZWF0aGVyL3YxL3dlYXRoZXJfY29uZGl0",
            "aW9uLnByb3RvGiFnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3dpbmQucHJvdG8a",
            "H2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aGmdvb2dsZS90eXBl",
            "L2RhdGV0aW1lLnByb3RvGhhnb29nbGUvdHlwZS9sYXRsbmcucHJvdG8ivwEK",
            "Hkxvb2t1cEN1cnJlbnRDb25kaXRpb25zUmVxdWVzdBIqCghsb2NhdGlvbhgB",
            "IAEoCzITLmdvb2dsZS50eXBlLkxhdExuZ0ID4EECEj4KDHVuaXRzX3N5c3Rl",
            "bRgCIAEoDjIjLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuVW5pdHNTeXN0ZW1C",
            "A+BBARIfCg1sYW5ndWFnZV9jb2RlGAMgASgJQgPgQQFIAIgBAUIQCg5fbGFu",
            "Z3VhZ2VfY29kZSKdCwofTG9va3VwQ3VycmVudENvbmRpdGlvbnNSZXNwb25z",
            "ZRIwCgxjdXJyZW50X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wEigKCXRpbWVfem9uZRgCIAEoCzIVLmdvb2dsZS50eXBlLlRpbWVa",
            "b25lEhcKCmlzX2RheXRpbWUYAyABKAhIAIgBARJDChF3ZWF0aGVyX2NvbmRp",
            "dGlvbhgEIAEoCzIoLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuV2VhdGhlckNv",
            "bmRpdGlvbhI4Cgt0ZW1wZXJhdHVyZRgFIAEoCzIjLmdvb2dsZS5tYXBzLndl",
            "YXRoZXIudjEuVGVtcGVyYXR1cmUSQwoWZmVlbHNfbGlrZV90ZW1wZXJhdHVy",
            "ZRgGIAEoCzIjLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuVGVtcGVyYXR1cmUS",
            "NgoJZGV3X3BvaW50GAcgASgLMiMuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5U",
            "ZW1wZXJhdHVyZRI3CgpoZWF0X2luZGV4GAggASgLMiMuZ29vZ2xlLm1hcHMu",
            "d2VhdGhlci52MS5UZW1wZXJhdHVyZRI3Cgp3aW5kX2NoaWxsGAkgASgLMiMu",
            "Z29vZ2xlLm1hcHMud2VhdGhlci52MS5UZW1wZXJhdHVyZRIeChFyZWxhdGl2",
            "ZV9odW1pZGl0eRgKIAEoBUgBiAEBEhUKCHV2X2luZGV4GAsgASgFSAKIAQES",
            "PAoNcHJlY2lwaXRhdGlvbhgMIAEoCzIlLmdvb2dsZS5tYXBzLndlYXRoZXIu",
            "djEuUHJlY2lwaXRhdGlvbhIlChh0aHVuZGVyc3Rvcm1fcHJvYmFiaWxpdHkY",
            "DSABKAVIA4gBARI5CgxhaXJfcHJlc3N1cmUYDiABKAsyIy5nb29nbGUubWFw",
            "cy53ZWF0aGVyLnYxLkFpclByZXNzdXJlEioKBHdpbmQYDyABKAsyHC5nb29n",
            "bGUubWFwcy53ZWF0aGVyLnYxLldpbmQSNgoKdmlzaWJpbGl0eRgQIAEoCzIi",
            "Lmdvb2dsZS5tYXBzLndlYXRoZXIudjEuVmlzaWJpbGl0eRIYCgtjbG91ZF9j",
            "b3ZlchgRIAEoBUgEiAEBEnQKGmN1cnJlbnRfY29uZGl0aW9uc19oaXN0b3J5",
            "GBIgASgLMlAuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5Mb29rdXBDdXJyZW50",
            "Q29uZGl0aW9uc1Jlc3BvbnNlLkN1cnJlbnRDb25kaXRpb25zSGlzdG9yeRrs",
            "AgoYQ3VycmVudENvbmRpdGlvbnNIaXN0b3J5Ej8KEnRlbXBlcmF0dXJlX2No",
            "YW5nZRgBIAEoCzIjLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuVGVtcGVyYXR1",
            "cmUSPAoPbWF4X3RlbXBlcmF0dXJlGAIgASgLMiMuZ29vZ2xlLm1hcHMud2Vh",
            "dGhlci52MS5UZW1wZXJhdHVyZRI8Cg9taW5fdGVtcGVyYXR1cmUYAyABKAsy",
            "Iy5nb29nbGUubWFwcy53ZWF0aGVyLnYxLlRlbXBlcmF0dXJlEksKCHNub3df",
            "cXBmGAUgASgLMjkuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5RdWFudGl0YXRp",
            "dmVQcmVjaXBpdGF0aW9uRm9yZWNhc3QSRgoDcXBmGAYgASgLMjkuZ29vZ2xl",
            "Lm1hcHMud2VhdGhlci52MS5RdWFudGl0YXRpdmVQcmVjaXBpdGF0aW9uRm9y",
            "ZWNhc3RCDQoLX2lzX2RheXRpbWVCFAoSX3JlbGF0aXZlX2h1bWlkaXR5QgsK",
            "CV91dl9pbmRleEIbChlfdGh1bmRlcnN0b3JtX3Byb2JhYmlsaXR5Qg4KDF9j",
            "bG91ZF9jb3ZlciKPAgoaTG9va3VwRm9yZWNhc3RIb3Vyc1JlcXVlc3QSKgoI",
            "bG9jYXRpb24YASABKAsyEy5nb29nbGUudHlwZS5MYXRMbmdCA+BBAhIXCgVo",
            "b3VycxgCIAEoBUID4EEBSACIAQESPgoMdW5pdHNfc3lzdGVtGAMgASgOMiMu",
            "Z29vZ2xlLm1hcHMud2VhdGhlci52MS5Vbml0c1N5c3RlbUID4EEBEh8KDWxh",
            "bmd1YWdlX2NvZGUYBCABKAlCA+BBAUgBiAEBEhYKCXBhZ2Vfc2l6ZRgFIAEo",
            "BUID4EEBEhcKCnBhZ2VfdG9rZW4YBiABKAlCA+BBAUIICgZfaG91cnNCEAoO",
            "X2xhbmd1YWdlX2NvZGUingEKG0xvb2t1cEZvcmVjYXN0SG91cnNSZXNwb25z",
            "ZRI8Cg5mb3JlY2FzdF9ob3VycxgBIAMoCzIkLmdvb2dsZS5tYXBzLndlYXRo",
            "ZXIudjEuRm9yZWNhc3RIb3VyEigKCXRpbWVfem9uZRgCIAEoCzIVLmdvb2ds",
            "ZS50eXBlLlRpbWVab25lEhcKD25leHRfcGFnZV90b2tlbhgDIAEoCSKMAgoZ",
            "TG9va3VwRm9yZWNhc3REYXlzUmVxdWVzdBIqCghsb2NhdGlvbhgBIAEoCzIT",
            "Lmdvb2dsZS50eXBlLkxhdExuZ0ID4EECEhYKBGRheXMYAiABKAVCA+BBAUgA",
            "iAEBEj4KDHVuaXRzX3N5c3RlbRgDIAEoDjIjLmdvb2dsZS5tYXBzLndlYXRo",
            "ZXIudjEuVW5pdHNTeXN0ZW1CA+BBARIfCg1sYW5ndWFnZV9jb2RlGAQgASgJ",
            "QgPgQQFIAYgBARIWCglwYWdlX3NpemUYBSABKAVCA+BBARIXCgpwYWdlX3Rv",
            "a2VuGAYgASgJQgPgQQFCBwoFX2RheXNCEAoOX2xhbmd1YWdlX2NvZGUimwEK",
            "Gkxvb2t1cEZvcmVjYXN0RGF5c1Jlc3BvbnNlEjoKDWZvcmVjYXN0X2RheXMY",
            "ASADKAsyIy5nb29nbGUubWFwcy53ZWF0aGVyLnYxLkZvcmVjYXN0RGF5EigK",
            "CXRpbWVfem9uZRgCIAEoCzIVLmdvb2dsZS50eXBlLlRpbWVab25lEhcKD25l",
            "eHRfcGFnZV90b2tlbhgDIAEoCSKOAgoZTG9va3VwSGlzdG9yeUhvdXJzUmVx",
            "dWVzdBIqCghsb2NhdGlvbhgBIAEoCzITLmdvb2dsZS50eXBlLkxhdExuZ0ID",
            "4EECEhcKBWhvdXJzGAIgASgFQgPgQQFIAIgBARI+Cgx1bml0c19zeXN0ZW0Y",
            "AyABKA4yIy5nb29nbGUubWFwcy53ZWF0aGVyLnYxLlVuaXRzU3lzdGVtQgPg",
            "QQESHwoNbGFuZ3VhZ2VfY29kZRgEIAEoCUID4EEBSAGIAQESFgoJcGFnZV9z",
            "aXplGAUgASgFQgPgQQESFwoKcGFnZV90b2tlbhgGIAEoCUID4EEBQggKBl9o",
            "b3Vyc0IQCg5fbGFuZ3VhZ2VfY29kZSKbAQoaTG9va3VwSGlzdG9yeUhvdXJz",
            "UmVzcG9uc2USOgoNaGlzdG9yeV9ob3VycxgBIAMoCzIjLmdvb2dsZS5tYXBz",
            "LndlYXRoZXIudjEuSGlzdG9yeUhvdXISKAoJdGltZV96b25lGAIgASgLMhUu",
            "Z29vZ2xlLnR5cGUuVGltZVpvbmUSFwoPbmV4dF9wYWdlX3Rva2VuGAMgASgJ",
            "IhsKGUxvb2t1cFB1YmxpY0FsZXJ0c1JlcXVlc3QiHAoaTG9va3VwUHVibGlj",
            "QWxlcnRzUmVzcG9uc2UyiwcKB1dlYXRoZXISsAEKF0xvb2t1cEN1cnJlbnRD",
            "b25kaXRpb25zEjYuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5Mb29rdXBDdXJy",
            "ZW50Q29uZGl0aW9uc1JlcXVlc3QaNy5nb29nbGUubWFwcy53ZWF0aGVyLnYx",
            "Lkxvb2t1cEN1cnJlbnRDb25kaXRpb25zUmVzcG9uc2UiJILT5JMCHhIcL3Yx",
            "L2N1cnJlbnRDb25kaXRpb25zOmxvb2t1cBKhAQoTTG9va3VwRm9yZWNhc3RI",
            "b3VycxIyLmdvb2dsZS5tYXBzLndlYXRoZXIudjEuTG9va3VwRm9yZWNhc3RI",
            "b3Vyc1JlcXVlc3QaMy5nb29nbGUubWFwcy53ZWF0aGVyLnYxLkxvb2t1cEZv",
            "cmVjYXN0SG91cnNSZXNwb25zZSIhgtPkkwIbEhkvdjEvZm9yZWNhc3QvaG91",
            "cnM6bG9va3VwEp0BChJMb29rdXBGb3JlY2FzdERheXMSMS5nb29nbGUubWFw",
            "cy53ZWF0aGVyLnYxLkxvb2t1cEZvcmVjYXN0RGF5c1JlcXVlc3QaMi5nb29n",
            "bGUubWFwcy53ZWF0aGVyLnYxLkxvb2t1cEZvcmVjYXN0RGF5c1Jlc3BvbnNl",
            "IiCC0+STAhoSGC92MS9mb3JlY2FzdC9kYXlzOmxvb2t1cBKdAQoSTG9va3Vw",
            "SGlzdG9yeUhvdXJzEjEuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5Mb29rdXBI",
            "aXN0b3J5SG91cnNSZXF1ZXN0GjIuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5M",
            "b29rdXBIaXN0b3J5SG91cnNSZXNwb25zZSIggtPkkwIaEhgvdjEvaGlzdG9y",
            "eS9ob3Vyczpsb29rdXASnAEKEkxvb2t1cFB1YmxpY0FsZXJ0cxIxLmdvb2ds",
            "ZS5tYXBzLndlYXRoZXIudjEuTG9va3VwUHVibGljQWxlcnRzUmVxdWVzdBoy",
            "Lmdvb2dsZS5tYXBzLndlYXRoZXIudjEuTG9va3VwUHVibGljQWxlcnRzUmVz",
            "cG9uc2UiH4LT5JMCGRIXL3YxL3B1YmxpY0FsZXJ0czpsb29rdXAaSspBFndl",
            "YXRoZXIuZ29vZ2xlYXBpcy5jb23SQS5odHRwczovL3d3dy5nb29nbGVhcGlz",
            "LmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtQqcBChpjb20uZ29vZ2xlLm1hcHMu",
            "d2VhdGhlci52MUITV2VhdGhlclNlcnZpY2VQcm90b1ABWjpjbG91ZC5nb29n",
            "bGUuY29tL2dvL21hcHMvd2VhdGhlci9hcGl2MS93ZWF0aGVycGI7d2VhdGhl",
            "cnBiogIFR01XVjGqAhVHb29nbGUuR2VvLldlYXRoZXIuVjHKAhVHb29nbGVc",
            "R2VvXFdlYXRoZXJcVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Api.ClientReflection.Descriptor, global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Geo.Weather.V1.AirPressureReflection.Descriptor, global::Google.Geo.Weather.V1.ForecastDayReflection.Descriptor, global::Google.Geo.Weather.V1.ForecastHourReflection.Descriptor, global::Google.Geo.Weather.V1.HistoryHourReflection.Descriptor, global::Google.Geo.Weather.V1.PrecipitationReflection.Descriptor, global::Google.Geo.Weather.V1.TemperatureReflection.Descriptor, global::Google.Geo.Weather.V1.UnitsSystemReflection.Descriptor, global::Google.Geo.Weather.V1.VisibilityReflection.Descriptor, global::Google.Geo.Weather.V1.WeatherConditionReflection.Descriptor, global::Google.Geo.Weather.V1.WindReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.DatetimeReflection.Descriptor, global::Google.Type.LatlngReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest), global::Google.Geo.Weather.V1.LookupCurrentConditionsRequest.Parser, new[]{ "Location", "UnitsSystem", "LanguageCode" }, new[]{ "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse), global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Parser, new[]{ "CurrentTime", "TimeZone", "IsDaytime", "WeatherCondition", "Temperature", "FeelsLikeTemperature", "DewPoint", "HeatIndex", "WindChill", "RelativeHumidity", "UvIndex", "Precipitation", "ThunderstormProbability", "AirPressure", "Wind", "Visibility", "CloudCover", "CurrentConditionsHistory" }, new[]{ "IsDaytime", "RelativeHumidity", "UvIndex", "ThunderstormProbability", "CloudCover" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Types.CurrentConditionsHistory), global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Types.CurrentConditionsHistory.Parser, new[]{ "TemperatureChange", "MaxTemperature", "MinTemperature", "SnowQpf", "Qpf" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupForecastHoursRequest), global::Google.Geo.Weather.V1.LookupForecastHoursRequest.Parser, new[]{ "Location", "Hours", "UnitsSystem", "LanguageCode", "PageSize", "PageToken" }, new[]{ "Hours", "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupForecastHoursResponse), global::Google.Geo.Weather.V1.LookupForecastHoursResponse.Parser, new[]{ "ForecastHours", "TimeZone", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupForecastDaysRequest), global::Google.Geo.Weather.V1.LookupForecastDaysRequest.Parser, new[]{ "Location", "Days", "UnitsSystem", "LanguageCode", "PageSize", "PageToken" }, new[]{ "Days", "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupForecastDaysResponse), global::Google.Geo.Weather.V1.LookupForecastDaysResponse.Parser, new[]{ "ForecastDays", "TimeZone", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupHistoryHoursRequest), global::Google.Geo.Weather.V1.LookupHistoryHoursRequest.Parser, new[]{ "Location", "Hours", "UnitsSystem", "LanguageCode", "PageSize", "PageToken" }, new[]{ "Hours", "LanguageCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupHistoryHoursResponse), global::Google.Geo.Weather.V1.LookupHistoryHoursResponse.Parser, new[]{ "HistoryHours", "TimeZone", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupPublicAlertsRequest), global::Google.Geo.Weather.V1.LookupPublicAlertsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.LookupPublicAlertsResponse), global::Google.Geo.Weather.V1.LookupPublicAlertsResponse.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Request for the LookupCurrentConditions RPC.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupCurrentConditionsRequest : pb::IMessage<LookupCurrentConditionsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupCurrentConditionsRequest> _parser = new pb::MessageParser<LookupCurrentConditionsRequest>(() => new LookupCurrentConditionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupCurrentConditionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupCurrentConditionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupCurrentConditionsRequest(LookupCurrentConditionsRequest other) : this() {
      location_ = other.location_ != null ? other.location_.Clone() : null;
      unitsSystem_ = other.unitsSystem_;
      languageCode_ = other.languageCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupCurrentConditionsRequest Clone() {
      return new LookupCurrentConditionsRequest(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Google.Type.LatLng location_;
    /// <summary>
    /// Required. The location to get the current weather conditions for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.LatLng Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "units_system" field.</summary>
    public const int UnitsSystemFieldNumber = 2;
    private global::Google.Geo.Weather.V1.UnitsSystem unitsSystem_ = global::Google.Geo.Weather.V1.UnitsSystem.Unspecified;
    /// <summary>
    /// Optional. The units system to use for the returned weather conditions. If
    /// not provided, the returned weather conditions will be in the metric system
    /// (default = METRIC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.UnitsSystem UnitsSystem {
      get { return unitsSystem_; }
      set {
        unitsSystem_ = value;
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 3;
    private readonly static string LanguageCodeDefaultValue = "";

    private string languageCode_;
    /// <summary>
    /// Optional. Allows the client to choose the language for the response. If
    /// data cannot be provided for that language, the API uses the closest match.
    /// Allowed values rely on the IETF BCP-47 standard. The default value is "en".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LanguageCode {
      get { return languageCode_ ?? LanguageCodeDefaultValue; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLanguageCode {
      get { return languageCode_ != null; }
    }
    /// <summary>Clears the value of the "language_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLanguageCode() {
      languageCode_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupCurrentConditionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupCurrentConditionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (UnitsSystem != other.UnitsSystem) return false;
      if (LanguageCode != other.LanguageCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) hash ^= UnitsSystem.GetHashCode();
      if (HasLanguageCode) hash ^= LanguageCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(26);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(26);
        output.WriteString(LanguageCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupCurrentConditionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Google.Type.LatLng();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        UnitsSystem = other.UnitsSystem;
      }
      if (other.HasLanguageCode) {
        LanguageCode = other.LanguageCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            UnitsSystem = (global::Google.Geo.Weather.V1.UnitsSystem) input.ReadEnum();
            break;
          }
          case 26: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            UnitsSystem = (global::Google.Geo.Weather.V1.UnitsSystem) input.ReadEnum();
            break;
          }
          case 26: {
            LanguageCode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the LookupCurrentConditions RPC - represents the current weather
  /// conditions at the requested location.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupCurrentConditionsResponse : pb::IMessage<LookupCurrentConditionsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupCurrentConditionsResponse> _parser = new pb::MessageParser<LookupCurrentConditionsResponse>(() => new LookupCurrentConditionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupCurrentConditionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupCurrentConditionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupCurrentConditionsResponse(LookupCurrentConditionsResponse other) : this() {
      _hasBits0 = other._hasBits0;
      currentTime_ = other.currentTime_ != null ? other.currentTime_.Clone() : null;
      timeZone_ = other.timeZone_ != null ? other.timeZone_.Clone() : null;
      isDaytime_ = other.isDaytime_;
      weatherCondition_ = other.weatherCondition_ != null ? other.weatherCondition_.Clone() : null;
      temperature_ = other.temperature_ != null ? other.temperature_.Clone() : null;
      feelsLikeTemperature_ = other.feelsLikeTemperature_ != null ? other.feelsLikeTemperature_.Clone() : null;
      dewPoint_ = other.dewPoint_ != null ? other.dewPoint_.Clone() : null;
      heatIndex_ = other.heatIndex_ != null ? other.heatIndex_.Clone() : null;
      windChill_ = other.windChill_ != null ? other.windChill_.Clone() : null;
      relativeHumidity_ = other.relativeHumidity_;
      uvIndex_ = other.uvIndex_;
      precipitation_ = other.precipitation_ != null ? other.precipitation_.Clone() : null;
      thunderstormProbability_ = other.thunderstormProbability_;
      airPressure_ = other.airPressure_ != null ? other.airPressure_.Clone() : null;
      wind_ = other.wind_ != null ? other.wind_.Clone() : null;
      visibility_ = other.visibility_ != null ? other.visibility_.Clone() : null;
      cloudCover_ = other.cloudCover_;
      currentConditionsHistory_ = other.currentConditionsHistory_ != null ? other.currentConditionsHistory_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupCurrentConditionsResponse Clone() {
      return new LookupCurrentConditionsResponse(this);
    }

    /// <summary>Field number for the "current_time" field.</summary>
    public const int CurrentTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp currentTime_;
    /// <summary>
    /// Current time (UTC) associated with the returned data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CurrentTime {
      get { return currentTime_; }
      set {
        currentTime_ = value;
      }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 2;
    private global::Google.Type.TimeZone timeZone_;
    /// <summary>
    /// The time zone at the requested location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.TimeZone TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "is_daytime" field.</summary>
    public const int IsDaytimeFieldNumber = 3;
    private readonly static bool IsDaytimeDefaultValue = false;

    private bool isDaytime_;
    /// <summary>
    /// True if the current time at the requested location is between the local
    /// sunrise (inclusive) and the sunset (exclusive) times. Otherwise, it is
    /// nighttime (between the sunset and the next sunrise).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDaytime {
      get { if ((_hasBits0 & 1) != 0) { return isDaytime_; } else { return IsDaytimeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        isDaytime_ = value;
      }
    }
    /// <summary>Gets whether the "is_daytime" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIsDaytime {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "is_daytime" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIsDaytime() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "weather_condition" field.</summary>
    public const int WeatherConditionFieldNumber = 4;
    private global::Google.Geo.Weather.V1.WeatherCondition weatherCondition_;
    /// <summary>
    /// The current weather condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.WeatherCondition WeatherCondition {
      get { return weatherCondition_; }
      set {
        weatherCondition_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 5;
    private global::Google.Geo.Weather.V1.Temperature temperature_;
    /// <summary>
    /// The current temperature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    /// <summary>Field number for the "feels_like_temperature" field.</summary>
    public const int FeelsLikeTemperatureFieldNumber = 6;
    private global::Google.Geo.Weather.V1.Temperature feelsLikeTemperature_;
    /// <summary>
    /// The measure of how the temperature currently feels like at the requested
    /// location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature FeelsLikeTemperature {
      get { return feelsLikeTemperature_; }
      set {
        feelsLikeTemperature_ = value;
      }
    }

    /// <summary>Field number for the "dew_point" field.</summary>
    public const int DewPointFieldNumber = 7;
    private global::Google.Geo.Weather.V1.Temperature dewPoint_;
    /// <summary>
    /// The current dew point temperature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature DewPoint {
      get { return dewPoint_; }
      set {
        dewPoint_ = value;
      }
    }

    /// <summary>Field number for the "heat_index" field.</summary>
    public const int HeatIndexFieldNumber = 8;
    private global::Google.Geo.Weather.V1.Temperature heatIndex_;
    /// <summary>
    /// The current heat index temperature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature HeatIndex {
      get { return heatIndex_; }
      set {
        heatIndex_ = value;
      }
    }

    /// <summary>Field number for the "wind_chill" field.</summary>
    public const int WindChillFieldNumber = 9;
    private global::Google.Geo.Weather.V1.Temperature windChill_;
    /// <summary>
    /// The current wind chill, air temperature exposed on the skin.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature WindChill {
      get { return windChill_; }
      set {
        windChill_ = value;
      }
    }

    /// <summary>Field number for the "relative_humidity" field.</summary>
    public const int RelativeHumidityFieldNumber = 10;
    private readonly static int RelativeHumidityDefaultValue = 0;

    private int relativeHumidity_;
    /// <summary>
    /// The current percent of relative humidity (values from 0 to 100).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RelativeHumidity {
      get { if ((_hasBits0 & 2) != 0) { return relativeHumidity_; } else { return RelativeHumidityDefaultValue; } }
      set {
        _hasBits0 |= 2;
        relativeHumidity_ = value;
      }
    }
    /// <summary>Gets whether the "relative_humidity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRelativeHumidity {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "relative_humidity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRelativeHumidity() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "uv_index" field.</summary>
    public const int UvIndexFieldNumber = 11;
    private readonly static int UvIndexDefaultValue = 0;

    private int uvIndex_;
    /// <summary>
    /// The current ultraviolet (UV) index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UvIndex {
      get { if ((_hasBits0 & 4) != 0) { return uvIndex_; } else { return UvIndexDefaultValue; } }
      set {
        _hasBits0 |= 4;
        uvIndex_ = value;
      }
    }
    /// <summary>Gets whether the "uv_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUvIndex {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "uv_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUvIndex() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "precipitation" field.</summary>
    public const int PrecipitationFieldNumber = 12;
    private global::Google.Geo.Weather.V1.Precipitation precipitation_;
    /// <summary>
    /// The current precipitation probability and amount of precipitation
    /// accumulated over the last hour.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Precipitation Precipitation {
      get { return precipitation_; }
      set {
        precipitation_ = value;
      }
    }

    /// <summary>Field number for the "thunderstorm_probability" field.</summary>
    public const int ThunderstormProbabilityFieldNumber = 13;
    private readonly static int ThunderstormProbabilityDefaultValue = 0;

    private int thunderstormProbability_;
    /// <summary>
    /// The current thunderstorm probability (values from 0 to 100).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThunderstormProbability {
      get { if ((_hasBits0 & 8) != 0) { return thunderstormProbability_; } else { return ThunderstormProbabilityDefaultValue; } }
      set {
        _hasBits0 |= 8;
        thunderstormProbability_ = value;
      }
    }
    /// <summary>Gets whether the "thunderstorm_probability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThunderstormProbability {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "thunderstorm_probability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThunderstormProbability() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "air_pressure" field.</summary>
    public const int AirPressureFieldNumber = 14;
    private global::Google.Geo.Weather.V1.AirPressure airPressure_;
    /// <summary>
    /// The current air pressure conditions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.AirPressure AirPressure {
      get { return airPressure_; }
      set {
        airPressure_ = value;
      }
    }

    /// <summary>Field number for the "wind" field.</summary>
    public const int WindFieldNumber = 15;
    private global::Google.Geo.Weather.V1.Wind wind_;
    /// <summary>
    /// The current wind conditions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Wind Wind {
      get { return wind_; }
      set {
        wind_ = value;
      }
    }

    /// <summary>Field number for the "visibility" field.</summary>
    public const int VisibilityFieldNumber = 16;
    private global::Google.Geo.Weather.V1.Visibility visibility_;
    /// <summary>
    /// The current visibility.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Visibility Visibility {
      get { return visibility_; }
      set {
        visibility_ = value;
      }
    }

    /// <summary>Field number for the "cloud_cover" field.</summary>
    public const int CloudCoverFieldNumber = 17;
    private readonly static int CloudCoverDefaultValue = 0;

    private int cloudCover_;
    /// <summary>
    /// The current percentage of the sky covered by clouds (values from 0 to 100).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CloudCover {
      get { if ((_hasBits0 & 16) != 0) { return cloudCover_; } else { return CloudCoverDefaultValue; } }
      set {
        _hasBits0 |= 16;
        cloudCover_ = value;
      }
    }
    /// <summary>Gets whether the "cloud_cover" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCloudCover {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "cloud_cover" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCloudCover() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "current_conditions_history" field.</summary>
    public const int CurrentConditionsHistoryFieldNumber = 18;
    private global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Types.CurrentConditionsHistory currentConditionsHistory_;
    /// <summary>
    /// The changes in the current conditions over the last 24 hours.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Types.CurrentConditionsHistory CurrentConditionsHistory {
      get { return currentConditionsHistory_; }
      set {
        currentConditionsHistory_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupCurrentConditionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupCurrentConditionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentTime, other.CurrentTime)) return false;
      if (!object.Equals(TimeZone, other.TimeZone)) return false;
      if (IsDaytime != other.IsDaytime) return false;
      if (!object.Equals(WeatherCondition, other.WeatherCondition)) return false;
      if (!object.Equals(Temperature, other.Temperature)) return false;
      if (!object.Equals(FeelsLikeTemperature, other.FeelsLikeTemperature)) return false;
      if (!object.Equals(DewPoint, other.DewPoint)) return false;
      if (!object.Equals(HeatIndex, other.HeatIndex)) return false;
      if (!object.Equals(WindChill, other.WindChill)) return false;
      if (RelativeHumidity != other.RelativeHumidity) return false;
      if (UvIndex != other.UvIndex) return false;
      if (!object.Equals(Precipitation, other.Precipitation)) return false;
      if (ThunderstormProbability != other.ThunderstormProbability) return false;
      if (!object.Equals(AirPressure, other.AirPressure)) return false;
      if (!object.Equals(Wind, other.Wind)) return false;
      if (!object.Equals(Visibility, other.Visibility)) return false;
      if (CloudCover != other.CloudCover) return false;
      if (!object.Equals(CurrentConditionsHistory, other.CurrentConditionsHistory)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (currentTime_ != null) hash ^= CurrentTime.GetHashCode();
      if (timeZone_ != null) hash ^= TimeZone.GetHashCode();
      if (HasIsDaytime) hash ^= IsDaytime.GetHashCode();
      if (weatherCondition_ != null) hash ^= WeatherCondition.GetHashCode();
      if (temperature_ != null) hash ^= Temperature.GetHashCode();
      if (feelsLikeTemperature_ != null) hash ^= FeelsLikeTemperature.GetHashCode();
      if (dewPoint_ != null) hash ^= DewPoint.GetHashCode();
      if (heatIndex_ != null) hash ^= HeatIndex.GetHashCode();
      if (windChill_ != null) hash ^= WindChill.GetHashCode();
      if (HasRelativeHumidity) hash ^= RelativeHumidity.GetHashCode();
      if (HasUvIndex) hash ^= UvIndex.GetHashCode();
      if (precipitation_ != null) hash ^= Precipitation.GetHashCode();
      if (HasThunderstormProbability) hash ^= ThunderstormProbability.GetHashCode();
      if (airPressure_ != null) hash ^= AirPressure.GetHashCode();
      if (wind_ != null) hash ^= Wind.GetHashCode();
      if (visibility_ != null) hash ^= Visibility.GetHashCode();
      if (HasCloudCover) hash ^= CloudCover.GetHashCode();
      if (currentConditionsHistory_ != null) hash ^= CurrentConditionsHistory.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (currentTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentTime);
      }
      if (timeZone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeZone);
      }
      if (HasIsDaytime) {
        output.WriteRawTag(24);
        output.WriteBool(IsDaytime);
      }
      if (weatherCondition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeatherCondition);
      }
      if (temperature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Temperature);
      }
      if (feelsLikeTemperature_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FeelsLikeTemperature);
      }
      if (dewPoint_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DewPoint);
      }
      if (heatIndex_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(HeatIndex);
      }
      if (windChill_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(WindChill);
      }
      if (HasRelativeHumidity) {
        output.WriteRawTag(80);
        output.WriteInt32(RelativeHumidity);
      }
      if (HasUvIndex) {
        output.WriteRawTag(88);
        output.WriteInt32(UvIndex);
      }
      if (precipitation_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Precipitation);
      }
      if (HasThunderstormProbability) {
        output.WriteRawTag(104);
        output.WriteInt32(ThunderstormProbability);
      }
      if (airPressure_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(AirPressure);
      }
      if (wind_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Wind);
      }
      if (visibility_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Visibility);
      }
      if (HasCloudCover) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CloudCover);
      }
      if (currentConditionsHistory_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CurrentConditionsHistory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (currentTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentTime);
      }
      if (timeZone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeZone);
      }
      if (HasIsDaytime) {
        output.WriteRawTag(24);
        output.WriteBool(IsDaytime);
      }
      if (weatherCondition_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeatherCondition);
      }
      if (temperature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Temperature);
      }
      if (feelsLikeTemperature_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FeelsLikeTemperature);
      }
      if (dewPoint_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DewPoint);
      }
      if (heatIndex_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(HeatIndex);
      }
      if (windChill_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(WindChill);
      }
      if (HasRelativeHumidity) {
        output.WriteRawTag(80);
        output.WriteInt32(RelativeHumidity);
      }
      if (HasUvIndex) {
        output.WriteRawTag(88);
        output.WriteInt32(UvIndex);
      }
      if (precipitation_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Precipitation);
      }
      if (HasThunderstormProbability) {
        output.WriteRawTag(104);
        output.WriteInt32(ThunderstormProbability);
      }
      if (airPressure_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(AirPressure);
      }
      if (wind_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Wind);
      }
      if (visibility_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Visibility);
      }
      if (HasCloudCover) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CloudCover);
      }
      if (currentConditionsHistory_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CurrentConditionsHistory);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (currentTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentTime);
      }
      if (timeZone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeZone);
      }
      if (HasIsDaytime) {
        size += 1 + 1;
      }
      if (weatherCondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeatherCondition);
      }
      if (temperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Temperature);
      }
      if (feelsLikeTemperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeelsLikeTemperature);
      }
      if (dewPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DewPoint);
      }
      if (heatIndex_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HeatIndex);
      }
      if (windChill_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WindChill);
      }
      if (HasRelativeHumidity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelativeHumidity);
      }
      if (HasUvIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UvIndex);
      }
      if (precipitation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Precipitation);
      }
      if (HasThunderstormProbability) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThunderstormProbability);
      }
      if (airPressure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirPressure);
      }
      if (wind_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wind);
      }
      if (visibility_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Visibility);
      }
      if (HasCloudCover) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CloudCover);
      }
      if (currentConditionsHistory_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CurrentConditionsHistory);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupCurrentConditionsResponse other) {
      if (other == null) {
        return;
      }
      if (other.currentTime_ != null) {
        if (currentTime_ == null) {
          CurrentTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CurrentTime.MergeFrom(other.CurrentTime);
      }
      if (other.timeZone_ != null) {
        if (timeZone_ == null) {
          TimeZone = new global::Google.Type.TimeZone();
        }
        TimeZone.MergeFrom(other.TimeZone);
      }
      if (other.HasIsDaytime) {
        IsDaytime = other.IsDaytime;
      }
      if (other.weatherCondition_ != null) {
        if (weatherCondition_ == null) {
          WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
        }
        WeatherCondition.MergeFrom(other.WeatherCondition);
      }
      if (other.temperature_ != null) {
        if (temperature_ == null) {
          Temperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        Temperature.MergeFrom(other.Temperature);
      }
      if (other.feelsLikeTemperature_ != null) {
        if (feelsLikeTemperature_ == null) {
          FeelsLikeTemperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        FeelsLikeTemperature.MergeFrom(other.FeelsLikeTemperature);
      }
      if (other.dewPoint_ != null) {
        if (dewPoint_ == null) {
          DewPoint = new global::Google.Geo.Weather.V1.Temperature();
        }
        DewPoint.MergeFrom(other.DewPoint);
      }
      if (other.heatIndex_ != null) {
        if (heatIndex_ == null) {
          HeatIndex = new global::Google.Geo.Weather.V1.Temperature();
        }
        HeatIndex.MergeFrom(other.HeatIndex);
      }
      if (other.windChill_ != null) {
        if (windChill_ == null) {
          WindChill = new global::Google.Geo.Weather.V1.Temperature();
        }
        WindChill.MergeFrom(other.WindChill);
      }
      if (other.HasRelativeHumidity) {
        RelativeHumidity = other.RelativeHumidity;
      }
      if (other.HasUvIndex) {
        UvIndex = other.UvIndex;
      }
      if (other.precipitation_ != null) {
        if (precipitation_ == null) {
          Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
        }
        Precipitation.MergeFrom(other.Precipitation);
      }
      if (other.HasThunderstormProbability) {
        ThunderstormProbability = other.ThunderstormProbability;
      }
      if (other.airPressure_ != null) {
        if (airPressure_ == null) {
          AirPressure = new global::Google.Geo.Weather.V1.AirPressure();
        }
        AirPressure.MergeFrom(other.AirPressure);
      }
      if (other.wind_ != null) {
        if (wind_ == null) {
          Wind = new global::Google.Geo.Weather.V1.Wind();
        }
        Wind.MergeFrom(other.Wind);
      }
      if (other.visibility_ != null) {
        if (visibility_ == null) {
          Visibility = new global::Google.Geo.Weather.V1.Visibility();
        }
        Visibility.MergeFrom(other.Visibility);
      }
      if (other.HasCloudCover) {
        CloudCover = other.CloudCover;
      }
      if (other.currentConditionsHistory_ != null) {
        if (currentConditionsHistory_ == null) {
          CurrentConditionsHistory = new global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Types.CurrentConditionsHistory();
        }
        CurrentConditionsHistory.MergeFrom(other.CurrentConditionsHistory);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (currentTime_ == null) {
              CurrentTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CurrentTime);
            break;
          }
          case 18: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 24: {
            IsDaytime = input.ReadBool();
            break;
          }
          case 34: {
            if (weatherCondition_ == null) {
              WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
            }
            input.ReadMessage(WeatherCondition);
            break;
          }
          case 42: {
            if (temperature_ == null) {
              Temperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(Temperature);
            break;
          }
          case 50: {
            if (feelsLikeTemperature_ == null) {
              FeelsLikeTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(FeelsLikeTemperature);
            break;
          }
          case 58: {
            if (dewPoint_ == null) {
              DewPoint = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(DewPoint);
            break;
          }
          case 66: {
            if (heatIndex_ == null) {
              HeatIndex = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(HeatIndex);
            break;
          }
          case 74: {
            if (windChill_ == null) {
              WindChill = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(WindChill);
            break;
          }
          case 80: {
            RelativeHumidity = input.ReadInt32();
            break;
          }
          case 88: {
            UvIndex = input.ReadInt32();
            break;
          }
          case 98: {
            if (precipitation_ == null) {
              Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
            }
            input.ReadMessage(Precipitation);
            break;
          }
          case 104: {
            ThunderstormProbability = input.ReadInt32();
            break;
          }
          case 114: {
            if (airPressure_ == null) {
              AirPressure = new global::Google.Geo.Weather.V1.AirPressure();
            }
            input.ReadMessage(AirPressure);
            break;
          }
          case 122: {
            if (wind_ == null) {
              Wind = new global::Google.Geo.Weather.V1.Wind();
            }
            input.ReadMessage(Wind);
            break;
          }
          case 130: {
            if (visibility_ == null) {
              Visibility = new global::Google.Geo.Weather.V1.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 136: {
            CloudCover = input.ReadInt32();
            break;
          }
          case 146: {
            if (currentConditionsHistory_ == null) {
              CurrentConditionsHistory = new global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Types.CurrentConditionsHistory();
            }
            input.ReadMessage(CurrentConditionsHistory);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (currentTime_ == null) {
              CurrentTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CurrentTime);
            break;
          }
          case 18: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 24: {
            IsDaytime = input.ReadBool();
            break;
          }
          case 34: {
            if (weatherCondition_ == null) {
              WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
            }
            input.ReadMessage(WeatherCondition);
            break;
          }
          case 42: {
            if (temperature_ == null) {
              Temperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(Temperature);
            break;
          }
          case 50: {
            if (feelsLikeTemperature_ == null) {
              FeelsLikeTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(FeelsLikeTemperature);
            break;
          }
          case 58: {
            if (dewPoint_ == null) {
              DewPoint = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(DewPoint);
            break;
          }
          case 66: {
            if (heatIndex_ == null) {
              HeatIndex = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(HeatIndex);
            break;
          }
          case 74: {
            if (windChill_ == null) {
              WindChill = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(WindChill);
            break;
          }
          case 80: {
            RelativeHumidity = input.ReadInt32();
            break;
          }
          case 88: {
            UvIndex = input.ReadInt32();
            break;
          }
          case 98: {
            if (precipitation_ == null) {
              Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
            }
            input.ReadMessage(Precipitation);
            break;
          }
          case 104: {
            ThunderstormProbability = input.ReadInt32();
            break;
          }
          case 114: {
            if (airPressure_ == null) {
              AirPressure = new global::Google.Geo.Weather.V1.AirPressure();
            }
            input.ReadMessage(AirPressure);
            break;
          }
          case 122: {
            if (wind_ == null) {
              Wind = new global::Google.Geo.Weather.V1.Wind();
            }
            input.ReadMessage(Wind);
            break;
          }
          case 130: {
            if (visibility_ == null) {
              Visibility = new global::Google.Geo.Weather.V1.Visibility();
            }
            input.ReadMessage(Visibility);
            break;
          }
          case 136: {
            CloudCover = input.ReadInt32();
            break;
          }
          case 146: {
            if (currentConditionsHistory_ == null) {
              CurrentConditionsHistory = new global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Types.CurrentConditionsHistory();
            }
            input.ReadMessage(CurrentConditionsHistory);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LookupCurrentConditionsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Represents a set of changes in the current conditions over the last 24
      /// hours.
      /// </summary>
      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class CurrentConditionsHistory : pb::IMessage<CurrentConditionsHistory>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<CurrentConditionsHistory> _parser = new pb::MessageParser<CurrentConditionsHistory>(() => new CurrentConditionsHistory());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<CurrentConditionsHistory> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Geo.Weather.V1.LookupCurrentConditionsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CurrentConditionsHistory() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CurrentConditionsHistory(CurrentConditionsHistory other) : this() {
          temperatureChange_ = other.temperatureChange_ != null ? other.temperatureChange_.Clone() : null;
          maxTemperature_ = other.maxTemperature_ != null ? other.maxTemperature_.Clone() : null;
          minTemperature_ = other.minTemperature_ != null ? other.minTemperature_.Clone() : null;
          snowQpf_ = other.snowQpf_ != null ? other.snowQpf_.Clone() : null;
          qpf_ = other.qpf_ != null ? other.qpf_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public CurrentConditionsHistory Clone() {
          return new CurrentConditionsHistory(this);
        }

        /// <summary>Field number for the "temperature_change" field.</summary>
        public const int TemperatureChangeFieldNumber = 1;
        private global::Google.Geo.Weather.V1.Temperature temperatureChange_;
        /// <summary>
        /// The current temperature minus the temperature 24 hours ago.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Geo.Weather.V1.Temperature TemperatureChange {
          get { return temperatureChange_; }
          set {
            temperatureChange_ = value;
          }
        }

        /// <summary>Field number for the "max_temperature" field.</summary>
        public const int MaxTemperatureFieldNumber = 2;
        private global::Google.Geo.Weather.V1.Temperature maxTemperature_;
        /// <summary>
        /// The maximum (high) temperature in the past 24 hours.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Geo.Weather.V1.Temperature MaxTemperature {
          get { return maxTemperature_; }
          set {
            maxTemperature_ = value;
          }
        }

        /// <summary>Field number for the "min_temperature" field.</summary>
        public const int MinTemperatureFieldNumber = 3;
        private global::Google.Geo.Weather.V1.Temperature minTemperature_;
        /// <summary>
        /// The minimum (low) temperature in the past 24 hours.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Geo.Weather.V1.Temperature MinTemperature {
          get { return minTemperature_; }
          set {
            minTemperature_ = value;
          }
        }

        /// <summary>Field number for the "snow_qpf" field.</summary>
        public const int SnowQpfFieldNumber = 5;
        private global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast snowQpf_;
        /// <summary>
        /// The amount of snow, measured as liquid water equivalent,
        /// that has accumulated over the last 24 hours.
        /// Note: QPF is an abbreviation for Quantitative Precipitation Forecast
        /// (please see the QuantitativePrecipitationForecast definition for more
        /// details).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast SnowQpf {
          get { return snowQpf_; }
          set {
            snowQpf_ = value;
          }
        }

        /// <summary>Field number for the "qpf" field.</summary>
        public const int QpfFieldNumber = 6;
        private global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast qpf_;
        /// <summary>
        /// The amount of rain, measured as liquid water equivalent, that has
        /// accumulated over the last 24 hours. Note: QPF is an abbreviation for
        /// Quantitative Precipitation Forecast (please see the
        /// QuantitativePrecipitationForecast definition for more details).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast Qpf {
          get { return qpf_; }
          set {
            qpf_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as CurrentConditionsHistory);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(CurrentConditionsHistory other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TemperatureChange, other.TemperatureChange)) return false;
          if (!object.Equals(MaxTemperature, other.MaxTemperature)) return false;
          if (!object.Equals(MinTemperature, other.MinTemperature)) return false;
          if (!object.Equals(SnowQpf, other.SnowQpf)) return false;
          if (!object.Equals(Qpf, other.Qpf)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (temperatureChange_ != null) hash ^= TemperatureChange.GetHashCode();
          if (maxTemperature_ != null) hash ^= MaxTemperature.GetHashCode();
          if (minTemperature_ != null) hash ^= MinTemperature.GetHashCode();
          if (snowQpf_ != null) hash ^= SnowQpf.GetHashCode();
          if (qpf_ != null) hash ^= Qpf.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (temperatureChange_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TemperatureChange);
          }
          if (maxTemperature_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(MaxTemperature);
          }
          if (minTemperature_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(MinTemperature);
          }
          if (snowQpf_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(SnowQpf);
          }
          if (qpf_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Qpf);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (temperatureChange_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TemperatureChange);
          }
          if (maxTemperature_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(MaxTemperature);
          }
          if (minTemperature_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(MinTemperature);
          }
          if (snowQpf_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(SnowQpf);
          }
          if (qpf_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Qpf);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (temperatureChange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TemperatureChange);
          }
          if (maxTemperature_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxTemperature);
          }
          if (minTemperature_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinTemperature);
          }
          if (snowQpf_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(SnowQpf);
          }
          if (qpf_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Qpf);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(CurrentConditionsHistory other) {
          if (other == null) {
            return;
          }
          if (other.temperatureChange_ != null) {
            if (temperatureChange_ == null) {
              TemperatureChange = new global::Google.Geo.Weather.V1.Temperature();
            }
            TemperatureChange.MergeFrom(other.TemperatureChange);
          }
          if (other.maxTemperature_ != null) {
            if (maxTemperature_ == null) {
              MaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            MaxTemperature.MergeFrom(other.MaxTemperature);
          }
          if (other.minTemperature_ != null) {
            if (minTemperature_ == null) {
              MinTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            MinTemperature.MergeFrom(other.MinTemperature);
          }
          if (other.snowQpf_ != null) {
            if (snowQpf_ == null) {
              SnowQpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
            }
            SnowQpf.MergeFrom(other.SnowQpf);
          }
          if (other.qpf_ != null) {
            if (qpf_ == null) {
              Qpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
            }
            Qpf.MergeFrom(other.Qpf);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (temperatureChange_ == null) {
                  TemperatureChange = new global::Google.Geo.Weather.V1.Temperature();
                }
                input.ReadMessage(TemperatureChange);
                break;
              }
              case 18: {
                if (maxTemperature_ == null) {
                  MaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
                }
                input.ReadMessage(MaxTemperature);
                break;
              }
              case 26: {
                if (minTemperature_ == null) {
                  MinTemperature = new global::Google.Geo.Weather.V1.Temperature();
                }
                input.ReadMessage(MinTemperature);
                break;
              }
              case 42: {
                if (snowQpf_ == null) {
                  SnowQpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
                }
                input.ReadMessage(SnowQpf);
                break;
              }
              case 50: {
                if (qpf_ == null) {
                  Qpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
                }
                input.ReadMessage(Qpf);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (temperatureChange_ == null) {
                  TemperatureChange = new global::Google.Geo.Weather.V1.Temperature();
                }
                input.ReadMessage(TemperatureChange);
                break;
              }
              case 18: {
                if (maxTemperature_ == null) {
                  MaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
                }
                input.ReadMessage(MaxTemperature);
                break;
              }
              case 26: {
                if (minTemperature_ == null) {
                  MinTemperature = new global::Google.Geo.Weather.V1.Temperature();
                }
                input.ReadMessage(MinTemperature);
                break;
              }
              case 42: {
                if (snowQpf_ == null) {
                  SnowQpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
                }
                input.ReadMessage(SnowQpf);
                break;
              }
              case 50: {
                if (qpf_ == null) {
                  Qpf = new global::Google.Geo.Weather.V1.QuantitativePrecipitationForecast();
                }
                input.ReadMessage(Qpf);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Request for the LookupForecastHours RPC.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupForecastHoursRequest : pb::IMessage<LookupForecastHoursRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupForecastHoursRequest> _parser = new pb::MessageParser<LookupForecastHoursRequest>(() => new LookupForecastHoursRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupForecastHoursRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastHoursRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastHoursRequest(LookupForecastHoursRequest other) : this() {
      _hasBits0 = other._hasBits0;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      hours_ = other.hours_;
      unitsSystem_ = other.unitsSystem_;
      languageCode_ = other.languageCode_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastHoursRequest Clone() {
      return new LookupForecastHoursRequest(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Google.Type.LatLng location_;
    /// <summary>
    /// Required. The location to get the hourly forecast for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.LatLng Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "hours" field.</summary>
    public const int HoursFieldNumber = 2;
    private readonly static int HoursDefaultValue = 0;

    private int hours_;
    /// <summary>
    /// Optional. Limits the amount of total hours to fetch starting from the
    /// current hour - a value from 1 to 240 (inclusive). The default is the
    /// maximum allowed value of 240.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hours {
      get { if ((_hasBits0 & 1) != 0) { return hours_; } else { return HoursDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hours_ = value;
      }
    }
    /// <summary>Gets whether the "hours" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHours {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hours" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHours() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "units_system" field.</summary>
    public const int UnitsSystemFieldNumber = 3;
    private global::Google.Geo.Weather.V1.UnitsSystem unitsSystem_ = global::Google.Geo.Weather.V1.UnitsSystem.Unspecified;
    /// <summary>
    /// Optional. The units system to use for the returned weather conditions. If
    /// not provided, the returned weather conditions will be in the metric system
    /// (default = METRIC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.UnitsSystem UnitsSystem {
      get { return unitsSystem_; }
      set {
        unitsSystem_ = value;
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 4;
    private readonly static string LanguageCodeDefaultValue = "";

    private string languageCode_;
    /// <summary>
    /// Optional. Allows the client to choose the language for the response. If
    /// data cannot be provided for that language, the API uses the closest match.
    /// Allowed values rely on the IETF BCP-47 standard. The default value is "en".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LanguageCode {
      get { return languageCode_ ?? LanguageCodeDefaultValue; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLanguageCode {
      get { return languageCode_ != null; }
    }
    /// <summary>Clears the value of the "language_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLanguageCode() {
      languageCode_ = null;
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    /// Optional. The maximum number of hourly forecast records to return per page
    /// - a value from 1 to 24 (inclusive). The default is the maximum allowed
    /// value of 24.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 6;
    private string pageToken_ = "";
    /// <summary>
    /// Optional. A page token received from a previous request. It is used to
    /// retrieve the subsequent page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupForecastHoursRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupForecastHoursRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (Hours != other.Hours) return false;
      if (UnitsSystem != other.UnitsSystem) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (HasHours) hash ^= Hours.GetHashCode();
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) hash ^= UnitsSystem.GetHashCode();
      if (HasLanguageCode) hash ^= LanguageCode.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasHours) {
        output.WriteRawTag(16);
        output.WriteInt32(Hours);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasHours) {
        output.WriteRawTag(16);
        output.WriteInt32(Hours);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (HasHours) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hours);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupForecastHoursRequest other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Google.Type.LatLng();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.HasHours) {
        Hours = other.Hours;
      }
      if (other.UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        UnitsSystem = other.UnitsSystem;
      }
      if (other.HasLanguageCode) {
        LanguageCode = other.LanguageCode;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            Hours = input.ReadInt32();
            break;
          }
          case 24: {
            UnitsSystem = (global::Google.Geo.Weather.V1.UnitsSystem) input.ReadEnum();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
          case 50: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            Hours = input.ReadInt32();
            break;
          }
          case 24: {
            UnitsSystem = (global::Google.Geo.Weather.V1.UnitsSystem) input.ReadEnum();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
          case 50: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the LookupForecastHours RPC.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupForecastHoursResponse : pb::IMessage<LookupForecastHoursResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupForecastHoursResponse> _parser = new pb::MessageParser<LookupForecastHoursResponse>(() => new LookupForecastHoursResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupForecastHoursResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastHoursResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastHoursResponse(LookupForecastHoursResponse other) : this() {
      forecastHours_ = other.forecastHours_.Clone();
      timeZone_ = other.timeZone_ != null ? other.timeZone_.Clone() : null;
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastHoursResponse Clone() {
      return new LookupForecastHoursResponse(this);
    }

    /// <summary>Field number for the "forecast_hours" field.</summary>
    public const int ForecastHoursFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Geo.Weather.V1.ForecastHour> _repeated_forecastHours_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Geo.Weather.V1.ForecastHour.Parser);
    private readonly pbc::RepeatedField<global::Google.Geo.Weather.V1.ForecastHour> forecastHours_ = new pbc::RepeatedField<global::Google.Geo.Weather.V1.ForecastHour>();
    /// <summary>
    /// The hourly forecast records, according to the number of hours and page size
    /// specified in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Geo.Weather.V1.ForecastHour> ForecastHours {
      get { return forecastHours_; }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 2;
    private global::Google.Type.TimeZone timeZone_;
    /// <summary>
    /// The time zone at the requested location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.TimeZone TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 3;
    private string nextPageToken_ = "";
    /// <summary>
    /// The token to retrieve the next page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupForecastHoursResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupForecastHoursResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!forecastHours_.Equals(other.forecastHours_)) return false;
      if (!object.Equals(TimeZone, other.TimeZone)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= forecastHours_.GetHashCode();
      if (timeZone_ != null) hash ^= TimeZone.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      forecastHours_.WriteTo(output, _repeated_forecastHours_codec);
      if (timeZone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      forecastHours_.WriteTo(ref output, _repeated_forecastHours_codec);
      if (timeZone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += forecastHours_.CalculateSize(_repeated_forecastHours_codec);
      if (timeZone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupForecastHoursResponse other) {
      if (other == null) {
        return;
      }
      forecastHours_.Add(other.forecastHours_);
      if (other.timeZone_ != null) {
        if (timeZone_ == null) {
          TimeZone = new global::Google.Type.TimeZone();
        }
        TimeZone.MergeFrom(other.TimeZone);
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            forecastHours_.AddEntriesFrom(input, _repeated_forecastHours_codec);
            break;
          }
          case 18: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 26: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            forecastHours_.AddEntriesFrom(ref input, _repeated_forecastHours_codec);
            break;
          }
          case 18: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 26: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for the LookupForecastDays RPC.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupForecastDaysRequest : pb::IMessage<LookupForecastDaysRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupForecastDaysRequest> _parser = new pb::MessageParser<LookupForecastDaysRequest>(() => new LookupForecastDaysRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupForecastDaysRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastDaysRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastDaysRequest(LookupForecastDaysRequest other) : this() {
      _hasBits0 = other._hasBits0;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      days_ = other.days_;
      unitsSystem_ = other.unitsSystem_;
      languageCode_ = other.languageCode_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastDaysRequest Clone() {
      return new LookupForecastDaysRequest(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Google.Type.LatLng location_;
    /// <summary>
    /// Required. The location to get the daily forecast for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.LatLng Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "days" field.</summary>
    public const int DaysFieldNumber = 2;
    private readonly static int DaysDefaultValue = 0;

    private int days_;
    /// <summary>
    /// Optional. Limits the amount of total days to fetch starting from the
    /// current day - a value from 1 to 10 (inclusive). The default value is the
    /// maximum allowed value of 10.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Days {
      get { if ((_hasBits0 & 1) != 0) { return days_; } else { return DaysDefaultValue; } }
      set {
        _hasBits0 |= 1;
        days_ = value;
      }
    }
    /// <summary>Gets whether the "days" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDays {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "days" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDays() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "units_system" field.</summary>
    public const int UnitsSystemFieldNumber = 3;
    private global::Google.Geo.Weather.V1.UnitsSystem unitsSystem_ = global::Google.Geo.Weather.V1.UnitsSystem.Unspecified;
    /// <summary>
    /// Optional. The units system to use for the returned weather conditions. If
    /// not provided, the returned weather conditions will be in the metric system
    /// (default = METRIC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.UnitsSystem UnitsSystem {
      get { return unitsSystem_; }
      set {
        unitsSystem_ = value;
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 4;
    private readonly static string LanguageCodeDefaultValue = "";

    private string languageCode_;
    /// <summary>
    /// Optional. Allows the client to choose the language for the response. If
    /// data cannot be provided for that language, the API uses the closest match.
    /// Allowed values rely on the IETF BCP-47 standard. The default value is "en".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LanguageCode {
      get { return languageCode_ ?? LanguageCodeDefaultValue; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLanguageCode {
      get { return languageCode_ != null; }
    }
    /// <summary>Clears the value of the "language_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLanguageCode() {
      languageCode_ = null;
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    /// Optional. The maximum number of daily forecast records to return per page -
    /// a value from 1 to 10 (inclusive). The default value is 5.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 6;
    private string pageToken_ = "";
    /// <summary>
    /// Optional. A page token received from a previous request. It is used to
    /// retrieve the subsequent page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupForecastDaysRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupForecastDaysRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (Days != other.Days) return false;
      if (UnitsSystem != other.UnitsSystem) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (HasDays) hash ^= Days.GetHashCode();
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) hash ^= UnitsSystem.GetHashCode();
      if (HasLanguageCode) hash ^= LanguageCode.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasDays) {
        output.WriteRawTag(16);
        output.WriteInt32(Days);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasDays) {
        output.WriteRawTag(16);
        output.WriteInt32(Days);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (HasDays) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupForecastDaysRequest other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Google.Type.LatLng();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.HasDays) {
        Days = other.Days;
      }
      if (other.UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        UnitsSystem = other.UnitsSystem;
      }
      if (other.HasLanguageCode) {
        LanguageCode = other.LanguageCode;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            Days = input.ReadInt32();
            break;
          }
          case 24: {
            UnitsSystem = (global::Google.Geo.Weather.V1.UnitsSystem) input.ReadEnum();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
          case 50: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            Days = input.ReadInt32();
            break;
          }
          case 24: {
            UnitsSystem = (global::Google.Geo.Weather.V1.UnitsSystem) input.ReadEnum();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
          case 50: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the LookupForecastDays RPC.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupForecastDaysResponse : pb::IMessage<LookupForecastDaysResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupForecastDaysResponse> _parser = new pb::MessageParser<LookupForecastDaysResponse>(() => new LookupForecastDaysResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupForecastDaysResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastDaysResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastDaysResponse(LookupForecastDaysResponse other) : this() {
      forecastDays_ = other.forecastDays_.Clone();
      timeZone_ = other.timeZone_ != null ? other.timeZone_.Clone() : null;
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupForecastDaysResponse Clone() {
      return new LookupForecastDaysResponse(this);
    }

    /// <summary>Field number for the "forecast_days" field.</summary>
    public const int ForecastDaysFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Geo.Weather.V1.ForecastDay> _repeated_forecastDays_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Geo.Weather.V1.ForecastDay.Parser);
    private readonly pbc::RepeatedField<global::Google.Geo.Weather.V1.ForecastDay> forecastDays_ = new pbc::RepeatedField<global::Google.Geo.Weather.V1.ForecastDay>();
    /// <summary>
    /// The daily forecast records, according to the number of days and page size
    /// specified in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Geo.Weather.V1.ForecastDay> ForecastDays {
      get { return forecastDays_; }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 2;
    private global::Google.Type.TimeZone timeZone_;
    /// <summary>
    /// The time zone at the requested location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.TimeZone TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 3;
    private string nextPageToken_ = "";
    /// <summary>
    /// The token to retrieve the next page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupForecastDaysResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupForecastDaysResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!forecastDays_.Equals(other.forecastDays_)) return false;
      if (!object.Equals(TimeZone, other.TimeZone)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= forecastDays_.GetHashCode();
      if (timeZone_ != null) hash ^= TimeZone.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      forecastDays_.WriteTo(output, _repeated_forecastDays_codec);
      if (timeZone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      forecastDays_.WriteTo(ref output, _repeated_forecastDays_codec);
      if (timeZone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += forecastDays_.CalculateSize(_repeated_forecastDays_codec);
      if (timeZone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupForecastDaysResponse other) {
      if (other == null) {
        return;
      }
      forecastDays_.Add(other.forecastDays_);
      if (other.timeZone_ != null) {
        if (timeZone_ == null) {
          TimeZone = new global::Google.Type.TimeZone();
        }
        TimeZone.MergeFrom(other.TimeZone);
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            forecastDays_.AddEntriesFrom(input, _repeated_forecastDays_codec);
            break;
          }
          case 18: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 26: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            forecastDays_.AddEntriesFrom(ref input, _repeated_forecastDays_codec);
            break;
          }
          case 18: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 26: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Request for the LookupHistoryHours RPC.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupHistoryHoursRequest : pb::IMessage<LookupHistoryHoursRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupHistoryHoursRequest> _parser = new pb::MessageParser<LookupHistoryHoursRequest>(() => new LookupHistoryHoursRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupHistoryHoursRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupHistoryHoursRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupHistoryHoursRequest(LookupHistoryHoursRequest other) : this() {
      _hasBits0 = other._hasBits0;
      location_ = other.location_ != null ? other.location_.Clone() : null;
      hours_ = other.hours_;
      unitsSystem_ = other.unitsSystem_;
      languageCode_ = other.languageCode_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupHistoryHoursRequest Clone() {
      return new LookupHistoryHoursRequest(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Google.Type.LatLng location_;
    /// <summary>
    /// Required. The location to get the hourly historical data for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.LatLng Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "hours" field.</summary>
    public const int HoursFieldNumber = 2;
    private readonly static int HoursDefaultValue = 0;

    private int hours_;
    /// <summary>
    /// Optional. Limits the amount of total hours to fetch starting from the last
    /// hour - a from 1 to 24 (inclusive). The default is the maximum allowed value
    /// of 24.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hours {
      get { if ((_hasBits0 & 1) != 0) { return hours_; } else { return HoursDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hours_ = value;
      }
    }
    /// <summary>Gets whether the "hours" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHours {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "hours" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHours() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "units_system" field.</summary>
    public const int UnitsSystemFieldNumber = 3;
    private global::Google.Geo.Weather.V1.UnitsSystem unitsSystem_ = global::Google.Geo.Weather.V1.UnitsSystem.Unspecified;
    /// <summary>
    /// Optional. The units system to use for the returned weather conditions. If
    /// not provided, the returned weather conditions will be in the metric system
    /// (default = METRIC).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.UnitsSystem UnitsSystem {
      get { return unitsSystem_; }
      set {
        unitsSystem_ = value;
      }
    }

    /// <summary>Field number for the "language_code" field.</summary>
    public const int LanguageCodeFieldNumber = 4;
    private readonly static string LanguageCodeDefaultValue = "";

    private string languageCode_;
    /// <summary>
    /// Optional. Allows the client to choose the language for the response. If
    /// data cannot be provided for that language, the API uses the closest match.
    /// Allowed values rely on the IETF BCP-47 standard. The default value is "en".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LanguageCode {
      get { return languageCode_ ?? LanguageCodeDefaultValue; }
      set {
        languageCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "language_code" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLanguageCode {
      get { return languageCode_ != null; }
    }
    /// <summary>Clears the value of the "language_code" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLanguageCode() {
      languageCode_ = null;
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 5;
    private int pageSize_;
    /// <summary>
    /// Optional. The maximum number of hourly historical records to return per
    /// page - a value from 1 to 24 (inclusive). The default is the maximum allowed
    /// value of 24.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 6;
    private string pageToken_ = "";
    /// <summary>
    /// Optional. A page token received from a previous request. It is used to
    /// retrieve the subsequent page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupHistoryHoursRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupHistoryHoursRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (Hours != other.Hours) return false;
      if (UnitsSystem != other.UnitsSystem) return false;
      if (LanguageCode != other.LanguageCode) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (HasHours) hash ^= Hours.GetHashCode();
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) hash ^= UnitsSystem.GetHashCode();
      if (HasLanguageCode) hash ^= LanguageCode.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasHours) {
        output.WriteRawTag(16);
        output.WriteInt32(Hours);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (HasHours) {
        output.WriteRawTag(16);
        output.WriteInt32(Hours);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        output.WriteRawTag(34);
        output.WriteString(LanguageCode);
      }
      if (PageSize != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (HasHours) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hours);
      }
      if (UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UnitsSystem);
      }
      if (HasLanguageCode) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupHistoryHoursRequest other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          Location = new global::Google.Type.LatLng();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.HasHours) {
        Hours = other.Hours;
      }
      if (other.UnitsSystem != global::Google.Geo.Weather.V1.UnitsSystem.Unspecified) {
        UnitsSystem = other.UnitsSystem;
      }
      if (other.HasLanguageCode) {
        LanguageCode = other.LanguageCode;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            Hours = input.ReadInt32();
            break;
          }
          case 24: {
            UnitsSystem = (global::Google.Geo.Weather.V1.UnitsSystem) input.ReadEnum();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
          case 50: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (location_ == null) {
              Location = new global::Google.Type.LatLng();
            }
            input.ReadMessage(Location);
            break;
          }
          case 16: {
            Hours = input.ReadInt32();
            break;
          }
          case 24: {
            UnitsSystem = (global::Google.Geo.Weather.V1.UnitsSystem) input.ReadEnum();
            break;
          }
          case 34: {
            LanguageCode = input.ReadString();
            break;
          }
          case 40: {
            PageSize = input.ReadInt32();
            break;
          }
          case 50: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Response for the LookupHistoryHours RPC.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupHistoryHoursResponse : pb::IMessage<LookupHistoryHoursResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupHistoryHoursResponse> _parser = new pb::MessageParser<LookupHistoryHoursResponse>(() => new LookupHistoryHoursResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupHistoryHoursResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupHistoryHoursResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupHistoryHoursResponse(LookupHistoryHoursResponse other) : this() {
      historyHours_ = other.historyHours_.Clone();
      timeZone_ = other.timeZone_ != null ? other.timeZone_.Clone() : null;
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupHistoryHoursResponse Clone() {
      return new LookupHistoryHoursResponse(this);
    }

    /// <summary>Field number for the "history_hours" field.</summary>
    public const int HistoryHoursFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Geo.Weather.V1.HistoryHour> _repeated_historyHours_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Geo.Weather.V1.HistoryHour.Parser);
    private readonly pbc::RepeatedField<global::Google.Geo.Weather.V1.HistoryHour> historyHours_ = new pbc::RepeatedField<global::Google.Geo.Weather.V1.HistoryHour>();
    /// <summary>
    /// The hourly historical records, according to the number of hours and page
    /// size specified in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Google.Geo.Weather.V1.HistoryHour> HistoryHours {
      get { return historyHours_; }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 2;
    private global::Google.Type.TimeZone timeZone_;
    /// <summary>
    /// The time zone at the requested location.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.TimeZone TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 3;
    private string nextPageToken_ = "";
    /// <summary>
    /// The token to retrieve the next page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupHistoryHoursResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupHistoryHoursResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!historyHours_.Equals(other.historyHours_)) return false;
      if (!object.Equals(TimeZone, other.TimeZone)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= historyHours_.GetHashCode();
      if (timeZone_ != null) hash ^= TimeZone.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      historyHours_.WriteTo(output, _repeated_historyHours_codec);
      if (timeZone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      historyHours_.WriteTo(ref output, _repeated_historyHours_codec);
      if (timeZone_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += historyHours_.CalculateSize(_repeated_historyHours_codec);
      if (timeZone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeZone);
      }
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupHistoryHoursResponse other) {
      if (other == null) {
        return;
      }
      historyHours_.Add(other.historyHours_);
      if (other.timeZone_ != null) {
        if (timeZone_ == null) {
          TimeZone = new global::Google.Type.TimeZone();
        }
        TimeZone.MergeFrom(other.TimeZone);
      }
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            historyHours_.AddEntriesFrom(input, _repeated_historyHours_codec);
            break;
          }
          case 18: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 26: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            historyHours_.AddEntriesFrom(ref input, _repeated_historyHours_codec);
            break;
          }
          case 18: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 26: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// (-- Request for the LookupPublicAlerts RPC. --)
  /// (-- TODO (418938868): mikesky - Add request fields.
  /// Reason: We want to parallelize our work and creating a simple proto for
  /// quick approval could help us do other tasks while the larger proto is
  /// being approved. --)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupPublicAlertsRequest : pb::IMessage<LookupPublicAlertsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupPublicAlertsRequest> _parser = new pb::MessageParser<LookupPublicAlertsRequest>(() => new LookupPublicAlertsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupPublicAlertsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupPublicAlertsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupPublicAlertsRequest(LookupPublicAlertsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupPublicAlertsRequest Clone() {
      return new LookupPublicAlertsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupPublicAlertsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupPublicAlertsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupPublicAlertsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// (-- Response for the LookupPublicAlerts RPC. --)
  /// (-- TODO(418938868): mikesky - Add public weather alert records to the
  /// response. Reason: We want to parallelize our work and creating a simple proto
  /// for quick approval could help us do other tasks while the larger proto is
  /// being approved. --)
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LookupPublicAlertsResponse : pb::IMessage<LookupPublicAlertsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LookupPublicAlertsResponse> _parser = new pb::MessageParser<LookupPublicAlertsResponse>(() => new LookupPublicAlertsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LookupPublicAlertsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.WeatherServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupPublicAlertsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupPublicAlertsResponse(LookupPublicAlertsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LookupPublicAlertsResponse Clone() {
      return new LookupPublicAlertsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LookupPublicAlertsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LookupPublicAlertsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LookupPublicAlertsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
