// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/forecast_day.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Geo.Weather.V1 {

  /// <summary>Holder for reflection information generated from google/maps/weather/v1/forecast_day.proto</summary>
  public static partial class ForecastDayReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/weather/v1/forecast_day.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ForecastDayReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cilnb29nbGUvbWFwcy93ZWF0aGVyL3YxL2ZvcmVjYXN0X2RheS5wcm90bxIW",
            "Z29vZ2xlLm1hcHMud2VhdGhlci52MRotZ29vZ2xlL21hcHMvd2VhdGhlci92",
            "MS9jZWxlc3RpYWxfZXZlbnRzLnByb3RvGiBnb29nbGUvbWFwcy93ZWF0aGVy",
            "L3YxL2ljZS5wcm90bxoqZ29vZ2xlL21hcHMvd2VhdGhlci92MS9wcmVjaXBp",
            "dGF0aW9uLnByb3RvGihnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3RlbXBlcmF0",
            "dXJlLnByb3RvGi5nb29nbGUvbWFwcy93ZWF0aGVyL3YxL3dlYXRoZXJfY29u",
            "ZGl0aW9uLnByb3RvGiFnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3dpbmQucHJv",
            "dG8aFmdvb2dsZS90eXBlL2RhdGUucHJvdG8aGmdvb2dsZS90eXBlL2ludGVy",
            "dmFsLnByb3RvIqIFCgtGb3JlY2FzdERheRInCghpbnRlcnZhbBgBIAEoCzIV",
            "Lmdvb2dsZS50eXBlLkludGVydmFsEicKDGRpc3BsYXlfZGF0ZRgCIAEoCzIR",
            "Lmdvb2dsZS50eXBlLkRhdGUSQQoQZGF5dGltZV9mb3JlY2FzdBgDIAEoCzIn",
            "Lmdvb2dsZS5tYXBzLndlYXRoZXIudjEuRm9yZWNhc3REYXlQYXJ0EkMKEm5p",
            "Z2h0dGltZV9mb3JlY2FzdBgEIAEoCzInLmdvb2dsZS5tYXBzLndlYXRoZXIu",
            "djEuRm9yZWNhc3REYXlQYXJ0EjwKD21heF90ZW1wZXJhdHVyZRgFIAEoCzIj",
            "Lmdvb2dsZS5tYXBzLndlYXRoZXIudjEuVGVtcGVyYXR1cmUSPAoPbWluX3Rl",
            "bXBlcmF0dXJlGAYgASgLMiMuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5UZW1w",
            "ZXJhdHVyZRJHChpmZWVsc19saWtlX21heF90ZW1wZXJhdHVyZRgHIAEoCzIj",
            "Lmdvb2dsZS5tYXBzLndlYXRoZXIudjEuVGVtcGVyYXR1cmUSRwoaZmVlbHNf",
            "bGlrZV9taW5fdGVtcGVyYXR1cmUYCCABKAsyIy5nb29nbGUubWFwcy53ZWF0",
            "aGVyLnYxLlRlbXBlcmF0dXJlEjsKDm1heF9oZWF0X2luZGV4GAsgASgLMiMu",
            "Z29vZ2xlLm1hcHMud2VhdGhlci52MS5UZW1wZXJhdHVyZRI1CgpzdW5fZXZl",
            "bnRzGAkgASgLMiEuZ29vZ2xlLm1hcHMud2VhdGhlci52MS5TdW5FdmVudHMS",
            "NwoLbW9vbl9ldmVudHMYCiABKAsyIi5nb29nbGUubWFwcy53ZWF0aGVyLnYx",
            "Lk1vb25FdmVudHMi7gMKD0ZvcmVjYXN0RGF5UGFydBInCghpbnRlcnZhbBgB",
            "IAEoCzIVLmdvb2dsZS50eXBlLkludGVydmFsEkMKEXdlYXRoZXJfY29uZGl0",
            "aW9uGAIgASgLMiguZ29vZ2xlLm1hcHMud2VhdGhlci52MS5XZWF0aGVyQ29u",
            "ZGl0aW9uEh4KEXJlbGF0aXZlX2h1bWlkaXR5GAMgASgFSACIAQESFQoIdXZf",
            "aW5kZXgYBCABKAVIAYgBARI8Cg1wcmVjaXBpdGF0aW9uGAUgASgLMiUuZ29v",
            "Z2xlLm1hcHMud2VhdGhlci52MS5QcmVjaXBpdGF0aW9uEiUKGHRodW5kZXJz",
            "dG9ybV9wcm9iYWJpbGl0eRgGIAEoBUgCiAEBEioKBHdpbmQYByABKAsyHC5n",
            "b29nbGUubWFwcy53ZWF0aGVyLnYxLldpbmQSGAoLY2xvdWRfY292ZXIYCCAB",
            "KAVIA4gBARI7Cg1pY2VfdGhpY2tuZXNzGAkgASgLMiQuZ29vZ2xlLm1hcHMu",
            "d2VhdGhlci52MS5JY2VUaGlja25lc3NCFAoSX3JlbGF0aXZlX2h1bWlkaXR5",
            "QgsKCV91dl9pbmRleEIbChlfdGh1bmRlcnN0b3JtX3Byb2JhYmlsaXR5Qg4K",
            "DF9jbG91ZF9jb3ZlckKkAQoaY29tLmdvb2dsZS5tYXBzLndlYXRoZXIudjFC",
            "EEZvcmVjYXN0RGF5UHJvdG9QAVo6Y2xvdWQuZ29vZ2xlLmNvbS9nby9tYXBz",
            "L3dlYXRoZXIvYXBpdjEvd2VhdGhlcnBiO3dlYXRoZXJwYqICBUdNV1YxqgIV",
            "R29vZ2xlLkdlby5XZWF0aGVyLlYxygIVR29vZ2xlXEdlb1xXZWF0aGVyXFYx",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Geo.Weather.V1.CelestialEventsReflection.Descriptor, global::Google.Geo.Weather.V1.IceReflection.Descriptor, global::Google.Geo.Weather.V1.PrecipitationReflection.Descriptor, global::Google.Geo.Weather.V1.TemperatureReflection.Descriptor, global::Google.Geo.Weather.V1.WeatherConditionReflection.Descriptor, global::Google.Geo.Weather.V1.WindReflection.Descriptor, global::Google.Type.DateReflection.Descriptor, global::Google.Type.IntervalReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.ForecastDay), global::Google.Geo.Weather.V1.ForecastDay.Parser, new[]{ "Interval", "DisplayDate", "DaytimeForecast", "NighttimeForecast", "MaxTemperature", "MinTemperature", "FeelsLikeMaxTemperature", "FeelsLikeMinTemperature", "MaxHeatIndex", "SunEvents", "MoonEvents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.ForecastDayPart), global::Google.Geo.Weather.V1.ForecastDayPart.Parser, new[]{ "Interval", "WeatherCondition", "RelativeHumidity", "UvIndex", "Precipitation", "ThunderstormProbability", "Wind", "CloudCover", "IceThickness" }, new[]{ "RelativeHumidity", "UvIndex", "ThunderstormProbability", "CloudCover" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Represents a daily forecast record at a given location.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ForecastDay : pb::IMessage<ForecastDay>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForecastDay> _parser = new pb::MessageParser<ForecastDay>(() => new ForecastDay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ForecastDay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.ForecastDayReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ForecastDay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ForecastDay(ForecastDay other) : this() {
      interval_ = other.interval_ != null ? other.interval_.Clone() : null;
      displayDate_ = other.displayDate_ != null ? other.displayDate_.Clone() : null;
      daytimeForecast_ = other.daytimeForecast_ != null ? other.daytimeForecast_.Clone() : null;
      nighttimeForecast_ = other.nighttimeForecast_ != null ? other.nighttimeForecast_.Clone() : null;
      maxTemperature_ = other.maxTemperature_ != null ? other.maxTemperature_.Clone() : null;
      minTemperature_ = other.minTemperature_ != null ? other.minTemperature_.Clone() : null;
      feelsLikeMaxTemperature_ = other.feelsLikeMaxTemperature_ != null ? other.feelsLikeMaxTemperature_.Clone() : null;
      feelsLikeMinTemperature_ = other.feelsLikeMinTemperature_ != null ? other.feelsLikeMinTemperature_.Clone() : null;
      maxHeatIndex_ = other.maxHeatIndex_ != null ? other.maxHeatIndex_.Clone() : null;
      sunEvents_ = other.sunEvents_ != null ? other.sunEvents_.Clone() : null;
      moonEvents_ = other.moonEvents_ != null ? other.moonEvents_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ForecastDay Clone() {
      return new ForecastDay(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private global::Google.Type.Interval interval_;
    /// <summary>
    /// The UTC time interval when this forecasted day is starts (inclusive) and
    /// ends (exclusive).
    /// Note: a day starts at 7am and ends at 7am next day, local time.
    /// For example: If the local time zone is UTC-7, then the interval will start
    /// at the time `14:00:00.000Z` and end at the same hour the next day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.Interval Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "display_date" field.</summary>
    public const int DisplayDateFieldNumber = 2;
    private global::Google.Type.Date displayDate_;
    /// <summary>
    /// The local date in the time zone of the location (civil time) which this
    /// daily forecast is calculated for. This field may be used for display
    /// purposes on the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.Date DisplayDate {
      get { return displayDate_; }
      set {
        displayDate_ = value;
      }
    }

    /// <summary>Field number for the "daytime_forecast" field.</summary>
    public const int DaytimeForecastFieldNumber = 3;
    private global::Google.Geo.Weather.V1.ForecastDayPart daytimeForecast_;
    /// <summary>
    /// The forecasted weather conditions for the daytime part of the day (7am to
    /// 7pm local time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.ForecastDayPart DaytimeForecast {
      get { return daytimeForecast_; }
      set {
        daytimeForecast_ = value;
      }
    }

    /// <summary>Field number for the "nighttime_forecast" field.</summary>
    public const int NighttimeForecastFieldNumber = 4;
    private global::Google.Geo.Weather.V1.ForecastDayPart nighttimeForecast_;
    /// <summary>
    /// The forecasted weather conditions for the nighttime part of the day (7pm to
    /// 7am next day, local time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.ForecastDayPart NighttimeForecast {
      get { return nighttimeForecast_; }
      set {
        nighttimeForecast_ = value;
      }
    }

    /// <summary>Field number for the "max_temperature" field.</summary>
    public const int MaxTemperatureFieldNumber = 5;
    private global::Google.Geo.Weather.V1.Temperature maxTemperature_;
    /// <summary>
    /// The maximum (high) temperature throughout the day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature MaxTemperature {
      get { return maxTemperature_; }
      set {
        maxTemperature_ = value;
      }
    }

    /// <summary>Field number for the "min_temperature" field.</summary>
    public const int MinTemperatureFieldNumber = 6;
    private global::Google.Geo.Weather.V1.Temperature minTemperature_;
    /// <summary>
    /// The minimum (low) temperature throughout the day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature MinTemperature {
      get { return minTemperature_; }
      set {
        minTemperature_ = value;
      }
    }

    /// <summary>Field number for the "feels_like_max_temperature" field.</summary>
    public const int FeelsLikeMaxTemperatureFieldNumber = 7;
    private global::Google.Geo.Weather.V1.Temperature feelsLikeMaxTemperature_;
    /// <summary>
    /// The maximum (high) feels-like temperature throughout the day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature FeelsLikeMaxTemperature {
      get { return feelsLikeMaxTemperature_; }
      set {
        feelsLikeMaxTemperature_ = value;
      }
    }

    /// <summary>Field number for the "feels_like_min_temperature" field.</summary>
    public const int FeelsLikeMinTemperatureFieldNumber = 8;
    private global::Google.Geo.Weather.V1.Temperature feelsLikeMinTemperature_;
    /// <summary>
    /// The minimum (low) feels-like temperature throughout the day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature FeelsLikeMinTemperature {
      get { return feelsLikeMinTemperature_; }
      set {
        feelsLikeMinTemperature_ = value;
      }
    }

    /// <summary>Field number for the "max_heat_index" field.</summary>
    public const int MaxHeatIndexFieldNumber = 11;
    private global::Google.Geo.Weather.V1.Temperature maxHeatIndex_;
    /// <summary>
    /// The maximum heat index temperature throughout the day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Temperature MaxHeatIndex {
      get { return maxHeatIndex_; }
      set {
        maxHeatIndex_ = value;
      }
    }

    /// <summary>Field number for the "sun_events" field.</summary>
    public const int SunEventsFieldNumber = 9;
    private global::Google.Geo.Weather.V1.SunEvents sunEvents_;
    /// <summary>
    /// The events related to the sun (e.g. sunrise, sunset).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.SunEvents SunEvents {
      get { return sunEvents_; }
      set {
        sunEvents_ = value;
      }
    }

    /// <summary>Field number for the "moon_events" field.</summary>
    public const int MoonEventsFieldNumber = 10;
    private global::Google.Geo.Weather.V1.MoonEvents moonEvents_;
    /// <summary>
    /// The events related to the moon (e.g. moonrise, moonset).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.MoonEvents MoonEvents {
      get { return moonEvents_; }
      set {
        moonEvents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ForecastDay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ForecastDay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(DisplayDate, other.DisplayDate)) return false;
      if (!object.Equals(DaytimeForecast, other.DaytimeForecast)) return false;
      if (!object.Equals(NighttimeForecast, other.NighttimeForecast)) return false;
      if (!object.Equals(MaxTemperature, other.MaxTemperature)) return false;
      if (!object.Equals(MinTemperature, other.MinTemperature)) return false;
      if (!object.Equals(FeelsLikeMaxTemperature, other.FeelsLikeMaxTemperature)) return false;
      if (!object.Equals(FeelsLikeMinTemperature, other.FeelsLikeMinTemperature)) return false;
      if (!object.Equals(MaxHeatIndex, other.MaxHeatIndex)) return false;
      if (!object.Equals(SunEvents, other.SunEvents)) return false;
      if (!object.Equals(MoonEvents, other.MoonEvents)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (displayDate_ != null) hash ^= DisplayDate.GetHashCode();
      if (daytimeForecast_ != null) hash ^= DaytimeForecast.GetHashCode();
      if (nighttimeForecast_ != null) hash ^= NighttimeForecast.GetHashCode();
      if (maxTemperature_ != null) hash ^= MaxTemperature.GetHashCode();
      if (minTemperature_ != null) hash ^= MinTemperature.GetHashCode();
      if (feelsLikeMaxTemperature_ != null) hash ^= FeelsLikeMaxTemperature.GetHashCode();
      if (feelsLikeMinTemperature_ != null) hash ^= FeelsLikeMinTemperature.GetHashCode();
      if (maxHeatIndex_ != null) hash ^= MaxHeatIndex.GetHashCode();
      if (sunEvents_ != null) hash ^= SunEvents.GetHashCode();
      if (moonEvents_ != null) hash ^= MoonEvents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (interval_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Interval);
      }
      if (displayDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DisplayDate);
      }
      if (daytimeForecast_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DaytimeForecast);
      }
      if (nighttimeForecast_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NighttimeForecast);
      }
      if (maxTemperature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MaxTemperature);
      }
      if (minTemperature_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MinTemperature);
      }
      if (feelsLikeMaxTemperature_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FeelsLikeMaxTemperature);
      }
      if (feelsLikeMinTemperature_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FeelsLikeMinTemperature);
      }
      if (sunEvents_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SunEvents);
      }
      if (moonEvents_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MoonEvents);
      }
      if (maxHeatIndex_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(MaxHeatIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (interval_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Interval);
      }
      if (displayDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DisplayDate);
      }
      if (daytimeForecast_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DaytimeForecast);
      }
      if (nighttimeForecast_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(NighttimeForecast);
      }
      if (maxTemperature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MaxTemperature);
      }
      if (minTemperature_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MinTemperature);
      }
      if (feelsLikeMaxTemperature_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FeelsLikeMaxTemperature);
      }
      if (feelsLikeMinTemperature_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FeelsLikeMinTemperature);
      }
      if (sunEvents_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SunEvents);
      }
      if (moonEvents_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MoonEvents);
      }
      if (maxHeatIndex_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(MaxHeatIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (displayDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DisplayDate);
      }
      if (daytimeForecast_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DaytimeForecast);
      }
      if (nighttimeForecast_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NighttimeForecast);
      }
      if (maxTemperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxTemperature);
      }
      if (minTemperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinTemperature);
      }
      if (feelsLikeMaxTemperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeelsLikeMaxTemperature);
      }
      if (feelsLikeMinTemperature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeelsLikeMinTemperature);
      }
      if (maxHeatIndex_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaxHeatIndex);
      }
      if (sunEvents_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SunEvents);
      }
      if (moonEvents_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoonEvents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ForecastDay other) {
      if (other == null) {
        return;
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          Interval = new global::Google.Type.Interval();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.displayDate_ != null) {
        if (displayDate_ == null) {
          DisplayDate = new global::Google.Type.Date();
        }
        DisplayDate.MergeFrom(other.DisplayDate);
      }
      if (other.daytimeForecast_ != null) {
        if (daytimeForecast_ == null) {
          DaytimeForecast = new global::Google.Geo.Weather.V1.ForecastDayPart();
        }
        DaytimeForecast.MergeFrom(other.DaytimeForecast);
      }
      if (other.nighttimeForecast_ != null) {
        if (nighttimeForecast_ == null) {
          NighttimeForecast = new global::Google.Geo.Weather.V1.ForecastDayPart();
        }
        NighttimeForecast.MergeFrom(other.NighttimeForecast);
      }
      if (other.maxTemperature_ != null) {
        if (maxTemperature_ == null) {
          MaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        MaxTemperature.MergeFrom(other.MaxTemperature);
      }
      if (other.minTemperature_ != null) {
        if (minTemperature_ == null) {
          MinTemperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        MinTemperature.MergeFrom(other.MinTemperature);
      }
      if (other.feelsLikeMaxTemperature_ != null) {
        if (feelsLikeMaxTemperature_ == null) {
          FeelsLikeMaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        FeelsLikeMaxTemperature.MergeFrom(other.FeelsLikeMaxTemperature);
      }
      if (other.feelsLikeMinTemperature_ != null) {
        if (feelsLikeMinTemperature_ == null) {
          FeelsLikeMinTemperature = new global::Google.Geo.Weather.V1.Temperature();
        }
        FeelsLikeMinTemperature.MergeFrom(other.FeelsLikeMinTemperature);
      }
      if (other.maxHeatIndex_ != null) {
        if (maxHeatIndex_ == null) {
          MaxHeatIndex = new global::Google.Geo.Weather.V1.Temperature();
        }
        MaxHeatIndex.MergeFrom(other.MaxHeatIndex);
      }
      if (other.sunEvents_ != null) {
        if (sunEvents_ == null) {
          SunEvents = new global::Google.Geo.Weather.V1.SunEvents();
        }
        SunEvents.MergeFrom(other.SunEvents);
      }
      if (other.moonEvents_ != null) {
        if (moonEvents_ == null) {
          MoonEvents = new global::Google.Geo.Weather.V1.MoonEvents();
        }
        MoonEvents.MergeFrom(other.MoonEvents);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (interval_ == null) {
              Interval = new global::Google.Type.Interval();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 18: {
            if (displayDate_ == null) {
              DisplayDate = new global::Google.Type.Date();
            }
            input.ReadMessage(DisplayDate);
            break;
          }
          case 26: {
            if (daytimeForecast_ == null) {
              DaytimeForecast = new global::Google.Geo.Weather.V1.ForecastDayPart();
            }
            input.ReadMessage(DaytimeForecast);
            break;
          }
          case 34: {
            if (nighttimeForecast_ == null) {
              NighttimeForecast = new global::Google.Geo.Weather.V1.ForecastDayPart();
            }
            input.ReadMessage(NighttimeForecast);
            break;
          }
          case 42: {
            if (maxTemperature_ == null) {
              MaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(MaxTemperature);
            break;
          }
          case 50: {
            if (minTemperature_ == null) {
              MinTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(MinTemperature);
            break;
          }
          case 58: {
            if (feelsLikeMaxTemperature_ == null) {
              FeelsLikeMaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(FeelsLikeMaxTemperature);
            break;
          }
          case 66: {
            if (feelsLikeMinTemperature_ == null) {
              FeelsLikeMinTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(FeelsLikeMinTemperature);
            break;
          }
          case 74: {
            if (sunEvents_ == null) {
              SunEvents = new global::Google.Geo.Weather.V1.SunEvents();
            }
            input.ReadMessage(SunEvents);
            break;
          }
          case 82: {
            if (moonEvents_ == null) {
              MoonEvents = new global::Google.Geo.Weather.V1.MoonEvents();
            }
            input.ReadMessage(MoonEvents);
            break;
          }
          case 90: {
            if (maxHeatIndex_ == null) {
              MaxHeatIndex = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(MaxHeatIndex);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (interval_ == null) {
              Interval = new global::Google.Type.Interval();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 18: {
            if (displayDate_ == null) {
              DisplayDate = new global::Google.Type.Date();
            }
            input.ReadMessage(DisplayDate);
            break;
          }
          case 26: {
            if (daytimeForecast_ == null) {
              DaytimeForecast = new global::Google.Geo.Weather.V1.ForecastDayPart();
            }
            input.ReadMessage(DaytimeForecast);
            break;
          }
          case 34: {
            if (nighttimeForecast_ == null) {
              NighttimeForecast = new global::Google.Geo.Weather.V1.ForecastDayPart();
            }
            input.ReadMessage(NighttimeForecast);
            break;
          }
          case 42: {
            if (maxTemperature_ == null) {
              MaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(MaxTemperature);
            break;
          }
          case 50: {
            if (minTemperature_ == null) {
              MinTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(MinTemperature);
            break;
          }
          case 58: {
            if (feelsLikeMaxTemperature_ == null) {
              FeelsLikeMaxTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(FeelsLikeMaxTemperature);
            break;
          }
          case 66: {
            if (feelsLikeMinTemperature_ == null) {
              FeelsLikeMinTemperature = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(FeelsLikeMinTemperature);
            break;
          }
          case 74: {
            if (sunEvents_ == null) {
              SunEvents = new global::Google.Geo.Weather.V1.SunEvents();
            }
            input.ReadMessage(SunEvents);
            break;
          }
          case 82: {
            if (moonEvents_ == null) {
              MoonEvents = new global::Google.Geo.Weather.V1.MoonEvents();
            }
            input.ReadMessage(MoonEvents);
            break;
          }
          case 90: {
            if (maxHeatIndex_ == null) {
              MaxHeatIndex = new global::Google.Geo.Weather.V1.Temperature();
            }
            input.ReadMessage(MaxHeatIndex);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Represents a forecast record for a part of the day.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ForecastDayPart : pb::IMessage<ForecastDayPart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForecastDayPart> _parser = new pb::MessageParser<ForecastDayPart>(() => new ForecastDayPart());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ForecastDayPart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.ForecastDayReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ForecastDayPart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ForecastDayPart(ForecastDayPart other) : this() {
      _hasBits0 = other._hasBits0;
      interval_ = other.interval_ != null ? other.interval_.Clone() : null;
      weatherCondition_ = other.weatherCondition_ != null ? other.weatherCondition_.Clone() : null;
      relativeHumidity_ = other.relativeHumidity_;
      uvIndex_ = other.uvIndex_;
      precipitation_ = other.precipitation_ != null ? other.precipitation_.Clone() : null;
      thunderstormProbability_ = other.thunderstormProbability_;
      wind_ = other.wind_ != null ? other.wind_.Clone() : null;
      cloudCover_ = other.cloudCover_;
      iceThickness_ = other.iceThickness_ != null ? other.iceThickness_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ForecastDayPart Clone() {
      return new ForecastDayPart(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private global::Google.Type.Interval interval_;
    /// <summary>
    /// The UTC date and time when this part of the day starts (inclusive) and ends
    /// (exclusive).
    /// Note: a part of a day starts at 7am and ends at 7pm the same day, local
    /// time. For example: If the local time zone is UTC-7, then the daytime
    /// interval will start at the time `14:00:00.000Z` and end at `02:00:00.000Z`
    /// the next day and the nighttime interval will start at `02:00:00.000Z` the
    /// next day and end at `14:00:00.000Z` that same day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.Interval Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "weather_condition" field.</summary>
    public const int WeatherConditionFieldNumber = 2;
    private global::Google.Geo.Weather.V1.WeatherCondition weatherCondition_;
    /// <summary>
    /// The forecasted weather condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.WeatherCondition WeatherCondition {
      get { return weatherCondition_; }
      set {
        weatherCondition_ = value;
      }
    }

    /// <summary>Field number for the "relative_humidity" field.</summary>
    public const int RelativeHumidityFieldNumber = 3;
    private readonly static int RelativeHumidityDefaultValue = 0;

    private int relativeHumidity_;
    /// <summary>
    /// The forecasted percent of relative humidity (values from 0 to 100).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RelativeHumidity {
      get { if ((_hasBits0 & 1) != 0) { return relativeHumidity_; } else { return RelativeHumidityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        relativeHumidity_ = value;
      }
    }
    /// <summary>Gets whether the "relative_humidity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRelativeHumidity {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "relative_humidity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRelativeHumidity() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uv_index" field.</summary>
    public const int UvIndexFieldNumber = 4;
    private readonly static int UvIndexDefaultValue = 0;

    private int uvIndex_;
    /// <summary>
    /// The maximum forecasted ultraviolet (UV) index.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UvIndex {
      get { if ((_hasBits0 & 2) != 0) { return uvIndex_; } else { return UvIndexDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uvIndex_ = value;
      }
    }
    /// <summary>Gets whether the "uv_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUvIndex {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uv_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUvIndex() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "precipitation" field.</summary>
    public const int PrecipitationFieldNumber = 5;
    private global::Google.Geo.Weather.V1.Precipitation precipitation_;
    /// <summary>
    /// The forecasted precipitation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Precipitation Precipitation {
      get { return precipitation_; }
      set {
        precipitation_ = value;
      }
    }

    /// <summary>Field number for the "thunderstorm_probability" field.</summary>
    public const int ThunderstormProbabilityFieldNumber = 6;
    private readonly static int ThunderstormProbabilityDefaultValue = 0;

    private int thunderstormProbability_;
    /// <summary>
    /// The average thunderstorm probability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThunderstormProbability {
      get { if ((_hasBits0 & 4) != 0) { return thunderstormProbability_; } else { return ThunderstormProbabilityDefaultValue; } }
      set {
        _hasBits0 |= 4;
        thunderstormProbability_ = value;
      }
    }
    /// <summary>Gets whether the "thunderstorm_probability" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThunderstormProbability {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "thunderstorm_probability" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThunderstormProbability() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "wind" field.</summary>
    public const int WindFieldNumber = 7;
    private global::Google.Geo.Weather.V1.Wind wind_;
    /// <summary>
    /// The average wind direction and maximum speed and gust.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.Wind Wind {
      get { return wind_; }
      set {
        wind_ = value;
      }
    }

    /// <summary>Field number for the "cloud_cover" field.</summary>
    public const int CloudCoverFieldNumber = 8;
    private readonly static int CloudCoverDefaultValue = 0;

    private int cloudCover_;
    /// <summary>
    /// Average cloud cover percent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CloudCover {
      get { if ((_hasBits0 & 8) != 0) { return cloudCover_; } else { return CloudCoverDefaultValue; } }
      set {
        _hasBits0 |= 8;
        cloudCover_ = value;
      }
    }
    /// <summary>Gets whether the "cloud_cover" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCloudCover {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "cloud_cover" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCloudCover() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "ice_thickness" field.</summary>
    public const int IceThicknessFieldNumber = 9;
    private global::Google.Geo.Weather.V1.IceThickness iceThickness_;
    /// <summary>
    /// The accumulated amount of ice for the part of the day.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.IceThickness IceThickness {
      get { return iceThickness_; }
      set {
        iceThickness_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ForecastDayPart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ForecastDayPart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(WeatherCondition, other.WeatherCondition)) return false;
      if (RelativeHumidity != other.RelativeHumidity) return false;
      if (UvIndex != other.UvIndex) return false;
      if (!object.Equals(Precipitation, other.Precipitation)) return false;
      if (ThunderstormProbability != other.ThunderstormProbability) return false;
      if (!object.Equals(Wind, other.Wind)) return false;
      if (CloudCover != other.CloudCover) return false;
      if (!object.Equals(IceThickness, other.IceThickness)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (weatherCondition_ != null) hash ^= WeatherCondition.GetHashCode();
      if (HasRelativeHumidity) hash ^= RelativeHumidity.GetHashCode();
      if (HasUvIndex) hash ^= UvIndex.GetHashCode();
      if (precipitation_ != null) hash ^= Precipitation.GetHashCode();
      if (HasThunderstormProbability) hash ^= ThunderstormProbability.GetHashCode();
      if (wind_ != null) hash ^= Wind.GetHashCode();
      if (HasCloudCover) hash ^= CloudCover.GetHashCode();
      if (iceThickness_ != null) hash ^= IceThickness.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (interval_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Interval);
      }
      if (weatherCondition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WeatherCondition);
      }
      if (HasRelativeHumidity) {
        output.WriteRawTag(24);
        output.WriteInt32(RelativeHumidity);
      }
      if (HasUvIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(UvIndex);
      }
      if (precipitation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Precipitation);
      }
      if (HasThunderstormProbability) {
        output.WriteRawTag(48);
        output.WriteInt32(ThunderstormProbability);
      }
      if (wind_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Wind);
      }
      if (HasCloudCover) {
        output.WriteRawTag(64);
        output.WriteInt32(CloudCover);
      }
      if (iceThickness_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(IceThickness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (interval_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Interval);
      }
      if (weatherCondition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WeatherCondition);
      }
      if (HasRelativeHumidity) {
        output.WriteRawTag(24);
        output.WriteInt32(RelativeHumidity);
      }
      if (HasUvIndex) {
        output.WriteRawTag(32);
        output.WriteInt32(UvIndex);
      }
      if (precipitation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Precipitation);
      }
      if (HasThunderstormProbability) {
        output.WriteRawTag(48);
        output.WriteInt32(ThunderstormProbability);
      }
      if (wind_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Wind);
      }
      if (HasCloudCover) {
        output.WriteRawTag(64);
        output.WriteInt32(CloudCover);
      }
      if (iceThickness_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(IceThickness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (weatherCondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeatherCondition);
      }
      if (HasRelativeHumidity) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelativeHumidity);
      }
      if (HasUvIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UvIndex);
      }
      if (precipitation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Precipitation);
      }
      if (HasThunderstormProbability) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThunderstormProbability);
      }
      if (wind_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wind);
      }
      if (HasCloudCover) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CloudCover);
      }
      if (iceThickness_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IceThickness);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ForecastDayPart other) {
      if (other == null) {
        return;
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          Interval = new global::Google.Type.Interval();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.weatherCondition_ != null) {
        if (weatherCondition_ == null) {
          WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
        }
        WeatherCondition.MergeFrom(other.WeatherCondition);
      }
      if (other.HasRelativeHumidity) {
        RelativeHumidity = other.RelativeHumidity;
      }
      if (other.HasUvIndex) {
        UvIndex = other.UvIndex;
      }
      if (other.precipitation_ != null) {
        if (precipitation_ == null) {
          Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
        }
        Precipitation.MergeFrom(other.Precipitation);
      }
      if (other.HasThunderstormProbability) {
        ThunderstormProbability = other.ThunderstormProbability;
      }
      if (other.wind_ != null) {
        if (wind_ == null) {
          Wind = new global::Google.Geo.Weather.V1.Wind();
        }
        Wind.MergeFrom(other.Wind);
      }
      if (other.HasCloudCover) {
        CloudCover = other.CloudCover;
      }
      if (other.iceThickness_ != null) {
        if (iceThickness_ == null) {
          IceThickness = new global::Google.Geo.Weather.V1.IceThickness();
        }
        IceThickness.MergeFrom(other.IceThickness);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (interval_ == null) {
              Interval = new global::Google.Type.Interval();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 18: {
            if (weatherCondition_ == null) {
              WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
            }
            input.ReadMessage(WeatherCondition);
            break;
          }
          case 24: {
            RelativeHumidity = input.ReadInt32();
            break;
          }
          case 32: {
            UvIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (precipitation_ == null) {
              Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
            }
            input.ReadMessage(Precipitation);
            break;
          }
          case 48: {
            ThunderstormProbability = input.ReadInt32();
            break;
          }
          case 58: {
            if (wind_ == null) {
              Wind = new global::Google.Geo.Weather.V1.Wind();
            }
            input.ReadMessage(Wind);
            break;
          }
          case 64: {
            CloudCover = input.ReadInt32();
            break;
          }
          case 74: {
            if (iceThickness_ == null) {
              IceThickness = new global::Google.Geo.Weather.V1.IceThickness();
            }
            input.ReadMessage(IceThickness);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (interval_ == null) {
              Interval = new global::Google.Type.Interval();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 18: {
            if (weatherCondition_ == null) {
              WeatherCondition = new global::Google.Geo.Weather.V1.WeatherCondition();
            }
            input.ReadMessage(WeatherCondition);
            break;
          }
          case 24: {
            RelativeHumidity = input.ReadInt32();
            break;
          }
          case 32: {
            UvIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (precipitation_ == null) {
              Precipitation = new global::Google.Geo.Weather.V1.Precipitation();
            }
            input.ReadMessage(Precipitation);
            break;
          }
          case 48: {
            ThunderstormProbability = input.ReadInt32();
            break;
          }
          case 58: {
            if (wind_ == null) {
              Wind = new global::Google.Geo.Weather.V1.Wind();
            }
            input.ReadMessage(Wind);
            break;
          }
          case 64: {
            CloudCover = input.ReadInt32();
            break;
          }
          case 74: {
            if (iceThickness_ == null) {
              IceThickness = new global::Google.Geo.Weather.V1.IceThickness();
            }
            input.ReadMessage(IceThickness);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
