// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/maps/weather/v1/temperature.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Geo.Weather.V1 {

  /// <summary>Holder for reflection information generated from google/maps/weather/v1/temperature.proto</summary>
  public static partial class TemperatureReflection {

    #region Descriptor
    /// <summary>File descriptor for google/maps/weather/v1/temperature.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TemperatureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cihnb29nbGUvbWFwcy93ZWF0aGVyL3YxL3RlbXBlcmF0dXJlLnByb3RvEhZn",
            "b29nbGUubWFwcy53ZWF0aGVyLnYxImYKC1RlbXBlcmF0dXJlEhQKB2RlZ3Jl",
            "ZXMYASABKAJIAIgBARI1CgR1bml0GAIgASgOMicuZ29vZ2xlLm1hcHMud2Vh",
            "dGhlci52MS5UZW1wZXJhdHVyZVVuaXRCCgoIX2RlZ3JlZXMqUAoPVGVtcGVy",
            "YXR1cmVVbml0EiAKHFRFTVBFUkFUVVJFX1VOSVRfVU5TUEVDSUZJRUQQABIL",
            "CgdDRUxTSVVTEAESDgoKRkFIUkVOSEVJVBACQqQBChpjb20uZ29vZ2xlLm1h",
            "cHMud2VhdGhlci52MUIQVGVtcGVyYXR1cmVQcm90b1ABWjpjbG91ZC5nb29n",
            "bGUuY29tL2dvL21hcHMvd2VhdGhlci9hcGl2MS93ZWF0aGVycGI7d2VhdGhl",
            "cnBiogIFR01XVjGqAhVHb29nbGUuR2VvLldlYXRoZXIuVjHKAhVHb29nbGVc",
            "R2VvXFdlYXRoZXJcVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Google.Geo.Weather.V1.TemperatureUnit), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Geo.Weather.V1.Temperature), global::Google.Geo.Weather.V1.Temperature.Parser, new[]{ "Degrees", "Unit" }, new[]{ "Degrees" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Represents a unit used to measure temperatures.
  /// </summary>
  public enum TemperatureUnit {
    /// <summary>
    /// The temperature unit is unspecified.
    /// </summary>
    [pbr::OriginalName("TEMPERATURE_UNIT_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// The temperature is measured in Celsius.
    /// </summary>
    [pbr::OriginalName("CELSIUS")] Celsius = 1,
    /// <summary>
    /// The temperature is measured in Fahrenheit.
    /// </summary>
    [pbr::OriginalName("FAHRENHEIT")] Fahrenheit = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Represents a temperature value.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Temperature : pb::IMessage<Temperature>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Temperature> _parser = new pb::MessageParser<Temperature>(() => new Temperature());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Temperature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Geo.Weather.V1.TemperatureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Temperature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Temperature(Temperature other) : this() {
      _hasBits0 = other._hasBits0;
      degrees_ = other.degrees_;
      unit_ = other.unit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Temperature Clone() {
      return new Temperature(this);
    }

    /// <summary>Field number for the "degrees" field.</summary>
    public const int DegreesFieldNumber = 1;
    private readonly static float DegreesDefaultValue = 0F;

    private float degrees_;
    /// <summary>
    /// The temperature value (in degrees) in the specified unit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Degrees {
      get { if ((_hasBits0 & 1) != 0) { return degrees_; } else { return DegreesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        degrees_ = value;
      }
    }
    /// <summary>Gets whether the "degrees" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDegrees {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "degrees" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDegrees() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 2;
    private global::Google.Geo.Weather.V1.TemperatureUnit unit_ = global::Google.Geo.Weather.V1.TemperatureUnit.Unspecified;
    /// <summary>
    /// The code for the unit used to measure the temperature value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Geo.Weather.V1.TemperatureUnit Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Temperature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Temperature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Degrees, other.Degrees)) return false;
      if (Unit != other.Unit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDegrees) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Degrees);
      if (Unit != global::Google.Geo.Weather.V1.TemperatureUnit.Unspecified) hash ^= Unit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDegrees) {
        output.WriteRawTag(13);
        output.WriteFloat(Degrees);
      }
      if (Unit != global::Google.Geo.Weather.V1.TemperatureUnit.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDegrees) {
        output.WriteRawTag(13);
        output.WriteFloat(Degrees);
      }
      if (Unit != global::Google.Geo.Weather.V1.TemperatureUnit.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Unit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDegrees) {
        size += 1 + 4;
      }
      if (Unit != global::Google.Geo.Weather.V1.TemperatureUnit.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Unit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Temperature other) {
      if (other == null) {
        return;
      }
      if (other.HasDegrees) {
        Degrees = other.Degrees;
      }
      if (other.Unit != global::Google.Geo.Weather.V1.TemperatureUnit.Unspecified) {
        Unit = other.Unit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Degrees = input.ReadFloat();
            break;
          }
          case 16: {
            Unit = (global::Google.Geo.Weather.V1.TemperatureUnit) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Degrees = input.ReadFloat();
            break;
          }
          case 16: {
            Unit = (global::Google.Geo.Weather.V1.TemperatureUnit) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
