// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/discoveryengine/v1/user_license.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.DiscoveryEngine.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/discoveryengine/v1/user_license.proto</summary>
  public static partial class UserLicenseReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/discoveryengine/v1/user_license.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserLicenseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJnb29nbGUvY2xvdWQvZGlzY292ZXJ5ZW5naW5lL3YxL3VzZXJfbGljZW5z",
            "ZS5wcm90bxIfZ29vZ2xlLmNsb3VkLmRpc2NvdmVyeWVuZ2luZS52MRofZ29v",
            "Z2xlL2FwaS9maWVsZF9iZWhhdmlvci5wcm90bxoZZ29vZ2xlL2FwaS9yZXNv",
            "dXJjZS5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byK7",
            "BAoLVXNlckxpY2Vuc2USHgoOdXNlcl9wcmluY2lwYWwYASABKAlCBuBBBeBB",
            "AhIZCgx1c2VyX3Byb2ZpbGUYAyABKAlCA+BBARJqChhsaWNlbnNlX2Fzc2ln",
            "bm1lbnRfc3RhdGUYBCABKA4yQy5nb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5n",
            "aW5lLnYxLlVzZXJMaWNlbnNlLkxpY2Vuc2VBc3NpZ25tZW50U3RhdGVCA+BB",
            "AxJMCg5saWNlbnNlX2NvbmZpZxgFIAEoCUI04EEB+kEuCixkaXNjb3Zlcnll",
            "bmdpbmUuZ29vZ2xlYXBpcy5jb20vTGljZW5zZUNvbmZpZxI0CgtjcmVhdGVf",
            "dGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI0",
            "Cgt1cGRhdGVfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXBCA+BBAxI4Cg9sYXN0X2xvZ2luX3RpbWUYCCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wQgPgQQMikAEKFkxpY2Vuc2VBc3NpZ25tZW50U3Rh",
            "dGUSKAokTElDRU5TRV9BU1NJR05NRU5UX1NUQVRFX1VOU1BFQ0lGSUVEEAAS",
            "DAoIQVNTSUdORUQQARIOCgpVTkFTU0lHTkVEEAISDgoKTk9fTElDRU5TRRAD",
            "Eh4KGk5PX0xJQ0VOU0VfQVRURU1QVEVEX0xPR0lOEARCgwIKI2NvbS5nb29n",
            "bGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxQhBVc2VyTGljZW5zZVByb3Rv",
            "UAFaTWNsb3VkLmdvb2dsZS5jb20vZ28vZGlzY292ZXJ5ZW5naW5lL2FwaXYx",
            "L2Rpc2NvdmVyeWVuZ2luZXBiO2Rpc2NvdmVyeWVuZ2luZXBiogIPRElTQ09W",
            "RVJZRU5HSU5FqgIfR29vZ2xlLkNsb3VkLkRpc2NvdmVyeUVuZ2luZS5WMcoC",
            "H0dvb2dsZVxDbG91ZFxEaXNjb3ZlcnlFbmdpbmVcVjHqAiJHb29nbGU6OkNs",
            "b3VkOjpEaXNjb3ZlcnlFbmdpbmU6OlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.DiscoveryEngine.V1.UserLicense), global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Parser, new[]{ "UserPrincipal", "UserProfile", "LicenseAssignmentState", "LicenseConfig", "CreateTime", "UpdateTime", "LastLoginTime" }, null, new[]{ typeof(global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// User License information assigned by the admin.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class UserLicense : pb::IMessage<UserLicense>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UserLicense> _parser = new pb::MessageParser<UserLicense>(() => new UserLicense());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<UserLicense> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.DiscoveryEngine.V1.UserLicenseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLicense() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLicense(UserLicense other) : this() {
      userPrincipal_ = other.userPrincipal_;
      userProfile_ = other.userProfile_;
      licenseAssignmentState_ = other.licenseAssignmentState_;
      licenseConfig_ = other.licenseConfig_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      updateTime_ = other.updateTime_ != null ? other.updateTime_.Clone() : null;
      lastLoginTime_ = other.lastLoginTime_ != null ? other.lastLoginTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public UserLicense Clone() {
      return new UserLicense(this);
    }

    /// <summary>Field number for the "user_principal" field.</summary>
    public const int UserPrincipalFieldNumber = 1;
    private string userPrincipal_ = "";
    /// <summary>
    /// Required. Immutable. The user principal of the User, could be email address
    /// or other prinical identifier. This field is immutable. Admin assign
    /// licenses based on the user principal.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserPrincipal {
      get { return userPrincipal_; }
      set {
        userPrincipal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_profile" field.</summary>
    public const int UserProfileFieldNumber = 3;
    private string userProfile_ = "";
    /// <summary>
    /// Optional. The user profile.
    /// We user user full name(First name + Last name) as user profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UserProfile {
      get { return userProfile_; }
      set {
        userProfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "license_assignment_state" field.</summary>
    public const int LicenseAssignmentStateFieldNumber = 4;
    private global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState licenseAssignmentState_ = global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState.Unspecified;
    /// <summary>
    /// Output only. License assignment state of the user.
    /// If the user is assigned with a license config, the user loggin will be
    /// assigned with the license;
    /// If the user's license assignment state is unassigned or unspecified, no
    /// license config will be associated to the user;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState LicenseAssignmentState {
      get { return licenseAssignmentState_; }
      set {
        licenseAssignmentState_ = value;
      }
    }

    /// <summary>Field number for the "license_config" field.</summary>
    public const int LicenseConfigFieldNumber = 5;
    private string licenseConfig_ = "";
    /// <summary>
    /// Optional. The full resource name of the Subscription(LicenseConfig)
    /// assigned to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LicenseConfig {
      get { return licenseConfig_; }
      set {
        licenseConfig_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. User created timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "update_time" field.</summary>
    public const int UpdateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updateTime_;
    /// <summary>
    /// Output only. User update timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdateTime {
      get { return updateTime_; }
      set {
        updateTime_ = value;
      }
    }

    /// <summary>Field number for the "last_login_time" field.</summary>
    public const int LastLoginTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastLoginTime_;
    /// <summary>
    /// Output only. User last logged in time.
    /// If the user has not logged in yet, this field will be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastLoginTime {
      get { return lastLoginTime_; }
      set {
        lastLoginTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as UserLicense);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(UserLicense other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserPrincipal != other.UserPrincipal) return false;
      if (UserProfile != other.UserProfile) return false;
      if (LicenseAssignmentState != other.LicenseAssignmentState) return false;
      if (LicenseConfig != other.LicenseConfig) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!object.Equals(UpdateTime, other.UpdateTime)) return false;
      if (!object.Equals(LastLoginTime, other.LastLoginTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (UserPrincipal.Length != 0) hash ^= UserPrincipal.GetHashCode();
      if (UserProfile.Length != 0) hash ^= UserProfile.GetHashCode();
      if (LicenseAssignmentState != global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState.Unspecified) hash ^= LicenseAssignmentState.GetHashCode();
      if (LicenseConfig.Length != 0) hash ^= LicenseConfig.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (updateTime_ != null) hash ^= UpdateTime.GetHashCode();
      if (lastLoginTime_ != null) hash ^= LastLoginTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserPrincipal.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserPrincipal);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserProfile);
      }
      if (LicenseAssignmentState != global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LicenseAssignmentState);
      }
      if (LicenseConfig.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LicenseConfig);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdateTime);
      }
      if (lastLoginTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LastLoginTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserPrincipal.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserPrincipal);
      }
      if (UserProfile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserProfile);
      }
      if (LicenseAssignmentState != global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LicenseAssignmentState);
      }
      if (LicenseConfig.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LicenseConfig);
      }
      if (createTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CreateTime);
      }
      if (updateTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(UpdateTime);
      }
      if (lastLoginTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(LastLoginTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (UserPrincipal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserPrincipal);
      }
      if (UserProfile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserProfile);
      }
      if (LicenseAssignmentState != global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LicenseAssignmentState);
      }
      if (LicenseConfig.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LicenseConfig);
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (updateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateTime);
      }
      if (lastLoginTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastLoginTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(UserLicense other) {
      if (other == null) {
        return;
      }
      if (other.UserPrincipal.Length != 0) {
        UserPrincipal = other.UserPrincipal;
      }
      if (other.UserProfile.Length != 0) {
        UserProfile = other.UserProfile;
      }
      if (other.LicenseAssignmentState != global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState.Unspecified) {
        LicenseAssignmentState = other.LicenseAssignmentState;
      }
      if (other.LicenseConfig.Length != 0) {
        LicenseConfig = other.LicenseConfig;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.updateTime_ != null) {
        if (updateTime_ == null) {
          UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdateTime.MergeFrom(other.UpdateTime);
      }
      if (other.lastLoginTime_ != null) {
        if (lastLoginTime_ == null) {
          LastLoginTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastLoginTime.MergeFrom(other.LastLoginTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserPrincipal = input.ReadString();
            break;
          }
          case 26: {
            UserProfile = input.ReadString();
            break;
          }
          case 32: {
            LicenseAssignmentState = (global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState) input.ReadEnum();
            break;
          }
          case 42: {
            LicenseConfig = input.ReadString();
            break;
          }
          case 50: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 58: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 66: {
            if (lastLoginTime_ == null) {
              LastLoginTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastLoginTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserPrincipal = input.ReadString();
            break;
          }
          case 26: {
            UserProfile = input.ReadString();
            break;
          }
          case 32: {
            LicenseAssignmentState = (global::Google.Cloud.DiscoveryEngine.V1.UserLicense.Types.LicenseAssignmentState) input.ReadEnum();
            break;
          }
          case 42: {
            LicenseConfig = input.ReadString();
            break;
          }
          case 50: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 58: {
            if (updateTime_ == null) {
              UpdateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdateTime);
            break;
          }
          case 66: {
            if (lastLoginTime_ == null) {
              LastLoginTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastLoginTime);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the UserLicense message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// License assignment state enumeration.
      /// </summary>
      public enum LicenseAssignmentState {
        /// <summary>
        /// Default value.
        /// </summary>
        [pbr::OriginalName("LICENSE_ASSIGNMENT_STATE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// License assigned to the user.
        /// </summary>
        [pbr::OriginalName("ASSIGNED")] Assigned = 1,
        /// <summary>
        /// No license assigned to the user.
        /// Deprecated, translated to NO_LICENSE.
        /// </summary>
        [pbr::OriginalName("UNASSIGNED")] Unassigned = 2,
        /// <summary>
        /// No license assigned to the user.
        /// </summary>
        [pbr::OriginalName("NO_LICENSE")] NoLicense = 3,
        /// <summary>
        /// User attempted to login but no license assigned to the user.
        /// This state is only used for no user first time login attempt but cannot
        /// get license assigned.
        /// Users already logged in but cannot get license assigned will be assigned
        /// NO_LICENSE state(License could be unassigned by admin).
        /// </summary>
        [pbr::OriginalName("NO_LICENSE_ATTEMPTED_LOGIN")] NoLicenseAttemptedLogin = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
