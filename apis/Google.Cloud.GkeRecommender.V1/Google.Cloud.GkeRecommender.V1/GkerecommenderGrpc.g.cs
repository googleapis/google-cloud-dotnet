// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/gkerecommender/v1/gkerecommender.proto
// </auto-generated>
// Original file comments:
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.GkeRecommender.V1 {
  /// <summary>
  /// GKE Inference Quickstart (GIQ) service provides profiles with performance
  /// metrics for popular models and model servers across multiple accelerators.
  /// These profiles help generate optimized best practices for running inference
  /// on GKE.
  /// </summary>
  public static partial class GkeInferenceQuickstart
  {
    static readonly string __ServiceName = "google.cloud.gkerecommender.v1.GkeInferenceQuickstart";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest> __Marshaller_google_cloud_gkerecommender_v1_FetchModelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse> __Marshaller_google_cloud_gkerecommender_v1_FetchModelsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest> __Marshaller_google_cloud_gkerecommender_v1_FetchModelServersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse> __Marshaller_google_cloud_gkerecommender_v1_FetchModelServersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest> __Marshaller_google_cloud_gkerecommender_v1_FetchModelServerVersionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse> __Marshaller_google_cloud_gkerecommender_v1_FetchModelServerVersionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest> __Marshaller_google_cloud_gkerecommender_v1_FetchProfilesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse> __Marshaller_google_cloud_gkerecommender_v1_FetchProfilesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest> __Marshaller_google_cloud_gkerecommender_v1_GenerateOptimizedManifestRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse> __Marshaller_google_cloud_gkerecommender_v1_GenerateOptimizedManifestResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest> __Marshaller_google_cloud_gkerecommender_v1_FetchBenchmarkingDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse> __Marshaller_google_cloud_gkerecommender_v1_FetchBenchmarkingDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse> __Method_FetchModels = new grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchModels",
        __Marshaller_google_cloud_gkerecommender_v1_FetchModelsRequest,
        __Marshaller_google_cloud_gkerecommender_v1_FetchModelsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse> __Method_FetchModelServers = new grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchModelServers",
        __Marshaller_google_cloud_gkerecommender_v1_FetchModelServersRequest,
        __Marshaller_google_cloud_gkerecommender_v1_FetchModelServersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse> __Method_FetchModelServerVersions = new grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchModelServerVersions",
        __Marshaller_google_cloud_gkerecommender_v1_FetchModelServerVersionsRequest,
        __Marshaller_google_cloud_gkerecommender_v1_FetchModelServerVersionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest, global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse> __Method_FetchProfiles = new grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest, global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchProfiles",
        __Marshaller_google_cloud_gkerecommender_v1_FetchProfilesRequest,
        __Marshaller_google_cloud_gkerecommender_v1_FetchProfilesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest, global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse> __Method_GenerateOptimizedManifest = new grpc::Method<global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest, global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateOptimizedManifest",
        __Marshaller_google_cloud_gkerecommender_v1_GenerateOptimizedManifestRequest,
        __Marshaller_google_cloud_gkerecommender_v1_GenerateOptimizedManifestResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest, global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse> __Method_FetchBenchmarkingData = new grpc::Method<global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest, global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FetchBenchmarkingData",
        __Marshaller_google_cloud_gkerecommender_v1_FetchBenchmarkingDataRequest,
        __Marshaller_google_cloud_gkerecommender_v1_FetchBenchmarkingDataResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.GkeRecommender.V1.GkerecommenderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GkeInferenceQuickstart</summary>
    [grpc::BindServiceMethod(typeof(GkeInferenceQuickstart), "BindService")]
    public abstract partial class GkeInferenceQuickstartBase
    {
      /// <summary>
      /// Fetches available models. Open-source models follow the Huggingface Hub
      /// `owner/model_name` format.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse> FetchModels(global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetches available model servers. Open-source model servers use simplified,
      /// lowercase names (e.g., `vllm`).
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse> FetchModelServers(global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetches available model server versions. Open-source servers use their own
      /// versioning schemas (e.g., `vllm` uses semver like `v1.0.0`).
      ///
      /// Some model servers have different versioning schemas depending on the
      /// accelerator. For example, `vllm` uses semver on GPUs, but returns nightly
      /// build tags on TPUs. All available versions will be returned when different
      /// schemas are present.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse> FetchModelServerVersions(global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetches available profiles. A profile contains performance metrics and
      /// cost information for a specific model server setup. Profiles can be
      /// filtered by parameters. If no filters are provided, all profiles are
      /// returned.
      ///
      /// Profiles display a single value per performance metric based on the
      /// provided performance requirements. If no requirements are given, the
      /// metrics represent the inflection point. See [Run best practice inference
      /// with GKE Inference Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart#how)
      /// for details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse> FetchProfiles(global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generates an optimized deployment manifest for a given model and model
      /// server, based on the specified accelerator, performance targets, and
      /// configurations. See [Run best practice inference with GKE Inference
      /// Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart)
      /// for deployment details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse> GenerateOptimizedManifest(global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Fetches all of the benchmarking data available for a profile. Benchmarking
      /// data returns all of the performance metrics available for a given model
      /// server setup on a given instance type.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse> FetchBenchmarkingData(global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GkeInferenceQuickstart</summary>
    public partial class GkeInferenceQuickstartClient : grpc::ClientBase<GkeInferenceQuickstartClient>
    {
      /// <summary>Creates a new client for GkeInferenceQuickstart</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GkeInferenceQuickstartClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GkeInferenceQuickstart that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public GkeInferenceQuickstartClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GkeInferenceQuickstartClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected GkeInferenceQuickstartClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Fetches available models. Open-source models follow the Huggingface Hub
      /// `owner/model_name` format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse FetchModels(global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchModels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches available models. Open-source models follow the Huggingface Hub
      /// `owner/model_name` format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse FetchModels(global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchModels, null, options, request);
      }
      /// <summary>
      /// Fetches available models. Open-source models follow the Huggingface Hub
      /// `owner/model_name` format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse> FetchModelsAsync(global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchModelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches available models. Open-source models follow the Huggingface Hub
      /// `owner/model_name` format.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse> FetchModelsAsync(global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchModels, null, options, request);
      }
      /// <summary>
      /// Fetches available model servers. Open-source model servers use simplified,
      /// lowercase names (e.g., `vllm`).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse FetchModelServers(global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchModelServers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches available model servers. Open-source model servers use simplified,
      /// lowercase names (e.g., `vllm`).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse FetchModelServers(global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchModelServers, null, options, request);
      }
      /// <summary>
      /// Fetches available model servers. Open-source model servers use simplified,
      /// lowercase names (e.g., `vllm`).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse> FetchModelServersAsync(global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchModelServersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches available model servers. Open-source model servers use simplified,
      /// lowercase names (e.g., `vllm`).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse> FetchModelServersAsync(global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchModelServers, null, options, request);
      }
      /// <summary>
      /// Fetches available model server versions. Open-source servers use their own
      /// versioning schemas (e.g., `vllm` uses semver like `v1.0.0`).
      ///
      /// Some model servers have different versioning schemas depending on the
      /// accelerator. For example, `vllm` uses semver on GPUs, but returns nightly
      /// build tags on TPUs. All available versions will be returned when different
      /// schemas are present.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse FetchModelServerVersions(global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchModelServerVersions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches available model server versions. Open-source servers use their own
      /// versioning schemas (e.g., `vllm` uses semver like `v1.0.0`).
      ///
      /// Some model servers have different versioning schemas depending on the
      /// accelerator. For example, `vllm` uses semver on GPUs, but returns nightly
      /// build tags on TPUs. All available versions will be returned when different
      /// schemas are present.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse FetchModelServerVersions(global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchModelServerVersions, null, options, request);
      }
      /// <summary>
      /// Fetches available model server versions. Open-source servers use their own
      /// versioning schemas (e.g., `vllm` uses semver like `v1.0.0`).
      ///
      /// Some model servers have different versioning schemas depending on the
      /// accelerator. For example, `vllm` uses semver on GPUs, but returns nightly
      /// build tags on TPUs. All available versions will be returned when different
      /// schemas are present.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse> FetchModelServerVersionsAsync(global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchModelServerVersionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches available model server versions. Open-source servers use their own
      /// versioning schemas (e.g., `vllm` uses semver like `v1.0.0`).
      ///
      /// Some model servers have different versioning schemas depending on the
      /// accelerator. For example, `vllm` uses semver on GPUs, but returns nightly
      /// build tags on TPUs. All available versions will be returned when different
      /// schemas are present.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse> FetchModelServerVersionsAsync(global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchModelServerVersions, null, options, request);
      }
      /// <summary>
      /// Fetches available profiles. A profile contains performance metrics and
      /// cost information for a specific model server setup. Profiles can be
      /// filtered by parameters. If no filters are provided, all profiles are
      /// returned.
      ///
      /// Profiles display a single value per performance metric based on the
      /// provided performance requirements. If no requirements are given, the
      /// metrics represent the inflection point. See [Run best practice inference
      /// with GKE Inference Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart#how)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse FetchProfiles(global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchProfiles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches available profiles. A profile contains performance metrics and
      /// cost information for a specific model server setup. Profiles can be
      /// filtered by parameters. If no filters are provided, all profiles are
      /// returned.
      ///
      /// Profiles display a single value per performance metric based on the
      /// provided performance requirements. If no requirements are given, the
      /// metrics represent the inflection point. See [Run best practice inference
      /// with GKE Inference Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart#how)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse FetchProfiles(global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchProfiles, null, options, request);
      }
      /// <summary>
      /// Fetches available profiles. A profile contains performance metrics and
      /// cost information for a specific model server setup. Profiles can be
      /// filtered by parameters. If no filters are provided, all profiles are
      /// returned.
      ///
      /// Profiles display a single value per performance metric based on the
      /// provided performance requirements. If no requirements are given, the
      /// metrics represent the inflection point. See [Run best practice inference
      /// with GKE Inference Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart#how)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse> FetchProfilesAsync(global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchProfilesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches available profiles. A profile contains performance metrics and
      /// cost information for a specific model server setup. Profiles can be
      /// filtered by parameters. If no filters are provided, all profiles are
      /// returned.
      ///
      /// Profiles display a single value per performance metric based on the
      /// provided performance requirements. If no requirements are given, the
      /// metrics represent the inflection point. See [Run best practice inference
      /// with GKE Inference Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart#how)
      /// for details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse> FetchProfilesAsync(global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchProfiles, null, options, request);
      }
      /// <summary>
      /// Generates an optimized deployment manifest for a given model and model
      /// server, based on the specified accelerator, performance targets, and
      /// configurations. See [Run best practice inference with GKE Inference
      /// Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart)
      /// for deployment details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse GenerateOptimizedManifest(global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateOptimizedManifest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an optimized deployment manifest for a given model and model
      /// server, based on the specified accelerator, performance targets, and
      /// configurations. See [Run best practice inference with GKE Inference
      /// Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart)
      /// for deployment details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse GenerateOptimizedManifest(global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateOptimizedManifest, null, options, request);
      }
      /// <summary>
      /// Generates an optimized deployment manifest for a given model and model
      /// server, based on the specified accelerator, performance targets, and
      /// configurations. See [Run best practice inference with GKE Inference
      /// Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart)
      /// for deployment details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse> GenerateOptimizedManifestAsync(global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateOptimizedManifestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generates an optimized deployment manifest for a given model and model
      /// server, based on the specified accelerator, performance targets, and
      /// configurations. See [Run best practice inference with GKE Inference
      /// Quickstart
      /// recipes](https://cloud.google.com/kubernetes-engine/docs/how-to/machine-learning/inference/inference-quickstart)
      /// for deployment details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse> GenerateOptimizedManifestAsync(global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateOptimizedManifest, null, options, request);
      }
      /// <summary>
      /// Fetches all of the benchmarking data available for a profile. Benchmarking
      /// data returns all of the performance metrics available for a given model
      /// server setup on a given instance type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse FetchBenchmarkingData(global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchBenchmarkingData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches all of the benchmarking data available for a profile. Benchmarking
      /// data returns all of the performance metrics available for a given model
      /// server setup on a given instance type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse FetchBenchmarkingData(global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FetchBenchmarkingData, null, options, request);
      }
      /// <summary>
      /// Fetches all of the benchmarking data available for a profile. Benchmarking
      /// data returns all of the performance metrics available for a given model
      /// server setup on a given instance type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse> FetchBenchmarkingDataAsync(global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FetchBenchmarkingDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Fetches all of the benchmarking data available for a profile. Benchmarking
      /// data returns all of the performance metrics available for a given model
      /// server setup on a given instance type.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse> FetchBenchmarkingDataAsync(global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FetchBenchmarkingData, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override GkeInferenceQuickstartClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GkeInferenceQuickstartClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(GkeInferenceQuickstartBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_FetchModels, serviceImpl.FetchModels)
          .AddMethod(__Method_FetchModelServers, serviceImpl.FetchModelServers)
          .AddMethod(__Method_FetchModelServerVersions, serviceImpl.FetchModelServerVersions)
          .AddMethod(__Method_FetchProfiles, serviceImpl.FetchProfiles)
          .AddMethod(__Method_GenerateOptimizedManifest, serviceImpl.GenerateOptimizedManifest)
          .AddMethod(__Method_FetchBenchmarkingData, serviceImpl.FetchBenchmarkingData).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GkeInferenceQuickstartBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_FetchModels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeRecommender.V1.FetchModelsRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelsResponse>(serviceImpl.FetchModels));
      serviceBinder.AddMethod(__Method_FetchModelServers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeRecommender.V1.FetchModelServersRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelServersResponse>(serviceImpl.FetchModelServers));
      serviceBinder.AddMethod(__Method_FetchModelServerVersions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsRequest, global::Google.Cloud.GkeRecommender.V1.FetchModelServerVersionsResponse>(serviceImpl.FetchModelServerVersions));
      serviceBinder.AddMethod(__Method_FetchProfiles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeRecommender.V1.FetchProfilesRequest, global::Google.Cloud.GkeRecommender.V1.FetchProfilesResponse>(serviceImpl.FetchProfiles));
      serviceBinder.AddMethod(__Method_GenerateOptimizedManifest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestRequest, global::Google.Cloud.GkeRecommender.V1.GenerateOptimizedManifestResponse>(serviceImpl.GenerateOptimizedManifest));
      serviceBinder.AddMethod(__Method_FetchBenchmarkingData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataRequest, global::Google.Cloud.GkeRecommender.V1.FetchBenchmarkingDataResponse>(serviceImpl.FetchBenchmarkingData));
    }

  }
}
#endregion
