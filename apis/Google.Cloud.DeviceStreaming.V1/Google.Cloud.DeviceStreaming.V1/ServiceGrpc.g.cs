// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/devicestreaming/v1/service.proto
// </auto-generated>
// Original file comments:
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.DeviceStreaming.V1 {
  /// <summary>
  /// A service for allocating Android devices and interacting with the
  /// live-allocated devices.
  ///
  /// Each Session will wait for available capacity, at a higher
  /// priority over Test Execution. When allocated, the session will be exposed
  /// through a stream for integration.
  ///
  /// DirectAccessService is currently available as a preview to select developers.
  /// You can register today on behalf of you and your team at
  /// https://developer.android.com/studio/preview/android-device-streaming
  /// </summary>
  public static partial class DirectAccessService
  {
    static readonly string __ServiceName = "google.cloud.devicestreaming.v1.DirectAccessService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest> __Marshaller_google_cloud_devicestreaming_v1_CreateDeviceSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> __Marshaller_google_cloud_devicestreaming_v1_DeviceSession = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.DeviceSession.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest> __Marshaller_google_cloud_devicestreaming_v1_ListDeviceSessionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse> __Marshaller_google_cloud_devicestreaming_v1_ListDeviceSessionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest> __Marshaller_google_cloud_devicestreaming_v1_GetDeviceSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest> __Marshaller_google_cloud_devicestreaming_v1_CancelDeviceSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest> __Marshaller_google_cloud_devicestreaming_v1_UpdateDeviceSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.AdbMessage> __Marshaller_google_cloud_devicestreaming_v1_AdbMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.AdbMessage.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.DeviceStreaming.V1.DeviceMessage> __Marshaller_google_cloud_devicestreaming_v1_DeviceMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.DeviceStreaming.V1.DeviceMessage.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession> __Method_CreateDeviceSession = new grpc::Method<global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDeviceSession",
        __Marshaller_google_cloud_devicestreaming_v1_CreateDeviceSessionRequest,
        __Marshaller_google_cloud_devicestreaming_v1_DeviceSession);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest, global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse> __Method_ListDeviceSessions = new grpc::Method<global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest, global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDeviceSessions",
        __Marshaller_google_cloud_devicestreaming_v1_ListDeviceSessionsRequest,
        __Marshaller_google_cloud_devicestreaming_v1_ListDeviceSessionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession> __Method_GetDeviceSession = new grpc::Method<global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeviceSession",
        __Marshaller_google_cloud_devicestreaming_v1_GetDeviceSessionRequest,
        __Marshaller_google_cloud_devicestreaming_v1_DeviceSession);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CancelDeviceSession = new grpc::Method<global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelDeviceSession",
        __Marshaller_google_cloud_devicestreaming_v1_CancelDeviceSessionRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession> __Method_UpdateDeviceSession = new grpc::Method<global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDeviceSession",
        __Marshaller_google_cloud_devicestreaming_v1_UpdateDeviceSessionRequest,
        __Marshaller_google_cloud_devicestreaming_v1_DeviceSession);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.DeviceStreaming.V1.AdbMessage, global::Google.Cloud.DeviceStreaming.V1.DeviceMessage> __Method_AdbConnect = new grpc::Method<global::Google.Cloud.DeviceStreaming.V1.AdbMessage, global::Google.Cloud.DeviceStreaming.V1.DeviceMessage>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "AdbConnect",
        __Marshaller_google_cloud_devicestreaming_v1_AdbMessage,
        __Marshaller_google_cloud_devicestreaming_v1_DeviceMessage);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.DeviceStreaming.V1.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DirectAccessService</summary>
    [grpc::BindServiceMethod(typeof(DirectAccessService), "BindService")]
    public abstract partial class DirectAccessServiceBase
    {
      /// <summary>
      /// Creates a DeviceSession.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> CreateDeviceSession(global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists DeviceSessions owned by the project user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse> ListDeviceSessions(global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a DeviceSession, which documents the allocation status and
      /// whether the device is allocated. Clients making requests from this API
      /// must poll GetDeviceSession.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> GetDeviceSession(global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Cancel a DeviceSession.
      /// This RPC changes the DeviceSession to state FINISHED and terminates all
      /// connections.
      /// Canceled sessions are not deleted and can be retrieved or
      /// listed by the user until they expire based on the 28 day deletion policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CancelDeviceSession(global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates the current DeviceSession to the fields described by the
      /// update_mask.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> UpdateDeviceSession(global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Exposes an ADB connection if the device supports ADB.
      /// gRPC headers are used to authenticate the Connect RPC, as well as
      /// associate to a particular DeviceSession.
      /// In particular, the user must specify the "X-Omnilab-Session-Name" header.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task AdbConnect(grpc::IAsyncStreamReader<global::Google.Cloud.DeviceStreaming.V1.AdbMessage> requestStream, grpc::IServerStreamWriter<global::Google.Cloud.DeviceStreaming.V1.DeviceMessage> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DirectAccessService</summary>
    public partial class DirectAccessServiceClient : grpc::ClientBase<DirectAccessServiceClient>
    {
      /// <summary>Creates a new client for DirectAccessService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DirectAccessServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DirectAccessService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DirectAccessServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DirectAccessServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DirectAccessServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a DeviceSession.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeviceStreaming.V1.DeviceSession CreateDeviceSession(global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeviceSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a DeviceSession.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeviceStreaming.V1.DeviceSession CreateDeviceSession(global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDeviceSession, null, options, request);
      }
      /// <summary>
      /// Creates a DeviceSession.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> CreateDeviceSessionAsync(global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeviceSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a DeviceSession.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> CreateDeviceSessionAsync(global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDeviceSession, null, options, request);
      }
      /// <summary>
      /// Lists DeviceSessions owned by the project user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse ListDeviceSessions(global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDeviceSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists DeviceSessions owned by the project user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse ListDeviceSessions(global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDeviceSessions, null, options, request);
      }
      /// <summary>
      /// Lists DeviceSessions owned by the project user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse> ListDeviceSessionsAsync(global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDeviceSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists DeviceSessions owned by the project user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse> ListDeviceSessionsAsync(global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDeviceSessions, null, options, request);
      }
      /// <summary>
      /// Gets a DeviceSession, which documents the allocation status and
      /// whether the device is allocated. Clients making requests from this API
      /// must poll GetDeviceSession.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeviceStreaming.V1.DeviceSession GetDeviceSession(global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a DeviceSession, which documents the allocation status and
      /// whether the device is allocated. Clients making requests from this API
      /// must poll GetDeviceSession.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeviceStreaming.V1.DeviceSession GetDeviceSession(global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeviceSession, null, options, request);
      }
      /// <summary>
      /// Gets a DeviceSession, which documents the allocation status and
      /// whether the device is allocated. Clients making requests from this API
      /// must poll GetDeviceSession.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> GetDeviceSessionAsync(global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeviceSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a DeviceSession, which documents the allocation status and
      /// whether the device is allocated. Clients making requests from this API
      /// must poll GetDeviceSession.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> GetDeviceSessionAsync(global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeviceSession, null, options, request);
      }
      /// <summary>
      /// Cancel a DeviceSession.
      /// This RPC changes the DeviceSession to state FINISHED and terminates all
      /// connections.
      /// Canceled sessions are not deleted and can be retrieved or
      /// listed by the user until they expire based on the 28 day deletion policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelDeviceSession(global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelDeviceSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel a DeviceSession.
      /// This RPC changes the DeviceSession to state FINISHED and terminates all
      /// connections.
      /// Canceled sessions are not deleted and can be retrieved or
      /// listed by the user until they expire based on the 28 day deletion policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CancelDeviceSession(global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelDeviceSession, null, options, request);
      }
      /// <summary>
      /// Cancel a DeviceSession.
      /// This RPC changes the DeviceSession to state FINISHED and terminates all
      /// connections.
      /// Canceled sessions are not deleted and can be retrieved or
      /// listed by the user until they expire based on the 28 day deletion policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelDeviceSessionAsync(global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelDeviceSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Cancel a DeviceSession.
      /// This RPC changes the DeviceSession to state FINISHED and terminates all
      /// connections.
      /// Canceled sessions are not deleted and can be retrieved or
      /// listed by the user until they expire based on the 28 day deletion policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CancelDeviceSessionAsync(global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelDeviceSession, null, options, request);
      }
      /// <summary>
      /// Updates the current DeviceSession to the fields described by the
      /// update_mask.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeviceStreaming.V1.DeviceSession UpdateDeviceSession(global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDeviceSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the current DeviceSession to the fields described by the
      /// update_mask.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.DeviceStreaming.V1.DeviceSession UpdateDeviceSession(global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDeviceSession, null, options, request);
      }
      /// <summary>
      /// Updates the current DeviceSession to the fields described by the
      /// update_mask.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> UpdateDeviceSessionAsync(global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDeviceSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the current DeviceSession to the fields described by the
      /// update_mask.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.DeviceStreaming.V1.DeviceSession> UpdateDeviceSessionAsync(global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDeviceSession, null, options, request);
      }
      /// <summary>
      /// Exposes an ADB connection if the device supports ADB.
      /// gRPC headers are used to authenticate the Connect RPC, as well as
      /// associate to a particular DeviceSession.
      /// In particular, the user must specify the "X-Omnilab-Session-Name" header.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.DeviceStreaming.V1.AdbMessage, global::Google.Cloud.DeviceStreaming.V1.DeviceMessage> AdbConnect(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AdbConnect(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exposes an ADB connection if the device supports ADB.
      /// gRPC headers are used to authenticate the Connect RPC, as well as
      /// associate to a particular DeviceSession.
      /// In particular, the user must specify the "X-Omnilab-Session-Name" header.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Google.Cloud.DeviceStreaming.V1.AdbMessage, global::Google.Cloud.DeviceStreaming.V1.DeviceMessage> AdbConnect(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_AdbConnect, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DirectAccessServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DirectAccessServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DirectAccessServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateDeviceSession, serviceImpl.CreateDeviceSession)
          .AddMethod(__Method_ListDeviceSessions, serviceImpl.ListDeviceSessions)
          .AddMethod(__Method_GetDeviceSession, serviceImpl.GetDeviceSession)
          .AddMethod(__Method_CancelDeviceSession, serviceImpl.CancelDeviceSession)
          .AddMethod(__Method_UpdateDeviceSession, serviceImpl.UpdateDeviceSession)
          .AddMethod(__Method_AdbConnect, serviceImpl.AdbConnect).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DirectAccessServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateDeviceSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeviceStreaming.V1.CreateDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession>(serviceImpl.CreateDeviceSession));
      serviceBinder.AddMethod(__Method_ListDeviceSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsRequest, global::Google.Cloud.DeviceStreaming.V1.ListDeviceSessionsResponse>(serviceImpl.ListDeviceSessions));
      serviceBinder.AddMethod(__Method_GetDeviceSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeviceStreaming.V1.GetDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession>(serviceImpl.GetDeviceSession));
      serviceBinder.AddMethod(__Method_CancelDeviceSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeviceStreaming.V1.CancelDeviceSessionRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CancelDeviceSession));
      serviceBinder.AddMethod(__Method_UpdateDeviceSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.DeviceStreaming.V1.UpdateDeviceSessionRequest, global::Google.Cloud.DeviceStreaming.V1.DeviceSession>(serviceImpl.UpdateDeviceSession));
      serviceBinder.AddMethod(__Method_AdbConnect, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Google.Cloud.DeviceStreaming.V1.AdbMessage, global::Google.Cloud.DeviceStreaming.V1.DeviceMessage>(serviceImpl.AdbConnect));
    }

  }
}
#endregion
