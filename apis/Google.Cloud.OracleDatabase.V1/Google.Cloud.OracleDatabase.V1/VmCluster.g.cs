// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/oracledatabase/v1/vm_cluster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Cloud.OracleDatabase.V1 {

  /// <summary>Holder for reflection information generated from google/cloud/oracledatabase/v1/vm_cluster.proto</summary>
  public static partial class VmClusterReflection {

    #region Descriptor
    /// <summary>File descriptor for google/cloud/oracledatabase/v1/vm_cluster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VmClusterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci9nb29nbGUvY2xvdWQvb3JhY2xlZGF0YWJhc2UvdjEvdm1fY2x1c3Rlci5w",
            "cm90bxIeZ29vZ2xlLmNsb3VkLm9yYWNsZWRhdGFiYXNlLnYxGh9nb29nbGUv",
            "YXBpL2ZpZWxkX2JlaGF2aW9yLnByb3RvGhlnb29nbGUvYXBpL3Jlc291cmNl",
            "LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhpnb29n",
            "bGUvdHlwZS9kYXRldGltZS5wcm90byLWBQoOQ2xvdWRWbUNsdXN0ZXISEQoE",
            "bmFtZRgBIAEoCUID4EEIEmAKFmV4YWRhdGFfaW5mcmFzdHJ1Y3R1cmUYAiAB",
            "KAlCQOBBAvpBOgo4b3JhY2xlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vQ2xv",
            "dWRFeGFkYXRhSW5mcmFzdHJ1Y3R1cmUSGQoMZGlzcGxheV9uYW1lGAMgASgJ",
            "QgPgQQESHAoPZ2NwX29yYWNsZV96b25lGAwgASgJQgPgQQMSUQoKcHJvcGVy",
            "dGllcxgGIAEoCzI4Lmdvb2dsZS5jbG91ZC5vcmFjbGVkYXRhYmFzZS52MS5D",
            "bG91ZFZtQ2x1c3RlclByb3BlcnRpZXNCA+BBARJPCgZsYWJlbHMYByADKAsy",
            "Oi5nb29nbGUuY2xvdWQub3JhY2xlZGF0YWJhc2UudjEuQ2xvdWRWbUNsdXN0",
            "ZXIuTGFiZWxzRW50cnlCA+BBARI0CgtjcmVhdGVfdGltZRgIIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxIRCgRjaWRyGAkgASgJQgPg",
            "QQISHwoSYmFja3VwX3N1Ym5ldF9jaWRyGAogASgJQgPgQQISNwoHbmV0d29y",
            "axgLIAEoCUIm4EEC+kEgCh5jb21wdXRlLmdvb2dsZWFwaXMuY29tL05ldHdv",
            "cmsaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4ATqfAepBmwEKLG9yYWNsZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL0Ns",
            "b3VkVm1DbHVzdGVyEkpwcm9qZWN0cy97cHJvamVjdH0vbG9jYXRpb25zL3ts",
            "b2NhdGlvbn0vY2xvdWRWbUNsdXN0ZXJzL3tjbG91ZF92bV9jbHVzdGVyfSoP",
            "Y2xvdWRWbUNsdXN0ZXJzMg5jbG91ZFZtQ2x1c3RlciKcDAoYQ2xvdWRWbUNs",
            "dXN0ZXJQcm9wZXJ0aWVzEhEKBG9jaWQYASABKAlCA+BBAxJfCgxsaWNlbnNl",
            "X3R5cGUYAiABKA4yRC5nb29nbGUuY2xvdWQub3JhY2xlZGF0YWJhc2UudjEu",
            "Q2xvdWRWbUNsdXN0ZXJQcm9wZXJ0aWVzLkxpY2Vuc2VUeXBlQgPgQQISFwoK",
            "Z2lfdmVyc2lvbhgDIAEoCUID4EEBEi0KCXRpbWVfem9uZRgEIAEoCzIVLmdv",
            "b2dsZS50eXBlLlRpbWVab25lQgPgQQESHAoPc3NoX3B1YmxpY19rZXlzGAUg",
            "AygJQgPgQQESFwoKbm9kZV9jb3VudBgGIAEoBUID4EEBEhIKBXNoYXBlGAcg",
            "ASgJQgPgQQMSFwoKb2NwdV9jb3VudBgIIAEoAkID4EEBEhsKDm1lbW9yeV9z",
            "aXplX2diGAkgASgFQgPgQQESJAoXZGJfbm9kZV9zdG9yYWdlX3NpemVfZ2IY",
            "CiABKAVCA+BBARIcCg9zdG9yYWdlX3NpemVfZ2IYCyABKAVCA+BBAxIhChRk",
            "YXRhX3N0b3JhZ2Vfc2l6ZV90YhgMIAEoAUID4EEBEmUKD2Rpc2tfcmVkdW5k",
            "YW5jeRgNIAEoDjJHLmdvb2dsZS5jbG91ZC5vcmFjbGVkYXRhYmFzZS52MS5D",
            "bG91ZFZtQ2x1c3RlclByb3BlcnRpZXMuRGlza1JlZHVuZGFuY3lCA+BBARIl",
            "ChhzcGFyc2VfZGlza2dyb3VwX2VuYWJsZWQYDiABKAhCA+BBARIhChRsb2Nh",
            "bF9iYWNrdXBfZW5hYmxlZBgPIAEoCEID4EEBEhwKD2hvc3RuYW1lX3ByZWZp",
            "eBgQIAEoCUID4EEBEmcKI2RpYWdub3N0aWNzX2RhdGFfY29sbGVjdGlvbl9v",
            "cHRpb25zGBMgASgLMjUuZ29vZ2xlLmNsb3VkLm9yYWNsZWRhdGFiYXNlLnYx",
            "LkRhdGFDb2xsZWN0aW9uT3B0aW9uc0ID4EEBElIKBXN0YXRlGBQgASgOMj4u",
            "Z29vZ2xlLmNsb3VkLm9yYWNsZWRhdGFiYXNlLnYxLkNsb3VkVm1DbHVzdGVy",
            "UHJvcGVydGllcy5TdGF0ZUID4EEDEiMKFnNjYW5fbGlzdGVuZXJfcG9ydF90",
            "Y3AYFSABKAVCA+BBAxInChpzY2FuX2xpc3RlbmVyX3BvcnRfdGNwX3NzbBgW",
            "IAEoBUID4EEDEhMKBmRvbWFpbhgXIAEoCUID4EEDEhUKCHNjYW5fZG5zGBgg",
            "ASgJQgPgQQMSFQoIaG9zdG5hbWUYGSABKAlCA+BBAxIbCg5jcHVfY29yZV9j",
            "b3VudBgaIAEoBUID4EECEhsKDnN5c3RlbV92ZXJzaW9uGBsgASgJQgPgQQES",
            "GAoLc2Nhbl9pcF9pZHMYHCADKAlCA+BBAxIfChJzY2FuX2Ruc19yZWNvcmRf",
            "aWQYHSABKAlCA+BBAxIUCgdvY2lfdXJsGB4gASgJQgPgQQMSHAoPZGJfc2Vy",
            "dmVyX29jaWRzGB8gAygJQgPgQQESGwoOY29tcGFydG1lbnRfaWQYICABKAlC",
            "A+BBAxIcCg9kbnNfbGlzdGVuZXJfaXAYIyABKAlCA+BBAxIZCgxjbHVzdGVy",
            "X25hbWUYJCABKAlCA+BBASJdCgtMaWNlbnNlVHlwZRIcChhMSUNFTlNFX1RZ",
            "UEVfVU5TUEVDSUZJRUQQABIUChBMSUNFTlNFX0lOQ0xVREVEEAESGgoWQlJJ",
            "TkdfWU9VUl9PV05fTElDRU5TRRACIkcKDkRpc2tSZWR1bmRhbmN5Eh8KG0RJ",
            "U0tfUkVEVU5EQU5DWV9VTlNQRUNJRklFRBAAEggKBEhJR0gQARIKCgZOT1JN",
            "QUwQAiKXAQoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABIQCgxQUk9W",
            "SVNJT05JTkcQARINCglBVkFJTEFCTEUQAhIMCghVUERBVElORxADEg8KC1RF",
            "Uk1JTkFUSU5HEAQSDgoKVEVSTUlOQVRFRBAFEgoKBkZBSUxFRBAGEhsKF01B",
            "SU5URU5BTkNFX0lOX1BST0dSRVNTEAcijAEKFURhdGFDb2xsZWN0aW9uT3B0",
            "aW9ucxInChpkaWFnbm9zdGljc19ldmVudHNfZW5hYmxlZBgBIAEoCEID4EEB",
            "EiYKGWhlYWx0aF9tb25pdG9yaW5nX2VuYWJsZWQYAiABKAhCA+BBARIiChVp",
            "bmNpZGVudF9sb2dzX2VuYWJsZWQYAyABKAhCA+BBAULtAQoiY29tLmdvb2ds",
            "ZS5jbG91ZC5vcmFjbGVkYXRhYmFzZS52MUITQ2xvdWRWbUNsdXN0ZXJQcm90",
            "b1ABWkpjbG91ZC5nb29nbGUuY29tL2dvL29yYWNsZWRhdGFiYXNlL2FwaXYx",
            "L29yYWNsZWRhdGFiYXNlcGI7b3JhY2xlZGF0YWJhc2VwYqoCHkdvb2dsZS5D",
            "bG91ZC5PcmFjbGVEYXRhYmFzZS5WMcoCHkdvb2dsZVxDbG91ZFxPcmFjbGVE",
            "YXRhYmFzZVxWMeoCIUdvb2dsZTo6Q2xvdWQ6Ok9yYWNsZURhdGFiYXNlOjpW",
            "MWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.FieldBehaviorReflection.Descriptor, global::Google.Api.ResourceReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.DatetimeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.OracleDatabase.V1.CloudVmCluster), global::Google.Cloud.OracleDatabase.V1.CloudVmCluster.Parser, new[]{ "Name", "ExadataInfrastructure", "DisplayName", "GcpOracleZone", "Properties", "Labels", "CreateTime", "Cidr", "BackupSubnetCidr", "Network" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties), global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Parser, new[]{ "Ocid", "LicenseType", "GiVersion", "TimeZone", "SshPublicKeys", "NodeCount", "Shape", "OcpuCount", "MemorySizeGb", "DbNodeStorageSizeGb", "StorageSizeGb", "DataStorageSizeTb", "DiskRedundancy", "SparseDiskgroupEnabled", "LocalBackupEnabled", "HostnamePrefix", "DiagnosticsDataCollectionOptions", "State", "ScanListenerPortTcp", "ScanListenerPortTcpSsl", "Domain", "ScanDns", "Hostname", "CpuCoreCount", "SystemVersion", "ScanIpIds", "ScanDnsRecordId", "OciUrl", "DbServerOcids", "CompartmentId", "DnsListenerIp", "ClusterName" }, null, new[]{ typeof(global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType), typeof(global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy), typeof(global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Cloud.OracleDatabase.V1.DataCollectionOptions), global::Google.Cloud.OracleDatabase.V1.DataCollectionOptions.Parser, new[]{ "DiagnosticsEventsEnabled", "HealthMonitoringEnabled", "IncidentLogsEnabled" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Details of the Cloud VM Cluster resource.
  /// https://docs.oracle.com/en-us/iaas/api/#/en/database/20160918/CloudVmCluster/
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CloudVmCluster : pb::IMessage<CloudVmCluster>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloudVmCluster> _parser = new pb::MessageParser<CloudVmCluster>(() => new CloudVmCluster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CloudVmCluster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.OracleDatabase.V1.VmClusterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CloudVmCluster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CloudVmCluster(CloudVmCluster other) : this() {
      name_ = other.name_;
      exadataInfrastructure_ = other.exadataInfrastructure_;
      displayName_ = other.displayName_;
      gcpOracleZone_ = other.gcpOracleZone_;
      properties_ = other.properties_ != null ? other.properties_.Clone() : null;
      labels_ = other.labels_.Clone();
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      cidr_ = other.cidr_;
      backupSubnetCidr_ = other.backupSubnetCidr_;
      network_ = other.network_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CloudVmCluster Clone() {
      return new CloudVmCluster(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Identifier. The name of the VM Cluster resource with the format:
    /// projects/{project}/locations/{region}/cloudVmClusters/{cloud_vm_cluster}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "exadata_infrastructure" field.</summary>
    public const int ExadataInfrastructureFieldNumber = 2;
    private string exadataInfrastructure_ = "";
    /// <summary>
    /// Required. The name of the Exadata Infrastructure resource on which VM
    /// cluster resource is created, in the following format:
    /// projects/{project}/locations/{region}/cloudExadataInfrastuctures/{cloud_extradata_infrastructure}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExadataInfrastructure {
      get { return exadataInfrastructure_; }
      set {
        exadataInfrastructure_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    /// <summary>
    /// Optional. User friendly name for this resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gcp_oracle_zone" field.</summary>
    public const int GcpOracleZoneFieldNumber = 12;
    private string gcpOracleZone_ = "";
    /// <summary>
    /// Output only. Google Cloud Platform location where Oracle Exadata is hosted.
    /// It is same as Google Cloud Platform Oracle zone of Exadata infrastructure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GcpOracleZone {
      get { return gcpOracleZone_; }
      set {
        gcpOracleZone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 6;
    private global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties properties_;
    /// <summary>
    /// Optional. Various properties of the VM Cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties Properties {
      get { return properties_; }
      set {
        properties_ = value;
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 7;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 58);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Optional. Labels or tags associated with the VM Cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "create_time" field.</summary>
    public const int CreateTimeFieldNumber = 8;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    /// <summary>
    /// Output only. The date and time that the VM cluster was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "cidr" field.</summary>
    public const int CidrFieldNumber = 9;
    private string cidr_ = "";
    /// <summary>
    /// Required. Network settings. CIDR to use for cluster IP allocation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cidr {
      get { return cidr_; }
      set {
        cidr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backup_subnet_cidr" field.</summary>
    public const int BackupSubnetCidrFieldNumber = 10;
    private string backupSubnetCidr_ = "";
    /// <summary>
    /// Required. CIDR range of the backup subnet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BackupSubnetCidr {
      get { return backupSubnetCidr_; }
      set {
        backupSubnetCidr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 11;
    private string network_ = "";
    /// <summary>
    /// Required. The name of the VPC network.
    /// Format: projects/{project}/global/networks/{network}
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CloudVmCluster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CloudVmCluster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ExadataInfrastructure != other.ExadataInfrastructure) return false;
      if (DisplayName != other.DisplayName) return false;
      if (GcpOracleZone != other.GcpOracleZone) return false;
      if (!object.Equals(Properties, other.Properties)) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (Cidr != other.Cidr) return false;
      if (BackupSubnetCidr != other.BackupSubnetCidr) return false;
      if (Network != other.Network) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ExadataInfrastructure.Length != 0) hash ^= ExadataInfrastructure.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (GcpOracleZone.Length != 0) hash ^= GcpOracleZone.GetHashCode();
      if (properties_ != null) hash ^= Properties.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (Cidr.Length != 0) hash ^= Cidr.GetHashCode();
      if (BackupSubnetCidr.Length != 0) hash ^= BackupSubnetCidr.GetHashCode();
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ExadataInfrastructure.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExadataInfrastructure);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (properties_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Properties);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (createTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateTime);
      }
      if (Cidr.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Cidr);
      }
      if (BackupSubnetCidr.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BackupSubnetCidr);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Network);
      }
      if (GcpOracleZone.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(GcpOracleZone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ExadataInfrastructure.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExadataInfrastructure);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (properties_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Properties);
      }
      labels_.WriteTo(ref output, _map_labels_codec);
      if (createTime_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CreateTime);
      }
      if (Cidr.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Cidr);
      }
      if (BackupSubnetCidr.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(BackupSubnetCidr);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Network);
      }
      if (GcpOracleZone.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(GcpOracleZone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ExadataInfrastructure.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExadataInfrastructure);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (GcpOracleZone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GcpOracleZone);
      }
      if (properties_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (Cidr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cidr);
      }
      if (BackupSubnetCidr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackupSubnetCidr);
      }
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CloudVmCluster other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ExadataInfrastructure.Length != 0) {
        ExadataInfrastructure = other.ExadataInfrastructure;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.GcpOracleZone.Length != 0) {
        GcpOracleZone = other.GcpOracleZone;
      }
      if (other.properties_ != null) {
        if (properties_ == null) {
          Properties = new global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties();
        }
        Properties.MergeFrom(other.Properties);
      }
      labels_.MergeFrom(other.labels_);
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.Cidr.Length != 0) {
        Cidr = other.Cidr;
      }
      if (other.BackupSubnetCidr.Length != 0) {
        BackupSubnetCidr = other.BackupSubnetCidr;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ExadataInfrastructure = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            if (properties_ == null) {
              Properties = new global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 58: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 66: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 74: {
            Cidr = input.ReadString();
            break;
          }
          case 82: {
            BackupSubnetCidr = input.ReadString();
            break;
          }
          case 90: {
            Network = input.ReadString();
            break;
          }
          case 98: {
            GcpOracleZone = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ExadataInfrastructure = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 50: {
            if (properties_ == null) {
              Properties = new global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties();
            }
            input.ReadMessage(Properties);
            break;
          }
          case 58: {
            labels_.AddEntriesFrom(ref input, _map_labels_codec);
            break;
          }
          case 66: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 74: {
            Cidr = input.ReadString();
            break;
          }
          case 82: {
            BackupSubnetCidr = input.ReadString();
            break;
          }
          case 90: {
            Network = input.ReadString();
            break;
          }
          case 98: {
            GcpOracleZone = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Various properties and settings associated with Exadata VM cluster.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CloudVmClusterProperties : pb::IMessage<CloudVmClusterProperties>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloudVmClusterProperties> _parser = new pb::MessageParser<CloudVmClusterProperties>(() => new CloudVmClusterProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CloudVmClusterProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.OracleDatabase.V1.VmClusterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CloudVmClusterProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CloudVmClusterProperties(CloudVmClusterProperties other) : this() {
      ocid_ = other.ocid_;
      licenseType_ = other.licenseType_;
      giVersion_ = other.giVersion_;
      timeZone_ = other.timeZone_ != null ? other.timeZone_.Clone() : null;
      sshPublicKeys_ = other.sshPublicKeys_.Clone();
      nodeCount_ = other.nodeCount_;
      shape_ = other.shape_;
      ocpuCount_ = other.ocpuCount_;
      memorySizeGb_ = other.memorySizeGb_;
      dbNodeStorageSizeGb_ = other.dbNodeStorageSizeGb_;
      storageSizeGb_ = other.storageSizeGb_;
      dataStorageSizeTb_ = other.dataStorageSizeTb_;
      diskRedundancy_ = other.diskRedundancy_;
      sparseDiskgroupEnabled_ = other.sparseDiskgroupEnabled_;
      localBackupEnabled_ = other.localBackupEnabled_;
      hostnamePrefix_ = other.hostnamePrefix_;
      diagnosticsDataCollectionOptions_ = other.diagnosticsDataCollectionOptions_ != null ? other.diagnosticsDataCollectionOptions_.Clone() : null;
      state_ = other.state_;
      scanListenerPortTcp_ = other.scanListenerPortTcp_;
      scanListenerPortTcpSsl_ = other.scanListenerPortTcpSsl_;
      domain_ = other.domain_;
      scanDns_ = other.scanDns_;
      hostname_ = other.hostname_;
      cpuCoreCount_ = other.cpuCoreCount_;
      systemVersion_ = other.systemVersion_;
      scanIpIds_ = other.scanIpIds_.Clone();
      scanDnsRecordId_ = other.scanDnsRecordId_;
      ociUrl_ = other.ociUrl_;
      dbServerOcids_ = other.dbServerOcids_.Clone();
      compartmentId_ = other.compartmentId_;
      dnsListenerIp_ = other.dnsListenerIp_;
      clusterName_ = other.clusterName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CloudVmClusterProperties Clone() {
      return new CloudVmClusterProperties(this);
    }

    /// <summary>Field number for the "ocid" field.</summary>
    public const int OcidFieldNumber = 1;
    private string ocid_ = "";
    /// <summary>
    /// Output only. Oracle Cloud Infrastructure ID of VM Cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ocid {
      get { return ocid_; }
      set {
        ocid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "license_type" field.</summary>
    public const int LicenseTypeFieldNumber = 2;
    private global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType licenseType_ = global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType.Unspecified;
    /// <summary>
    /// Required. License type of VM Cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType LicenseType {
      get { return licenseType_; }
      set {
        licenseType_ = value;
      }
    }

    /// <summary>Field number for the "gi_version" field.</summary>
    public const int GiVersionFieldNumber = 3;
    private string giVersion_ = "";
    /// <summary>
    /// Optional. Grid Infrastructure Version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GiVersion {
      get { return giVersion_; }
      set {
        giVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time_zone" field.</summary>
    public const int TimeZoneFieldNumber = 4;
    private global::Google.Type.TimeZone timeZone_;
    /// <summary>
    /// Optional. Time zone of VM Cluster to set. Defaults to UTC if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Type.TimeZone TimeZone {
      get { return timeZone_; }
      set {
        timeZone_ = value;
      }
    }

    /// <summary>Field number for the "ssh_public_keys" field.</summary>
    public const int SshPublicKeysFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_sshPublicKeys_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> sshPublicKeys_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional. SSH public keys to be stored with cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> SshPublicKeys {
      get { return sshPublicKeys_; }
    }

    /// <summary>Field number for the "node_count" field.</summary>
    public const int NodeCountFieldNumber = 6;
    private int nodeCount_;
    /// <summary>
    /// Optional. Number of database servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NodeCount {
      get { return nodeCount_; }
      set {
        nodeCount_ = value;
      }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 7;
    private string shape_ = "";
    /// <summary>
    /// Output only. Shape of VM Cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Shape {
      get { return shape_; }
      set {
        shape_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ocpu_count" field.</summary>
    public const int OcpuCountFieldNumber = 8;
    private float ocpuCount_;
    /// <summary>
    /// Optional. OCPU count per VM. Minimum is 0.1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OcpuCount {
      get { return ocpuCount_; }
      set {
        ocpuCount_ = value;
      }
    }

    /// <summary>Field number for the "memory_size_gb" field.</summary>
    public const int MemorySizeGbFieldNumber = 9;
    private int memorySizeGb_;
    /// <summary>
    /// Optional. Memory allocated in GBs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MemorySizeGb {
      get { return memorySizeGb_; }
      set {
        memorySizeGb_ = value;
      }
    }

    /// <summary>Field number for the "db_node_storage_size_gb" field.</summary>
    public const int DbNodeStorageSizeGbFieldNumber = 10;
    private int dbNodeStorageSizeGb_;
    /// <summary>
    /// Optional. Local storage per VM.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DbNodeStorageSizeGb {
      get { return dbNodeStorageSizeGb_; }
      set {
        dbNodeStorageSizeGb_ = value;
      }
    }

    /// <summary>Field number for the "storage_size_gb" field.</summary>
    public const int StorageSizeGbFieldNumber = 11;
    private int storageSizeGb_;
    /// <summary>
    /// Output only. The storage allocation for the disk group, in gigabytes (GB).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StorageSizeGb {
      get { return storageSizeGb_; }
      set {
        storageSizeGb_ = value;
      }
    }

    /// <summary>Field number for the "data_storage_size_tb" field.</summary>
    public const int DataStorageSizeTbFieldNumber = 12;
    private double dataStorageSizeTb_;
    /// <summary>
    /// Optional. The data disk group size to be allocated in TBs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double DataStorageSizeTb {
      get { return dataStorageSizeTb_; }
      set {
        dataStorageSizeTb_ = value;
      }
    }

    /// <summary>Field number for the "disk_redundancy" field.</summary>
    public const int DiskRedundancyFieldNumber = 13;
    private global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy diskRedundancy_ = global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy.Unspecified;
    /// <summary>
    /// Optional. The type of redundancy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy DiskRedundancy {
      get { return diskRedundancy_; }
      set {
        diskRedundancy_ = value;
      }
    }

    /// <summary>Field number for the "sparse_diskgroup_enabled" field.</summary>
    public const int SparseDiskgroupEnabledFieldNumber = 14;
    private bool sparseDiskgroupEnabled_;
    /// <summary>
    /// Optional. Use exadata sparse snapshots.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SparseDiskgroupEnabled {
      get { return sparseDiskgroupEnabled_; }
      set {
        sparseDiskgroupEnabled_ = value;
      }
    }

    /// <summary>Field number for the "local_backup_enabled" field.</summary>
    public const int LocalBackupEnabledFieldNumber = 15;
    private bool localBackupEnabled_;
    /// <summary>
    /// Optional. Use local backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LocalBackupEnabled {
      get { return localBackupEnabled_; }
      set {
        localBackupEnabled_ = value;
      }
    }

    /// <summary>Field number for the "hostname_prefix" field.</summary>
    public const int HostnamePrefixFieldNumber = 16;
    private string hostnamePrefix_ = "";
    /// <summary>
    /// Optional. Prefix for VM cluster host names.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HostnamePrefix {
      get { return hostnamePrefix_; }
      set {
        hostnamePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "diagnostics_data_collection_options" field.</summary>
    public const int DiagnosticsDataCollectionOptionsFieldNumber = 19;
    private global::Google.Cloud.OracleDatabase.V1.DataCollectionOptions diagnosticsDataCollectionOptions_;
    /// <summary>
    /// Optional. Data collection options for diagnostics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.OracleDatabase.V1.DataCollectionOptions DiagnosticsDataCollectionOptions {
      get { return diagnosticsDataCollectionOptions_; }
      set {
        diagnosticsDataCollectionOptions_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 20;
    private global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State state_ = global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State.Unspecified;
    /// <summary>
    /// Output only. State of the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "scan_listener_port_tcp" field.</summary>
    public const int ScanListenerPortTcpFieldNumber = 21;
    private int scanListenerPortTcp_;
    /// <summary>
    /// Output only. SCAN listener port - TCP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScanListenerPortTcp {
      get { return scanListenerPortTcp_; }
      set {
        scanListenerPortTcp_ = value;
      }
    }

    /// <summary>Field number for the "scan_listener_port_tcp_ssl" field.</summary>
    public const int ScanListenerPortTcpSslFieldNumber = 22;
    private int scanListenerPortTcpSsl_;
    /// <summary>
    /// Output only. SCAN listener port - TLS
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScanListenerPortTcpSsl {
      get { return scanListenerPortTcpSsl_; }
      set {
        scanListenerPortTcpSsl_ = value;
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 23;
    private string domain_ = "";
    /// <summary>
    /// Output only. Parent DNS domain where SCAN DNS and hosts names are
    /// qualified. ex: ocispdelegated.ocisp10jvnet.oraclevcn.com
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scan_dns" field.</summary>
    public const int ScanDnsFieldNumber = 24;
    private string scanDns_ = "";
    /// <summary>
    /// Output only. SCAN DNS name.
    /// ex: sp2-yi0xq-scan.ocispdelegated.ocisp10jvnet.oraclevcn.com
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScanDns {
      get { return scanDns_; }
      set {
        scanDns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 25;
    private string hostname_ = "";
    /// <summary>
    /// Output only. host name without domain.
    /// format: "&lt;hostname_prefix>-" with some suffix.
    /// ex: sp2-yi0xq where "sp2" is the hostname_prefix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpu_core_count" field.</summary>
    public const int CpuCoreCountFieldNumber = 26;
    private int cpuCoreCount_;
    /// <summary>
    /// Required. Number of enabled CPU cores.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CpuCoreCount {
      get { return cpuCoreCount_; }
      set {
        cpuCoreCount_ = value;
      }
    }

    /// <summary>Field number for the "system_version" field.</summary>
    public const int SystemVersionFieldNumber = 27;
    private string systemVersion_ = "";
    /// <summary>
    /// Optional. Operating system version of the image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SystemVersion {
      get { return systemVersion_; }
      set {
        systemVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scan_ip_ids" field.</summary>
    public const int ScanIpIdsFieldNumber = 28;
    private static readonly pb::FieldCodec<string> _repeated_scanIpIds_codec
        = pb::FieldCodec.ForString(226);
    private readonly pbc::RepeatedField<string> scanIpIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Output only. OCIDs of scan IPs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> ScanIpIds {
      get { return scanIpIds_; }
    }

    /// <summary>Field number for the "scan_dns_record_id" field.</summary>
    public const int ScanDnsRecordIdFieldNumber = 29;
    private string scanDnsRecordId_ = "";
    /// <summary>
    /// Output only. OCID of scan DNS record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ScanDnsRecordId {
      get { return scanDnsRecordId_; }
      set {
        scanDnsRecordId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oci_url" field.</summary>
    public const int OciUrlFieldNumber = 30;
    private string ociUrl_ = "";
    /// <summary>
    /// Output only. Deep link to the OCI console to view this resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string OciUrl {
      get { return ociUrl_; }
      set {
        ociUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "db_server_ocids" field.</summary>
    public const int DbServerOcidsFieldNumber = 31;
    private static readonly pb::FieldCodec<string> _repeated_dbServerOcids_codec
        = pb::FieldCodec.ForString(250);
    private readonly pbc::RepeatedField<string> dbServerOcids_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Optional. OCID of database servers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> DbServerOcids {
      get { return dbServerOcids_; }
    }

    /// <summary>Field number for the "compartment_id" field.</summary>
    public const int CompartmentIdFieldNumber = 32;
    private string compartmentId_ = "";
    /// <summary>
    /// Output only. Compartment ID of cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CompartmentId {
      get { return compartmentId_; }
      set {
        compartmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dns_listener_ip" field.</summary>
    public const int DnsListenerIpFieldNumber = 35;
    private string dnsListenerIp_ = "";
    /// <summary>
    /// Output only. DNS listener IP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DnsListenerIp {
      get { return dnsListenerIp_; }
      set {
        dnsListenerIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_name" field.</summary>
    public const int ClusterNameFieldNumber = 36;
    private string clusterName_ = "";
    /// <summary>
    /// Optional. OCI Cluster name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ClusterName {
      get { return clusterName_; }
      set {
        clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CloudVmClusterProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CloudVmClusterProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ocid != other.Ocid) return false;
      if (LicenseType != other.LicenseType) return false;
      if (GiVersion != other.GiVersion) return false;
      if (!object.Equals(TimeZone, other.TimeZone)) return false;
      if(!sshPublicKeys_.Equals(other.sshPublicKeys_)) return false;
      if (NodeCount != other.NodeCount) return false;
      if (Shape != other.Shape) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OcpuCount, other.OcpuCount)) return false;
      if (MemorySizeGb != other.MemorySizeGb) return false;
      if (DbNodeStorageSizeGb != other.DbNodeStorageSizeGb) return false;
      if (StorageSizeGb != other.StorageSizeGb) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DataStorageSizeTb, other.DataStorageSizeTb)) return false;
      if (DiskRedundancy != other.DiskRedundancy) return false;
      if (SparseDiskgroupEnabled != other.SparseDiskgroupEnabled) return false;
      if (LocalBackupEnabled != other.LocalBackupEnabled) return false;
      if (HostnamePrefix != other.HostnamePrefix) return false;
      if (!object.Equals(DiagnosticsDataCollectionOptions, other.DiagnosticsDataCollectionOptions)) return false;
      if (State != other.State) return false;
      if (ScanListenerPortTcp != other.ScanListenerPortTcp) return false;
      if (ScanListenerPortTcpSsl != other.ScanListenerPortTcpSsl) return false;
      if (Domain != other.Domain) return false;
      if (ScanDns != other.ScanDns) return false;
      if (Hostname != other.Hostname) return false;
      if (CpuCoreCount != other.CpuCoreCount) return false;
      if (SystemVersion != other.SystemVersion) return false;
      if(!scanIpIds_.Equals(other.scanIpIds_)) return false;
      if (ScanDnsRecordId != other.ScanDnsRecordId) return false;
      if (OciUrl != other.OciUrl) return false;
      if(!dbServerOcids_.Equals(other.dbServerOcids_)) return false;
      if (CompartmentId != other.CompartmentId) return false;
      if (DnsListenerIp != other.DnsListenerIp) return false;
      if (ClusterName != other.ClusterName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Ocid.Length != 0) hash ^= Ocid.GetHashCode();
      if (LicenseType != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType.Unspecified) hash ^= LicenseType.GetHashCode();
      if (GiVersion.Length != 0) hash ^= GiVersion.GetHashCode();
      if (timeZone_ != null) hash ^= TimeZone.GetHashCode();
      hash ^= sshPublicKeys_.GetHashCode();
      if (NodeCount != 0) hash ^= NodeCount.GetHashCode();
      if (Shape.Length != 0) hash ^= Shape.GetHashCode();
      if (OcpuCount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OcpuCount);
      if (MemorySizeGb != 0) hash ^= MemorySizeGb.GetHashCode();
      if (DbNodeStorageSizeGb != 0) hash ^= DbNodeStorageSizeGb.GetHashCode();
      if (StorageSizeGb != 0) hash ^= StorageSizeGb.GetHashCode();
      if (DataStorageSizeTb != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DataStorageSizeTb);
      if (DiskRedundancy != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy.Unspecified) hash ^= DiskRedundancy.GetHashCode();
      if (SparseDiskgroupEnabled != false) hash ^= SparseDiskgroupEnabled.GetHashCode();
      if (LocalBackupEnabled != false) hash ^= LocalBackupEnabled.GetHashCode();
      if (HostnamePrefix.Length != 0) hash ^= HostnamePrefix.GetHashCode();
      if (diagnosticsDataCollectionOptions_ != null) hash ^= DiagnosticsDataCollectionOptions.GetHashCode();
      if (State != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State.Unspecified) hash ^= State.GetHashCode();
      if (ScanListenerPortTcp != 0) hash ^= ScanListenerPortTcp.GetHashCode();
      if (ScanListenerPortTcpSsl != 0) hash ^= ScanListenerPortTcpSsl.GetHashCode();
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (ScanDns.Length != 0) hash ^= ScanDns.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (CpuCoreCount != 0) hash ^= CpuCoreCount.GetHashCode();
      if (SystemVersion.Length != 0) hash ^= SystemVersion.GetHashCode();
      hash ^= scanIpIds_.GetHashCode();
      if (ScanDnsRecordId.Length != 0) hash ^= ScanDnsRecordId.GetHashCode();
      if (OciUrl.Length != 0) hash ^= OciUrl.GetHashCode();
      hash ^= dbServerOcids_.GetHashCode();
      if (CompartmentId.Length != 0) hash ^= CompartmentId.GetHashCode();
      if (DnsListenerIp.Length != 0) hash ^= DnsListenerIp.GetHashCode();
      if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ocid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ocid);
      }
      if (LicenseType != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LicenseType);
      }
      if (GiVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GiVersion);
      }
      if (timeZone_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TimeZone);
      }
      sshPublicKeys_.WriteTo(output, _repeated_sshPublicKeys_codec);
      if (NodeCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NodeCount);
      }
      if (Shape.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Shape);
      }
      if (OcpuCount != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(OcpuCount);
      }
      if (MemorySizeGb != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MemorySizeGb);
      }
      if (DbNodeStorageSizeGb != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DbNodeStorageSizeGb);
      }
      if (StorageSizeGb != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(StorageSizeGb);
      }
      if (DataStorageSizeTb != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(DataStorageSizeTb);
      }
      if (DiskRedundancy != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) DiskRedundancy);
      }
      if (SparseDiskgroupEnabled != false) {
        output.WriteRawTag(112);
        output.WriteBool(SparseDiskgroupEnabled);
      }
      if (LocalBackupEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(LocalBackupEnabled);
      }
      if (HostnamePrefix.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(HostnamePrefix);
      }
      if (diagnosticsDataCollectionOptions_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(DiagnosticsDataCollectionOptions);
      }
      if (State != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) State);
      }
      if (ScanListenerPortTcp != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ScanListenerPortTcp);
      }
      if (ScanListenerPortTcpSsl != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ScanListenerPortTcpSsl);
      }
      if (Domain.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Domain);
      }
      if (ScanDns.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(ScanDns);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Hostname);
      }
      if (CpuCoreCount != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CpuCoreCount);
      }
      if (SystemVersion.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(SystemVersion);
      }
      scanIpIds_.WriteTo(output, _repeated_scanIpIds_codec);
      if (ScanDnsRecordId.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ScanDnsRecordId);
      }
      if (OciUrl.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(OciUrl);
      }
      dbServerOcids_.WriteTo(output, _repeated_dbServerOcids_codec);
      if (CompartmentId.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(CompartmentId);
      }
      if (DnsListenerIp.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(DnsListenerIp);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(ClusterName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ocid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ocid);
      }
      if (LicenseType != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) LicenseType);
      }
      if (GiVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GiVersion);
      }
      if (timeZone_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TimeZone);
      }
      sshPublicKeys_.WriteTo(ref output, _repeated_sshPublicKeys_codec);
      if (NodeCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NodeCount);
      }
      if (Shape.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Shape);
      }
      if (OcpuCount != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(OcpuCount);
      }
      if (MemorySizeGb != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MemorySizeGb);
      }
      if (DbNodeStorageSizeGb != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DbNodeStorageSizeGb);
      }
      if (StorageSizeGb != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(StorageSizeGb);
      }
      if (DataStorageSizeTb != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(DataStorageSizeTb);
      }
      if (DiskRedundancy != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy.Unspecified) {
        output.WriteRawTag(104);
        output.WriteEnum((int) DiskRedundancy);
      }
      if (SparseDiskgroupEnabled != false) {
        output.WriteRawTag(112);
        output.WriteBool(SparseDiskgroupEnabled);
      }
      if (LocalBackupEnabled != false) {
        output.WriteRawTag(120);
        output.WriteBool(LocalBackupEnabled);
      }
      if (HostnamePrefix.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(HostnamePrefix);
      }
      if (diagnosticsDataCollectionOptions_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(DiagnosticsDataCollectionOptions);
      }
      if (State != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) State);
      }
      if (ScanListenerPortTcp != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(ScanListenerPortTcp);
      }
      if (ScanListenerPortTcpSsl != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(ScanListenerPortTcpSsl);
      }
      if (Domain.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Domain);
      }
      if (ScanDns.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(ScanDns);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(Hostname);
      }
      if (CpuCoreCount != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(CpuCoreCount);
      }
      if (SystemVersion.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(SystemVersion);
      }
      scanIpIds_.WriteTo(ref output, _repeated_scanIpIds_codec);
      if (ScanDnsRecordId.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(ScanDnsRecordId);
      }
      if (OciUrl.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(OciUrl);
      }
      dbServerOcids_.WriteTo(ref output, _repeated_dbServerOcids_codec);
      if (CompartmentId.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(CompartmentId);
      }
      if (DnsListenerIp.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(DnsListenerIp);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(ClusterName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Ocid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ocid);
      }
      if (LicenseType != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LicenseType);
      }
      if (GiVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GiVersion);
      }
      if (timeZone_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeZone);
      }
      size += sshPublicKeys_.CalculateSize(_repeated_sshPublicKeys_codec);
      if (NodeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeCount);
      }
      if (Shape.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shape);
      }
      if (OcpuCount != 0F) {
        size += 1 + 4;
      }
      if (MemorySizeGb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemorySizeGb);
      }
      if (DbNodeStorageSizeGb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DbNodeStorageSizeGb);
      }
      if (StorageSizeGb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StorageSizeGb);
      }
      if (DataStorageSizeTb != 0D) {
        size += 1 + 8;
      }
      if (DiskRedundancy != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiskRedundancy);
      }
      if (SparseDiskgroupEnabled != false) {
        size += 1 + 1;
      }
      if (LocalBackupEnabled != false) {
        size += 1 + 1;
      }
      if (HostnamePrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HostnamePrefix);
      }
      if (diagnosticsDataCollectionOptions_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DiagnosticsDataCollectionOptions);
      }
      if (State != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (ScanListenerPortTcp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScanListenerPortTcp);
      }
      if (ScanListenerPortTcpSsl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ScanListenerPortTcpSsl);
      }
      if (Domain.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (ScanDns.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScanDns);
      }
      if (Hostname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (CpuCoreCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CpuCoreCount);
      }
      if (SystemVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SystemVersion);
      }
      size += scanIpIds_.CalculateSize(_repeated_scanIpIds_codec);
      if (ScanDnsRecordId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ScanDnsRecordId);
      }
      if (OciUrl.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(OciUrl);
      }
      size += dbServerOcids_.CalculateSize(_repeated_dbServerOcids_codec);
      if (CompartmentId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CompartmentId);
      }
      if (DnsListenerIp.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DnsListenerIp);
      }
      if (ClusterName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CloudVmClusterProperties other) {
      if (other == null) {
        return;
      }
      if (other.Ocid.Length != 0) {
        Ocid = other.Ocid;
      }
      if (other.LicenseType != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType.Unspecified) {
        LicenseType = other.LicenseType;
      }
      if (other.GiVersion.Length != 0) {
        GiVersion = other.GiVersion;
      }
      if (other.timeZone_ != null) {
        if (timeZone_ == null) {
          TimeZone = new global::Google.Type.TimeZone();
        }
        TimeZone.MergeFrom(other.TimeZone);
      }
      sshPublicKeys_.Add(other.sshPublicKeys_);
      if (other.NodeCount != 0) {
        NodeCount = other.NodeCount;
      }
      if (other.Shape.Length != 0) {
        Shape = other.Shape;
      }
      if (other.OcpuCount != 0F) {
        OcpuCount = other.OcpuCount;
      }
      if (other.MemorySizeGb != 0) {
        MemorySizeGb = other.MemorySizeGb;
      }
      if (other.DbNodeStorageSizeGb != 0) {
        DbNodeStorageSizeGb = other.DbNodeStorageSizeGb;
      }
      if (other.StorageSizeGb != 0) {
        StorageSizeGb = other.StorageSizeGb;
      }
      if (other.DataStorageSizeTb != 0D) {
        DataStorageSizeTb = other.DataStorageSizeTb;
      }
      if (other.DiskRedundancy != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy.Unspecified) {
        DiskRedundancy = other.DiskRedundancy;
      }
      if (other.SparseDiskgroupEnabled != false) {
        SparseDiskgroupEnabled = other.SparseDiskgroupEnabled;
      }
      if (other.LocalBackupEnabled != false) {
        LocalBackupEnabled = other.LocalBackupEnabled;
      }
      if (other.HostnamePrefix.Length != 0) {
        HostnamePrefix = other.HostnamePrefix;
      }
      if (other.diagnosticsDataCollectionOptions_ != null) {
        if (diagnosticsDataCollectionOptions_ == null) {
          DiagnosticsDataCollectionOptions = new global::Google.Cloud.OracleDatabase.V1.DataCollectionOptions();
        }
        DiagnosticsDataCollectionOptions.MergeFrom(other.DiagnosticsDataCollectionOptions);
      }
      if (other.State != global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State.Unspecified) {
        State = other.State;
      }
      if (other.ScanListenerPortTcp != 0) {
        ScanListenerPortTcp = other.ScanListenerPortTcp;
      }
      if (other.ScanListenerPortTcpSsl != 0) {
        ScanListenerPortTcpSsl = other.ScanListenerPortTcpSsl;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.ScanDns.Length != 0) {
        ScanDns = other.ScanDns;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.CpuCoreCount != 0) {
        CpuCoreCount = other.CpuCoreCount;
      }
      if (other.SystemVersion.Length != 0) {
        SystemVersion = other.SystemVersion;
      }
      scanIpIds_.Add(other.scanIpIds_);
      if (other.ScanDnsRecordId.Length != 0) {
        ScanDnsRecordId = other.ScanDnsRecordId;
      }
      if (other.OciUrl.Length != 0) {
        OciUrl = other.OciUrl;
      }
      dbServerOcids_.Add(other.dbServerOcids_);
      if (other.CompartmentId.Length != 0) {
        CompartmentId = other.CompartmentId;
      }
      if (other.DnsListenerIp.Length != 0) {
        DnsListenerIp = other.DnsListenerIp;
      }
      if (other.ClusterName.Length != 0) {
        ClusterName = other.ClusterName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ocid = input.ReadString();
            break;
          }
          case 16: {
            LicenseType = (global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType) input.ReadEnum();
            break;
          }
          case 26: {
            GiVersion = input.ReadString();
            break;
          }
          case 34: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 42: {
            sshPublicKeys_.AddEntriesFrom(input, _repeated_sshPublicKeys_codec);
            break;
          }
          case 48: {
            NodeCount = input.ReadInt32();
            break;
          }
          case 58: {
            Shape = input.ReadString();
            break;
          }
          case 69: {
            OcpuCount = input.ReadFloat();
            break;
          }
          case 72: {
            MemorySizeGb = input.ReadInt32();
            break;
          }
          case 80: {
            DbNodeStorageSizeGb = input.ReadInt32();
            break;
          }
          case 88: {
            StorageSizeGb = input.ReadInt32();
            break;
          }
          case 97: {
            DataStorageSizeTb = input.ReadDouble();
            break;
          }
          case 104: {
            DiskRedundancy = (global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy) input.ReadEnum();
            break;
          }
          case 112: {
            SparseDiskgroupEnabled = input.ReadBool();
            break;
          }
          case 120: {
            LocalBackupEnabled = input.ReadBool();
            break;
          }
          case 130: {
            HostnamePrefix = input.ReadString();
            break;
          }
          case 154: {
            if (diagnosticsDataCollectionOptions_ == null) {
              DiagnosticsDataCollectionOptions = new global::Google.Cloud.OracleDatabase.V1.DataCollectionOptions();
            }
            input.ReadMessage(DiagnosticsDataCollectionOptions);
            break;
          }
          case 160: {
            State = (global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State) input.ReadEnum();
            break;
          }
          case 168: {
            ScanListenerPortTcp = input.ReadInt32();
            break;
          }
          case 176: {
            ScanListenerPortTcpSsl = input.ReadInt32();
            break;
          }
          case 186: {
            Domain = input.ReadString();
            break;
          }
          case 194: {
            ScanDns = input.ReadString();
            break;
          }
          case 202: {
            Hostname = input.ReadString();
            break;
          }
          case 208: {
            CpuCoreCount = input.ReadInt32();
            break;
          }
          case 218: {
            SystemVersion = input.ReadString();
            break;
          }
          case 226: {
            scanIpIds_.AddEntriesFrom(input, _repeated_scanIpIds_codec);
            break;
          }
          case 234: {
            ScanDnsRecordId = input.ReadString();
            break;
          }
          case 242: {
            OciUrl = input.ReadString();
            break;
          }
          case 250: {
            dbServerOcids_.AddEntriesFrom(input, _repeated_dbServerOcids_codec);
            break;
          }
          case 258: {
            CompartmentId = input.ReadString();
            break;
          }
          case 282: {
            DnsListenerIp = input.ReadString();
            break;
          }
          case 290: {
            ClusterName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Ocid = input.ReadString();
            break;
          }
          case 16: {
            LicenseType = (global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.LicenseType) input.ReadEnum();
            break;
          }
          case 26: {
            GiVersion = input.ReadString();
            break;
          }
          case 34: {
            if (timeZone_ == null) {
              TimeZone = new global::Google.Type.TimeZone();
            }
            input.ReadMessage(TimeZone);
            break;
          }
          case 42: {
            sshPublicKeys_.AddEntriesFrom(ref input, _repeated_sshPublicKeys_codec);
            break;
          }
          case 48: {
            NodeCount = input.ReadInt32();
            break;
          }
          case 58: {
            Shape = input.ReadString();
            break;
          }
          case 69: {
            OcpuCount = input.ReadFloat();
            break;
          }
          case 72: {
            MemorySizeGb = input.ReadInt32();
            break;
          }
          case 80: {
            DbNodeStorageSizeGb = input.ReadInt32();
            break;
          }
          case 88: {
            StorageSizeGb = input.ReadInt32();
            break;
          }
          case 97: {
            DataStorageSizeTb = input.ReadDouble();
            break;
          }
          case 104: {
            DiskRedundancy = (global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.DiskRedundancy) input.ReadEnum();
            break;
          }
          case 112: {
            SparseDiskgroupEnabled = input.ReadBool();
            break;
          }
          case 120: {
            LocalBackupEnabled = input.ReadBool();
            break;
          }
          case 130: {
            HostnamePrefix = input.ReadString();
            break;
          }
          case 154: {
            if (diagnosticsDataCollectionOptions_ == null) {
              DiagnosticsDataCollectionOptions = new global::Google.Cloud.OracleDatabase.V1.DataCollectionOptions();
            }
            input.ReadMessage(DiagnosticsDataCollectionOptions);
            break;
          }
          case 160: {
            State = (global::Google.Cloud.OracleDatabase.V1.CloudVmClusterProperties.Types.State) input.ReadEnum();
            break;
          }
          case 168: {
            ScanListenerPortTcp = input.ReadInt32();
            break;
          }
          case 176: {
            ScanListenerPortTcpSsl = input.ReadInt32();
            break;
          }
          case 186: {
            Domain = input.ReadString();
            break;
          }
          case 194: {
            ScanDns = input.ReadString();
            break;
          }
          case 202: {
            Hostname = input.ReadString();
            break;
          }
          case 208: {
            CpuCoreCount = input.ReadInt32();
            break;
          }
          case 218: {
            SystemVersion = input.ReadString();
            break;
          }
          case 226: {
            scanIpIds_.AddEntriesFrom(ref input, _repeated_scanIpIds_codec);
            break;
          }
          case 234: {
            ScanDnsRecordId = input.ReadString();
            break;
          }
          case 242: {
            OciUrl = input.ReadString();
            break;
          }
          case 250: {
            dbServerOcids_.AddEntriesFrom(ref input, _repeated_dbServerOcids_codec);
            break;
          }
          case 258: {
            CompartmentId = input.ReadString();
            break;
          }
          case 282: {
            DnsListenerIp = input.ReadString();
            break;
          }
          case 290: {
            ClusterName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CloudVmClusterProperties message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Different licenses supported.
      /// </summary>
      public enum LicenseType {
        /// <summary>
        /// Unspecified
        /// </summary>
        [pbr::OriginalName("LICENSE_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// License included part of offer
        /// </summary>
        [pbr::OriginalName("LICENSE_INCLUDED")] LicenseIncluded = 1,
        /// <summary>
        /// Bring your own license
        /// </summary>
        [pbr::OriginalName("BRING_YOUR_OWN_LICENSE")] BringYourOwnLicense = 2,
      }

      /// <summary>
      /// Types of disk redundancy provided by Oracle.
      /// </summary>
      public enum DiskRedundancy {
        /// <summary>
        /// Unspecified.
        /// </summary>
        [pbr::OriginalName("DISK_REDUNDANCY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// High -  3 way mirror.
        /// </summary>
        [pbr::OriginalName("HIGH")] High = 1,
        /// <summary>
        /// Normal - 2 way mirror.
        /// </summary>
        [pbr::OriginalName("NORMAL")] Normal = 2,
      }

      /// <summary>
      /// The various lifecycle states of the VM cluster.
      /// </summary>
      public enum State {
        /// <summary>
        /// Default unspecified value.
        /// </summary>
        [pbr::OriginalName("STATE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Indicates that the resource is in provisioning state.
        /// </summary>
        [pbr::OriginalName("PROVISIONING")] Provisioning = 1,
        /// <summary>
        /// Indicates that the resource is in available state.
        /// </summary>
        [pbr::OriginalName("AVAILABLE")] Available = 2,
        /// <summary>
        /// Indicates that the resource is in updating state.
        /// </summary>
        [pbr::OriginalName("UPDATING")] Updating = 3,
        /// <summary>
        /// Indicates that the resource is in terminating state.
        /// </summary>
        [pbr::OriginalName("TERMINATING")] Terminating = 4,
        /// <summary>
        /// Indicates that the resource is in terminated state.
        /// </summary>
        [pbr::OriginalName("TERMINATED")] Terminated = 5,
        /// <summary>
        /// Indicates that the resource is in failed state.
        /// </summary>
        [pbr::OriginalName("FAILED")] Failed = 6,
        /// <summary>
        /// Indicates that the resource is in maintenance in progress state.
        /// </summary>
        [pbr::OriginalName("MAINTENANCE_IN_PROGRESS")] MaintenanceInProgress = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// Data collection options for diagnostics.
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class DataCollectionOptions : pb::IMessage<DataCollectionOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DataCollectionOptions> _parser = new pb::MessageParser<DataCollectionOptions>(() => new DataCollectionOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DataCollectionOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Cloud.OracleDatabase.V1.VmClusterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataCollectionOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataCollectionOptions(DataCollectionOptions other) : this() {
      diagnosticsEventsEnabled_ = other.diagnosticsEventsEnabled_;
      healthMonitoringEnabled_ = other.healthMonitoringEnabled_;
      incidentLogsEnabled_ = other.incidentLogsEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataCollectionOptions Clone() {
      return new DataCollectionOptions(this);
    }

    /// <summary>Field number for the "diagnostics_events_enabled" field.</summary>
    public const int DiagnosticsEventsEnabledFieldNumber = 1;
    private bool diagnosticsEventsEnabled_;
    /// <summary>
    /// Optional. Indicates whether diagnostic collection is enabled for the VM
    /// cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DiagnosticsEventsEnabled {
      get { return diagnosticsEventsEnabled_; }
      set {
        diagnosticsEventsEnabled_ = value;
      }
    }

    /// <summary>Field number for the "health_monitoring_enabled" field.</summary>
    public const int HealthMonitoringEnabledFieldNumber = 2;
    private bool healthMonitoringEnabled_;
    /// <summary>
    /// Optional. Indicates whether health monitoring is enabled for the VM cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HealthMonitoringEnabled {
      get { return healthMonitoringEnabled_; }
      set {
        healthMonitoringEnabled_ = value;
      }
    }

    /// <summary>Field number for the "incident_logs_enabled" field.</summary>
    public const int IncidentLogsEnabledFieldNumber = 3;
    private bool incidentLogsEnabled_;
    /// <summary>
    /// Optional. Indicates whether incident logs and trace collection are enabled
    /// for the VM cluster
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IncidentLogsEnabled {
      get { return incidentLogsEnabled_; }
      set {
        incidentLogsEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DataCollectionOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DataCollectionOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiagnosticsEventsEnabled != other.DiagnosticsEventsEnabled) return false;
      if (HealthMonitoringEnabled != other.HealthMonitoringEnabled) return false;
      if (IncidentLogsEnabled != other.IncidentLogsEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DiagnosticsEventsEnabled != false) hash ^= DiagnosticsEventsEnabled.GetHashCode();
      if (HealthMonitoringEnabled != false) hash ^= HealthMonitoringEnabled.GetHashCode();
      if (IncidentLogsEnabled != false) hash ^= IncidentLogsEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DiagnosticsEventsEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(DiagnosticsEventsEnabled);
      }
      if (HealthMonitoringEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(HealthMonitoringEnabled);
      }
      if (IncidentLogsEnabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncidentLogsEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DiagnosticsEventsEnabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(DiagnosticsEventsEnabled);
      }
      if (HealthMonitoringEnabled != false) {
        output.WriteRawTag(16);
        output.WriteBool(HealthMonitoringEnabled);
      }
      if (IncidentLogsEnabled != false) {
        output.WriteRawTag(24);
        output.WriteBool(IncidentLogsEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DiagnosticsEventsEnabled != false) {
        size += 1 + 1;
      }
      if (HealthMonitoringEnabled != false) {
        size += 1 + 1;
      }
      if (IncidentLogsEnabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DataCollectionOptions other) {
      if (other == null) {
        return;
      }
      if (other.DiagnosticsEventsEnabled != false) {
        DiagnosticsEventsEnabled = other.DiagnosticsEventsEnabled;
      }
      if (other.HealthMonitoringEnabled != false) {
        HealthMonitoringEnabled = other.HealthMonitoringEnabled;
      }
      if (other.IncidentLogsEnabled != false) {
        IncidentLogsEnabled = other.IncidentLogsEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DiagnosticsEventsEnabled = input.ReadBool();
            break;
          }
          case 16: {
            HealthMonitoringEnabled = input.ReadBool();
            break;
          }
          case 24: {
            IncidentLogsEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DiagnosticsEventsEnabled = input.ReadBool();
            break;
          }
          case 16: {
            HealthMonitoringEnabled = input.ReadBool();
            break;
          }
          case 24: {
            IncidentLogsEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
