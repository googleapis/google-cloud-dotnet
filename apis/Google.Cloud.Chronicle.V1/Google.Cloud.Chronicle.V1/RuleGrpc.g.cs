// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/chronicle/v1/rule.proto
// </auto-generated>
// Original file comments:
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Chronicle.V1 {
  /// <summary>
  /// RuleService provides interface for user-created rules.
  /// </summary>
  public static partial class RuleService
  {
    static readonly string __ServiceName = "google.cloud.chronicle.v1.RuleService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.CreateRuleRequest> __Marshaller_google_cloud_chronicle_v1_CreateRuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.CreateRuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.Rule> __Marshaller_google_cloud_chronicle_v1_Rule = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.Rule.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.GetRuleRequest> __Marshaller_google_cloud_chronicle_v1_GetRuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.GetRuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListRulesRequest> __Marshaller_google_cloud_chronicle_v1_ListRulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListRulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListRulesResponse> __Marshaller_google_cloud_chronicle_v1_ListRulesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListRulesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.UpdateRuleRequest> __Marshaller_google_cloud_chronicle_v1_UpdateRuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.UpdateRuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.DeleteRuleRequest> __Marshaller_google_cloud_chronicle_v1_DeleteRuleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.DeleteRuleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest> __Marshaller_google_cloud_chronicle_v1_ListRuleRevisionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse> __Marshaller_google_cloud_chronicle_v1_ListRuleRevisionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest> __Marshaller_google_cloud_chronicle_v1_CreateRetrohuntRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest> __Marshaller_google_cloud_chronicle_v1_GetRetrohuntRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.Retrohunt> __Marshaller_google_cloud_chronicle_v1_Retrohunt = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.Retrohunt.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest> __Marshaller_google_cloud_chronicle_v1_ListRetrohuntsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse> __Marshaller_google_cloud_chronicle_v1_ListRetrohuntsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest> __Marshaller_google_cloud_chronicle_v1_GetRuleDeploymentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.RuleDeployment> __Marshaller_google_cloud_chronicle_v1_RuleDeployment = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.RuleDeployment.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest> __Marshaller_google_cloud_chronicle_v1_ListRuleDeploymentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse> __Marshaller_google_cloud_chronicle_v1_ListRuleDeploymentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest> __Marshaller_google_cloud_chronicle_v1_UpdateRuleDeploymentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.CreateRuleRequest, global::Google.Cloud.Chronicle.V1.Rule> __Method_CreateRule = new grpc::Method<global::Google.Cloud.Chronicle.V1.CreateRuleRequest, global::Google.Cloud.Chronicle.V1.Rule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRule",
        __Marshaller_google_cloud_chronicle_v1_CreateRuleRequest,
        __Marshaller_google_cloud_chronicle_v1_Rule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.GetRuleRequest, global::Google.Cloud.Chronicle.V1.Rule> __Method_GetRule = new grpc::Method<global::Google.Cloud.Chronicle.V1.GetRuleRequest, global::Google.Cloud.Chronicle.V1.Rule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRule",
        __Marshaller_google_cloud_chronicle_v1_GetRuleRequest,
        __Marshaller_google_cloud_chronicle_v1_Rule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.ListRulesRequest, global::Google.Cloud.Chronicle.V1.ListRulesResponse> __Method_ListRules = new grpc::Method<global::Google.Cloud.Chronicle.V1.ListRulesRequest, global::Google.Cloud.Chronicle.V1.ListRulesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRules",
        __Marshaller_google_cloud_chronicle_v1_ListRulesRequest,
        __Marshaller_google_cloud_chronicle_v1_ListRulesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.UpdateRuleRequest, global::Google.Cloud.Chronicle.V1.Rule> __Method_UpdateRule = new grpc::Method<global::Google.Cloud.Chronicle.V1.UpdateRuleRequest, global::Google.Cloud.Chronicle.V1.Rule>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRule",
        __Marshaller_google_cloud_chronicle_v1_UpdateRuleRequest,
        __Marshaller_google_cloud_chronicle_v1_Rule);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.DeleteRuleRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteRule = new grpc::Method<global::Google.Cloud.Chronicle.V1.DeleteRuleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRule",
        __Marshaller_google_cloud_chronicle_v1_DeleteRuleRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest, global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse> __Method_ListRuleRevisions = new grpc::Method<global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest, global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRuleRevisions",
        __Marshaller_google_cloud_chronicle_v1_ListRuleRevisionsRequest,
        __Marshaller_google_cloud_chronicle_v1_ListRuleRevisionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest, global::Google.LongRunning.Operation> __Method_CreateRetrohunt = new grpc::Method<global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRetrohunt",
        __Marshaller_google_cloud_chronicle_v1_CreateRetrohuntRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest, global::Google.Cloud.Chronicle.V1.Retrohunt> __Method_GetRetrohunt = new grpc::Method<global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest, global::Google.Cloud.Chronicle.V1.Retrohunt>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRetrohunt",
        __Marshaller_google_cloud_chronicle_v1_GetRetrohuntRequest,
        __Marshaller_google_cloud_chronicle_v1_Retrohunt);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest, global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse> __Method_ListRetrohunts = new grpc::Method<global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest, global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRetrohunts",
        __Marshaller_google_cloud_chronicle_v1_ListRetrohuntsRequest,
        __Marshaller_google_cloud_chronicle_v1_ListRetrohuntsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest, global::Google.Cloud.Chronicle.V1.RuleDeployment> __Method_GetRuleDeployment = new grpc::Method<global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest, global::Google.Cloud.Chronicle.V1.RuleDeployment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRuleDeployment",
        __Marshaller_google_cloud_chronicle_v1_GetRuleDeploymentRequest,
        __Marshaller_google_cloud_chronicle_v1_RuleDeployment);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest, global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse> __Method_ListRuleDeployments = new grpc::Method<global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest, global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRuleDeployments",
        __Marshaller_google_cloud_chronicle_v1_ListRuleDeploymentsRequest,
        __Marshaller_google_cloud_chronicle_v1_ListRuleDeploymentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest, global::Google.Cloud.Chronicle.V1.RuleDeployment> __Method_UpdateRuleDeployment = new grpc::Method<global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest, global::Google.Cloud.Chronicle.V1.RuleDeployment>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRuleDeployment",
        __Marshaller_google_cloud_chronicle_v1_UpdateRuleDeploymentRequest,
        __Marshaller_google_cloud_chronicle_v1_RuleDeployment);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Chronicle.V1.RuleReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RuleService</summary>
    [grpc::BindServiceMethod(typeof(RuleService), "BindService")]
    public abstract partial class RuleServiceBase
    {
      /// <summary>
      /// Creates a new Rule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.Rule> CreateRule(global::Google.Cloud.Chronicle.V1.CreateRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a Rule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.Rule> GetRule(global::Google.Cloud.Chronicle.V1.GetRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists Rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.ListRulesResponse> ListRules(global::Google.Cloud.Chronicle.V1.ListRulesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a Rule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.Rule> UpdateRule(global::Google.Cloud.Chronicle.V1.UpdateRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a Rule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRule(global::Google.Cloud.Chronicle.V1.DeleteRuleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all revisions of the rule.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse> ListRuleRevisions(global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a Retrohunt.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreateRetrohunt(global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a Retrohunt.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.Retrohunt> GetRetrohunt(global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Retrohunts.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse> ListRetrohunts(global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a RuleDeployment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.RuleDeployment> GetRuleDeployment(global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists RuleDeployments across all Rules.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse> ListRuleDeployments(global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a RuleDeployment.
      /// Failures are not necessarily atomic. If there is a request to update
      /// multiple fields, and any update to a single field fails, an error will be
      /// returned, but other fields may remain successfully updated.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.RuleDeployment> UpdateRuleDeployment(global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RuleService</summary>
    public partial class RuleServiceClient : grpc::ClientBase<RuleServiceClient>
    {
      /// <summary>Creates a new client for RuleService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RuleServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RuleService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public RuleServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RuleServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected RuleServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a new Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.Rule CreateRule(global::Google.Cloud.Chronicle.V1.CreateRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.Rule CreateRule(global::Google.Cloud.Chronicle.V1.CreateRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRule, null, options, request);
      }
      /// <summary>
      /// Creates a new Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.Rule> CreateRuleAsync(global::Google.Cloud.Chronicle.V1.CreateRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.Rule> CreateRuleAsync(global::Google.Cloud.Chronicle.V1.CreateRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRule, null, options, request);
      }
      /// <summary>
      /// Gets a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.Rule GetRule(global::Google.Cloud.Chronicle.V1.GetRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.Rule GetRule(global::Google.Cloud.Chronicle.V1.GetRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRule, null, options, request);
      }
      /// <summary>
      /// Gets a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.Rule> GetRuleAsync(global::Google.Cloud.Chronicle.V1.GetRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.Rule> GetRuleAsync(global::Google.Cloud.Chronicle.V1.GetRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRule, null, options, request);
      }
      /// <summary>
      /// Lists Rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListRulesResponse ListRules(global::Google.Cloud.Chronicle.V1.ListRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListRulesResponse ListRules(global::Google.Cloud.Chronicle.V1.ListRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRules, null, options, request);
      }
      /// <summary>
      /// Lists Rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListRulesResponse> ListRulesAsync(global::Google.Cloud.Chronicle.V1.ListRulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists Rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListRulesResponse> ListRulesAsync(global::Google.Cloud.Chronicle.V1.ListRulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRules, null, options, request);
      }
      /// <summary>
      /// Updates a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.Rule UpdateRule(global::Google.Cloud.Chronicle.V1.UpdateRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.Rule UpdateRule(global::Google.Cloud.Chronicle.V1.UpdateRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRule, null, options, request);
      }
      /// <summary>
      /// Updates a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.Rule> UpdateRuleAsync(global::Google.Cloud.Chronicle.V1.UpdateRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.Rule> UpdateRuleAsync(global::Google.Cloud.Chronicle.V1.UpdateRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRule, null, options, request);
      }
      /// <summary>
      /// Deletes a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteRule(global::Google.Cloud.Chronicle.V1.DeleteRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteRule(global::Google.Cloud.Chronicle.V1.DeleteRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRule, null, options, request);
      }
      /// <summary>
      /// Deletes a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRuleAsync(global::Google.Cloud.Chronicle.V1.DeleteRuleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRuleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a Rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRuleAsync(global::Google.Cloud.Chronicle.V1.DeleteRuleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRule, null, options, request);
      }
      /// <summary>
      /// Lists all revisions of the rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse ListRuleRevisions(global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRuleRevisions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all revisions of the rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse ListRuleRevisions(global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRuleRevisions, null, options, request);
      }
      /// <summary>
      /// Lists all revisions of the rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse> ListRuleRevisionsAsync(global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRuleRevisionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all revisions of the rule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse> ListRuleRevisionsAsync(global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRuleRevisions, null, options, request);
      }
      /// <summary>
      /// Create a Retrohunt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateRetrohunt(global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRetrohunt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a Retrohunt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreateRetrohunt(global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRetrohunt, null, options, request);
      }
      /// <summary>
      /// Create a Retrohunt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateRetrohuntAsync(global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRetrohuntAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a Retrohunt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreateRetrohuntAsync(global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRetrohunt, null, options, request);
      }
      /// <summary>
      /// Get a Retrohunt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.Retrohunt GetRetrohunt(global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRetrohunt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a Retrohunt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.Retrohunt GetRetrohunt(global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRetrohunt, null, options, request);
      }
      /// <summary>
      /// Get a Retrohunt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.Retrohunt> GetRetrohuntAsync(global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRetrohuntAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a Retrohunt.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.Retrohunt> GetRetrohuntAsync(global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRetrohunt, null, options, request);
      }
      /// <summary>
      /// List Retrohunts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse ListRetrohunts(global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRetrohunts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Retrohunts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse ListRetrohunts(global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRetrohunts, null, options, request);
      }
      /// <summary>
      /// List Retrohunts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse> ListRetrohuntsAsync(global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRetrohuntsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Retrohunts.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse> ListRetrohuntsAsync(global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRetrohunts, null, options, request);
      }
      /// <summary>
      /// Gets a RuleDeployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.RuleDeployment GetRuleDeployment(global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRuleDeployment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a RuleDeployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.RuleDeployment GetRuleDeployment(global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRuleDeployment, null, options, request);
      }
      /// <summary>
      /// Gets a RuleDeployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.RuleDeployment> GetRuleDeploymentAsync(global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRuleDeploymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a RuleDeployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.RuleDeployment> GetRuleDeploymentAsync(global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRuleDeployment, null, options, request);
      }
      /// <summary>
      /// Lists RuleDeployments across all Rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse ListRuleDeployments(global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRuleDeployments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists RuleDeployments across all Rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse ListRuleDeployments(global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRuleDeployments, null, options, request);
      }
      /// <summary>
      /// Lists RuleDeployments across all Rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse> ListRuleDeploymentsAsync(global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRuleDeploymentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists RuleDeployments across all Rules.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse> ListRuleDeploymentsAsync(global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRuleDeployments, null, options, request);
      }
      /// <summary>
      /// Updates a RuleDeployment.
      /// Failures are not necessarily atomic. If there is a request to update
      /// multiple fields, and any update to a single field fails, an error will be
      /// returned, but other fields may remain successfully updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.RuleDeployment UpdateRuleDeployment(global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRuleDeployment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a RuleDeployment.
      /// Failures are not necessarily atomic. If there is a request to update
      /// multiple fields, and any update to a single field fails, an error will be
      /// returned, but other fields may remain successfully updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.RuleDeployment UpdateRuleDeployment(global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRuleDeployment, null, options, request);
      }
      /// <summary>
      /// Updates a RuleDeployment.
      /// Failures are not necessarily atomic. If there is a request to update
      /// multiple fields, and any update to a single field fails, an error will be
      /// returned, but other fields may remain successfully updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.RuleDeployment> UpdateRuleDeploymentAsync(global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRuleDeploymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a RuleDeployment.
      /// Failures are not necessarily atomic. If there is a request to update
      /// multiple fields, and any update to a single field fails, an error will be
      /// returned, but other fields may remain successfully updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.RuleDeployment> UpdateRuleDeploymentAsync(global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRuleDeployment, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override RuleServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RuleServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(RuleServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateRule, serviceImpl.CreateRule)
          .AddMethod(__Method_GetRule, serviceImpl.GetRule)
          .AddMethod(__Method_ListRules, serviceImpl.ListRules)
          .AddMethod(__Method_UpdateRule, serviceImpl.UpdateRule)
          .AddMethod(__Method_DeleteRule, serviceImpl.DeleteRule)
          .AddMethod(__Method_ListRuleRevisions, serviceImpl.ListRuleRevisions)
          .AddMethod(__Method_CreateRetrohunt, serviceImpl.CreateRetrohunt)
          .AddMethod(__Method_GetRetrohunt, serviceImpl.GetRetrohunt)
          .AddMethod(__Method_ListRetrohunts, serviceImpl.ListRetrohunts)
          .AddMethod(__Method_GetRuleDeployment, serviceImpl.GetRuleDeployment)
          .AddMethod(__Method_ListRuleDeployments, serviceImpl.ListRuleDeployments)
          .AddMethod(__Method_UpdateRuleDeployment, serviceImpl.UpdateRuleDeployment).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RuleServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.CreateRuleRequest, global::Google.Cloud.Chronicle.V1.Rule>(serviceImpl.CreateRule));
      serviceBinder.AddMethod(__Method_GetRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.GetRuleRequest, global::Google.Cloud.Chronicle.V1.Rule>(serviceImpl.GetRule));
      serviceBinder.AddMethod(__Method_ListRules, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.ListRulesRequest, global::Google.Cloud.Chronicle.V1.ListRulesResponse>(serviceImpl.ListRules));
      serviceBinder.AddMethod(__Method_UpdateRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.UpdateRuleRequest, global::Google.Cloud.Chronicle.V1.Rule>(serviceImpl.UpdateRule));
      serviceBinder.AddMethod(__Method_DeleteRule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.DeleteRuleRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteRule));
      serviceBinder.AddMethod(__Method_ListRuleRevisions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.ListRuleRevisionsRequest, global::Google.Cloud.Chronicle.V1.ListRuleRevisionsResponse>(serviceImpl.ListRuleRevisions));
      serviceBinder.AddMethod(__Method_CreateRetrohunt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.CreateRetrohuntRequest, global::Google.LongRunning.Operation>(serviceImpl.CreateRetrohunt));
      serviceBinder.AddMethod(__Method_GetRetrohunt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.GetRetrohuntRequest, global::Google.Cloud.Chronicle.V1.Retrohunt>(serviceImpl.GetRetrohunt));
      serviceBinder.AddMethod(__Method_ListRetrohunts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.ListRetrohuntsRequest, global::Google.Cloud.Chronicle.V1.ListRetrohuntsResponse>(serviceImpl.ListRetrohunts));
      serviceBinder.AddMethod(__Method_GetRuleDeployment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.GetRuleDeploymentRequest, global::Google.Cloud.Chronicle.V1.RuleDeployment>(serviceImpl.GetRuleDeployment));
      serviceBinder.AddMethod(__Method_ListRuleDeployments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsRequest, global::Google.Cloud.Chronicle.V1.ListRuleDeploymentsResponse>(serviceImpl.ListRuleDeployments));
      serviceBinder.AddMethod(__Method_UpdateRuleDeployment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.UpdateRuleDeploymentRequest, global::Google.Cloud.Chronicle.V1.RuleDeployment>(serviceImpl.UpdateRuleDeployment));
    }

  }
}
#endregion
