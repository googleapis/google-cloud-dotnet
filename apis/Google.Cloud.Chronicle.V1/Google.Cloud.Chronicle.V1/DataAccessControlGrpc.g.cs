// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/cloud/chronicle/v1/data_access_control.proto
// </auto-generated>
// Original file comments:
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Chronicle.V1 {
  /// <summary>
  /// DataAccessControlService exposes resources and endpoints related to data
  /// access control.
  /// </summary>
  public static partial class DataAccessControlService
  {
    static readonly string __ServiceName = "google.cloud.chronicle.v1.DataAccessControlService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest> __Marshaller_google_cloud_chronicle_v1_CreateDataAccessLabelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.DataAccessLabel> __Marshaller_google_cloud_chronicle_v1_DataAccessLabel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.DataAccessLabel.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest> __Marshaller_google_cloud_chronicle_v1_GetDataAccessLabelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest> __Marshaller_google_cloud_chronicle_v1_ListDataAccessLabelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse> __Marshaller_google_cloud_chronicle_v1_ListDataAccessLabelsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest> __Marshaller_google_cloud_chronicle_v1_UpdateDataAccessLabelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest> __Marshaller_google_cloud_chronicle_v1_DeleteDataAccessLabelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest> __Marshaller_google_cloud_chronicle_v1_CreateDataAccessScopeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.DataAccessScope> __Marshaller_google_cloud_chronicle_v1_DataAccessScope = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.DataAccessScope.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest> __Marshaller_google_cloud_chronicle_v1_GetDataAccessScopeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest> __Marshaller_google_cloud_chronicle_v1_ListDataAccessScopesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse> __Marshaller_google_cloud_chronicle_v1_ListDataAccessScopesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest> __Marshaller_google_cloud_chronicle_v1_UpdateDataAccessScopeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest> __Marshaller_google_cloud_chronicle_v1_DeleteDataAccessScopeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel> __Method_CreateDataAccessLabel = new grpc::Method<global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDataAccessLabel",
        __Marshaller_google_cloud_chronicle_v1_CreateDataAccessLabelRequest,
        __Marshaller_google_cloud_chronicle_v1_DataAccessLabel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel> __Method_GetDataAccessLabel = new grpc::Method<global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataAccessLabel",
        __Marshaller_google_cloud_chronicle_v1_GetDataAccessLabelRequest,
        __Marshaller_google_cloud_chronicle_v1_DataAccessLabel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest, global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse> __Method_ListDataAccessLabels = new grpc::Method<global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest, global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDataAccessLabels",
        __Marshaller_google_cloud_chronicle_v1_ListDataAccessLabelsRequest,
        __Marshaller_google_cloud_chronicle_v1_ListDataAccessLabelsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel> __Method_UpdateDataAccessLabel = new grpc::Method<global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDataAccessLabel",
        __Marshaller_google_cloud_chronicle_v1_UpdateDataAccessLabelRequest,
        __Marshaller_google_cloud_chronicle_v1_DataAccessLabel);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDataAccessLabel = new grpc::Method<global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDataAccessLabel",
        __Marshaller_google_cloud_chronicle_v1_DeleteDataAccessLabelRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope> __Method_CreateDataAccessScope = new grpc::Method<global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDataAccessScope",
        __Marshaller_google_cloud_chronicle_v1_CreateDataAccessScopeRequest,
        __Marshaller_google_cloud_chronicle_v1_DataAccessScope);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope> __Method_GetDataAccessScope = new grpc::Method<global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDataAccessScope",
        __Marshaller_google_cloud_chronicle_v1_GetDataAccessScopeRequest,
        __Marshaller_google_cloud_chronicle_v1_DataAccessScope);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest, global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse> __Method_ListDataAccessScopes = new grpc::Method<global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest, global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDataAccessScopes",
        __Marshaller_google_cloud_chronicle_v1_ListDataAccessScopesRequest,
        __Marshaller_google_cloud_chronicle_v1_ListDataAccessScopesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope> __Method_UpdateDataAccessScope = new grpc::Method<global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDataAccessScope",
        __Marshaller_google_cloud_chronicle_v1_UpdateDataAccessScopeRequest,
        __Marshaller_google_cloud_chronicle_v1_DataAccessScope);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteDataAccessScope = new grpc::Method<global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDataAccessScope",
        __Marshaller_google_cloud_chronicle_v1_DeleteDataAccessScopeRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Chronicle.V1.DataAccessControlReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DataAccessControlService</summary>
    [grpc::BindServiceMethod(typeof(DataAccessControlService), "BindService")]
    public abstract partial class DataAccessControlServiceBase
    {
      /// <summary>
      /// Creates a data access label.
      /// Data access labels are applied to incoming event data and selected in data
      /// access scopes (another resource), and only users with scopes containing the
      /// label can see data with that label. Currently, the data access label
      /// resource only includes custom labels, which are labels that correspond
      /// to UDM queries over event data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.DataAccessLabel> CreateDataAccessLabel(global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a data access label.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.DataAccessLabel> GetDataAccessLabel(global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all data access labels for the customer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse> ListDataAccessLabels(global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a data access label.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.DataAccessLabel> UpdateDataAccessLabel(global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a data access label. When a label is deleted, new
      /// data that enters in the system will not receive the label, but the label
      /// will not be removed from old data that still refers to it.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataAccessLabel(global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a data access scope.
      /// Data access scope is a combination of allowed and denied labels attached
      /// to a permission group. If a scope has allowed labels A and B and denied
      /// labels C and D, then the group of people attached to the scope
      /// will have permissions to see all events labeled with A or B (or both) and
      /// not labeled with either C or D.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.DataAccessScope> CreateDataAccessScope(global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves an existing data access scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.DataAccessScope> GetDataAccessScope(global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all existing data access scopes for the customer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse> ListDataAccessScopes(global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a data access scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Chronicle.V1.DataAccessScope> UpdateDataAccessScope(global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a data access scope.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataAccessScope(global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DataAccessControlService</summary>
    public partial class DataAccessControlServiceClient : grpc::ClientBase<DataAccessControlServiceClient>
    {
      /// <summary>Creates a new client for DataAccessControlService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataAccessControlServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DataAccessControlService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public DataAccessControlServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataAccessControlServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected DataAccessControlServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a data access label.
      /// Data access labels are applied to incoming event data and selected in data
      /// access scopes (another resource), and only users with scopes containing the
      /// label can see data with that label. Currently, the data access label
      /// resource only includes custom labels, which are labels that correspond
      /// to UDM queries over event data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessLabel CreateDataAccessLabel(global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataAccessLabel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a data access label.
      /// Data access labels are applied to incoming event data and selected in data
      /// access scopes (another resource), and only users with scopes containing the
      /// label can see data with that label. Currently, the data access label
      /// resource only includes custom labels, which are labels that correspond
      /// to UDM queries over event data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessLabel CreateDataAccessLabel(global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDataAccessLabel, null, options, request);
      }
      /// <summary>
      /// Creates a data access label.
      /// Data access labels are applied to incoming event data and selected in data
      /// access scopes (another resource), and only users with scopes containing the
      /// label can see data with that label. Currently, the data access label
      /// resource only includes custom labels, which are labels that correspond
      /// to UDM queries over event data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessLabel> CreateDataAccessLabelAsync(global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataAccessLabelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a data access label.
      /// Data access labels are applied to incoming event data and selected in data
      /// access scopes (another resource), and only users with scopes containing the
      /// label can see data with that label. Currently, the data access label
      /// resource only includes custom labels, which are labels that correspond
      /// to UDM queries over event data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessLabel> CreateDataAccessLabelAsync(global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDataAccessLabel, null, options, request);
      }
      /// <summary>
      /// Gets a data access label.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessLabel GetDataAccessLabel(global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataAccessLabel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a data access label.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessLabel GetDataAccessLabel(global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataAccessLabel, null, options, request);
      }
      /// <summary>
      /// Gets a data access label.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessLabel> GetDataAccessLabelAsync(global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataAccessLabelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a data access label.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessLabel> GetDataAccessLabelAsync(global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataAccessLabel, null, options, request);
      }
      /// <summary>
      /// Lists all data access labels for the customer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse ListDataAccessLabels(global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataAccessLabels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all data access labels for the customer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse ListDataAccessLabels(global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDataAccessLabels, null, options, request);
      }
      /// <summary>
      /// Lists all data access labels for the customer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse> ListDataAccessLabelsAsync(global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataAccessLabelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all data access labels for the customer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse> ListDataAccessLabelsAsync(global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDataAccessLabels, null, options, request);
      }
      /// <summary>
      /// Updates a data access label.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessLabel UpdateDataAccessLabel(global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataAccessLabel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a data access label.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessLabel UpdateDataAccessLabel(global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDataAccessLabel, null, options, request);
      }
      /// <summary>
      /// Updates a data access label.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessLabel> UpdateDataAccessLabelAsync(global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataAccessLabelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a data access label.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessLabel> UpdateDataAccessLabelAsync(global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDataAccessLabel, null, options, request);
      }
      /// <summary>
      /// Deletes a data access label. When a label is deleted, new
      /// data that enters in the system will not receive the label, but the label
      /// will not be removed from old data that still refers to it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataAccessLabel(global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataAccessLabel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a data access label. When a label is deleted, new
      /// data that enters in the system will not receive the label, but the label
      /// will not be removed from old data that still refers to it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataAccessLabel(global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDataAccessLabel, null, options, request);
      }
      /// <summary>
      /// Deletes a data access label. When a label is deleted, new
      /// data that enters in the system will not receive the label, but the label
      /// will not be removed from old data that still refers to it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataAccessLabelAsync(global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataAccessLabelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a data access label. When a label is deleted, new
      /// data that enters in the system will not receive the label, but the label
      /// will not be removed from old data that still refers to it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataAccessLabelAsync(global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDataAccessLabel, null, options, request);
      }
      /// <summary>
      /// Creates a data access scope.
      /// Data access scope is a combination of allowed and denied labels attached
      /// to a permission group. If a scope has allowed labels A and B and denied
      /// labels C and D, then the group of people attached to the scope
      /// will have permissions to see all events labeled with A or B (or both) and
      /// not labeled with either C or D.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessScope CreateDataAccessScope(global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataAccessScope(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a data access scope.
      /// Data access scope is a combination of allowed and denied labels attached
      /// to a permission group. If a scope has allowed labels A and B and denied
      /// labels C and D, then the group of people attached to the scope
      /// will have permissions to see all events labeled with A or B (or both) and
      /// not labeled with either C or D.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessScope CreateDataAccessScope(global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDataAccessScope, null, options, request);
      }
      /// <summary>
      /// Creates a data access scope.
      /// Data access scope is a combination of allowed and denied labels attached
      /// to a permission group. If a scope has allowed labels A and B and denied
      /// labels C and D, then the group of people attached to the scope
      /// will have permissions to see all events labeled with A or B (or both) and
      /// not labeled with either C or D.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessScope> CreateDataAccessScopeAsync(global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDataAccessScopeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a data access scope.
      /// Data access scope is a combination of allowed and denied labels attached
      /// to a permission group. If a scope has allowed labels A and B and denied
      /// labels C and D, then the group of people attached to the scope
      /// will have permissions to see all events labeled with A or B (or both) and
      /// not labeled with either C or D.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessScope> CreateDataAccessScopeAsync(global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDataAccessScope, null, options, request);
      }
      /// <summary>
      /// Retrieves an existing data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessScope GetDataAccessScope(global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataAccessScope(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an existing data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessScope GetDataAccessScope(global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDataAccessScope, null, options, request);
      }
      /// <summary>
      /// Retrieves an existing data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessScope> GetDataAccessScopeAsync(global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDataAccessScopeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves an existing data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessScope> GetDataAccessScopeAsync(global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDataAccessScope, null, options, request);
      }
      /// <summary>
      /// Lists all existing data access scopes for the customer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse ListDataAccessScopes(global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataAccessScopes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all existing data access scopes for the customer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse ListDataAccessScopes(global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDataAccessScopes, null, options, request);
      }
      /// <summary>
      /// Lists all existing data access scopes for the customer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse> ListDataAccessScopesAsync(global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDataAccessScopesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all existing data access scopes for the customer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse> ListDataAccessScopesAsync(global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDataAccessScopes, null, options, request);
      }
      /// <summary>
      /// Updates a data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessScope UpdateDataAccessScope(global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataAccessScope(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Chronicle.V1.DataAccessScope UpdateDataAccessScope(global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDataAccessScope, null, options, request);
      }
      /// <summary>
      /// Updates a data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessScope> UpdateDataAccessScopeAsync(global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateDataAccessScopeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Chronicle.V1.DataAccessScope> UpdateDataAccessScopeAsync(global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDataAccessScope, null, options, request);
      }
      /// <summary>
      /// Deletes a data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataAccessScope(global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataAccessScope(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteDataAccessScope(global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDataAccessScope, null, options, request);
      }
      /// <summary>
      /// Deletes a data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataAccessScopeAsync(global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteDataAccessScopeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a data access scope.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteDataAccessScopeAsync(global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDataAccessScope, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override DataAccessControlServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DataAccessControlServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(DataAccessControlServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateDataAccessLabel, serviceImpl.CreateDataAccessLabel)
          .AddMethod(__Method_GetDataAccessLabel, serviceImpl.GetDataAccessLabel)
          .AddMethod(__Method_ListDataAccessLabels, serviceImpl.ListDataAccessLabels)
          .AddMethod(__Method_UpdateDataAccessLabel, serviceImpl.UpdateDataAccessLabel)
          .AddMethod(__Method_DeleteDataAccessLabel, serviceImpl.DeleteDataAccessLabel)
          .AddMethod(__Method_CreateDataAccessScope, serviceImpl.CreateDataAccessScope)
          .AddMethod(__Method_GetDataAccessScope, serviceImpl.GetDataAccessScope)
          .AddMethod(__Method_ListDataAccessScopes, serviceImpl.ListDataAccessScopes)
          .AddMethod(__Method_UpdateDataAccessScope, serviceImpl.UpdateDataAccessScope)
          .AddMethod(__Method_DeleteDataAccessScope, serviceImpl.DeleteDataAccessScope).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, DataAccessControlServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateDataAccessLabel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.CreateDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel>(serviceImpl.CreateDataAccessLabel));
      serviceBinder.AddMethod(__Method_GetDataAccessLabel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.GetDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel>(serviceImpl.GetDataAccessLabel));
      serviceBinder.AddMethod(__Method_ListDataAccessLabels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsRequest, global::Google.Cloud.Chronicle.V1.ListDataAccessLabelsResponse>(serviceImpl.ListDataAccessLabels));
      serviceBinder.AddMethod(__Method_UpdateDataAccessLabel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.UpdateDataAccessLabelRequest, global::Google.Cloud.Chronicle.V1.DataAccessLabel>(serviceImpl.UpdateDataAccessLabel));
      serviceBinder.AddMethod(__Method_DeleteDataAccessLabel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.DeleteDataAccessLabelRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDataAccessLabel));
      serviceBinder.AddMethod(__Method_CreateDataAccessScope, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.CreateDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope>(serviceImpl.CreateDataAccessScope));
      serviceBinder.AddMethod(__Method_GetDataAccessScope, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.GetDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope>(serviceImpl.GetDataAccessScope));
      serviceBinder.AddMethod(__Method_ListDataAccessScopes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.ListDataAccessScopesRequest, global::Google.Cloud.Chronicle.V1.ListDataAccessScopesResponse>(serviceImpl.ListDataAccessScopes));
      serviceBinder.AddMethod(__Method_UpdateDataAccessScope, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.UpdateDataAccessScopeRequest, global::Google.Cloud.Chronicle.V1.DataAccessScope>(serviceImpl.UpdateDataAccessScope));
      serviceBinder.AddMethod(__Method_DeleteDataAccessScope, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Chronicle.V1.DeleteDataAccessScopeRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteDataAccessScope));
    }

  }
}
#endregion
