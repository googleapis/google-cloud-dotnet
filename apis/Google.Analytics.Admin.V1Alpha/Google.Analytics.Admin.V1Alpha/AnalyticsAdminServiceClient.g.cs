// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated code. DO NOT EDIT!

#pragma warning disable CS8981
using gax = Google.Api.Gax;
using gaxgrpc = Google.Api.Gax.Grpc;
using grpccore = Grpc.Core;
using grpcinter = Grpc.Core.Interceptors;
using mel = Microsoft.Extensions.Logging;
using proto = Google.Protobuf;
using sc = System.Collections;
using scg = System.Collections.Generic;
using sco = System.Collections.ObjectModel;
using st = System.Threading;
using stt = System.Threading.Tasks;
using sys = System;
using wkt = Google.Protobuf.WellKnownTypes;

namespace Google.Analytics.Admin.V1Alpha
{
    /// <summary>Settings for <see cref="AnalyticsAdminServiceClient"/> instances.</summary>
    public sealed partial class AnalyticsAdminServiceSettings : gaxgrpc::ServiceSettingsBase
    {
        /// <summary>Get a new instance of the default <see cref="AnalyticsAdminServiceSettings"/>.</summary>
        /// <returns>A new instance of the default <see cref="AnalyticsAdminServiceSettings"/>.</returns>
        public static AnalyticsAdminServiceSettings GetDefault() => new AnalyticsAdminServiceSettings();

        /// <summary>
        /// Constructs a new <see cref="AnalyticsAdminServiceSettings"/> object with default settings.
        /// </summary>
        public AnalyticsAdminServiceSettings()
        {
        }

        private AnalyticsAdminServiceSettings(AnalyticsAdminServiceSettings existing) : base(existing)
        {
            gax::GaxPreconditions.CheckNotNull(existing, nameof(existing));
            GetAccountSettings = existing.GetAccountSettings;
            ListAccountsSettings = existing.ListAccountsSettings;
            DeleteAccountSettings = existing.DeleteAccountSettings;
            UpdateAccountSettings = existing.UpdateAccountSettings;
            ProvisionAccountTicketSettings = existing.ProvisionAccountTicketSettings;
            ListAccountSummariesSettings = existing.ListAccountSummariesSettings;
            GetPropertySettings = existing.GetPropertySettings;
            ListPropertiesSettings = existing.ListPropertiesSettings;
            CreatePropertySettings = existing.CreatePropertySettings;
            DeletePropertySettings = existing.DeletePropertySettings;
            UpdatePropertySettings = existing.UpdatePropertySettings;
            CreateFirebaseLinkSettings = existing.CreateFirebaseLinkSettings;
            DeleteFirebaseLinkSettings = existing.DeleteFirebaseLinkSettings;
            ListFirebaseLinksSettings = existing.ListFirebaseLinksSettings;
            GetGlobalSiteTagSettings = existing.GetGlobalSiteTagSettings;
            CreateGoogleAdsLinkSettings = existing.CreateGoogleAdsLinkSettings;
            UpdateGoogleAdsLinkSettings = existing.UpdateGoogleAdsLinkSettings;
            DeleteGoogleAdsLinkSettings = existing.DeleteGoogleAdsLinkSettings;
            ListGoogleAdsLinksSettings = existing.ListGoogleAdsLinksSettings;
            GetDataSharingSettingsSettings = existing.GetDataSharingSettingsSettings;
            GetMeasurementProtocolSecretSettings = existing.GetMeasurementProtocolSecretSettings;
            ListMeasurementProtocolSecretsSettings = existing.ListMeasurementProtocolSecretsSettings;
            CreateMeasurementProtocolSecretSettings = existing.CreateMeasurementProtocolSecretSettings;
            DeleteMeasurementProtocolSecretSettings = existing.DeleteMeasurementProtocolSecretSettings;
            UpdateMeasurementProtocolSecretSettings = existing.UpdateMeasurementProtocolSecretSettings;
            AcknowledgeUserDataCollectionSettings = existing.AcknowledgeUserDataCollectionSettings;
            GetSKAdNetworkConversionValueSchemaSettings = existing.GetSKAdNetworkConversionValueSchemaSettings;
            CreateSKAdNetworkConversionValueSchemaSettings = existing.CreateSKAdNetworkConversionValueSchemaSettings;
            DeleteSKAdNetworkConversionValueSchemaSettings = existing.DeleteSKAdNetworkConversionValueSchemaSettings;
            UpdateSKAdNetworkConversionValueSchemaSettings = existing.UpdateSKAdNetworkConversionValueSchemaSettings;
            ListSKAdNetworkConversionValueSchemasSettings = existing.ListSKAdNetworkConversionValueSchemasSettings;
            SearchChangeHistoryEventsSettings = existing.SearchChangeHistoryEventsSettings;
            GetGoogleSignalsSettingsSettings = existing.GetGoogleSignalsSettingsSettings;
            UpdateGoogleSignalsSettingsSettings = existing.UpdateGoogleSignalsSettingsSettings;
            CreateConversionEventSettings = existing.CreateConversionEventSettings;
            UpdateConversionEventSettings = existing.UpdateConversionEventSettings;
            GetConversionEventSettings = existing.GetConversionEventSettings;
            DeleteConversionEventSettings = existing.DeleteConversionEventSettings;
            ListConversionEventsSettings = existing.ListConversionEventsSettings;
            CreateKeyEventSettings = existing.CreateKeyEventSettings;
            UpdateKeyEventSettings = existing.UpdateKeyEventSettings;
            GetKeyEventSettings = existing.GetKeyEventSettings;
            DeleteKeyEventSettings = existing.DeleteKeyEventSettings;
            ListKeyEventsSettings = existing.ListKeyEventsSettings;
            GetDisplayVideo360AdvertiserLinkSettings = existing.GetDisplayVideo360AdvertiserLinkSettings;
            ListDisplayVideo360AdvertiserLinksSettings = existing.ListDisplayVideo360AdvertiserLinksSettings;
            CreateDisplayVideo360AdvertiserLinkSettings = existing.CreateDisplayVideo360AdvertiserLinkSettings;
            DeleteDisplayVideo360AdvertiserLinkSettings = existing.DeleteDisplayVideo360AdvertiserLinkSettings;
            UpdateDisplayVideo360AdvertiserLinkSettings = existing.UpdateDisplayVideo360AdvertiserLinkSettings;
            GetDisplayVideo360AdvertiserLinkProposalSettings = existing.GetDisplayVideo360AdvertiserLinkProposalSettings;
            ListDisplayVideo360AdvertiserLinkProposalsSettings = existing.ListDisplayVideo360AdvertiserLinkProposalsSettings;
            CreateDisplayVideo360AdvertiserLinkProposalSettings = existing.CreateDisplayVideo360AdvertiserLinkProposalSettings;
            DeleteDisplayVideo360AdvertiserLinkProposalSettings = existing.DeleteDisplayVideo360AdvertiserLinkProposalSettings;
            ApproveDisplayVideo360AdvertiserLinkProposalSettings = existing.ApproveDisplayVideo360AdvertiserLinkProposalSettings;
            CancelDisplayVideo360AdvertiserLinkProposalSettings = existing.CancelDisplayVideo360AdvertiserLinkProposalSettings;
            CreateCustomDimensionSettings = existing.CreateCustomDimensionSettings;
            UpdateCustomDimensionSettings = existing.UpdateCustomDimensionSettings;
            ListCustomDimensionsSettings = existing.ListCustomDimensionsSettings;
            ArchiveCustomDimensionSettings = existing.ArchiveCustomDimensionSettings;
            GetCustomDimensionSettings = existing.GetCustomDimensionSettings;
            CreateCustomMetricSettings = existing.CreateCustomMetricSettings;
            UpdateCustomMetricSettings = existing.UpdateCustomMetricSettings;
            ListCustomMetricsSettings = existing.ListCustomMetricsSettings;
            ArchiveCustomMetricSettings = existing.ArchiveCustomMetricSettings;
            GetCustomMetricSettings = existing.GetCustomMetricSettings;
            GetDataRetentionSettingsSettings = existing.GetDataRetentionSettingsSettings;
            UpdateDataRetentionSettingsSettings = existing.UpdateDataRetentionSettingsSettings;
            CreateDataStreamSettings = existing.CreateDataStreamSettings;
            DeleteDataStreamSettings = existing.DeleteDataStreamSettings;
            UpdateDataStreamSettings = existing.UpdateDataStreamSettings;
            ListDataStreamsSettings = existing.ListDataStreamsSettings;
            GetDataStreamSettings = existing.GetDataStreamSettings;
            GetAudienceSettings = existing.GetAudienceSettings;
            ListAudiencesSettings = existing.ListAudiencesSettings;
            CreateAudienceSettings = existing.CreateAudienceSettings;
            UpdateAudienceSettings = existing.UpdateAudienceSettings;
            ArchiveAudienceSettings = existing.ArchiveAudienceSettings;
            GetSearchAds360LinkSettings = existing.GetSearchAds360LinkSettings;
            ListSearchAds360LinksSettings = existing.ListSearchAds360LinksSettings;
            CreateSearchAds360LinkSettings = existing.CreateSearchAds360LinkSettings;
            DeleteSearchAds360LinkSettings = existing.DeleteSearchAds360LinkSettings;
            UpdateSearchAds360LinkSettings = existing.UpdateSearchAds360LinkSettings;
            GetAttributionSettingsSettings = existing.GetAttributionSettingsSettings;
            UpdateAttributionSettingsSettings = existing.UpdateAttributionSettingsSettings;
            RunAccessReportSettings = existing.RunAccessReportSettings;
            CreateAccessBindingSettings = existing.CreateAccessBindingSettings;
            GetAccessBindingSettings = existing.GetAccessBindingSettings;
            UpdateAccessBindingSettings = existing.UpdateAccessBindingSettings;
            DeleteAccessBindingSettings = existing.DeleteAccessBindingSettings;
            ListAccessBindingsSettings = existing.ListAccessBindingsSettings;
            BatchCreateAccessBindingsSettings = existing.BatchCreateAccessBindingsSettings;
            BatchGetAccessBindingsSettings = existing.BatchGetAccessBindingsSettings;
            BatchUpdateAccessBindingsSettings = existing.BatchUpdateAccessBindingsSettings;
            BatchDeleteAccessBindingsSettings = existing.BatchDeleteAccessBindingsSettings;
            GetExpandedDataSetSettings = existing.GetExpandedDataSetSettings;
            ListExpandedDataSetsSettings = existing.ListExpandedDataSetsSettings;
            CreateExpandedDataSetSettings = existing.CreateExpandedDataSetSettings;
            UpdateExpandedDataSetSettings = existing.UpdateExpandedDataSetSettings;
            DeleteExpandedDataSetSettings = existing.DeleteExpandedDataSetSettings;
            GetChannelGroupSettings = existing.GetChannelGroupSettings;
            ListChannelGroupsSettings = existing.ListChannelGroupsSettings;
            CreateChannelGroupSettings = existing.CreateChannelGroupSettings;
            UpdateChannelGroupSettings = existing.UpdateChannelGroupSettings;
            DeleteChannelGroupSettings = existing.DeleteChannelGroupSettings;
            SetAutomatedGa4ConfigurationOptOutSettings = existing.SetAutomatedGa4ConfigurationOptOutSettings;
            FetchAutomatedGa4ConfigurationOptOutSettings = existing.FetchAutomatedGa4ConfigurationOptOutSettings;
            CreateBigQueryLinkSettings = existing.CreateBigQueryLinkSettings;
            GetBigQueryLinkSettings = existing.GetBigQueryLinkSettings;
            ListBigQueryLinksSettings = existing.ListBigQueryLinksSettings;
            DeleteBigQueryLinkSettings = existing.DeleteBigQueryLinkSettings;
            UpdateBigQueryLinkSettings = existing.UpdateBigQueryLinkSettings;
            GetEnhancedMeasurementSettingsSettings = existing.GetEnhancedMeasurementSettingsSettings;
            UpdateEnhancedMeasurementSettingsSettings = existing.UpdateEnhancedMeasurementSettingsSettings;
            CreateConnectedSiteTagSettings = existing.CreateConnectedSiteTagSettings;
            DeleteConnectedSiteTagSettings = existing.DeleteConnectedSiteTagSettings;
            ListConnectedSiteTagsSettings = existing.ListConnectedSiteTagsSettings;
            FetchConnectedGa4PropertySettings = existing.FetchConnectedGa4PropertySettings;
            GetAdSenseLinkSettings = existing.GetAdSenseLinkSettings;
            CreateAdSenseLinkSettings = existing.CreateAdSenseLinkSettings;
            DeleteAdSenseLinkSettings = existing.DeleteAdSenseLinkSettings;
            ListAdSenseLinksSettings = existing.ListAdSenseLinksSettings;
            GetEventCreateRuleSettings = existing.GetEventCreateRuleSettings;
            ListEventCreateRulesSettings = existing.ListEventCreateRulesSettings;
            CreateEventCreateRuleSettings = existing.CreateEventCreateRuleSettings;
            UpdateEventCreateRuleSettings = existing.UpdateEventCreateRuleSettings;
            DeleteEventCreateRuleSettings = existing.DeleteEventCreateRuleSettings;
            GetEventEditRuleSettings = existing.GetEventEditRuleSettings;
            ListEventEditRulesSettings = existing.ListEventEditRulesSettings;
            CreateEventEditRuleSettings = existing.CreateEventEditRuleSettings;
            UpdateEventEditRuleSettings = existing.UpdateEventEditRuleSettings;
            DeleteEventEditRuleSettings = existing.DeleteEventEditRuleSettings;
            ReorderEventEditRulesSettings = existing.ReorderEventEditRulesSettings;
            UpdateDataRedactionSettingsSettings = existing.UpdateDataRedactionSettingsSettings;
            GetDataRedactionSettingsSettings = existing.GetDataRedactionSettingsSettings;
            GetCalculatedMetricSettings = existing.GetCalculatedMetricSettings;
            CreateCalculatedMetricSettings = existing.CreateCalculatedMetricSettings;
            ListCalculatedMetricsSettings = existing.ListCalculatedMetricsSettings;
            UpdateCalculatedMetricSettings = existing.UpdateCalculatedMetricSettings;
            DeleteCalculatedMetricSettings = existing.DeleteCalculatedMetricSettings;
            CreateRollupPropertySettings = existing.CreateRollupPropertySettings;
            GetRollupPropertySourceLinkSettings = existing.GetRollupPropertySourceLinkSettings;
            ListRollupPropertySourceLinksSettings = existing.ListRollupPropertySourceLinksSettings;
            CreateRollupPropertySourceLinkSettings = existing.CreateRollupPropertySourceLinkSettings;
            DeleteRollupPropertySourceLinkSettings = existing.DeleteRollupPropertySourceLinkSettings;
            ProvisionSubpropertySettings = existing.ProvisionSubpropertySettings;
            CreateSubpropertyEventFilterSettings = existing.CreateSubpropertyEventFilterSettings;
            GetSubpropertyEventFilterSettings = existing.GetSubpropertyEventFilterSettings;
            ListSubpropertyEventFiltersSettings = existing.ListSubpropertyEventFiltersSettings;
            UpdateSubpropertyEventFilterSettings = existing.UpdateSubpropertyEventFilterSettings;
            DeleteSubpropertyEventFilterSettings = existing.DeleteSubpropertyEventFilterSettings;
            OnCopy(existing);
        }

        partial void OnCopy(AnalyticsAdminServiceSettings existing);

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetAccount</c> and <c>AnalyticsAdminServiceClient.GetAccountAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetAccountSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListAccounts</c> and <c>AnalyticsAdminServiceClient.ListAccountsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListAccountsSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteAccount</c> and <c>AnalyticsAdminServiceClient.DeleteAccountAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteAccountSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateAccount</c> and <c>AnalyticsAdminServiceClient.UpdateAccountAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateAccountSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ProvisionAccountTicket</c> and
        /// <c>AnalyticsAdminServiceClient.ProvisionAccountTicketAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ProvisionAccountTicketSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListAccountSummaries</c> and
        /// <c>AnalyticsAdminServiceClient.ListAccountSummariesAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListAccountSummariesSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetProperty</c> and <c>AnalyticsAdminServiceClient.GetPropertyAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetPropertySettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListProperties</c> and <c>AnalyticsAdminServiceClient.ListPropertiesAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListPropertiesSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateProperty</c> and <c>AnalyticsAdminServiceClient.CreatePropertyAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreatePropertySettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteProperty</c> and <c>AnalyticsAdminServiceClient.DeletePropertyAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeletePropertySettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateProperty</c> and <c>AnalyticsAdminServiceClient.UpdatePropertyAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdatePropertySettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateFirebaseLink</c> and
        /// <c>AnalyticsAdminServiceClient.CreateFirebaseLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateFirebaseLinkSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteFirebaseLink</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteFirebaseLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteFirebaseLinkSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListFirebaseLinks</c> and
        /// <c>AnalyticsAdminServiceClient.ListFirebaseLinksAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListFirebaseLinksSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetGlobalSiteTag</c> and <c>AnalyticsAdminServiceClient.GetGlobalSiteTagAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetGlobalSiteTagSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateGoogleAdsLink</c> and
        /// <c>AnalyticsAdminServiceClient.CreateGoogleAdsLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateGoogleAdsLinkSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateGoogleAdsLink</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateGoogleAdsLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateGoogleAdsLinkSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteGoogleAdsLink</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteGoogleAdsLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteGoogleAdsLinkSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListGoogleAdsLinks</c> and
        /// <c>AnalyticsAdminServiceClient.ListGoogleAdsLinksAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListGoogleAdsLinksSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetDataSharingSettings</c> and
        /// <c>AnalyticsAdminServiceClient.GetDataSharingSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetDataSharingSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetMeasurementProtocolSecret</c> and
        /// <c>AnalyticsAdminServiceClient.GetMeasurementProtocolSecretAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetMeasurementProtocolSecretSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListMeasurementProtocolSecrets</c> and
        /// <c>AnalyticsAdminServiceClient.ListMeasurementProtocolSecretsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListMeasurementProtocolSecretsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateMeasurementProtocolSecret</c> and
        /// <c>AnalyticsAdminServiceClient.CreateMeasurementProtocolSecretAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateMeasurementProtocolSecretSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteMeasurementProtocolSecret</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteMeasurementProtocolSecretAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteMeasurementProtocolSecretSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateMeasurementProtocolSecret</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateMeasurementProtocolSecretAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateMeasurementProtocolSecretSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.AcknowledgeUserDataCollection</c> and
        /// <c>AnalyticsAdminServiceClient.AcknowledgeUserDataCollectionAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings AcknowledgeUserDataCollectionSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetSKAdNetworkConversionValueSchema</c> and
        /// <c>AnalyticsAdminServiceClient.GetSKAdNetworkConversionValueSchemaAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetSKAdNetworkConversionValueSchemaSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateSKAdNetworkConversionValueSchema</c> and
        /// <c>AnalyticsAdminServiceClient.CreateSKAdNetworkConversionValueSchemaAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateSKAdNetworkConversionValueSchemaSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteSKAdNetworkConversionValueSchema</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteSKAdNetworkConversionValueSchemaAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteSKAdNetworkConversionValueSchemaSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateSKAdNetworkConversionValueSchema</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateSKAdNetworkConversionValueSchemaAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateSKAdNetworkConversionValueSchemaSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListSKAdNetworkConversionValueSchemas</c> and
        /// <c>AnalyticsAdminServiceClient.ListSKAdNetworkConversionValueSchemasAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListSKAdNetworkConversionValueSchemasSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.SearchChangeHistoryEvents</c> and
        /// <c>AnalyticsAdminServiceClient.SearchChangeHistoryEventsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings SearchChangeHistoryEventsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetGoogleSignalsSettings</c> and
        /// <c>AnalyticsAdminServiceClient.GetGoogleSignalsSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetGoogleSignalsSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateGoogleSignalsSettings</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateGoogleSignalsSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateGoogleSignalsSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateConversionEvent</c> and
        /// <c>AnalyticsAdminServiceClient.CreateConversionEventAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateConversionEventSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateConversionEvent</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateConversionEventAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateConversionEventSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetConversionEvent</c> and
        /// <c>AnalyticsAdminServiceClient.GetConversionEventAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetConversionEventSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteConversionEvent</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteConversionEventAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteConversionEventSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListConversionEvents</c> and
        /// <c>AnalyticsAdminServiceClient.ListConversionEventsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListConversionEventsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateKeyEvent</c> and <c>AnalyticsAdminServiceClient.CreateKeyEventAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateKeyEventSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateKeyEvent</c> and <c>AnalyticsAdminServiceClient.UpdateKeyEventAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateKeyEventSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetKeyEvent</c> and <c>AnalyticsAdminServiceClient.GetKeyEventAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetKeyEventSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteKeyEvent</c> and <c>AnalyticsAdminServiceClient.DeleteKeyEventAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteKeyEventSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListKeyEvents</c> and <c>AnalyticsAdminServiceClient.ListKeyEventsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListKeyEventsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetDisplayVideo360AdvertiserLink</c> and
        /// <c>AnalyticsAdminServiceClient.GetDisplayVideo360AdvertiserLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetDisplayVideo360AdvertiserLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListDisplayVideo360AdvertiserLinks</c> and
        /// <c>AnalyticsAdminServiceClient.ListDisplayVideo360AdvertiserLinksAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListDisplayVideo360AdvertiserLinksSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateDisplayVideo360AdvertiserLink</c> and
        /// <c>AnalyticsAdminServiceClient.CreateDisplayVideo360AdvertiserLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateDisplayVideo360AdvertiserLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteDisplayVideo360AdvertiserLink</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteDisplayVideo360AdvertiserLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteDisplayVideo360AdvertiserLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateDisplayVideo360AdvertiserLink</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateDisplayVideo360AdvertiserLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateDisplayVideo360AdvertiserLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetDisplayVideo360AdvertiserLinkProposal</c> and
        /// <c>AnalyticsAdminServiceClient.GetDisplayVideo360AdvertiserLinkProposalAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetDisplayVideo360AdvertiserLinkProposalSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListDisplayVideo360AdvertiserLinkProposals</c> and
        /// <c>AnalyticsAdminServiceClient.ListDisplayVideo360AdvertiserLinkProposalsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListDisplayVideo360AdvertiserLinkProposalsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateDisplayVideo360AdvertiserLinkProposal</c> and
        /// <c>AnalyticsAdminServiceClient.CreateDisplayVideo360AdvertiserLinkProposalAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateDisplayVideo360AdvertiserLinkProposalSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteDisplayVideo360AdvertiserLinkProposal</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteDisplayVideo360AdvertiserLinkProposalAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteDisplayVideo360AdvertiserLinkProposalSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ApproveDisplayVideo360AdvertiserLinkProposal</c> and
        /// <c>AnalyticsAdminServiceClient.ApproveDisplayVideo360AdvertiserLinkProposalAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ApproveDisplayVideo360AdvertiserLinkProposalSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CancelDisplayVideo360AdvertiserLinkProposal</c> and
        /// <c>AnalyticsAdminServiceClient.CancelDisplayVideo360AdvertiserLinkProposalAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CancelDisplayVideo360AdvertiserLinkProposalSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateCustomDimension</c> and
        /// <c>AnalyticsAdminServiceClient.CreateCustomDimensionAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateCustomDimensionSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateCustomDimension</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateCustomDimensionAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateCustomDimensionSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListCustomDimensions</c> and
        /// <c>AnalyticsAdminServiceClient.ListCustomDimensionsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListCustomDimensionsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ArchiveCustomDimension</c> and
        /// <c>AnalyticsAdminServiceClient.ArchiveCustomDimensionAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ArchiveCustomDimensionSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetCustomDimension</c> and
        /// <c>AnalyticsAdminServiceClient.GetCustomDimensionAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetCustomDimensionSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateCustomMetric</c> and
        /// <c>AnalyticsAdminServiceClient.CreateCustomMetricAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateCustomMetricSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateCustomMetric</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateCustomMetricAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateCustomMetricSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListCustomMetrics</c> and
        /// <c>AnalyticsAdminServiceClient.ListCustomMetricsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListCustomMetricsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ArchiveCustomMetric</c> and
        /// <c>AnalyticsAdminServiceClient.ArchiveCustomMetricAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ArchiveCustomMetricSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetCustomMetric</c> and <c>AnalyticsAdminServiceClient.GetCustomMetricAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetCustomMetricSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetDataRetentionSettings</c> and
        /// <c>AnalyticsAdminServiceClient.GetDataRetentionSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetDataRetentionSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateDataRetentionSettings</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateDataRetentionSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateDataRetentionSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateDataStream</c> and <c>AnalyticsAdminServiceClient.CreateDataStreamAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateDataStreamSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteDataStream</c> and <c>AnalyticsAdminServiceClient.DeleteDataStreamAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteDataStreamSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateDataStream</c> and <c>AnalyticsAdminServiceClient.UpdateDataStreamAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateDataStreamSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListDataStreams</c> and <c>AnalyticsAdminServiceClient.ListDataStreamsAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListDataStreamsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetDataStream</c> and <c>AnalyticsAdminServiceClient.GetDataStreamAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetDataStreamSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetAudience</c> and <c>AnalyticsAdminServiceClient.GetAudienceAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetAudienceSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListAudiences</c> and <c>AnalyticsAdminServiceClient.ListAudiencesAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListAudiencesSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateAudience</c> and <c>AnalyticsAdminServiceClient.CreateAudienceAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateAudienceSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateAudience</c> and <c>AnalyticsAdminServiceClient.UpdateAudienceAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateAudienceSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ArchiveAudience</c> and <c>AnalyticsAdminServiceClient.ArchiveAudienceAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ArchiveAudienceSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetSearchAds360Link</c> and
        /// <c>AnalyticsAdminServiceClient.GetSearchAds360LinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetSearchAds360LinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListSearchAds360Links</c> and
        /// <c>AnalyticsAdminServiceClient.ListSearchAds360LinksAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListSearchAds360LinksSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateSearchAds360Link</c> and
        /// <c>AnalyticsAdminServiceClient.CreateSearchAds360LinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateSearchAds360LinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteSearchAds360Link</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteSearchAds360LinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteSearchAds360LinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateSearchAds360Link</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateSearchAds360LinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateSearchAds360LinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetAttributionSettings</c> and
        /// <c>AnalyticsAdminServiceClient.GetAttributionSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetAttributionSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateAttributionSettings</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateAttributionSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateAttributionSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.RunAccessReport</c> and <c>AnalyticsAdminServiceClient.RunAccessReportAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings RunAccessReportSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateAccessBinding</c> and
        /// <c>AnalyticsAdminServiceClient.CreateAccessBindingAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateAccessBindingSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetAccessBinding</c> and <c>AnalyticsAdminServiceClient.GetAccessBindingAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetAccessBindingSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateAccessBinding</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateAccessBindingAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateAccessBindingSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteAccessBinding</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteAccessBindingAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteAccessBindingSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListAccessBindings</c> and
        /// <c>AnalyticsAdminServiceClient.ListAccessBindingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListAccessBindingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.BatchCreateAccessBindings</c> and
        /// <c>AnalyticsAdminServiceClient.BatchCreateAccessBindingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings BatchCreateAccessBindingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.BatchGetAccessBindings</c> and
        /// <c>AnalyticsAdminServiceClient.BatchGetAccessBindingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings BatchGetAccessBindingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.BatchUpdateAccessBindings</c> and
        /// <c>AnalyticsAdminServiceClient.BatchUpdateAccessBindingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings BatchUpdateAccessBindingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.BatchDeleteAccessBindings</c> and
        /// <c>AnalyticsAdminServiceClient.BatchDeleteAccessBindingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings BatchDeleteAccessBindingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetExpandedDataSet</c> and
        /// <c>AnalyticsAdminServiceClient.GetExpandedDataSetAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetExpandedDataSetSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListExpandedDataSets</c> and
        /// <c>AnalyticsAdminServiceClient.ListExpandedDataSetsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListExpandedDataSetsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateExpandedDataSet</c> and
        /// <c>AnalyticsAdminServiceClient.CreateExpandedDataSetAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateExpandedDataSetSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateExpandedDataSet</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateExpandedDataSetAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateExpandedDataSetSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteExpandedDataSet</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteExpandedDataSetAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteExpandedDataSetSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetChannelGroup</c> and <c>AnalyticsAdminServiceClient.GetChannelGroupAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetChannelGroupSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListChannelGroups</c> and
        /// <c>AnalyticsAdminServiceClient.ListChannelGroupsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListChannelGroupsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateChannelGroup</c> and
        /// <c>AnalyticsAdminServiceClient.CreateChannelGroupAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateChannelGroupSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateChannelGroup</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateChannelGroupAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateChannelGroupSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteChannelGroup</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteChannelGroupAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteChannelGroupSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.SetAutomatedGa4ConfigurationOptOut</c> and
        /// <c>AnalyticsAdminServiceClient.SetAutomatedGa4ConfigurationOptOutAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings SetAutomatedGa4ConfigurationOptOutSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.FetchAutomatedGa4ConfigurationOptOut</c> and
        /// <c>AnalyticsAdminServiceClient.FetchAutomatedGa4ConfigurationOptOutAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings FetchAutomatedGa4ConfigurationOptOutSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateBigQueryLink</c> and
        /// <c>AnalyticsAdminServiceClient.CreateBigQueryLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateBigQueryLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetBigQueryLink</c> and <c>AnalyticsAdminServiceClient.GetBigQueryLinkAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetBigQueryLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListBigQueryLinks</c> and
        /// <c>AnalyticsAdminServiceClient.ListBigQueryLinksAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListBigQueryLinksSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteBigQueryLink</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteBigQueryLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteBigQueryLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateBigQueryLink</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateBigQueryLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateBigQueryLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetEnhancedMeasurementSettings</c> and
        /// <c>AnalyticsAdminServiceClient.GetEnhancedMeasurementSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetEnhancedMeasurementSettingsSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateEnhancedMeasurementSettings</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateEnhancedMeasurementSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>This call will not be retried.</description></item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateEnhancedMeasurementSettingsSettings { get; set; } = gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateConnectedSiteTag</c> and
        /// <c>AnalyticsAdminServiceClient.CreateConnectedSiteTagAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateConnectedSiteTagSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteConnectedSiteTag</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteConnectedSiteTagAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteConnectedSiteTagSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListConnectedSiteTags</c> and
        /// <c>AnalyticsAdminServiceClient.ListConnectedSiteTagsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListConnectedSiteTagsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.FetchConnectedGa4Property</c> and
        /// <c>AnalyticsAdminServiceClient.FetchConnectedGa4PropertyAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings FetchConnectedGa4PropertySettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetAdSenseLink</c> and <c>AnalyticsAdminServiceClient.GetAdSenseLinkAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetAdSenseLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateAdSenseLink</c> and
        /// <c>AnalyticsAdminServiceClient.CreateAdSenseLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateAdSenseLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteAdSenseLink</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteAdSenseLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteAdSenseLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListAdSenseLinks</c> and <c>AnalyticsAdminServiceClient.ListAdSenseLinksAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListAdSenseLinksSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetEventCreateRule</c> and
        /// <c>AnalyticsAdminServiceClient.GetEventCreateRuleAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetEventCreateRuleSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListEventCreateRules</c> and
        /// <c>AnalyticsAdminServiceClient.ListEventCreateRulesAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListEventCreateRulesSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateEventCreateRule</c> and
        /// <c>AnalyticsAdminServiceClient.CreateEventCreateRuleAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateEventCreateRuleSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateEventCreateRule</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateEventCreateRuleAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateEventCreateRuleSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteEventCreateRule</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteEventCreateRuleAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteEventCreateRuleSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetEventEditRule</c> and <c>AnalyticsAdminServiceClient.GetEventEditRuleAsync</c>
        /// .
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetEventEditRuleSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListEventEditRules</c> and
        /// <c>AnalyticsAdminServiceClient.ListEventEditRulesAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListEventEditRulesSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateEventEditRule</c> and
        /// <c>AnalyticsAdminServiceClient.CreateEventEditRuleAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateEventEditRuleSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateEventEditRule</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateEventEditRuleAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateEventEditRuleSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteEventEditRule</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteEventEditRuleAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteEventEditRuleSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ReorderEventEditRules</c> and
        /// <c>AnalyticsAdminServiceClient.ReorderEventEditRulesAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ReorderEventEditRulesSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateDataRedactionSettings</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateDataRedactionSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateDataRedactionSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetDataRedactionSettings</c> and
        /// <c>AnalyticsAdminServiceClient.GetDataRedactionSettingsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetDataRedactionSettingsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetCalculatedMetric</c> and
        /// <c>AnalyticsAdminServiceClient.GetCalculatedMetricAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetCalculatedMetricSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateCalculatedMetric</c> and
        /// <c>AnalyticsAdminServiceClient.CreateCalculatedMetricAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateCalculatedMetricSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListCalculatedMetrics</c> and
        /// <c>AnalyticsAdminServiceClient.ListCalculatedMetricsAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListCalculatedMetricsSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateCalculatedMetric</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateCalculatedMetricAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateCalculatedMetricSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteCalculatedMetric</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteCalculatedMetricAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteCalculatedMetricSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateRollupProperty</c> and
        /// <c>AnalyticsAdminServiceClient.CreateRollupPropertyAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateRollupPropertySettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetRollupPropertySourceLink</c> and
        /// <c>AnalyticsAdminServiceClient.GetRollupPropertySourceLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetRollupPropertySourceLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListRollupPropertySourceLinks</c> and
        /// <c>AnalyticsAdminServiceClient.ListRollupPropertySourceLinksAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListRollupPropertySourceLinksSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateRollupPropertySourceLink</c> and
        /// <c>AnalyticsAdminServiceClient.CreateRollupPropertySourceLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateRollupPropertySourceLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteRollupPropertySourceLink</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteRollupPropertySourceLinkAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteRollupPropertySourceLinkSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ProvisionSubproperty</c> and
        /// <c>AnalyticsAdminServiceClient.ProvisionSubpropertyAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ProvisionSubpropertySettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.CreateSubpropertyEventFilter</c> and
        /// <c>AnalyticsAdminServiceClient.CreateSubpropertyEventFilterAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings CreateSubpropertyEventFilterSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.GetSubpropertyEventFilter</c> and
        /// <c>AnalyticsAdminServiceClient.GetSubpropertyEventFilterAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings GetSubpropertyEventFilterSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.ListSubpropertyEventFilters</c> and
        /// <c>AnalyticsAdminServiceClient.ListSubpropertyEventFiltersAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings ListSubpropertyEventFiltersSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.UpdateSubpropertyEventFilter</c> and
        /// <c>AnalyticsAdminServiceClient.UpdateSubpropertyEventFilterAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings UpdateSubpropertyEventFilterSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>
        /// <see cref="gaxgrpc::CallSettings"/> for synchronous and asynchronous calls to
        /// <c>AnalyticsAdminServiceClient.DeleteSubpropertyEventFilter</c> and
        /// <c>AnalyticsAdminServiceClient.DeleteSubpropertyEventFilterAsync</c>.
        /// </summary>
        /// <remarks>
        /// <list type="bullet">
        /// <item><description>Initial retry delay: 1000 milliseconds.</description></item>
        /// <item><description>Retry delay multiplier: 1.3</description></item>
        /// <item><description>Retry maximum delay: 60000 milliseconds.</description></item>
        /// <item><description>Maximum attempts: 5</description></item>
        /// <item>
        /// <description>
        /// Retriable status codes: <see cref="grpccore::StatusCode.Unavailable"/>,
        /// <see cref="grpccore::StatusCode.Unknown"/>.
        /// </description>
        /// </item>
        /// <item><description>Timeout: 60 seconds.</description></item>
        /// </list>
        /// </remarks>
        public gaxgrpc::CallSettings DeleteSubpropertyEventFilterSettings { get; set; } = gaxgrpc::CallSettingsExtensions.WithRetry(gaxgrpc::CallSettings.FromExpiration(gax::Expiration.FromTimeout(sys::TimeSpan.FromMilliseconds(60000))), gaxgrpc::RetrySettings.FromExponentialBackoff(maxAttempts: 5, initialBackoff: sys::TimeSpan.FromMilliseconds(1000), maxBackoff: sys::TimeSpan.FromMilliseconds(60000), backoffMultiplier: 1.3, retryFilter: gaxgrpc::RetrySettings.FilterForStatusCodes(grpccore::StatusCode.Unavailable, grpccore::StatusCode.Unknown)));

        /// <summary>Creates a deep clone of this object, with all the same property values.</summary>
        /// <returns>A deep clone of this <see cref="AnalyticsAdminServiceSettings"/> object.</returns>
        public AnalyticsAdminServiceSettings Clone() => new AnalyticsAdminServiceSettings(this);
    }

    /// <summary>
    /// Builder class for <see cref="AnalyticsAdminServiceClient"/> to provide simple configuration of credentials,
    /// endpoint etc.
    /// </summary>
    public sealed partial class AnalyticsAdminServiceClientBuilder : gaxgrpc::ClientBuilderBase<AnalyticsAdminServiceClient>
    {
        /// <summary>The settings to use for RPCs, or <c>null</c> for the default settings.</summary>
        public AnalyticsAdminServiceSettings Settings { get; set; }

        /// <summary>Creates a new builder with default settings.</summary>
        public AnalyticsAdminServiceClientBuilder() : base(AnalyticsAdminServiceClient.ServiceMetadata)
        {
        }

        partial void InterceptBuild(ref AnalyticsAdminServiceClient client);

        partial void InterceptBuildAsync(st::CancellationToken cancellationToken, ref stt::Task<AnalyticsAdminServiceClient> task);

        /// <summary>Builds the resulting client.</summary>
        public override AnalyticsAdminServiceClient Build()
        {
            AnalyticsAdminServiceClient client = null;
            InterceptBuild(ref client);
            return client ?? BuildImpl();
        }

        /// <summary>Builds the resulting client asynchronously.</summary>
        public override stt::Task<AnalyticsAdminServiceClient> BuildAsync(st::CancellationToken cancellationToken = default)
        {
            stt::Task<AnalyticsAdminServiceClient> task = null;
            InterceptBuildAsync(cancellationToken, ref task);
            return task ?? BuildAsyncImpl(cancellationToken);
        }

        private AnalyticsAdminServiceClient BuildImpl()
        {
            Validate();
            grpccore::CallInvoker callInvoker = CreateCallInvoker();
            return AnalyticsAdminServiceClient.Create(callInvoker, GetEffectiveSettings(Settings?.Clone()), Logger);
        }

        private async stt::Task<AnalyticsAdminServiceClient> BuildAsyncImpl(st::CancellationToken cancellationToken)
        {
            Validate();
            grpccore::CallInvoker callInvoker = await CreateCallInvokerAsync(cancellationToken).ConfigureAwait(false);
            return AnalyticsAdminServiceClient.Create(callInvoker, GetEffectiveSettings(Settings?.Clone()), Logger);
        }

        /// <summary>Returns the channel pool to use when no other options are specified.</summary>
        protected override gaxgrpc::ChannelPool GetChannelPool() => AnalyticsAdminServiceClient.ChannelPool;
    }

    /// <summary>AnalyticsAdminService client wrapper, for convenient use.</summary>
    /// <remarks>
    /// Service Interface for the Analytics Admin API (GA4).
    /// </remarks>
    public abstract partial class AnalyticsAdminServiceClient
    {
        /// <summary>
        /// The default endpoint for the AnalyticsAdminService service, which is a host of
        /// "analyticsadmin.googleapis.com" and a port of 443.
        /// </summary>
        public static string DefaultEndpoint { get; } = "analyticsadmin.googleapis.com:443";

        /// <summary>The default AnalyticsAdminService scopes.</summary>
        /// <remarks>
        /// The default AnalyticsAdminService scopes are:
        /// <list type="bullet">
        /// <item><description>https://www.googleapis.com/auth/analytics.edit</description></item>
        /// <item><description>https://www.googleapis.com/auth/analytics.manage.users</description></item>
        /// <item><description>https://www.googleapis.com/auth/analytics.manage.users.readonly</description></item>
        /// <item><description>https://www.googleapis.com/auth/analytics.readonly</description></item>
        /// </list>
        /// </remarks>
        public static scg::IReadOnlyList<string> DefaultScopes { get; } = new sco::ReadOnlyCollection<string>(new string[]
        {
            "https://www.googleapis.com/auth/analytics.edit",
            "https://www.googleapis.com/auth/analytics.manage.users",
            "https://www.googleapis.com/auth/analytics.manage.users.readonly",
            "https://www.googleapis.com/auth/analytics.readonly",
        });

        /// <summary>The service metadata associated with this client type.</summary>
        public static gaxgrpc::ServiceMetadata ServiceMetadata { get; } = new gaxgrpc::ServiceMetadata(AnalyticsAdminService.Descriptor, DefaultEndpoint, DefaultScopes, true, gax::ApiTransports.Grpc | gax::ApiTransports.Rest, PackageApiMetadata.ApiMetadata);

        internal static gaxgrpc::ChannelPool ChannelPool { get; } = new gaxgrpc::ChannelPool(ServiceMetadata);

        /// <summary>
        /// Asynchronously creates a <see cref="AnalyticsAdminServiceClient"/> using the default credentials, endpoint
        /// and settings. To specify custom credentials or other settings, use
        /// <see cref="AnalyticsAdminServiceClientBuilder"/>.
        /// </summary>
        /// <param name="cancellationToken">
        /// The <see cref="st::CancellationToken"/> to use while creating the client.
        /// </param>
        /// <returns>The task representing the created <see cref="AnalyticsAdminServiceClient"/>.</returns>
        public static stt::Task<AnalyticsAdminServiceClient> CreateAsync(st::CancellationToken cancellationToken = default) =>
            new AnalyticsAdminServiceClientBuilder().BuildAsync(cancellationToken);

        /// <summary>
        /// Synchronously creates a <see cref="AnalyticsAdminServiceClient"/> using the default credentials, endpoint
        /// and settings. To specify custom credentials or other settings, use
        /// <see cref="AnalyticsAdminServiceClientBuilder"/>.
        /// </summary>
        /// <returns>The created <see cref="AnalyticsAdminServiceClient"/>.</returns>
        public static AnalyticsAdminServiceClient Create() => new AnalyticsAdminServiceClientBuilder().Build();

        /// <summary>
        /// Creates a <see cref="AnalyticsAdminServiceClient"/> which uses the specified call invoker for remote
        /// operations.
        /// </summary>
        /// <param name="callInvoker">
        /// The <see cref="grpccore::CallInvoker"/> for remote operations. Must not be null.
        /// </param>
        /// <param name="settings">Optional <see cref="AnalyticsAdminServiceSettings"/>.</param>
        /// <param name="logger">Optional <see cref="mel::ILogger"/>.</param>
        /// <returns>The created <see cref="AnalyticsAdminServiceClient"/>.</returns>
        internal static AnalyticsAdminServiceClient Create(grpccore::CallInvoker callInvoker, AnalyticsAdminServiceSettings settings = null, mel::ILogger logger = null)
        {
            gax::GaxPreconditions.CheckNotNull(callInvoker, nameof(callInvoker));
            grpcinter::Interceptor interceptor = settings?.Interceptor;
            if (interceptor != null)
            {
                callInvoker = grpcinter::CallInvokerExtensions.Intercept(callInvoker, interceptor);
            }
            AnalyticsAdminService.AnalyticsAdminServiceClient grpcClient = new AnalyticsAdminService.AnalyticsAdminServiceClient(callInvoker);
            return new AnalyticsAdminServiceClientImpl(grpcClient, settings, logger);
        }

        /// <summary>
        /// Shuts down any channels automatically created by <see cref="Create()"/> and
        /// <see cref="CreateAsync(st::CancellationToken)"/>. Channels which weren't automatically created are not
        /// affected.
        /// </summary>
        /// <remarks>
        /// After calling this method, further calls to <see cref="Create()"/> and
        /// <see cref="CreateAsync(st::CancellationToken)"/> will create new channels, which could in turn be shut down
        /// by another call to this method.
        /// </remarks>
        /// <returns>A task representing the asynchronous shutdown operation.</returns>
        public static stt::Task ShutdownDefaultChannelsAsync() => ChannelPool.ShutdownChannelsAsync();

        /// <summary>The underlying gRPC AnalyticsAdminService client</summary>
        public virtual AnalyticsAdminService.AnalyticsAdminServiceClient GrpcClient => throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Account GetAccount(GetAccountRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> GetAccountAsync(GetAccountRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> GetAccountAsync(GetAccountRequest request, st::CancellationToken cancellationToken) =>
            GetAccountAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the account to lookup.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Account GetAccount(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAccount(new GetAccountRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the account to lookup.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> GetAccountAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAccountAsync(new GetAccountRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the account to lookup.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> GetAccountAsync(string name, st::CancellationToken cancellationToken) =>
            GetAccountAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the account to lookup.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Account GetAccount(AccountName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAccount(new GetAccountRequest
            {
                AccountName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the account to lookup.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> GetAccountAsync(AccountName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAccountAsync(new GetAccountRequest
            {
                AccountName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the account to lookup.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> GetAccountAsync(AccountName name, st::CancellationToken cancellationToken) =>
            GetAccountAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns all accounts accessible by the caller.
        /// 
        /// Note that these accounts might not currently have GA4 properties.
        /// Soft-deleted (ie: "trashed") accounts are excluded by default.
        /// Returns an empty list if no relevant accounts are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="Account"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAccountsResponse, Account> ListAccounts(ListAccountsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns all accounts accessible by the caller.
        /// 
        /// Note that these accounts might not currently have GA4 properties.
        /// Soft-deleted (ie: "trashed") accounts are excluded by default.
        /// Returns an empty list if no relevant accounts are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="Account"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAccountsResponse, Account> ListAccountsAsync(ListAccountsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAccount(DeleteAccountRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccountAsync(DeleteAccountRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccountAsync(DeleteAccountRequest request, st::CancellationToken cancellationToken) =>
            DeleteAccountAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Account to soft-delete.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAccount(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAccount(new DeleteAccountRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Account to soft-delete.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccountAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAccountAsync(new DeleteAccountRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Account to soft-delete.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccountAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteAccountAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Account to soft-delete.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAccount(AccountName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAccount(new DeleteAccountRequest
            {
                AccountName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Account to soft-delete.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccountAsync(AccountName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAccountAsync(new DeleteAccountRequest
            {
                AccountName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Account to soft-delete.
        /// Format: accounts/{account}
        /// Example: "accounts/100"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccountAsync(AccountName name, st::CancellationToken cancellationToken) =>
            DeleteAccountAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Account UpdateAccount(UpdateAccountRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> UpdateAccountAsync(UpdateAccountRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> UpdateAccountAsync(UpdateAccountRequest request, st::CancellationToken cancellationToken) =>
            UpdateAccountAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an account.
        /// </summary>
        /// <param name="account">
        /// Required. The account to update.
        /// The account's `name` field is used to identify the account.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (for example, "field_to_update"). Omitted fields will not be updated.
        /// To replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Account UpdateAccount(Account account, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateAccount(new UpdateAccountRequest
            {
                Account = gax::GaxPreconditions.CheckNotNull(account, nameof(account)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates an account.
        /// </summary>
        /// <param name="account">
        /// Required. The account to update.
        /// The account's `name` field is used to identify the account.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (for example, "field_to_update"). Omitted fields will not be updated.
        /// To replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> UpdateAccountAsync(Account account, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateAccountAsync(new UpdateAccountRequest
            {
                Account = gax::GaxPreconditions.CheckNotNull(account, nameof(account)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates an account.
        /// </summary>
        /// <param name="account">
        /// Required. The account to update.
        /// The account's `name` field is used to identify the account.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (for example, "field_to_update"). Omitted fields will not be updated.
        /// To replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Account> UpdateAccountAsync(Account account, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateAccountAsync(account, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Requests a ticket for creating an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ProvisionAccountTicketResponse ProvisionAccountTicket(ProvisionAccountTicketRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Requests a ticket for creating an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ProvisionAccountTicketResponse> ProvisionAccountTicketAsync(ProvisionAccountTicketRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Requests a ticket for creating an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ProvisionAccountTicketResponse> ProvisionAccountTicketAsync(ProvisionAccountTicketRequest request, st::CancellationToken cancellationToken) =>
            ProvisionAccountTicketAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns summaries of all accounts accessible by the caller.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AccountSummary"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAccountSummariesResponse, AccountSummary> ListAccountSummaries(ListAccountSummariesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns summaries of all accounts accessible by the caller.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AccountSummary"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAccountSummariesResponse, AccountSummary> ListAccountSummariesAsync(ListAccountSummariesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property GetProperty(GetPropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> GetPropertyAsync(GetPropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> GetPropertyAsync(GetPropertyRequest request, st::CancellationToken cancellationToken) =>
            GetPropertyAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the property to lookup.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property GetProperty(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetProperty(new GetPropertyRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the property to lookup.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> GetPropertyAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetPropertyAsync(new GetPropertyRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the property to lookup.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> GetPropertyAsync(string name, st::CancellationToken cancellationToken) =>
            GetPropertyAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the property to lookup.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property GetProperty(PropertyName name, gaxgrpc::CallSettings callSettings = null) =>
            GetProperty(new GetPropertyRequest
            {
                PropertyName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the property to lookup.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> GetPropertyAsync(PropertyName name, gaxgrpc::CallSettings callSettings = null) =>
            GetPropertyAsync(new GetPropertyRequest
            {
                PropertyName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the property to lookup.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> GetPropertyAsync(PropertyName name, st::CancellationToken cancellationToken) =>
            GetPropertyAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns child Properties under the specified parent Account.
        /// 
        /// Only "GA4" properties will be returned.
        /// Properties will be excluded if the caller does not have access.
        /// Soft-deleted (ie: "trashed") properties are excluded by default.
        /// Returns an empty list if no relevant properties are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="Property"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListPropertiesResponse, Property> ListProperties(ListPropertiesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns child Properties under the specified parent Account.
        /// 
        /// Only "GA4" properties will be returned.
        /// Properties will be excluded if the caller does not have access.
        /// Soft-deleted (ie: "trashed") properties are excluded by default.
        /// Returns an empty list if no relevant properties are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="Property"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListPropertiesResponse, Property> ListPropertiesAsync(ListPropertiesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an "GA4" property with the specified location and attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property CreateProperty(CreatePropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an "GA4" property with the specified location and attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> CreatePropertyAsync(CreatePropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an "GA4" property with the specified location and attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> CreatePropertyAsync(CreatePropertyRequest request, st::CancellationToken cancellationToken) =>
            CreatePropertyAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an "GA4" property with the specified location and attributes.
        /// </summary>
        /// <param name="property">
        /// Required. The property to create.
        /// Note: the supplied property must specify its parent.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property CreateProperty(Property property, gaxgrpc::CallSettings callSettings = null) =>
            CreateProperty(new CreatePropertyRequest
            {
                Property = gax::GaxPreconditions.CheckNotNull(property, nameof(property)),
            }, callSettings);

        /// <summary>
        /// Creates an "GA4" property with the specified location and attributes.
        /// </summary>
        /// <param name="property">
        /// Required. The property to create.
        /// Note: the supplied property must specify its parent.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> CreatePropertyAsync(Property property, gaxgrpc::CallSettings callSettings = null) =>
            CreatePropertyAsync(new CreatePropertyRequest
            {
                Property = gax::GaxPreconditions.CheckNotNull(property, nameof(property)),
            }, callSettings);

        /// <summary>
        /// Creates an "GA4" property with the specified location and attributes.
        /// </summary>
        /// <param name="property">
        /// Required. The property to create.
        /// Note: the supplied property must specify its parent.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> CreatePropertyAsync(Property property, st::CancellationToken cancellationToken) =>
            CreatePropertyAsync(property, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property DeleteProperty(DeletePropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> DeletePropertyAsync(DeletePropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> DeletePropertyAsync(DeletePropertyRequest request, st::CancellationToken cancellationToken) =>
            DeletePropertyAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Property to soft-delete.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property DeleteProperty(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteProperty(new DeletePropertyRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Property to soft-delete.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> DeletePropertyAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeletePropertyAsync(new DeletePropertyRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Property to soft-delete.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> DeletePropertyAsync(string name, st::CancellationToken cancellationToken) =>
            DeletePropertyAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Property to soft-delete.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property DeleteProperty(PropertyName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteProperty(new DeletePropertyRequest
            {
                PropertyName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Property to soft-delete.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> DeletePropertyAsync(PropertyName name, gaxgrpc::CallSettings callSettings = null) =>
            DeletePropertyAsync(new DeletePropertyRequest
            {
                PropertyName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Property to soft-delete.
        /// Format: properties/{property_id}
        /// Example: "properties/1000"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> DeletePropertyAsync(PropertyName name, st::CancellationToken cancellationToken) =>
            DeletePropertyAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property UpdateProperty(UpdatePropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> UpdatePropertyAsync(UpdatePropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> UpdatePropertyAsync(UpdatePropertyRequest request, st::CancellationToken cancellationToken) =>
            UpdatePropertyAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a property.
        /// </summary>
        /// <param name="property">
        /// Required. The property to update.
        /// The property's `name` field is used to identify the property to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Property UpdateProperty(Property property, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateProperty(new UpdatePropertyRequest
            {
                Property = gax::GaxPreconditions.CheckNotNull(property, nameof(property)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a property.
        /// </summary>
        /// <param name="property">
        /// Required. The property to update.
        /// The property's `name` field is used to identify the property to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> UpdatePropertyAsync(Property property, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdatePropertyAsync(new UpdatePropertyRequest
            {
                Property = gax::GaxPreconditions.CheckNotNull(property, nameof(property)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a property.
        /// </summary>
        /// <param name="property">
        /// Required. The property to update.
        /// The property's `name` field is used to identify the property to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Property> UpdatePropertyAsync(Property property, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdatePropertyAsync(property, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual FirebaseLink CreateFirebaseLink(CreateFirebaseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FirebaseLink> CreateFirebaseLinkAsync(CreateFirebaseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FirebaseLink> CreateFirebaseLinkAsync(CreateFirebaseLinkRequest request, st::CancellationToken cancellationToken) =>
            CreateFirebaseLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="firebaseLink">
        /// Required. The Firebase link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual FirebaseLink CreateFirebaseLink(string parent, FirebaseLink firebaseLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateFirebaseLink(new CreateFirebaseLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                FirebaseLink = gax::GaxPreconditions.CheckNotNull(firebaseLink, nameof(firebaseLink)),
            }, callSettings);

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="firebaseLink">
        /// Required. The Firebase link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FirebaseLink> CreateFirebaseLinkAsync(string parent, FirebaseLink firebaseLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateFirebaseLinkAsync(new CreateFirebaseLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                FirebaseLink = gax::GaxPreconditions.CheckNotNull(firebaseLink, nameof(firebaseLink)),
            }, callSettings);

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="firebaseLink">
        /// Required. The Firebase link to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FirebaseLink> CreateFirebaseLinkAsync(string parent, FirebaseLink firebaseLink, st::CancellationToken cancellationToken) =>
            CreateFirebaseLinkAsync(parent, firebaseLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="firebaseLink">
        /// Required. The Firebase link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual FirebaseLink CreateFirebaseLink(PropertyName parent, FirebaseLink firebaseLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateFirebaseLink(new CreateFirebaseLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                FirebaseLink = gax::GaxPreconditions.CheckNotNull(firebaseLink, nameof(firebaseLink)),
            }, callSettings);

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="firebaseLink">
        /// Required. The Firebase link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FirebaseLink> CreateFirebaseLinkAsync(PropertyName parent, FirebaseLink firebaseLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateFirebaseLinkAsync(new CreateFirebaseLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                FirebaseLink = gax::GaxPreconditions.CheckNotNull(firebaseLink, nameof(firebaseLink)),
            }, callSettings);

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="firebaseLink">
        /// Required. The Firebase link to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FirebaseLink> CreateFirebaseLinkAsync(PropertyName parent, FirebaseLink firebaseLink, st::CancellationToken cancellationToken) =>
            CreateFirebaseLinkAsync(parent, firebaseLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteFirebaseLink(DeleteFirebaseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteFirebaseLinkAsync(DeleteFirebaseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteFirebaseLinkAsync(DeleteFirebaseLinkRequest request, st::CancellationToken cancellationToken) =>
            DeleteFirebaseLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
        /// 
        /// Example: `properties/1234/firebaseLinks/5678`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteFirebaseLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteFirebaseLink(new DeleteFirebaseLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
        /// 
        /// Example: `properties/1234/firebaseLinks/5678`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteFirebaseLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteFirebaseLinkAsync(new DeleteFirebaseLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
        /// 
        /// Example: `properties/1234/firebaseLinks/5678`
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteFirebaseLinkAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteFirebaseLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
        /// 
        /// Example: `properties/1234/firebaseLinks/5678`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteFirebaseLink(FirebaseLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteFirebaseLink(new DeleteFirebaseLinkRequest
            {
                FirebaseLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
        /// 
        /// Example: `properties/1234/firebaseLinks/5678`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteFirebaseLinkAsync(FirebaseLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteFirebaseLinkAsync(new DeleteFirebaseLinkRequest
            {
                FirebaseLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
        /// 
        /// Example: `properties/1234/firebaseLinks/5678`
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteFirebaseLinkAsync(FirebaseLinkName name, st::CancellationToken cancellationToken) =>
            DeleteFirebaseLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists FirebaseLinks on a property.
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="FirebaseLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListFirebaseLinksResponse, FirebaseLink> ListFirebaseLinks(ListFirebaseLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists FirebaseLinks on a property.
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="FirebaseLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListFirebaseLinksResponse, FirebaseLink> ListFirebaseLinksAsync(ListFirebaseLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists FirebaseLinks on a property.
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="FirebaseLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListFirebaseLinksResponse, FirebaseLink> ListFirebaseLinks(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListFirebaseLinksRequest request = new ListFirebaseLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListFirebaseLinks(request, callSettings);
        }

        /// <summary>
        /// Lists FirebaseLinks on a property.
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="FirebaseLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListFirebaseLinksResponse, FirebaseLink> ListFirebaseLinksAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListFirebaseLinksRequest request = new ListFirebaseLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListFirebaseLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Lists FirebaseLinks on a property.
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="FirebaseLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListFirebaseLinksResponse, FirebaseLink> ListFirebaseLinks(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListFirebaseLinksRequest request = new ListFirebaseLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListFirebaseLinks(request, callSettings);
        }

        /// <summary>
        /// Lists FirebaseLinks on a property.
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// 
        /// Example: `properties/1234`
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="FirebaseLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListFirebaseLinksResponse, FirebaseLink> ListFirebaseLinksAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListFirebaseLinksRequest request = new ListFirebaseLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListFirebaseLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GlobalSiteTag GetGlobalSiteTag(GetGlobalSiteTagRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GlobalSiteTag> GetGlobalSiteTagAsync(GetGlobalSiteTagRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GlobalSiteTag> GetGlobalSiteTagAsync(GetGlobalSiteTagRequest request, st::CancellationToken cancellationToken) =>
            GetGlobalSiteTagAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the site tag to lookup.
        /// Note that site tags are singletons and do not have unique IDs.
        /// Format: properties/{property_id}/dataStreams/{stream_id}/globalSiteTag
        /// 
        /// Example: `properties/123/dataStreams/456/globalSiteTag`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GlobalSiteTag GetGlobalSiteTag(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetGlobalSiteTag(new GetGlobalSiteTagRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the site tag to lookup.
        /// Note that site tags are singletons and do not have unique IDs.
        /// Format: properties/{property_id}/dataStreams/{stream_id}/globalSiteTag
        /// 
        /// Example: `properties/123/dataStreams/456/globalSiteTag`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GlobalSiteTag> GetGlobalSiteTagAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetGlobalSiteTagAsync(new GetGlobalSiteTagRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the site tag to lookup.
        /// Note that site tags are singletons and do not have unique IDs.
        /// Format: properties/{property_id}/dataStreams/{stream_id}/globalSiteTag
        /// 
        /// Example: `properties/123/dataStreams/456/globalSiteTag`
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GlobalSiteTag> GetGlobalSiteTagAsync(string name, st::CancellationToken cancellationToken) =>
            GetGlobalSiteTagAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the site tag to lookup.
        /// Note that site tags are singletons and do not have unique IDs.
        /// Format: properties/{property_id}/dataStreams/{stream_id}/globalSiteTag
        /// 
        /// Example: `properties/123/dataStreams/456/globalSiteTag`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GlobalSiteTag GetGlobalSiteTag(GlobalSiteTagName name, gaxgrpc::CallSettings callSettings = null) =>
            GetGlobalSiteTag(new GetGlobalSiteTagRequest
            {
                GlobalSiteTagName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the site tag to lookup.
        /// Note that site tags are singletons and do not have unique IDs.
        /// Format: properties/{property_id}/dataStreams/{stream_id}/globalSiteTag
        /// 
        /// Example: `properties/123/dataStreams/456/globalSiteTag`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GlobalSiteTag> GetGlobalSiteTagAsync(GlobalSiteTagName name, gaxgrpc::CallSettings callSettings = null) =>
            GetGlobalSiteTagAsync(new GetGlobalSiteTagRequest
            {
                GlobalSiteTagName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the site tag to lookup.
        /// Note that site tags are singletons and do not have unique IDs.
        /// Format: properties/{property_id}/dataStreams/{stream_id}/globalSiteTag
        /// 
        /// Example: `properties/123/dataStreams/456/globalSiteTag`
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GlobalSiteTag> GetGlobalSiteTagAsync(GlobalSiteTagName name, st::CancellationToken cancellationToken) =>
            GetGlobalSiteTagAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleAdsLink CreateGoogleAdsLink(CreateGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> CreateGoogleAdsLinkAsync(CreateGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> CreateGoogleAdsLinkAsync(CreateGoogleAdsLinkRequest request, st::CancellationToken cancellationToken) =>
            CreateGoogleAdsLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="googleAdsLink">
        /// Required. The GoogleAdsLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleAdsLink CreateGoogleAdsLink(string parent, GoogleAdsLink googleAdsLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateGoogleAdsLink(new CreateGoogleAdsLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                GoogleAdsLink = gax::GaxPreconditions.CheckNotNull(googleAdsLink, nameof(googleAdsLink)),
            }, callSettings);

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="googleAdsLink">
        /// Required. The GoogleAdsLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> CreateGoogleAdsLinkAsync(string parent, GoogleAdsLink googleAdsLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateGoogleAdsLinkAsync(new CreateGoogleAdsLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                GoogleAdsLink = gax::GaxPreconditions.CheckNotNull(googleAdsLink, nameof(googleAdsLink)),
            }, callSettings);

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="googleAdsLink">
        /// Required. The GoogleAdsLink to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> CreateGoogleAdsLinkAsync(string parent, GoogleAdsLink googleAdsLink, st::CancellationToken cancellationToken) =>
            CreateGoogleAdsLinkAsync(parent, googleAdsLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="googleAdsLink">
        /// Required. The GoogleAdsLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleAdsLink CreateGoogleAdsLink(PropertyName parent, GoogleAdsLink googleAdsLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateGoogleAdsLink(new CreateGoogleAdsLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                GoogleAdsLink = gax::GaxPreconditions.CheckNotNull(googleAdsLink, nameof(googleAdsLink)),
            }, callSettings);

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="googleAdsLink">
        /// Required. The GoogleAdsLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> CreateGoogleAdsLinkAsync(PropertyName parent, GoogleAdsLink googleAdsLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateGoogleAdsLinkAsync(new CreateGoogleAdsLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                GoogleAdsLink = gax::GaxPreconditions.CheckNotNull(googleAdsLink, nameof(googleAdsLink)),
            }, callSettings);

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="googleAdsLink">
        /// Required. The GoogleAdsLink to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> CreateGoogleAdsLinkAsync(PropertyName parent, GoogleAdsLink googleAdsLink, st::CancellationToken cancellationToken) =>
            CreateGoogleAdsLinkAsync(parent, googleAdsLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleAdsLink UpdateGoogleAdsLink(UpdateGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> UpdateGoogleAdsLinkAsync(UpdateGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> UpdateGoogleAdsLinkAsync(UpdateGoogleAdsLinkRequest request, st::CancellationToken cancellationToken) =>
            UpdateGoogleAdsLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a GoogleAdsLink on a property
        /// </summary>
        /// <param name="googleAdsLink">
        /// The GoogleAdsLink to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleAdsLink UpdateGoogleAdsLink(GoogleAdsLink googleAdsLink, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateGoogleAdsLink(new UpdateGoogleAdsLinkRequest
            {
                GoogleAdsLink = googleAdsLink,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a GoogleAdsLink on a property
        /// </summary>
        /// <param name="googleAdsLink">
        /// The GoogleAdsLink to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> UpdateGoogleAdsLinkAsync(GoogleAdsLink googleAdsLink, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateGoogleAdsLinkAsync(new UpdateGoogleAdsLinkRequest
            {
                GoogleAdsLink = googleAdsLink,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a GoogleAdsLink on a property
        /// </summary>
        /// <param name="googleAdsLink">
        /// The GoogleAdsLink to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleAdsLink> UpdateGoogleAdsLinkAsync(GoogleAdsLink googleAdsLink, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateGoogleAdsLinkAsync(googleAdsLink, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteGoogleAdsLink(DeleteGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteGoogleAdsLinkAsync(DeleteGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteGoogleAdsLinkAsync(DeleteGoogleAdsLinkRequest request, st::CancellationToken cancellationToken) =>
            DeleteGoogleAdsLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/googleAdsLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteGoogleAdsLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteGoogleAdsLink(new DeleteGoogleAdsLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/googleAdsLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteGoogleAdsLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteGoogleAdsLinkAsync(new DeleteGoogleAdsLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/googleAdsLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteGoogleAdsLinkAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteGoogleAdsLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/googleAdsLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteGoogleAdsLink(GoogleAdsLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteGoogleAdsLink(new DeleteGoogleAdsLinkRequest
            {
                GoogleAdsLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/googleAdsLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteGoogleAdsLinkAsync(GoogleAdsLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteGoogleAdsLinkAsync(new DeleteGoogleAdsLinkRequest
            {
                GoogleAdsLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/googleAdsLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteGoogleAdsLinkAsync(GoogleAdsLinkName name, st::CancellationToken cancellationToken) =>
            DeleteGoogleAdsLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists GoogleAdsLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="GoogleAdsLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListGoogleAdsLinksResponse, GoogleAdsLink> ListGoogleAdsLinks(ListGoogleAdsLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists GoogleAdsLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="GoogleAdsLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListGoogleAdsLinksResponse, GoogleAdsLink> ListGoogleAdsLinksAsync(ListGoogleAdsLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists GoogleAdsLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="GoogleAdsLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListGoogleAdsLinksResponse, GoogleAdsLink> ListGoogleAdsLinks(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListGoogleAdsLinksRequest request = new ListGoogleAdsLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListGoogleAdsLinks(request, callSettings);
        }

        /// <summary>
        /// Lists GoogleAdsLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="GoogleAdsLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListGoogleAdsLinksResponse, GoogleAdsLink> ListGoogleAdsLinksAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListGoogleAdsLinksRequest request = new ListGoogleAdsLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListGoogleAdsLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Lists GoogleAdsLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="GoogleAdsLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListGoogleAdsLinksResponse, GoogleAdsLink> ListGoogleAdsLinks(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListGoogleAdsLinksRequest request = new ListGoogleAdsLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListGoogleAdsLinks(request, callSettings);
        }

        /// <summary>
        /// Lists GoogleAdsLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="GoogleAdsLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListGoogleAdsLinksResponse, GoogleAdsLink> ListGoogleAdsLinksAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListGoogleAdsLinksRequest request = new ListGoogleAdsLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListGoogleAdsLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataSharingSettings GetDataSharingSettings(GetDataSharingSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataSharingSettings> GetDataSharingSettingsAsync(GetDataSharingSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataSharingSettings> GetDataSharingSettingsAsync(GetDataSharingSettingsRequest request, st::CancellationToken cancellationToken) =>
            GetDataSharingSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format: accounts/{account}/dataSharingSettings
        /// 
        /// Example: `accounts/1000/dataSharingSettings`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataSharingSettings GetDataSharingSettings(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataSharingSettings(new GetDataSharingSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format: accounts/{account}/dataSharingSettings
        /// 
        /// Example: `accounts/1000/dataSharingSettings`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataSharingSettings> GetDataSharingSettingsAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataSharingSettingsAsync(new GetDataSharingSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format: accounts/{account}/dataSharingSettings
        /// 
        /// Example: `accounts/1000/dataSharingSettings`
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataSharingSettings> GetDataSharingSettingsAsync(string name, st::CancellationToken cancellationToken) =>
            GetDataSharingSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format: accounts/{account}/dataSharingSettings
        /// 
        /// Example: `accounts/1000/dataSharingSettings`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataSharingSettings GetDataSharingSettings(DataSharingSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataSharingSettings(new GetDataSharingSettingsRequest
            {
                DataSharingSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format: accounts/{account}/dataSharingSettings
        /// 
        /// Example: `accounts/1000/dataSharingSettings`
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataSharingSettings> GetDataSharingSettingsAsync(DataSharingSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataSharingSettingsAsync(new GetDataSharingSettingsRequest
            {
                DataSharingSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format: accounts/{account}/dataSharingSettings
        /// 
        /// Example: `accounts/1000/dataSharingSettings`
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataSharingSettings> GetDataSharingSettingsAsync(DataSharingSettingsName name, st::CancellationToken cancellationToken) =>
            GetDataSharingSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual MeasurementProtocolSecret GetMeasurementProtocolSecret(GetMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> GetMeasurementProtocolSecretAsync(GetMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> GetMeasurementProtocolSecretAsync(GetMeasurementProtocolSecretRequest request, st::CancellationToken cancellationToken) =>
            GetMeasurementProtocolSecretAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the measurement protocol secret to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual MeasurementProtocolSecret GetMeasurementProtocolSecret(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetMeasurementProtocolSecret(new GetMeasurementProtocolSecretRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the measurement protocol secret to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> GetMeasurementProtocolSecretAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetMeasurementProtocolSecretAsync(new GetMeasurementProtocolSecretRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the measurement protocol secret to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> GetMeasurementProtocolSecretAsync(string name, st::CancellationToken cancellationToken) =>
            GetMeasurementProtocolSecretAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the measurement protocol secret to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual MeasurementProtocolSecret GetMeasurementProtocolSecret(MeasurementProtocolSecretName name, gaxgrpc::CallSettings callSettings = null) =>
            GetMeasurementProtocolSecret(new GetMeasurementProtocolSecretRequest
            {
                MeasurementProtocolSecretName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the measurement protocol secret to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> GetMeasurementProtocolSecretAsync(MeasurementProtocolSecretName name, gaxgrpc::CallSettings callSettings = null) =>
            GetMeasurementProtocolSecretAsync(new GetMeasurementProtocolSecretRequest
            {
                MeasurementProtocolSecretName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the measurement protocol secret to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> GetMeasurementProtocolSecretAsync(MeasurementProtocolSecretName name, st::CancellationToken cancellationToken) =>
            GetMeasurementProtocolSecretAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns child MeasurementProtocolSecrets under the specified parent
        /// Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="MeasurementProtocolSecret"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret> ListMeasurementProtocolSecrets(ListMeasurementProtocolSecretsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns child MeasurementProtocolSecrets under the specified parent
        /// Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="MeasurementProtocolSecret"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret> ListMeasurementProtocolSecretsAsync(ListMeasurementProtocolSecretsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns child MeasurementProtocolSecrets under the specified parent
        /// Property.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent stream.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="MeasurementProtocolSecret"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret> ListMeasurementProtocolSecrets(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListMeasurementProtocolSecretsRequest request = new ListMeasurementProtocolSecretsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListMeasurementProtocolSecrets(request, callSettings);
        }

        /// <summary>
        /// Returns child MeasurementProtocolSecrets under the specified parent
        /// Property.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent stream.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="MeasurementProtocolSecret"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret> ListMeasurementProtocolSecretsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListMeasurementProtocolSecretsRequest request = new ListMeasurementProtocolSecretsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListMeasurementProtocolSecretsAsync(request, callSettings);
        }

        /// <summary>
        /// Returns child MeasurementProtocolSecrets under the specified parent
        /// Property.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent stream.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="MeasurementProtocolSecret"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret> ListMeasurementProtocolSecrets(DataStreamName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListMeasurementProtocolSecretsRequest request = new ListMeasurementProtocolSecretsRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListMeasurementProtocolSecrets(request, callSettings);
        }

        /// <summary>
        /// Returns child MeasurementProtocolSecrets under the specified parent
        /// Property.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent stream.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="MeasurementProtocolSecret"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret> ListMeasurementProtocolSecretsAsync(DataStreamName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListMeasurementProtocolSecretsRequest request = new ListMeasurementProtocolSecretsRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListMeasurementProtocolSecretsAsync(request, callSettings);
        }

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual MeasurementProtocolSecret CreateMeasurementProtocolSecret(CreateMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> CreateMeasurementProtocolSecretAsync(CreateMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> CreateMeasurementProtocolSecretAsync(CreateMeasurementProtocolSecretRequest request, st::CancellationToken cancellationToken) =>
            CreateMeasurementProtocolSecretAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this secret will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual MeasurementProtocolSecret CreateMeasurementProtocolSecret(string parent, MeasurementProtocolSecret measurementProtocolSecret, gaxgrpc::CallSettings callSettings = null) =>
            CreateMeasurementProtocolSecret(new CreateMeasurementProtocolSecretRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                MeasurementProtocolSecret = gax::GaxPreconditions.CheckNotNull(measurementProtocolSecret, nameof(measurementProtocolSecret)),
            }, callSettings);

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this secret will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> CreateMeasurementProtocolSecretAsync(string parent, MeasurementProtocolSecret measurementProtocolSecret, gaxgrpc::CallSettings callSettings = null) =>
            CreateMeasurementProtocolSecretAsync(new CreateMeasurementProtocolSecretRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                MeasurementProtocolSecret = gax::GaxPreconditions.CheckNotNull(measurementProtocolSecret, nameof(measurementProtocolSecret)),
            }, callSettings);

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this secret will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> CreateMeasurementProtocolSecretAsync(string parent, MeasurementProtocolSecret measurementProtocolSecret, st::CancellationToken cancellationToken) =>
            CreateMeasurementProtocolSecretAsync(parent, measurementProtocolSecret, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this secret will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual MeasurementProtocolSecret CreateMeasurementProtocolSecret(DataStreamName parent, MeasurementProtocolSecret measurementProtocolSecret, gaxgrpc::CallSettings callSettings = null) =>
            CreateMeasurementProtocolSecret(new CreateMeasurementProtocolSecretRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                MeasurementProtocolSecret = gax::GaxPreconditions.CheckNotNull(measurementProtocolSecret, nameof(measurementProtocolSecret)),
            }, callSettings);

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this secret will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> CreateMeasurementProtocolSecretAsync(DataStreamName parent, MeasurementProtocolSecret measurementProtocolSecret, gaxgrpc::CallSettings callSettings = null) =>
            CreateMeasurementProtocolSecretAsync(new CreateMeasurementProtocolSecretRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                MeasurementProtocolSecret = gax::GaxPreconditions.CheckNotNull(measurementProtocolSecret, nameof(measurementProtocolSecret)),
            }, callSettings);

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this secret will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> CreateMeasurementProtocolSecretAsync(DataStreamName parent, MeasurementProtocolSecret measurementProtocolSecret, st::CancellationToken cancellationToken) =>
            CreateMeasurementProtocolSecretAsync(parent, measurementProtocolSecret, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteMeasurementProtocolSecret(DeleteMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteMeasurementProtocolSecretAsync(DeleteMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteMeasurementProtocolSecretAsync(DeleteMeasurementProtocolSecretRequest request, st::CancellationToken cancellationToken) =>
            DeleteMeasurementProtocolSecretAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the MeasurementProtocolSecret to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteMeasurementProtocolSecret(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteMeasurementProtocolSecret(new DeleteMeasurementProtocolSecretRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the MeasurementProtocolSecret to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteMeasurementProtocolSecretAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteMeasurementProtocolSecretAsync(new DeleteMeasurementProtocolSecretRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the MeasurementProtocolSecret to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteMeasurementProtocolSecretAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteMeasurementProtocolSecretAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the MeasurementProtocolSecret to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteMeasurementProtocolSecret(MeasurementProtocolSecretName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteMeasurementProtocolSecret(new DeleteMeasurementProtocolSecretRequest
            {
                MeasurementProtocolSecretName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the MeasurementProtocolSecret to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteMeasurementProtocolSecretAsync(MeasurementProtocolSecretName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteMeasurementProtocolSecretAsync(new DeleteMeasurementProtocolSecretRequest
            {
                MeasurementProtocolSecretName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the MeasurementProtocolSecret to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/measurementProtocolSecrets/{measurementProtocolSecret}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteMeasurementProtocolSecretAsync(MeasurementProtocolSecretName name, st::CancellationToken cancellationToken) =>
            DeleteMeasurementProtocolSecretAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual MeasurementProtocolSecret UpdateMeasurementProtocolSecret(UpdateMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> UpdateMeasurementProtocolSecretAsync(UpdateMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> UpdateMeasurementProtocolSecretAsync(UpdateMeasurementProtocolSecretRequest request, st::CancellationToken cancellationToken) =>
            UpdateMeasurementProtocolSecretAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a measurement protocol secret.
        /// </summary>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual MeasurementProtocolSecret UpdateMeasurementProtocolSecret(MeasurementProtocolSecret measurementProtocolSecret, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateMeasurementProtocolSecret(new UpdateMeasurementProtocolSecretRequest
            {
                MeasurementProtocolSecret = gax::GaxPreconditions.CheckNotNull(measurementProtocolSecret, nameof(measurementProtocolSecret)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a measurement protocol secret.
        /// </summary>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> UpdateMeasurementProtocolSecretAsync(MeasurementProtocolSecret measurementProtocolSecret, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateMeasurementProtocolSecretAsync(new UpdateMeasurementProtocolSecretRequest
            {
                MeasurementProtocolSecret = gax::GaxPreconditions.CheckNotNull(measurementProtocolSecret, nameof(measurementProtocolSecret)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a measurement protocol secret.
        /// </summary>
        /// <param name="measurementProtocolSecret">
        /// Required. The measurement protocol secret to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<MeasurementProtocolSecret> UpdateMeasurementProtocolSecretAsync(MeasurementProtocolSecret measurementProtocolSecret, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateMeasurementProtocolSecretAsync(measurementProtocolSecret, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Acknowledges the terms of user data collection for the specified property.
        /// 
        /// This acknowledgement must be completed (either in the Google Analytics UI
        /// or through this API) before MeasurementProtocolSecret resources may be
        /// created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AcknowledgeUserDataCollectionResponse AcknowledgeUserDataCollection(AcknowledgeUserDataCollectionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Acknowledges the terms of user data collection for the specified property.
        /// 
        /// This acknowledgement must be completed (either in the Google Analytics UI
        /// or through this API) before MeasurementProtocolSecret resources may be
        /// created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AcknowledgeUserDataCollectionResponse> AcknowledgeUserDataCollectionAsync(AcknowledgeUserDataCollectionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Acknowledges the terms of user data collection for the specified property.
        /// 
        /// This acknowledgement must be completed (either in the Google Analytics UI
        /// or through this API) before MeasurementProtocolSecret resources may be
        /// created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AcknowledgeUserDataCollectionResponse> AcknowledgeUserDataCollectionAsync(AcknowledgeUserDataCollectionRequest request, st::CancellationToken cancellationToken) =>
            AcknowledgeUserDataCollectionAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SKAdNetworkConversionValueSchema GetSKAdNetworkConversionValueSchema(GetSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> GetSKAdNetworkConversionValueSchemaAsync(GetSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> GetSKAdNetworkConversionValueSchemaAsync(GetSKAdNetworkConversionValueSchemaRequest request, st::CancellationToken cancellationToken) =>
            GetSKAdNetworkConversionValueSchemaAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of SKAdNetwork conversion value schema to look
        /// up. Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SKAdNetworkConversionValueSchema GetSKAdNetworkConversionValueSchema(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetSKAdNetworkConversionValueSchema(new GetSKAdNetworkConversionValueSchemaRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of SKAdNetwork conversion value schema to look
        /// up. Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> GetSKAdNetworkConversionValueSchemaAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetSKAdNetworkConversionValueSchemaAsync(new GetSKAdNetworkConversionValueSchemaRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of SKAdNetwork conversion value schema to look
        /// up. Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> GetSKAdNetworkConversionValueSchemaAsync(string name, st::CancellationToken cancellationToken) =>
            GetSKAdNetworkConversionValueSchemaAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of SKAdNetwork conversion value schema to look
        /// up. Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SKAdNetworkConversionValueSchema GetSKAdNetworkConversionValueSchema(SKAdNetworkConversionValueSchemaName name, gaxgrpc::CallSettings callSettings = null) =>
            GetSKAdNetworkConversionValueSchema(new GetSKAdNetworkConversionValueSchemaRequest
            {
                SKAdNetworkConversionValueSchemaName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of SKAdNetwork conversion value schema to look
        /// up. Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> GetSKAdNetworkConversionValueSchemaAsync(SKAdNetworkConversionValueSchemaName name, gaxgrpc::CallSettings callSettings = null) =>
            GetSKAdNetworkConversionValueSchemaAsync(new GetSKAdNetworkConversionValueSchemaRequest
            {
                SKAdNetworkConversionValueSchemaName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of SKAdNetwork conversion value schema to look
        /// up. Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> GetSKAdNetworkConversionValueSchemaAsync(SKAdNetworkConversionValueSchemaName name, st::CancellationToken cancellationToken) =>
            GetSKAdNetworkConversionValueSchemaAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SKAdNetworkConversionValueSchema CreateSKAdNetworkConversionValueSchema(CreateSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> CreateSKAdNetworkConversionValueSchemaAsync(CreateSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> CreateSKAdNetworkConversionValueSchemaAsync(CreateSKAdNetworkConversionValueSchemaRequest request, st::CancellationToken cancellationToken) =>
            CreateSKAdNetworkConversionValueSchemaAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this schema will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SKAdNetworkConversionValueSchema CreateSKAdNetworkConversionValueSchema(string parent, SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, gaxgrpc::CallSettings callSettings = null) =>
            CreateSKAdNetworkConversionValueSchema(new CreateSKAdNetworkConversionValueSchemaRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                SkadnetworkConversionValueSchema = gax::GaxPreconditions.CheckNotNull(skadnetworkConversionValueSchema, nameof(skadnetworkConversionValueSchema)),
            }, callSettings);

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this schema will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> CreateSKAdNetworkConversionValueSchemaAsync(string parent, SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, gaxgrpc::CallSettings callSettings = null) =>
            CreateSKAdNetworkConversionValueSchemaAsync(new CreateSKAdNetworkConversionValueSchemaRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                SkadnetworkConversionValueSchema = gax::GaxPreconditions.CheckNotNull(skadnetworkConversionValueSchema, nameof(skadnetworkConversionValueSchema)),
            }, callSettings);

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this schema will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> CreateSKAdNetworkConversionValueSchemaAsync(string parent, SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, st::CancellationToken cancellationToken) =>
            CreateSKAdNetworkConversionValueSchemaAsync(parent, skadnetworkConversionValueSchema, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this schema will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SKAdNetworkConversionValueSchema CreateSKAdNetworkConversionValueSchema(DataStreamName parent, SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, gaxgrpc::CallSettings callSettings = null) =>
            CreateSKAdNetworkConversionValueSchema(new CreateSKAdNetworkConversionValueSchemaRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                SkadnetworkConversionValueSchema = gax::GaxPreconditions.CheckNotNull(skadnetworkConversionValueSchema, nameof(skadnetworkConversionValueSchema)),
            }, callSettings);

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this schema will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> CreateSKAdNetworkConversionValueSchemaAsync(DataStreamName parent, SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, gaxgrpc::CallSettings callSettings = null) =>
            CreateSKAdNetworkConversionValueSchemaAsync(new CreateSKAdNetworkConversionValueSchemaRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                SkadnetworkConversionValueSchema = gax::GaxPreconditions.CheckNotNull(skadnetworkConversionValueSchema, nameof(skadnetworkConversionValueSchema)),
            }, callSettings);

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The parent resource where this schema will be created.
        /// Format: properties/{property}/dataStreams/{dataStream}
        /// </param>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> CreateSKAdNetworkConversionValueSchemaAsync(DataStreamName parent, SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, st::CancellationToken cancellationToken) =>
            CreateSKAdNetworkConversionValueSchemaAsync(parent, skadnetworkConversionValueSchema, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSKAdNetworkConversionValueSchema(DeleteSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSKAdNetworkConversionValueSchemaAsync(DeleteSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSKAdNetworkConversionValueSchemaAsync(DeleteSKAdNetworkConversionValueSchemaRequest request, st::CancellationToken cancellationToken) =>
            DeleteSKAdNetworkConversionValueSchemaAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SKAdNetworkConversionValueSchema to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSKAdNetworkConversionValueSchema(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSKAdNetworkConversionValueSchema(new DeleteSKAdNetworkConversionValueSchemaRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SKAdNetworkConversionValueSchema to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSKAdNetworkConversionValueSchemaAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSKAdNetworkConversionValueSchemaAsync(new DeleteSKAdNetworkConversionValueSchemaRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SKAdNetworkConversionValueSchema to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSKAdNetworkConversionValueSchemaAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteSKAdNetworkConversionValueSchemaAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SKAdNetworkConversionValueSchema to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSKAdNetworkConversionValueSchema(SKAdNetworkConversionValueSchemaName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSKAdNetworkConversionValueSchema(new DeleteSKAdNetworkConversionValueSchemaRequest
            {
                SKAdNetworkConversionValueSchemaName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SKAdNetworkConversionValueSchema to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSKAdNetworkConversionValueSchemaAsync(SKAdNetworkConversionValueSchemaName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSKAdNetworkConversionValueSchemaAsync(new DeleteSKAdNetworkConversionValueSchemaRequest
            {
                SKAdNetworkConversionValueSchemaName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SKAdNetworkConversionValueSchema to delete.
        /// Format:
        /// properties/{property}/dataStreams/{dataStream}/sKAdNetworkConversionValueSchema/{skadnetwork_conversion_value_schema}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSKAdNetworkConversionValueSchemaAsync(SKAdNetworkConversionValueSchemaName name, st::CancellationToken cancellationToken) =>
            DeleteSKAdNetworkConversionValueSchemaAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SKAdNetworkConversionValueSchema UpdateSKAdNetworkConversionValueSchema(UpdateSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> UpdateSKAdNetworkConversionValueSchemaAsync(UpdateSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> UpdateSKAdNetworkConversionValueSchemaAsync(UpdateSKAdNetworkConversionValueSchemaRequest request, st::CancellationToken cancellationToken) =>
            UpdateSKAdNetworkConversionValueSchemaAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SKAdNetworkConversionValueSchema UpdateSKAdNetworkConversionValueSchema(SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateSKAdNetworkConversionValueSchema(new UpdateSKAdNetworkConversionValueSchemaRequest
            {
                SkadnetworkConversionValueSchema = gax::GaxPreconditions.CheckNotNull(skadnetworkConversionValueSchema, nameof(skadnetworkConversionValueSchema)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> UpdateSKAdNetworkConversionValueSchemaAsync(SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateSKAdNetworkConversionValueSchemaAsync(new UpdateSKAdNetworkConversionValueSchemaRequest
            {
                SkadnetworkConversionValueSchema = gax::GaxPreconditions.CheckNotNull(skadnetworkConversionValueSchema, nameof(skadnetworkConversionValueSchema)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="skadnetworkConversionValueSchema">
        /// Required. SKAdNetwork conversion value schema to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SKAdNetworkConversionValueSchema> UpdateSKAdNetworkConversionValueSchemaAsync(SKAdNetworkConversionValueSchema skadnetworkConversionValueSchema, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateSKAdNetworkConversionValueSchemaAsync(skadnetworkConversionValueSchema, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists SKAdNetworkConversionValueSchema on a stream.
        /// Properties can have at most one SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SKAdNetworkConversionValueSchema"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema> ListSKAdNetworkConversionValueSchemas(ListSKAdNetworkConversionValueSchemasRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists SKAdNetworkConversionValueSchema on a stream.
        /// Properties can have at most one SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="SKAdNetworkConversionValueSchema"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema> ListSKAdNetworkConversionValueSchemasAsync(ListSKAdNetworkConversionValueSchemasRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists SKAdNetworkConversionValueSchema on a stream.
        /// Properties can have at most one SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The DataStream resource to list schemas for.
        /// Format:
        /// properties/{property_id}/dataStreams/{dataStream}
        /// Example: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SKAdNetworkConversionValueSchema"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema> ListSKAdNetworkConversionValueSchemas(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSKAdNetworkConversionValueSchemasRequest request = new ListSKAdNetworkConversionValueSchemasRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSKAdNetworkConversionValueSchemas(request, callSettings);
        }

        /// <summary>
        /// Lists SKAdNetworkConversionValueSchema on a stream.
        /// Properties can have at most one SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The DataStream resource to list schemas for.
        /// Format:
        /// properties/{property_id}/dataStreams/{dataStream}
        /// Example: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="SKAdNetworkConversionValueSchema"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema> ListSKAdNetworkConversionValueSchemasAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSKAdNetworkConversionValueSchemasRequest request = new ListSKAdNetworkConversionValueSchemasRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSKAdNetworkConversionValueSchemasAsync(request, callSettings);
        }

        /// <summary>
        /// Lists SKAdNetworkConversionValueSchema on a stream.
        /// Properties can have at most one SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The DataStream resource to list schemas for.
        /// Format:
        /// properties/{property_id}/dataStreams/{dataStream}
        /// Example: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SKAdNetworkConversionValueSchema"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema> ListSKAdNetworkConversionValueSchemas(DataStreamName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSKAdNetworkConversionValueSchemasRequest request = new ListSKAdNetworkConversionValueSchemasRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSKAdNetworkConversionValueSchemas(request, callSettings);
        }

        /// <summary>
        /// Lists SKAdNetworkConversionValueSchema on a stream.
        /// Properties can have at most one SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="parent">
        /// Required. The DataStream resource to list schemas for.
        /// Format:
        /// properties/{property_id}/dataStreams/{dataStream}
        /// Example: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="SKAdNetworkConversionValueSchema"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema> ListSKAdNetworkConversionValueSchemasAsync(DataStreamName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSKAdNetworkConversionValueSchemasRequest request = new ListSKAdNetworkConversionValueSchemasRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSKAdNetworkConversionValueSchemasAsync(request, callSettings);
        }

        /// <summary>
        /// Searches through all changes to an account or its children given the
        /// specified set of filters.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ChangeHistoryEvent"/> resources.</returns>
        public virtual gax::PagedEnumerable<SearchChangeHistoryEventsResponse, ChangeHistoryEvent> SearchChangeHistoryEvents(SearchChangeHistoryEventsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Searches through all changes to an account or its children given the
        /// specified set of filters.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ChangeHistoryEvent"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<SearchChangeHistoryEventsResponse, ChangeHistoryEvent> SearchChangeHistoryEventsAsync(SearchChangeHistoryEventsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleSignalsSettings GetGoogleSignalsSettings(GetGoogleSignalsSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> GetGoogleSignalsSettingsAsync(GetGoogleSignalsSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> GetGoogleSignalsSettingsAsync(GetGoogleSignalsSettingsRequest request, st::CancellationToken cancellationToken) =>
            GetGoogleSignalsSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the google signals settings to retrieve.
        /// Format: properties/{property}/googleSignalsSettings
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleSignalsSettings GetGoogleSignalsSettings(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetGoogleSignalsSettings(new GetGoogleSignalsSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the google signals settings to retrieve.
        /// Format: properties/{property}/googleSignalsSettings
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> GetGoogleSignalsSettingsAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetGoogleSignalsSettingsAsync(new GetGoogleSignalsSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the google signals settings to retrieve.
        /// Format: properties/{property}/googleSignalsSettings
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> GetGoogleSignalsSettingsAsync(string name, st::CancellationToken cancellationToken) =>
            GetGoogleSignalsSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the google signals settings to retrieve.
        /// Format: properties/{property}/googleSignalsSettings
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleSignalsSettings GetGoogleSignalsSettings(GoogleSignalsSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetGoogleSignalsSettings(new GetGoogleSignalsSettingsRequest
            {
                GoogleSignalsSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the google signals settings to retrieve.
        /// Format: properties/{property}/googleSignalsSettings
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> GetGoogleSignalsSettingsAsync(GoogleSignalsSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetGoogleSignalsSettingsAsync(new GetGoogleSignalsSettingsRequest
            {
                GoogleSignalsSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the google signals settings to retrieve.
        /// Format: properties/{property}/googleSignalsSettings
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> GetGoogleSignalsSettingsAsync(GoogleSignalsSettingsName name, st::CancellationToken cancellationToken) =>
            GetGoogleSignalsSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleSignalsSettings UpdateGoogleSignalsSettings(UpdateGoogleSignalsSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> UpdateGoogleSignalsSettingsAsync(UpdateGoogleSignalsSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> UpdateGoogleSignalsSettingsAsync(UpdateGoogleSignalsSettingsRequest request, st::CancellationToken cancellationToken) =>
            UpdateGoogleSignalsSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates Google Signals settings for a property.
        /// </summary>
        /// <param name="googleSignalsSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual GoogleSignalsSettings UpdateGoogleSignalsSettings(GoogleSignalsSettings googleSignalsSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateGoogleSignalsSettings(new UpdateGoogleSignalsSettingsRequest
            {
                GoogleSignalsSettings = gax::GaxPreconditions.CheckNotNull(googleSignalsSettings, nameof(googleSignalsSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates Google Signals settings for a property.
        /// </summary>
        /// <param name="googleSignalsSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> UpdateGoogleSignalsSettingsAsync(GoogleSignalsSettings googleSignalsSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateGoogleSignalsSettingsAsync(new UpdateGoogleSignalsSettingsRequest
            {
                GoogleSignalsSettings = gax::GaxPreconditions.CheckNotNull(googleSignalsSettings, nameof(googleSignalsSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates Google Signals settings for a property.
        /// </summary>
        /// <param name="googleSignalsSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<GoogleSignalsSettings> UpdateGoogleSignalsSettingsAsync(GoogleSignalsSettings googleSignalsSettings, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateGoogleSignalsSettingsAsync(googleSignalsSettings, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual ConversionEvent CreateConversionEvent(CreateConversionEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> CreateConversionEventAsync(CreateConversionEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> CreateConversionEventAsync(CreateConversionEventRequest request, st::CancellationToken cancellationToken) =>
            CreateConversionEventAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this conversion
        /// event will be created. Format: properties/123
        /// </param>
        /// <param name="conversionEvent">
        /// Required. The conversion event to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual ConversionEvent CreateConversionEvent(string parent, ConversionEvent conversionEvent, gaxgrpc::CallSettings callSettings = null) =>
            CreateConversionEvent(new CreateConversionEventRequest
            {
                ConversionEvent = gax::GaxPreconditions.CheckNotNull(conversionEvent, nameof(conversionEvent)),
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this conversion
        /// event will be created. Format: properties/123
        /// </param>
        /// <param name="conversionEvent">
        /// Required. The conversion event to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> CreateConversionEventAsync(string parent, ConversionEvent conversionEvent, gaxgrpc::CallSettings callSettings = null) =>
            CreateConversionEventAsync(new CreateConversionEventRequest
            {
                ConversionEvent = gax::GaxPreconditions.CheckNotNull(conversionEvent, nameof(conversionEvent)),
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this conversion
        /// event will be created. Format: properties/123
        /// </param>
        /// <param name="conversionEvent">
        /// Required. The conversion event to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> CreateConversionEventAsync(string parent, ConversionEvent conversionEvent, st::CancellationToken cancellationToken) =>
            CreateConversionEventAsync(parent, conversionEvent, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this conversion
        /// event will be created. Format: properties/123
        /// </param>
        /// <param name="conversionEvent">
        /// Required. The conversion event to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual ConversionEvent CreateConversionEvent(PropertyName parent, ConversionEvent conversionEvent, gaxgrpc::CallSettings callSettings = null) =>
            CreateConversionEvent(new CreateConversionEventRequest
            {
                ConversionEvent = gax::GaxPreconditions.CheckNotNull(conversionEvent, nameof(conversionEvent)),
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this conversion
        /// event will be created. Format: properties/123
        /// </param>
        /// <param name="conversionEvent">
        /// Required. The conversion event to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> CreateConversionEventAsync(PropertyName parent, ConversionEvent conversionEvent, gaxgrpc::CallSettings callSettings = null) =>
            CreateConversionEventAsync(new CreateConversionEventRequest
            {
                ConversionEvent = gax::GaxPreconditions.CheckNotNull(conversionEvent, nameof(conversionEvent)),
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this conversion
        /// event will be created. Format: properties/123
        /// </param>
        /// <param name="conversionEvent">
        /// Required. The conversion event to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> CreateConversionEventAsync(PropertyName parent, ConversionEvent conversionEvent, st::CancellationToken cancellationToken) =>
            CreateConversionEventAsync(parent, conversionEvent, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `UpdateKeyEvent` instead.
        /// Updates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual ConversionEvent UpdateConversionEvent(UpdateConversionEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `UpdateKeyEvent` instead.
        /// Updates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> UpdateConversionEventAsync(UpdateConversionEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `UpdateKeyEvent` instead.
        /// Updates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> UpdateConversionEventAsync(UpdateConversionEventRequest request, st::CancellationToken cancellationToken) =>
            UpdateConversionEventAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `UpdateKeyEvent` instead.
        /// Updates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="conversionEvent">
        /// Required. The conversion event to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual ConversionEvent UpdateConversionEvent(ConversionEvent conversionEvent, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateConversionEvent(new UpdateConversionEventRequest
            {
                ConversionEvent = gax::GaxPreconditions.CheckNotNull(conversionEvent, nameof(conversionEvent)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `UpdateKeyEvent` instead.
        /// Updates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="conversionEvent">
        /// Required. The conversion event to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> UpdateConversionEventAsync(ConversionEvent conversionEvent, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateConversionEventAsync(new UpdateConversionEventRequest
            {
                ConversionEvent = gax::GaxPreconditions.CheckNotNull(conversionEvent, nameof(conversionEvent)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `UpdateKeyEvent` instead.
        /// Updates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="conversionEvent">
        /// Required. The conversion event to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> UpdateConversionEventAsync(ConversionEvent conversionEvent, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateConversionEventAsync(conversionEvent, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual ConversionEvent GetConversionEvent(GetConversionEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> GetConversionEventAsync(GetConversionEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> GetConversionEventAsync(GetConversionEventRequest request, st::CancellationToken cancellationToken) =>
            GetConversionEventAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to retrieve.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual ConversionEvent GetConversionEvent(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetConversionEvent(new GetConversionEventRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to retrieve.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> GetConversionEventAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetConversionEventAsync(new GetConversionEventRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to retrieve.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> GetConversionEventAsync(string name, st::CancellationToken cancellationToken) =>
            GetConversionEventAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to retrieve.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual ConversionEvent GetConversionEvent(ConversionEventName name, gaxgrpc::CallSettings callSettings = null) =>
            GetConversionEvent(new GetConversionEventRequest
            {
                ConversionEventName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to retrieve.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> GetConversionEventAsync(ConversionEventName name, gaxgrpc::CallSettings callSettings = null) =>
            GetConversionEventAsync(new GetConversionEventRequest
            {
                ConversionEventName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to retrieve.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task<ConversionEvent> GetConversionEventAsync(ConversionEventName name, st::CancellationToken cancellationToken) =>
            GetConversionEventAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual void DeleteConversionEvent(DeleteConversionEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task DeleteConversionEventAsync(DeleteConversionEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task DeleteConversionEventAsync(DeleteConversionEventRequest request, st::CancellationToken cancellationToken) =>
            DeleteConversionEventAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to delete.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual void DeleteConversionEvent(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteConversionEvent(new DeleteConversionEventRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to delete.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task DeleteConversionEventAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteConversionEventAsync(new DeleteConversionEventRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to delete.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task DeleteConversionEventAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteConversionEventAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to delete.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual void DeleteConversionEvent(ConversionEventName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteConversionEvent(new DeleteConversionEventRequest
            {
                ConversionEventName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to delete.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task DeleteConversionEventAsync(ConversionEventName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteConversionEventAsync(new DeleteConversionEventRequest
            {
                ConversionEventName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the conversion event to delete.
        /// Format: properties/{property}/conversionEvents/{conversion_event}
        /// Example: "properties/123/conversionEvents/456"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public virtual stt::Task DeleteConversionEventAsync(ConversionEventName name, st::CancellationToken cancellationToken) =>
            DeleteConversionEventAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deprecated: Use `ListKeyEvents` instead.
        /// Returns a list of conversion events in the specified parent property.
        /// 
        /// Returns an empty list if no conversion events are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ConversionEvent"/> resources.</returns>
        [sys::ObsoleteAttribute]
        public virtual gax::PagedEnumerable<ListConversionEventsResponse, ConversionEvent> ListConversionEvents(ListConversionEventsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `ListKeyEvents` instead.
        /// Returns a list of conversion events in the specified parent property.
        /// 
        /// Returns an empty list if no conversion events are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ConversionEvent"/> resources.</returns>
        [sys::ObsoleteAttribute]
        public virtual gax::PagedAsyncEnumerable<ListConversionEventsResponse, ConversionEvent> ListConversionEventsAsync(ListConversionEventsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deprecated: Use `ListKeyEvents` instead.
        /// Returns a list of conversion events in the specified parent property.
        /// 
        /// Returns an empty list if no conversion events are found.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property.
        /// Example: 'properties/123'
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ConversionEvent"/> resources.</returns>
        [sys::ObsoleteAttribute]
        public virtual gax::PagedEnumerable<ListConversionEventsResponse, ConversionEvent> ListConversionEvents(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListConversionEventsRequest request = new ListConversionEventsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListConversionEvents(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `ListKeyEvents` instead.
        /// Returns a list of conversion events in the specified parent property.
        /// 
        /// Returns an empty list if no conversion events are found.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property.
        /// Example: 'properties/123'
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ConversionEvent"/> resources.</returns>
        [sys::ObsoleteAttribute]
        public virtual gax::PagedAsyncEnumerable<ListConversionEventsResponse, ConversionEvent> ListConversionEventsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListConversionEventsRequest request = new ListConversionEventsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListConversionEventsAsync(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `ListKeyEvents` instead.
        /// Returns a list of conversion events in the specified parent property.
        /// 
        /// Returns an empty list if no conversion events are found.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property.
        /// Example: 'properties/123'
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ConversionEvent"/> resources.</returns>
        [sys::ObsoleteAttribute]
        public virtual gax::PagedEnumerable<ListConversionEventsResponse, ConversionEvent> ListConversionEvents(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListConversionEventsRequest request = new ListConversionEventsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListConversionEvents(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `ListKeyEvents` instead.
        /// Returns a list of conversion events in the specified parent property.
        /// 
        /// Returns an empty list if no conversion events are found.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property.
        /// Example: 'properties/123'
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ConversionEvent"/> resources.</returns>
        [sys::ObsoleteAttribute]
        public virtual gax::PagedAsyncEnumerable<ListConversionEventsResponse, ConversionEvent> ListConversionEventsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListConversionEventsRequest request = new ListConversionEventsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListConversionEventsAsync(request, callSettings);
        }

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual KeyEvent CreateKeyEvent(CreateKeyEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> CreateKeyEventAsync(CreateKeyEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> CreateKeyEventAsync(CreateKeyEventRequest request, st::CancellationToken cancellationToken) =>
            CreateKeyEventAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this Key Event
        /// will be created. Format: properties/123
        /// </param>
        /// <param name="keyEvent">
        /// Required. The Key Event to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual KeyEvent CreateKeyEvent(string parent, KeyEvent keyEvent, gaxgrpc::CallSettings callSettings = null) =>
            CreateKeyEvent(new CreateKeyEventRequest
            {
                KeyEvent = gax::GaxPreconditions.CheckNotNull(keyEvent, nameof(keyEvent)),
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            }, callSettings);

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this Key Event
        /// will be created. Format: properties/123
        /// </param>
        /// <param name="keyEvent">
        /// Required. The Key Event to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> CreateKeyEventAsync(string parent, KeyEvent keyEvent, gaxgrpc::CallSettings callSettings = null) =>
            CreateKeyEventAsync(new CreateKeyEventRequest
            {
                KeyEvent = gax::GaxPreconditions.CheckNotNull(keyEvent, nameof(keyEvent)),
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            }, callSettings);

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this Key Event
        /// will be created. Format: properties/123
        /// </param>
        /// <param name="keyEvent">
        /// Required. The Key Event to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> CreateKeyEventAsync(string parent, KeyEvent keyEvent, st::CancellationToken cancellationToken) =>
            CreateKeyEventAsync(parent, keyEvent, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this Key Event
        /// will be created. Format: properties/123
        /// </param>
        /// <param name="keyEvent">
        /// Required. The Key Event to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual KeyEvent CreateKeyEvent(PropertyName parent, KeyEvent keyEvent, gaxgrpc::CallSettings callSettings = null) =>
            CreateKeyEvent(new CreateKeyEventRequest
            {
                KeyEvent = gax::GaxPreconditions.CheckNotNull(keyEvent, nameof(keyEvent)),
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            }, callSettings);

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this Key Event
        /// will be created. Format: properties/123
        /// </param>
        /// <param name="keyEvent">
        /// Required. The Key Event to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> CreateKeyEventAsync(PropertyName parent, KeyEvent keyEvent, gaxgrpc::CallSettings callSettings = null) =>
            CreateKeyEventAsync(new CreateKeyEventRequest
            {
                KeyEvent = gax::GaxPreconditions.CheckNotNull(keyEvent, nameof(keyEvent)),
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            }, callSettings);

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property where this Key Event
        /// will be created. Format: properties/123
        /// </param>
        /// <param name="keyEvent">
        /// Required. The Key Event to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> CreateKeyEventAsync(PropertyName parent, KeyEvent keyEvent, st::CancellationToken cancellationToken) =>
            CreateKeyEventAsync(parent, keyEvent, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual KeyEvent UpdateKeyEvent(UpdateKeyEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> UpdateKeyEventAsync(UpdateKeyEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> UpdateKeyEventAsync(UpdateKeyEventRequest request, st::CancellationToken cancellationToken) =>
            UpdateKeyEventAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a Key Event.
        /// </summary>
        /// <param name="keyEvent">
        /// Required. The Key Event to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual KeyEvent UpdateKeyEvent(KeyEvent keyEvent, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateKeyEvent(new UpdateKeyEventRequest
            {
                KeyEvent = gax::GaxPreconditions.CheckNotNull(keyEvent, nameof(keyEvent)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a Key Event.
        /// </summary>
        /// <param name="keyEvent">
        /// Required. The Key Event to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> UpdateKeyEventAsync(KeyEvent keyEvent, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateKeyEventAsync(new UpdateKeyEventRequest
            {
                KeyEvent = gax::GaxPreconditions.CheckNotNull(keyEvent, nameof(keyEvent)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a Key Event.
        /// </summary>
        /// <param name="keyEvent">
        /// Required. The Key Event to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> UpdateKeyEventAsync(KeyEvent keyEvent, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateKeyEventAsync(keyEvent, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual KeyEvent GetKeyEvent(GetKeyEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> GetKeyEventAsync(GetKeyEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> GetKeyEventAsync(GetKeyEventRequest request, st::CancellationToken cancellationToken) =>
            GetKeyEventAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to retrieve.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual KeyEvent GetKeyEvent(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetKeyEvent(new GetKeyEventRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to retrieve.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> GetKeyEventAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetKeyEventAsync(new GetKeyEventRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to retrieve.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> GetKeyEventAsync(string name, st::CancellationToken cancellationToken) =>
            GetKeyEventAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to retrieve.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual KeyEvent GetKeyEvent(KeyEventName name, gaxgrpc::CallSettings callSettings = null) =>
            GetKeyEvent(new GetKeyEventRequest
            {
                KeyEventName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to retrieve.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> GetKeyEventAsync(KeyEventName name, gaxgrpc::CallSettings callSettings = null) =>
            GetKeyEventAsync(new GetKeyEventRequest
            {
                KeyEventName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to retrieve.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<KeyEvent> GetKeyEventAsync(KeyEventName name, st::CancellationToken cancellationToken) =>
            GetKeyEventAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteKeyEvent(DeleteKeyEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteKeyEventAsync(DeleteKeyEventRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteKeyEventAsync(DeleteKeyEventRequest request, st::CancellationToken cancellationToken) =>
            DeleteKeyEventAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to delete.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteKeyEvent(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteKeyEvent(new DeleteKeyEventRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to delete.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteKeyEventAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteKeyEventAsync(new DeleteKeyEventRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to delete.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteKeyEventAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteKeyEventAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to delete.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteKeyEvent(KeyEventName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteKeyEvent(new DeleteKeyEventRequest
            {
                KeyEventName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to delete.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteKeyEventAsync(KeyEventName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteKeyEventAsync(new DeleteKeyEventRequest
            {
                KeyEventName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="name">
        /// Required. The resource name of the Key Event to delete.
        /// Format: properties/{property}/keyEvents/{key_event}
        /// Example: "properties/123/keyEvents/456"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteKeyEventAsync(KeyEventName name, st::CancellationToken cancellationToken) =>
            DeleteKeyEventAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns a list of Key Events in the specified parent property.
        /// Returns an empty list if no Key Events are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="KeyEvent"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListKeyEventsResponse, KeyEvent> ListKeyEvents(ListKeyEventsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns a list of Key Events in the specified parent property.
        /// Returns an empty list if no Key Events are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="KeyEvent"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListKeyEventsResponse, KeyEvent> ListKeyEventsAsync(ListKeyEventsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns a list of Key Events in the specified parent property.
        /// Returns an empty list if no Key Events are found.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property.
        /// Example: 'properties/123'
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="KeyEvent"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListKeyEventsResponse, KeyEvent> ListKeyEvents(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListKeyEventsRequest request = new ListKeyEventsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListKeyEvents(request, callSettings);
        }

        /// <summary>
        /// Returns a list of Key Events in the specified parent property.
        /// Returns an empty list if no Key Events are found.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property.
        /// Example: 'properties/123'
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="KeyEvent"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListKeyEventsResponse, KeyEvent> ListKeyEventsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListKeyEventsRequest request = new ListKeyEventsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListKeyEventsAsync(request, callSettings);
        }

        /// <summary>
        /// Returns a list of Key Events in the specified parent property.
        /// Returns an empty list if no Key Events are found.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property.
        /// Example: 'properties/123'
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="KeyEvent"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListKeyEventsResponse, KeyEvent> ListKeyEvents(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListKeyEventsRequest request = new ListKeyEventsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListKeyEvents(request, callSettings);
        }

        /// <summary>
        /// Returns a list of Key Events in the specified parent property.
        /// Returns an empty list if no Key Events are found.
        /// </summary>
        /// <param name="parent">
        /// Required. The resource name of the parent property.
        /// Example: 'properties/123'
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="KeyEvent"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListKeyEventsResponse, KeyEvent> ListKeyEventsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListKeyEventsRequest request = new ListKeyEventsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListKeyEventsAsync(request, callSettings);
        }

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLink GetDisplayVideo360AdvertiserLink(GetDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> GetDisplayVideo360AdvertiserLinkAsync(GetDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> GetDisplayVideo360AdvertiserLinkAsync(GetDisplayVideo360AdvertiserLinkRequest request, st::CancellationToken cancellationToken) =>
            GetDisplayVideo360AdvertiserLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLink/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLink GetDisplayVideo360AdvertiserLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDisplayVideo360AdvertiserLink(new GetDisplayVideo360AdvertiserLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLink/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> GetDisplayVideo360AdvertiserLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDisplayVideo360AdvertiserLinkAsync(new GetDisplayVideo360AdvertiserLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLink/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> GetDisplayVideo360AdvertiserLinkAsync(string name, st::CancellationToken cancellationToken) =>
            GetDisplayVideo360AdvertiserLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLink/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLink GetDisplayVideo360AdvertiserLink(DisplayVideo360AdvertiserLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDisplayVideo360AdvertiserLink(new GetDisplayVideo360AdvertiserLinkRequest
            {
                DisplayVideo360AdvertiserLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLink/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> GetDisplayVideo360AdvertiserLinkAsync(DisplayVideo360AdvertiserLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDisplayVideo360AdvertiserLinkAsync(new GetDisplayVideo360AdvertiserLinkRequest
            {
                DisplayVideo360AdvertiserLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLink/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> GetDisplayVideo360AdvertiserLinkAsync(DisplayVideo360AdvertiserLinkName name, st::CancellationToken cancellationToken) =>
            GetDisplayVideo360AdvertiserLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists all DisplayVideo360AdvertiserLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DisplayVideo360AdvertiserLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink> ListDisplayVideo360AdvertiserLinks(ListDisplayVideo360AdvertiserLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists all DisplayVideo360AdvertiserLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="DisplayVideo360AdvertiserLink"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink> ListDisplayVideo360AdvertiserLinksAsync(ListDisplayVideo360AdvertiserLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists all DisplayVideo360AdvertiserLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DisplayVideo360AdvertiserLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink> ListDisplayVideo360AdvertiserLinks(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDisplayVideo360AdvertiserLinksRequest request = new ListDisplayVideo360AdvertiserLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDisplayVideo360AdvertiserLinks(request, callSettings);
        }

        /// <summary>
        /// Lists all DisplayVideo360AdvertiserLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="DisplayVideo360AdvertiserLink"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink> ListDisplayVideo360AdvertiserLinksAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDisplayVideo360AdvertiserLinksRequest request = new ListDisplayVideo360AdvertiserLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDisplayVideo360AdvertiserLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Lists all DisplayVideo360AdvertiserLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DisplayVideo360AdvertiserLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink> ListDisplayVideo360AdvertiserLinks(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDisplayVideo360AdvertiserLinksRequest request = new ListDisplayVideo360AdvertiserLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDisplayVideo360AdvertiserLinks(request, callSettings);
        }

        /// <summary>
        /// Lists all DisplayVideo360AdvertiserLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="DisplayVideo360AdvertiserLink"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink> ListDisplayVideo360AdvertiserLinksAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDisplayVideo360AdvertiserLinksRequest request = new ListDisplayVideo360AdvertiserLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDisplayVideo360AdvertiserLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLink CreateDisplayVideo360AdvertiserLink(CreateDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> CreateDisplayVideo360AdvertiserLinkAsync(CreateDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> CreateDisplayVideo360AdvertiserLinkAsync(CreateDisplayVideo360AdvertiserLinkRequest request, st::CancellationToken cancellationToken) =>
            CreateDisplayVideo360AdvertiserLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLink">
        /// Required. The DisplayVideo360AdvertiserLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLink CreateDisplayVideo360AdvertiserLink(string parent, DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateDisplayVideo360AdvertiserLink(new CreateDisplayVideo360AdvertiserLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                DisplayVideo360AdvertiserLink = gax::GaxPreconditions.CheckNotNull(displayVideo360AdvertiserLink, nameof(displayVideo360AdvertiserLink)),
            }, callSettings);

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLink">
        /// Required. The DisplayVideo360AdvertiserLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> CreateDisplayVideo360AdvertiserLinkAsync(string parent, DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateDisplayVideo360AdvertiserLinkAsync(new CreateDisplayVideo360AdvertiserLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                DisplayVideo360AdvertiserLink = gax::GaxPreconditions.CheckNotNull(displayVideo360AdvertiserLink, nameof(displayVideo360AdvertiserLink)),
            }, callSettings);

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLink">
        /// Required. The DisplayVideo360AdvertiserLink to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> CreateDisplayVideo360AdvertiserLinkAsync(string parent, DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, st::CancellationToken cancellationToken) =>
            CreateDisplayVideo360AdvertiserLinkAsync(parent, displayVideo360AdvertiserLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLink">
        /// Required. The DisplayVideo360AdvertiserLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLink CreateDisplayVideo360AdvertiserLink(PropertyName parent, DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateDisplayVideo360AdvertiserLink(new CreateDisplayVideo360AdvertiserLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                DisplayVideo360AdvertiserLink = gax::GaxPreconditions.CheckNotNull(displayVideo360AdvertiserLink, nameof(displayVideo360AdvertiserLink)),
            }, callSettings);

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLink">
        /// Required. The DisplayVideo360AdvertiserLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> CreateDisplayVideo360AdvertiserLinkAsync(PropertyName parent, DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateDisplayVideo360AdvertiserLinkAsync(new CreateDisplayVideo360AdvertiserLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                DisplayVideo360AdvertiserLink = gax::GaxPreconditions.CheckNotNull(displayVideo360AdvertiserLink, nameof(displayVideo360AdvertiserLink)),
            }, callSettings);

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLink">
        /// Required. The DisplayVideo360AdvertiserLink to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> CreateDisplayVideo360AdvertiserLinkAsync(PropertyName parent, DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, st::CancellationToken cancellationToken) =>
            CreateDisplayVideo360AdvertiserLinkAsync(parent, displayVideo360AdvertiserLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDisplayVideo360AdvertiserLink(DeleteDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkAsync(DeleteDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkAsync(DeleteDisplayVideo360AdvertiserLinkRequest request, st::CancellationToken cancellationToken) =>
            DeleteDisplayVideo360AdvertiserLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDisplayVideo360AdvertiserLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDisplayVideo360AdvertiserLink(new DeleteDisplayVideo360AdvertiserLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDisplayVideo360AdvertiserLinkAsync(new DeleteDisplayVideo360AdvertiserLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteDisplayVideo360AdvertiserLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDisplayVideo360AdvertiserLink(DisplayVideo360AdvertiserLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDisplayVideo360AdvertiserLink(new DeleteDisplayVideo360AdvertiserLinkRequest
            {
                DisplayVideo360AdvertiserLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkAsync(DisplayVideo360AdvertiserLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDisplayVideo360AdvertiserLinkAsync(new DeleteDisplayVideo360AdvertiserLinkRequest
            {
                DisplayVideo360AdvertiserLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLink to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkAsync(DisplayVideo360AdvertiserLinkName name, st::CancellationToken cancellationToken) =>
            DeleteDisplayVideo360AdvertiserLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLink UpdateDisplayVideo360AdvertiserLink(UpdateDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> UpdateDisplayVideo360AdvertiserLinkAsync(UpdateDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> UpdateDisplayVideo360AdvertiserLinkAsync(UpdateDisplayVideo360AdvertiserLinkRequest request, st::CancellationToken cancellationToken) =>
            UpdateDisplayVideo360AdvertiserLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="displayVideo360AdvertiserLink">
        /// The DisplayVideo360AdvertiserLink to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLink UpdateDisplayVideo360AdvertiserLink(DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateDisplayVideo360AdvertiserLink(new UpdateDisplayVideo360AdvertiserLinkRequest
            {
                DisplayVideo360AdvertiserLink = displayVideo360AdvertiserLink,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="displayVideo360AdvertiserLink">
        /// The DisplayVideo360AdvertiserLink to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> UpdateDisplayVideo360AdvertiserLinkAsync(DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateDisplayVideo360AdvertiserLinkAsync(new UpdateDisplayVideo360AdvertiserLinkRequest
            {
                DisplayVideo360AdvertiserLink = displayVideo360AdvertiserLink,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="displayVideo360AdvertiserLink">
        /// The DisplayVideo360AdvertiserLink to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLink> UpdateDisplayVideo360AdvertiserLinkAsync(DisplayVideo360AdvertiserLink displayVideo360AdvertiserLink, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateDisplayVideo360AdvertiserLinkAsync(displayVideo360AdvertiserLink, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLinkProposal GetDisplayVideo360AdvertiserLinkProposal(GetDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> GetDisplayVideo360AdvertiserLinkProposalAsync(GetDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> GetDisplayVideo360AdvertiserLinkProposalAsync(GetDisplayVideo360AdvertiserLinkProposalRequest request, st::CancellationToken cancellationToken) =>
            GetDisplayVideo360AdvertiserLinkProposalAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLinkProposal GetDisplayVideo360AdvertiserLinkProposal(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDisplayVideo360AdvertiserLinkProposal(new GetDisplayVideo360AdvertiserLinkProposalRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> GetDisplayVideo360AdvertiserLinkProposalAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDisplayVideo360AdvertiserLinkProposalAsync(new GetDisplayVideo360AdvertiserLinkProposalRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> GetDisplayVideo360AdvertiserLinkProposalAsync(string name, st::CancellationToken cancellationToken) =>
            GetDisplayVideo360AdvertiserLinkProposalAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLinkProposal GetDisplayVideo360AdvertiserLinkProposal(DisplayVideo360AdvertiserLinkProposalName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDisplayVideo360AdvertiserLinkProposal(new GetDisplayVideo360AdvertiserLinkProposalRequest
            {
                DisplayVideo360AdvertiserLinkProposalName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> GetDisplayVideo360AdvertiserLinkProposalAsync(DisplayVideo360AdvertiserLinkProposalName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDisplayVideo360AdvertiserLinkProposalAsync(new GetDisplayVideo360AdvertiserLinkProposalRequest
            {
                DisplayVideo360AdvertiserLinkProposalName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to get.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> GetDisplayVideo360AdvertiserLinkProposalAsync(DisplayVideo360AdvertiserLinkProposalName name, st::CancellationToken cancellationToken) =>
            GetDisplayVideo360AdvertiserLinkProposalAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists DisplayVideo360AdvertiserLinkProposals on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DisplayVideo360AdvertiserLinkProposal"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal> ListDisplayVideo360AdvertiserLinkProposals(ListDisplayVideo360AdvertiserLinkProposalsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists DisplayVideo360AdvertiserLinkProposals on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="DisplayVideo360AdvertiserLinkProposal"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal> ListDisplayVideo360AdvertiserLinkProposalsAsync(ListDisplayVideo360AdvertiserLinkProposalsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists DisplayVideo360AdvertiserLinkProposals on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DisplayVideo360AdvertiserLinkProposal"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal> ListDisplayVideo360AdvertiserLinkProposals(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDisplayVideo360AdvertiserLinkProposalsRequest request = new ListDisplayVideo360AdvertiserLinkProposalsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDisplayVideo360AdvertiserLinkProposals(request, callSettings);
        }

        /// <summary>
        /// Lists DisplayVideo360AdvertiserLinkProposals on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="DisplayVideo360AdvertiserLinkProposal"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal> ListDisplayVideo360AdvertiserLinkProposalsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDisplayVideo360AdvertiserLinkProposalsRequest request = new ListDisplayVideo360AdvertiserLinkProposalsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDisplayVideo360AdvertiserLinkProposalsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists DisplayVideo360AdvertiserLinkProposals on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DisplayVideo360AdvertiserLinkProposal"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal> ListDisplayVideo360AdvertiserLinkProposals(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDisplayVideo360AdvertiserLinkProposalsRequest request = new ListDisplayVideo360AdvertiserLinkProposalsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDisplayVideo360AdvertiserLinkProposals(request, callSettings);
        }

        /// <summary>
        /// Lists DisplayVideo360AdvertiserLinkProposals on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="DisplayVideo360AdvertiserLinkProposal"/> resources.
        /// </returns>
        public virtual gax::PagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal> ListDisplayVideo360AdvertiserLinkProposalsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDisplayVideo360AdvertiserLinkProposalsRequest request = new ListDisplayVideo360AdvertiserLinkProposalsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDisplayVideo360AdvertiserLinkProposalsAsync(request, callSettings);
        }

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLinkProposal CreateDisplayVideo360AdvertiserLinkProposal(CreateDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> CreateDisplayVideo360AdvertiserLinkProposalAsync(CreateDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> CreateDisplayVideo360AdvertiserLinkProposalAsync(CreateDisplayVideo360AdvertiserLinkProposalRequest request, st::CancellationToken cancellationToken) =>
            CreateDisplayVideo360AdvertiserLinkProposalAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLinkProposal">
        /// Required. The DisplayVideo360AdvertiserLinkProposal to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLinkProposal CreateDisplayVideo360AdvertiserLinkProposal(string parent, DisplayVideo360AdvertiserLinkProposal displayVideo360AdvertiserLinkProposal, gaxgrpc::CallSettings callSettings = null) =>
            CreateDisplayVideo360AdvertiserLinkProposal(new CreateDisplayVideo360AdvertiserLinkProposalRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                DisplayVideo360AdvertiserLinkProposal = gax::GaxPreconditions.CheckNotNull(displayVideo360AdvertiserLinkProposal, nameof(displayVideo360AdvertiserLinkProposal)),
            }, callSettings);

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLinkProposal">
        /// Required. The DisplayVideo360AdvertiserLinkProposal to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> CreateDisplayVideo360AdvertiserLinkProposalAsync(string parent, DisplayVideo360AdvertiserLinkProposal displayVideo360AdvertiserLinkProposal, gaxgrpc::CallSettings callSettings = null) =>
            CreateDisplayVideo360AdvertiserLinkProposalAsync(new CreateDisplayVideo360AdvertiserLinkProposalRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                DisplayVideo360AdvertiserLinkProposal = gax::GaxPreconditions.CheckNotNull(displayVideo360AdvertiserLinkProposal, nameof(displayVideo360AdvertiserLinkProposal)),
            }, callSettings);

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLinkProposal">
        /// Required. The DisplayVideo360AdvertiserLinkProposal to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> CreateDisplayVideo360AdvertiserLinkProposalAsync(string parent, DisplayVideo360AdvertiserLinkProposal displayVideo360AdvertiserLinkProposal, st::CancellationToken cancellationToken) =>
            CreateDisplayVideo360AdvertiserLinkProposalAsync(parent, displayVideo360AdvertiserLinkProposal, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLinkProposal">
        /// Required. The DisplayVideo360AdvertiserLinkProposal to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLinkProposal CreateDisplayVideo360AdvertiserLinkProposal(PropertyName parent, DisplayVideo360AdvertiserLinkProposal displayVideo360AdvertiserLinkProposal, gaxgrpc::CallSettings callSettings = null) =>
            CreateDisplayVideo360AdvertiserLinkProposal(new CreateDisplayVideo360AdvertiserLinkProposalRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                DisplayVideo360AdvertiserLinkProposal = gax::GaxPreconditions.CheckNotNull(displayVideo360AdvertiserLinkProposal, nameof(displayVideo360AdvertiserLinkProposal)),
            }, callSettings);

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLinkProposal">
        /// Required. The DisplayVideo360AdvertiserLinkProposal to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> CreateDisplayVideo360AdvertiserLinkProposalAsync(PropertyName parent, DisplayVideo360AdvertiserLinkProposal displayVideo360AdvertiserLinkProposal, gaxgrpc::CallSettings callSettings = null) =>
            CreateDisplayVideo360AdvertiserLinkProposalAsync(new CreateDisplayVideo360AdvertiserLinkProposalRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                DisplayVideo360AdvertiserLinkProposal = gax::GaxPreconditions.CheckNotNull(displayVideo360AdvertiserLinkProposal, nameof(displayVideo360AdvertiserLinkProposal)),
            }, callSettings);

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="displayVideo360AdvertiserLinkProposal">
        /// Required. The DisplayVideo360AdvertiserLinkProposal to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> CreateDisplayVideo360AdvertiserLinkProposalAsync(PropertyName parent, DisplayVideo360AdvertiserLinkProposal displayVideo360AdvertiserLinkProposal, st::CancellationToken cancellationToken) =>
            CreateDisplayVideo360AdvertiserLinkProposalAsync(parent, displayVideo360AdvertiserLinkProposal, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDisplayVideo360AdvertiserLinkProposal(DeleteDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkProposalAsync(DeleteDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkProposalAsync(DeleteDisplayVideo360AdvertiserLinkProposalRequest request, st::CancellationToken cancellationToken) =>
            DeleteDisplayVideo360AdvertiserLinkProposalAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDisplayVideo360AdvertiserLinkProposal(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDisplayVideo360AdvertiserLinkProposal(new DeleteDisplayVideo360AdvertiserLinkProposalRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkProposalAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDisplayVideo360AdvertiserLinkProposalAsync(new DeleteDisplayVideo360AdvertiserLinkProposalRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkProposalAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteDisplayVideo360AdvertiserLinkProposalAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDisplayVideo360AdvertiserLinkProposal(DisplayVideo360AdvertiserLinkProposalName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDisplayVideo360AdvertiserLinkProposal(new DeleteDisplayVideo360AdvertiserLinkProposalRequest
            {
                DisplayVideo360AdvertiserLinkProposalName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkProposalAsync(DisplayVideo360AdvertiserLinkProposalName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDisplayVideo360AdvertiserLinkProposalAsync(new DeleteDisplayVideo360AdvertiserLinkProposalRequest
            {
                DisplayVideo360AdvertiserLinkProposalName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DisplayVideo360AdvertiserLinkProposal to delete.
        /// Example format: properties/1234/displayVideo360AdvertiserLinkProposals/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDisplayVideo360AdvertiserLinkProposalAsync(DisplayVideo360AdvertiserLinkProposalName name, st::CancellationToken cancellationToken) =>
            DeleteDisplayVideo360AdvertiserLinkProposalAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Approves a DisplayVideo360AdvertiserLinkProposal.
        /// The DisplayVideo360AdvertiserLinkProposal will be deleted and a new
        /// DisplayVideo360AdvertiserLink will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ApproveDisplayVideo360AdvertiserLinkProposalResponse ApproveDisplayVideo360AdvertiserLinkProposal(ApproveDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Approves a DisplayVideo360AdvertiserLinkProposal.
        /// The DisplayVideo360AdvertiserLinkProposal will be deleted and a new
        /// DisplayVideo360AdvertiserLink will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ApproveDisplayVideo360AdvertiserLinkProposalResponse> ApproveDisplayVideo360AdvertiserLinkProposalAsync(ApproveDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Approves a DisplayVideo360AdvertiserLinkProposal.
        /// The DisplayVideo360AdvertiserLinkProposal will be deleted and a new
        /// DisplayVideo360AdvertiserLink will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ApproveDisplayVideo360AdvertiserLinkProposalResponse> ApproveDisplayVideo360AdvertiserLinkProposalAsync(ApproveDisplayVideo360AdvertiserLinkProposalRequest request, st::CancellationToken cancellationToken) =>
            ApproveDisplayVideo360AdvertiserLinkProposalAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Cancels a DisplayVideo360AdvertiserLinkProposal.
        /// Cancelling can mean either:
        /// - Declining a proposal initiated from Display &amp; Video 360
        /// - Withdrawing a proposal initiated from Google Analytics
        /// After being cancelled, a proposal will eventually be deleted automatically.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DisplayVideo360AdvertiserLinkProposal CancelDisplayVideo360AdvertiserLinkProposal(CancelDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Cancels a DisplayVideo360AdvertiserLinkProposal.
        /// Cancelling can mean either:
        /// - Declining a proposal initiated from Display &amp; Video 360
        /// - Withdrawing a proposal initiated from Google Analytics
        /// After being cancelled, a proposal will eventually be deleted automatically.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> CancelDisplayVideo360AdvertiserLinkProposalAsync(CancelDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Cancels a DisplayVideo360AdvertiserLinkProposal.
        /// Cancelling can mean either:
        /// - Declining a proposal initiated from Display &amp; Video 360
        /// - Withdrawing a proposal initiated from Google Analytics
        /// After being cancelled, a proposal will eventually be deleted automatically.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DisplayVideo360AdvertiserLinkProposal> CancelDisplayVideo360AdvertiserLinkProposalAsync(CancelDisplayVideo360AdvertiserLinkProposalRequest request, st::CancellationToken cancellationToken) =>
            CancelDisplayVideo360AdvertiserLinkProposalAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomDimension CreateCustomDimension(CreateCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> CreateCustomDimensionAsync(CreateCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> CreateCustomDimensionAsync(CreateCustomDimensionRequest request, st::CancellationToken cancellationToken) =>
            CreateCustomDimensionAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customDimension">
        /// Required. The CustomDimension to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomDimension CreateCustomDimension(string parent, CustomDimension customDimension, gaxgrpc::CallSettings callSettings = null) =>
            CreateCustomDimension(new CreateCustomDimensionRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                CustomDimension = gax::GaxPreconditions.CheckNotNull(customDimension, nameof(customDimension)),
            }, callSettings);

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customDimension">
        /// Required. The CustomDimension to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> CreateCustomDimensionAsync(string parent, CustomDimension customDimension, gaxgrpc::CallSettings callSettings = null) =>
            CreateCustomDimensionAsync(new CreateCustomDimensionRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                CustomDimension = gax::GaxPreconditions.CheckNotNull(customDimension, nameof(customDimension)),
            }, callSettings);

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customDimension">
        /// Required. The CustomDimension to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> CreateCustomDimensionAsync(string parent, CustomDimension customDimension, st::CancellationToken cancellationToken) =>
            CreateCustomDimensionAsync(parent, customDimension, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customDimension">
        /// Required. The CustomDimension to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomDimension CreateCustomDimension(PropertyName parent, CustomDimension customDimension, gaxgrpc::CallSettings callSettings = null) =>
            CreateCustomDimension(new CreateCustomDimensionRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                CustomDimension = gax::GaxPreconditions.CheckNotNull(customDimension, nameof(customDimension)),
            }, callSettings);

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customDimension">
        /// Required. The CustomDimension to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> CreateCustomDimensionAsync(PropertyName parent, CustomDimension customDimension, gaxgrpc::CallSettings callSettings = null) =>
            CreateCustomDimensionAsync(new CreateCustomDimensionRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                CustomDimension = gax::GaxPreconditions.CheckNotNull(customDimension, nameof(customDimension)),
            }, callSettings);

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customDimension">
        /// Required. The CustomDimension to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> CreateCustomDimensionAsync(PropertyName parent, CustomDimension customDimension, st::CancellationToken cancellationToken) =>
            CreateCustomDimensionAsync(parent, customDimension, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomDimension UpdateCustomDimension(UpdateCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> UpdateCustomDimensionAsync(UpdateCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> UpdateCustomDimensionAsync(UpdateCustomDimensionRequest request, st::CancellationToken cancellationToken) =>
            UpdateCustomDimensionAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a CustomDimension on a property.
        /// </summary>
        /// <param name="customDimension">
        /// The CustomDimension to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomDimension UpdateCustomDimension(CustomDimension customDimension, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateCustomDimension(new UpdateCustomDimensionRequest
            {
                CustomDimension = customDimension,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a CustomDimension on a property.
        /// </summary>
        /// <param name="customDimension">
        /// The CustomDimension to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> UpdateCustomDimensionAsync(CustomDimension customDimension, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateCustomDimensionAsync(new UpdateCustomDimensionRequest
            {
                CustomDimension = customDimension,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a CustomDimension on a property.
        /// </summary>
        /// <param name="customDimension">
        /// The CustomDimension to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> UpdateCustomDimensionAsync(CustomDimension customDimension, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateCustomDimensionAsync(customDimension, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists CustomDimensions on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CustomDimension"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCustomDimensionsResponse, CustomDimension> ListCustomDimensions(ListCustomDimensionsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists CustomDimensions on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CustomDimension"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCustomDimensionsResponse, CustomDimension> ListCustomDimensionsAsync(ListCustomDimensionsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists CustomDimensions on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CustomDimension"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCustomDimensionsResponse, CustomDimension> ListCustomDimensions(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCustomDimensionsRequest request = new ListCustomDimensionsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCustomDimensions(request, callSettings);
        }

        /// <summary>
        /// Lists CustomDimensions on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CustomDimension"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCustomDimensionsResponse, CustomDimension> ListCustomDimensionsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCustomDimensionsRequest request = new ListCustomDimensionsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCustomDimensionsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists CustomDimensions on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CustomDimension"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCustomDimensionsResponse, CustomDimension> ListCustomDimensions(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCustomDimensionsRequest request = new ListCustomDimensionsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCustomDimensions(request, callSettings);
        }

        /// <summary>
        /// Lists CustomDimensions on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CustomDimension"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCustomDimensionsResponse, CustomDimension> ListCustomDimensionsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCustomDimensionsRequest request = new ListCustomDimensionsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCustomDimensionsAsync(request, callSettings);
        }

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void ArchiveCustomDimension(ArchiveCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomDimensionAsync(ArchiveCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomDimensionAsync(ArchiveCustomDimensionRequest request, st::CancellationToken cancellationToken) =>
            ArchiveCustomDimensionAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to archive.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void ArchiveCustomDimension(string name, gaxgrpc::CallSettings callSettings = null) =>
            ArchiveCustomDimension(new ArchiveCustomDimensionRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to archive.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomDimensionAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            ArchiveCustomDimensionAsync(new ArchiveCustomDimensionRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to archive.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomDimensionAsync(string name, st::CancellationToken cancellationToken) =>
            ArchiveCustomDimensionAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to archive.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void ArchiveCustomDimension(CustomDimensionName name, gaxgrpc::CallSettings callSettings = null) =>
            ArchiveCustomDimension(new ArchiveCustomDimensionRequest
            {
                CustomDimensionName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to archive.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomDimensionAsync(CustomDimensionName name, gaxgrpc::CallSettings callSettings = null) =>
            ArchiveCustomDimensionAsync(new ArchiveCustomDimensionRequest
            {
                CustomDimensionName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to archive.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomDimensionAsync(CustomDimensionName name, st::CancellationToken cancellationToken) =>
            ArchiveCustomDimensionAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomDimension GetCustomDimension(GetCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> GetCustomDimensionAsync(GetCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> GetCustomDimensionAsync(GetCustomDimensionRequest request, st::CancellationToken cancellationToken) =>
            GetCustomDimensionAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to get.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomDimension GetCustomDimension(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetCustomDimension(new GetCustomDimensionRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to get.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> GetCustomDimensionAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetCustomDimensionAsync(new GetCustomDimensionRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to get.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> GetCustomDimensionAsync(string name, st::CancellationToken cancellationToken) =>
            GetCustomDimensionAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to get.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomDimension GetCustomDimension(CustomDimensionName name, gaxgrpc::CallSettings callSettings = null) =>
            GetCustomDimension(new GetCustomDimensionRequest
            {
                CustomDimensionName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to get.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> GetCustomDimensionAsync(CustomDimensionName name, gaxgrpc::CallSettings callSettings = null) =>
            GetCustomDimensionAsync(new GetCustomDimensionRequest
            {
                CustomDimensionName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomDimension to get.
        /// Example format: properties/1234/customDimensions/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomDimension> GetCustomDimensionAsync(CustomDimensionName name, st::CancellationToken cancellationToken) =>
            GetCustomDimensionAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomMetric CreateCustomMetric(CreateCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> CreateCustomMetricAsync(CreateCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> CreateCustomMetricAsync(CreateCustomMetricRequest request, st::CancellationToken cancellationToken) =>
            CreateCustomMetricAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customMetric">
        /// Required. The CustomMetric to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomMetric CreateCustomMetric(string parent, CustomMetric customMetric, gaxgrpc::CallSettings callSettings = null) =>
            CreateCustomMetric(new CreateCustomMetricRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                CustomMetric = gax::GaxPreconditions.CheckNotNull(customMetric, nameof(customMetric)),
            }, callSettings);

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customMetric">
        /// Required. The CustomMetric to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> CreateCustomMetricAsync(string parent, CustomMetric customMetric, gaxgrpc::CallSettings callSettings = null) =>
            CreateCustomMetricAsync(new CreateCustomMetricRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                CustomMetric = gax::GaxPreconditions.CheckNotNull(customMetric, nameof(customMetric)),
            }, callSettings);

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customMetric">
        /// Required. The CustomMetric to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> CreateCustomMetricAsync(string parent, CustomMetric customMetric, st::CancellationToken cancellationToken) =>
            CreateCustomMetricAsync(parent, customMetric, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customMetric">
        /// Required. The CustomMetric to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomMetric CreateCustomMetric(PropertyName parent, CustomMetric customMetric, gaxgrpc::CallSettings callSettings = null) =>
            CreateCustomMetric(new CreateCustomMetricRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                CustomMetric = gax::GaxPreconditions.CheckNotNull(customMetric, nameof(customMetric)),
            }, callSettings);

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customMetric">
        /// Required. The CustomMetric to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> CreateCustomMetricAsync(PropertyName parent, CustomMetric customMetric, gaxgrpc::CallSettings callSettings = null) =>
            CreateCustomMetricAsync(new CreateCustomMetricRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                CustomMetric = gax::GaxPreconditions.CheckNotNull(customMetric, nameof(customMetric)),
            }, callSettings);

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="customMetric">
        /// Required. The CustomMetric to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> CreateCustomMetricAsync(PropertyName parent, CustomMetric customMetric, st::CancellationToken cancellationToken) =>
            CreateCustomMetricAsync(parent, customMetric, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomMetric UpdateCustomMetric(UpdateCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> UpdateCustomMetricAsync(UpdateCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> UpdateCustomMetricAsync(UpdateCustomMetricRequest request, st::CancellationToken cancellationToken) =>
            UpdateCustomMetricAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a CustomMetric on a property.
        /// </summary>
        /// <param name="customMetric">
        /// The CustomMetric to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomMetric UpdateCustomMetric(CustomMetric customMetric, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateCustomMetric(new UpdateCustomMetricRequest
            {
                CustomMetric = customMetric,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a CustomMetric on a property.
        /// </summary>
        /// <param name="customMetric">
        /// The CustomMetric to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> UpdateCustomMetricAsync(CustomMetric customMetric, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateCustomMetricAsync(new UpdateCustomMetricRequest
            {
                CustomMetric = customMetric,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a CustomMetric on a property.
        /// </summary>
        /// <param name="customMetric">
        /// The CustomMetric to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> UpdateCustomMetricAsync(CustomMetric customMetric, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateCustomMetricAsync(customMetric, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists CustomMetrics on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CustomMetric"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCustomMetricsResponse, CustomMetric> ListCustomMetrics(ListCustomMetricsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists CustomMetrics on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CustomMetric"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCustomMetricsResponse, CustomMetric> ListCustomMetricsAsync(ListCustomMetricsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists CustomMetrics on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CustomMetric"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCustomMetricsResponse, CustomMetric> ListCustomMetrics(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCustomMetricsRequest request = new ListCustomMetricsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCustomMetrics(request, callSettings);
        }

        /// <summary>
        /// Lists CustomMetrics on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CustomMetric"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCustomMetricsResponse, CustomMetric> ListCustomMetricsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCustomMetricsRequest request = new ListCustomMetricsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCustomMetricsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists CustomMetrics on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CustomMetric"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCustomMetricsResponse, CustomMetric> ListCustomMetrics(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCustomMetricsRequest request = new ListCustomMetricsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCustomMetrics(request, callSettings);
        }

        /// <summary>
        /// Lists CustomMetrics on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CustomMetric"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCustomMetricsResponse, CustomMetric> ListCustomMetricsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCustomMetricsRequest request = new ListCustomMetricsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCustomMetricsAsync(request, callSettings);
        }

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void ArchiveCustomMetric(ArchiveCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomMetricAsync(ArchiveCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomMetricAsync(ArchiveCustomMetricRequest request, st::CancellationToken cancellationToken) =>
            ArchiveCustomMetricAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to archive.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void ArchiveCustomMetric(string name, gaxgrpc::CallSettings callSettings = null) =>
            ArchiveCustomMetric(new ArchiveCustomMetricRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to archive.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomMetricAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            ArchiveCustomMetricAsync(new ArchiveCustomMetricRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to archive.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomMetricAsync(string name, st::CancellationToken cancellationToken) =>
            ArchiveCustomMetricAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to archive.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void ArchiveCustomMetric(CustomMetricName name, gaxgrpc::CallSettings callSettings = null) =>
            ArchiveCustomMetric(new ArchiveCustomMetricRequest
            {
                CustomMetricName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to archive.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomMetricAsync(CustomMetricName name, gaxgrpc::CallSettings callSettings = null) =>
            ArchiveCustomMetricAsync(new ArchiveCustomMetricRequest
            {
                CustomMetricName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to archive.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveCustomMetricAsync(CustomMetricName name, st::CancellationToken cancellationToken) =>
            ArchiveCustomMetricAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomMetric GetCustomMetric(GetCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> GetCustomMetricAsync(GetCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> GetCustomMetricAsync(GetCustomMetricRequest request, st::CancellationToken cancellationToken) =>
            GetCustomMetricAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to get.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomMetric GetCustomMetric(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetCustomMetric(new GetCustomMetricRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to get.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> GetCustomMetricAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetCustomMetricAsync(new GetCustomMetricRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to get.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> GetCustomMetricAsync(string name, st::CancellationToken cancellationToken) =>
            GetCustomMetricAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to get.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CustomMetric GetCustomMetric(CustomMetricName name, gaxgrpc::CallSettings callSettings = null) =>
            GetCustomMetric(new GetCustomMetricRequest
            {
                CustomMetricName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to get.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> GetCustomMetricAsync(CustomMetricName name, gaxgrpc::CallSettings callSettings = null) =>
            GetCustomMetricAsync(new GetCustomMetricRequest
            {
                CustomMetricName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CustomMetric to get.
        /// Example format: properties/1234/customMetrics/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CustomMetric> GetCustomMetricAsync(CustomMetricName name, st::CancellationToken cancellationToken) =>
            GetCustomMetricAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRetentionSettings GetDataRetentionSettings(GetDataRetentionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> GetDataRetentionSettingsAsync(GetDataRetentionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> GetDataRetentionSettingsAsync(GetDataRetentionSettingsRequest request, st::CancellationToken cancellationToken) =>
            GetDataRetentionSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataRetentionSettings
        /// Example: "properties/1000/dataRetentionSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRetentionSettings GetDataRetentionSettings(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataRetentionSettings(new GetDataRetentionSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataRetentionSettings
        /// Example: "properties/1000/dataRetentionSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> GetDataRetentionSettingsAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataRetentionSettingsAsync(new GetDataRetentionSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataRetentionSettings
        /// Example: "properties/1000/dataRetentionSettings"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> GetDataRetentionSettingsAsync(string name, st::CancellationToken cancellationToken) =>
            GetDataRetentionSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataRetentionSettings
        /// Example: "properties/1000/dataRetentionSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRetentionSettings GetDataRetentionSettings(DataRetentionSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataRetentionSettings(new GetDataRetentionSettingsRequest
            {
                DataRetentionSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataRetentionSettings
        /// Example: "properties/1000/dataRetentionSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> GetDataRetentionSettingsAsync(DataRetentionSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataRetentionSettingsAsync(new GetDataRetentionSettingsRequest
            {
                DataRetentionSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataRetentionSettings
        /// Example: "properties/1000/dataRetentionSettings"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> GetDataRetentionSettingsAsync(DataRetentionSettingsName name, st::CancellationToken cancellationToken) =>
            GetDataRetentionSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRetentionSettings UpdateDataRetentionSettings(UpdateDataRetentionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> UpdateDataRetentionSettingsAsync(UpdateDataRetentionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> UpdateDataRetentionSettingsAsync(UpdateDataRetentionSettingsRequest request, st::CancellationToken cancellationToken) =>
            UpdateDataRetentionSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates the singleton data retention settings for this property.
        /// </summary>
        /// <param name="dataRetentionSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRetentionSettings UpdateDataRetentionSettings(DataRetentionSettings dataRetentionSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateDataRetentionSettings(new UpdateDataRetentionSettingsRequest
            {
                DataRetentionSettings = gax::GaxPreconditions.CheckNotNull(dataRetentionSettings, nameof(dataRetentionSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates the singleton data retention settings for this property.
        /// </summary>
        /// <param name="dataRetentionSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> UpdateDataRetentionSettingsAsync(DataRetentionSettings dataRetentionSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateDataRetentionSettingsAsync(new UpdateDataRetentionSettingsRequest
            {
                DataRetentionSettings = gax::GaxPreconditions.CheckNotNull(dataRetentionSettings, nameof(dataRetentionSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates the singleton data retention settings for this property.
        /// </summary>
        /// <param name="dataRetentionSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRetentionSettings> UpdateDataRetentionSettingsAsync(DataRetentionSettings dataRetentionSettings, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateDataRetentionSettingsAsync(dataRetentionSettings, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataStream CreateDataStream(CreateDataStreamRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> CreateDataStreamAsync(CreateDataStreamRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> CreateDataStreamAsync(CreateDataStreamRequest request, st::CancellationToken cancellationToken) =>
            CreateDataStreamAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="dataStream">
        /// Required. The DataStream to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataStream CreateDataStream(string parent, DataStream dataStream, gaxgrpc::CallSettings callSettings = null) =>
            CreateDataStream(new CreateDataStreamRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                DataStream = gax::GaxPreconditions.CheckNotNull(dataStream, nameof(dataStream)),
            }, callSettings);

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="dataStream">
        /// Required. The DataStream to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> CreateDataStreamAsync(string parent, DataStream dataStream, gaxgrpc::CallSettings callSettings = null) =>
            CreateDataStreamAsync(new CreateDataStreamRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                DataStream = gax::GaxPreconditions.CheckNotNull(dataStream, nameof(dataStream)),
            }, callSettings);

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="dataStream">
        /// Required. The DataStream to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> CreateDataStreamAsync(string parent, DataStream dataStream, st::CancellationToken cancellationToken) =>
            CreateDataStreamAsync(parent, dataStream, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="dataStream">
        /// Required. The DataStream to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataStream CreateDataStream(PropertyName parent, DataStream dataStream, gaxgrpc::CallSettings callSettings = null) =>
            CreateDataStream(new CreateDataStreamRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                DataStream = gax::GaxPreconditions.CheckNotNull(dataStream, nameof(dataStream)),
            }, callSettings);

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="dataStream">
        /// Required. The DataStream to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> CreateDataStreamAsync(PropertyName parent, DataStream dataStream, gaxgrpc::CallSettings callSettings = null) =>
            CreateDataStreamAsync(new CreateDataStreamRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                DataStream = gax::GaxPreconditions.CheckNotNull(dataStream, nameof(dataStream)),
            }, callSettings);

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="dataStream">
        /// Required. The DataStream to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> CreateDataStreamAsync(PropertyName parent, DataStream dataStream, st::CancellationToken cancellationToken) =>
            CreateDataStreamAsync(parent, dataStream, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDataStream(DeleteDataStreamRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDataStreamAsync(DeleteDataStreamRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDataStreamAsync(DeleteDataStreamRequest request, st::CancellationToken cancellationToken) =>
            DeleteDataStreamAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to delete.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDataStream(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDataStream(new DeleteDataStreamRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to delete.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDataStreamAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDataStreamAsync(new DeleteDataStreamRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to delete.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDataStreamAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteDataStreamAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to delete.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteDataStream(DataStreamName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDataStream(new DeleteDataStreamRequest
            {
                DataStreamName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to delete.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDataStreamAsync(DataStreamName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteDataStreamAsync(new DeleteDataStreamRequest
            {
                DataStreamName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to delete.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteDataStreamAsync(DataStreamName name, st::CancellationToken cancellationToken) =>
            DeleteDataStreamAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataStream UpdateDataStream(UpdateDataStreamRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> UpdateDataStreamAsync(UpdateDataStreamRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> UpdateDataStreamAsync(UpdateDataStreamRequest request, st::CancellationToken cancellationToken) =>
            UpdateDataStreamAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a DataStream on a property.
        /// </summary>
        /// <param name="dataStream">
        /// The DataStream to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataStream UpdateDataStream(DataStream dataStream, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateDataStream(new UpdateDataStreamRequest
            {
                DataStream = dataStream,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a DataStream on a property.
        /// </summary>
        /// <param name="dataStream">
        /// The DataStream to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> UpdateDataStreamAsync(DataStream dataStream, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateDataStreamAsync(new UpdateDataStreamRequest
            {
                DataStream = dataStream,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a DataStream on a property.
        /// </summary>
        /// <param name="dataStream">
        /// The DataStream to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> UpdateDataStreamAsync(DataStream dataStream, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateDataStreamAsync(dataStream, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists DataStreams on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DataStream"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDataStreamsResponse, DataStream> ListDataStreams(ListDataStreamsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists DataStreams on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="DataStream"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListDataStreamsResponse, DataStream> ListDataStreamsAsync(ListDataStreamsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists DataStreams on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DataStream"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDataStreamsResponse, DataStream> ListDataStreams(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDataStreamsRequest request = new ListDataStreamsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDataStreams(request, callSettings);
        }

        /// <summary>
        /// Lists DataStreams on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="DataStream"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListDataStreamsResponse, DataStream> ListDataStreamsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDataStreamsRequest request = new ListDataStreamsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDataStreamsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists DataStreams on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DataStream"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListDataStreamsResponse, DataStream> ListDataStreams(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDataStreamsRequest request = new ListDataStreamsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDataStreams(request, callSettings);
        }

        /// <summary>
        /// Lists DataStreams on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="DataStream"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListDataStreamsResponse, DataStream> ListDataStreamsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListDataStreamsRequest request = new ListDataStreamsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListDataStreamsAsync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataStream GetDataStream(GetDataStreamRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> GetDataStreamAsync(GetDataStreamRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> GetDataStreamAsync(GetDataStreamRequest request, st::CancellationToken cancellationToken) =>
            GetDataStreamAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to get.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataStream GetDataStream(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataStream(new GetDataStreamRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to get.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> GetDataStreamAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataStreamAsync(new GetDataStreamRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to get.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> GetDataStreamAsync(string name, st::CancellationToken cancellationToken) =>
            GetDataStreamAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to get.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataStream GetDataStream(DataStreamName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataStream(new GetDataStreamRequest
            {
                DataStreamName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to get.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> GetDataStreamAsync(DataStreamName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataStreamAsync(new GetDataStreamRequest
            {
                DataStreamName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the DataStream to get.
        /// Example format: properties/1234/dataStreams/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataStream> GetDataStreamAsync(DataStreamName name, st::CancellationToken cancellationToken) =>
            GetDataStreamAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Audience GetAudience(GetAudienceRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> GetAudienceAsync(GetAudienceRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> GetAudienceAsync(GetAudienceRequest request, st::CancellationToken cancellationToken) =>
            GetAudienceAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Audience to get.
        /// Example format: properties/1234/audiences/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Audience GetAudience(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAudience(new GetAudienceRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Audience to get.
        /// Example format: properties/1234/audiences/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> GetAudienceAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAudienceAsync(new GetAudienceRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Audience to get.
        /// Example format: properties/1234/audiences/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> GetAudienceAsync(string name, st::CancellationToken cancellationToken) =>
            GetAudienceAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Audience to get.
        /// Example format: properties/1234/audiences/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Audience GetAudience(AudienceName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAudience(new GetAudienceRequest
            {
                AudienceName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Audience to get.
        /// Example format: properties/1234/audiences/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> GetAudienceAsync(AudienceName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAudienceAsync(new GetAudienceRequest
            {
                AudienceName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the Audience to get.
        /// Example format: properties/1234/audiences/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> GetAudienceAsync(AudienceName name, st::CancellationToken cancellationToken) =>
            GetAudienceAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists Audiences on a property.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="Audience"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAudiencesResponse, Audience> ListAudiences(ListAudiencesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists Audiences on a property.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="Audience"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAudiencesResponse, Audience> ListAudiencesAsync(ListAudiencesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists Audiences on a property.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="Audience"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAudiencesResponse, Audience> ListAudiences(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAudiencesRequest request = new ListAudiencesRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAudiences(request, callSettings);
        }

        /// <summary>
        /// Lists Audiences on a property.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="Audience"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAudiencesResponse, Audience> ListAudiencesAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAudiencesRequest request = new ListAudiencesRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAudiencesAsync(request, callSettings);
        }

        /// <summary>
        /// Lists Audiences on a property.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="Audience"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAudiencesResponse, Audience> ListAudiences(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAudiencesRequest request = new ListAudiencesRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAudiences(request, callSettings);
        }

        /// <summary>
        /// Lists Audiences on a property.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="Audience"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAudiencesResponse, Audience> ListAudiencesAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAudiencesRequest request = new ListAudiencesRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAudiencesAsync(request, callSettings);
        }

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Audience CreateAudience(CreateAudienceRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> CreateAudienceAsync(CreateAudienceRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> CreateAudienceAsync(CreateAudienceRequest request, st::CancellationToken cancellationToken) =>
            CreateAudienceAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="audience">
        /// Required. The audience to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Audience CreateAudience(string parent, Audience audience, gaxgrpc::CallSettings callSettings = null) =>
            CreateAudience(new CreateAudienceRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                Audience = gax::GaxPreconditions.CheckNotNull(audience, nameof(audience)),
            }, callSettings);

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="audience">
        /// Required. The audience to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> CreateAudienceAsync(string parent, Audience audience, gaxgrpc::CallSettings callSettings = null) =>
            CreateAudienceAsync(new CreateAudienceRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                Audience = gax::GaxPreconditions.CheckNotNull(audience, nameof(audience)),
            }, callSettings);

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="audience">
        /// Required. The audience to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> CreateAudienceAsync(string parent, Audience audience, st::CancellationToken cancellationToken) =>
            CreateAudienceAsync(parent, audience, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="audience">
        /// Required. The audience to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Audience CreateAudience(PropertyName parent, Audience audience, gaxgrpc::CallSettings callSettings = null) =>
            CreateAudience(new CreateAudienceRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                Audience = gax::GaxPreconditions.CheckNotNull(audience, nameof(audience)),
            }, callSettings);

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="audience">
        /// Required. The audience to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> CreateAudienceAsync(PropertyName parent, Audience audience, gaxgrpc::CallSettings callSettings = null) =>
            CreateAudienceAsync(new CreateAudienceRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                Audience = gax::GaxPreconditions.CheckNotNull(audience, nameof(audience)),
            }, callSettings);

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="audience">
        /// Required. The audience to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> CreateAudienceAsync(PropertyName parent, Audience audience, st::CancellationToken cancellationToken) =>
            CreateAudienceAsync(parent, audience, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Audience UpdateAudience(UpdateAudienceRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> UpdateAudienceAsync(UpdateAudienceRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> UpdateAudienceAsync(UpdateAudienceRequest request, st::CancellationToken cancellationToken) =>
            UpdateAudienceAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an Audience on a property.
        /// </summary>
        /// <param name="audience">
        /// Required. The audience to update.
        /// The audience's `name` field is used to identify the audience to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual Audience UpdateAudience(Audience audience, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateAudience(new UpdateAudienceRequest
            {
                Audience = gax::GaxPreconditions.CheckNotNull(audience, nameof(audience)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates an Audience on a property.
        /// </summary>
        /// <param name="audience">
        /// Required. The audience to update.
        /// The audience's `name` field is used to identify the audience to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> UpdateAudienceAsync(Audience audience, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateAudienceAsync(new UpdateAudienceRequest
            {
                Audience = gax::GaxPreconditions.CheckNotNull(audience, nameof(audience)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates an Audience on a property.
        /// </summary>
        /// <param name="audience">
        /// Required. The audience to update.
        /// The audience's `name` field is used to identify the audience to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<Audience> UpdateAudienceAsync(Audience audience, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateAudienceAsync(audience, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Archives an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void ArchiveAudience(ArchiveAudienceRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Archives an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveAudienceAsync(ArchiveAudienceRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Archives an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ArchiveAudienceAsync(ArchiveAudienceRequest request, st::CancellationToken cancellationToken) =>
            ArchiveAudienceAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SearchAds360Link GetSearchAds360Link(GetSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> GetSearchAds360LinkAsync(GetSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> GetSearchAds360LinkAsync(GetSearchAds360LinkRequest request, st::CancellationToken cancellationToken) =>
            GetSearchAds360LinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to get.
        /// Example format: properties/1234/SearchAds360Link/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SearchAds360Link GetSearchAds360Link(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetSearchAds360Link(new GetSearchAds360LinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to get.
        /// Example format: properties/1234/SearchAds360Link/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> GetSearchAds360LinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetSearchAds360LinkAsync(new GetSearchAds360LinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to get.
        /// Example format: properties/1234/SearchAds360Link/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> GetSearchAds360LinkAsync(string name, st::CancellationToken cancellationToken) =>
            GetSearchAds360LinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to get.
        /// Example format: properties/1234/SearchAds360Link/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SearchAds360Link GetSearchAds360Link(SearchAds360LinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetSearchAds360Link(new GetSearchAds360LinkRequest
            {
                SearchAds360LinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to get.
        /// Example format: properties/1234/SearchAds360Link/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> GetSearchAds360LinkAsync(SearchAds360LinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetSearchAds360LinkAsync(new GetSearchAds360LinkRequest
            {
                SearchAds360LinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to get.
        /// Example format: properties/1234/SearchAds360Link/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> GetSearchAds360LinkAsync(SearchAds360LinkName name, st::CancellationToken cancellationToken) =>
            GetSearchAds360LinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists all SearchAds360Links on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SearchAds360Link"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSearchAds360LinksResponse, SearchAds360Link> ListSearchAds360Links(ListSearchAds360LinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists all SearchAds360Links on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="SearchAds360Link"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListSearchAds360LinksResponse, SearchAds360Link> ListSearchAds360LinksAsync(ListSearchAds360LinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists all SearchAds360Links on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SearchAds360Link"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSearchAds360LinksResponse, SearchAds360Link> ListSearchAds360Links(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSearchAds360LinksRequest request = new ListSearchAds360LinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSearchAds360Links(request, callSettings);
        }

        /// <summary>
        /// Lists all SearchAds360Links on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="SearchAds360Link"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListSearchAds360LinksResponse, SearchAds360Link> ListSearchAds360LinksAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSearchAds360LinksRequest request = new ListSearchAds360LinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSearchAds360LinksAsync(request, callSettings);
        }

        /// <summary>
        /// Lists all SearchAds360Links on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SearchAds360Link"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSearchAds360LinksResponse, SearchAds360Link> ListSearchAds360Links(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSearchAds360LinksRequest request = new ListSearchAds360LinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSearchAds360Links(request, callSettings);
        }

        /// <summary>
        /// Lists all SearchAds360Links on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="SearchAds360Link"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListSearchAds360LinksResponse, SearchAds360Link> ListSearchAds360LinksAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSearchAds360LinksRequest request = new ListSearchAds360LinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSearchAds360LinksAsync(request, callSettings);
        }

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SearchAds360Link CreateSearchAds360Link(CreateSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> CreateSearchAds360LinkAsync(CreateSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> CreateSearchAds360LinkAsync(CreateSearchAds360LinkRequest request, st::CancellationToken cancellationToken) =>
            CreateSearchAds360LinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="searchAds360Link">
        /// Required. The SearchAds360Link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SearchAds360Link CreateSearchAds360Link(string parent, SearchAds360Link searchAds360Link, gaxgrpc::CallSettings callSettings = null) =>
            CreateSearchAds360Link(new CreateSearchAds360LinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                SearchAds360Link = gax::GaxPreconditions.CheckNotNull(searchAds360Link, nameof(searchAds360Link)),
            }, callSettings);

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="searchAds360Link">
        /// Required. The SearchAds360Link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> CreateSearchAds360LinkAsync(string parent, SearchAds360Link searchAds360Link, gaxgrpc::CallSettings callSettings = null) =>
            CreateSearchAds360LinkAsync(new CreateSearchAds360LinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                SearchAds360Link = gax::GaxPreconditions.CheckNotNull(searchAds360Link, nameof(searchAds360Link)),
            }, callSettings);

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="searchAds360Link">
        /// Required. The SearchAds360Link to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> CreateSearchAds360LinkAsync(string parent, SearchAds360Link searchAds360Link, st::CancellationToken cancellationToken) =>
            CreateSearchAds360LinkAsync(parent, searchAds360Link, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="searchAds360Link">
        /// Required. The SearchAds360Link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SearchAds360Link CreateSearchAds360Link(PropertyName parent, SearchAds360Link searchAds360Link, gaxgrpc::CallSettings callSettings = null) =>
            CreateSearchAds360Link(new CreateSearchAds360LinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                SearchAds360Link = gax::GaxPreconditions.CheckNotNull(searchAds360Link, nameof(searchAds360Link)),
            }, callSettings);

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="searchAds360Link">
        /// Required. The SearchAds360Link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> CreateSearchAds360LinkAsync(PropertyName parent, SearchAds360Link searchAds360Link, gaxgrpc::CallSettings callSettings = null) =>
            CreateSearchAds360LinkAsync(new CreateSearchAds360LinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                SearchAds360Link = gax::GaxPreconditions.CheckNotNull(searchAds360Link, nameof(searchAds360Link)),
            }, callSettings);

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="searchAds360Link">
        /// Required. The SearchAds360Link to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> CreateSearchAds360LinkAsync(PropertyName parent, SearchAds360Link searchAds360Link, st::CancellationToken cancellationToken) =>
            CreateSearchAds360LinkAsync(parent, searchAds360Link, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSearchAds360Link(DeleteSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSearchAds360LinkAsync(DeleteSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSearchAds360LinkAsync(DeleteSearchAds360LinkRequest request, st::CancellationToken cancellationToken) =>
            DeleteSearchAds360LinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to delete.
        /// Example format: properties/1234/SearchAds360Links/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSearchAds360Link(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSearchAds360Link(new DeleteSearchAds360LinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to delete.
        /// Example format: properties/1234/SearchAds360Links/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSearchAds360LinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSearchAds360LinkAsync(new DeleteSearchAds360LinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to delete.
        /// Example format: properties/1234/SearchAds360Links/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSearchAds360LinkAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteSearchAds360LinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to delete.
        /// Example format: properties/1234/SearchAds360Links/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSearchAds360Link(SearchAds360LinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSearchAds360Link(new DeleteSearchAds360LinkRequest
            {
                SearchAds360LinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to delete.
        /// Example format: properties/1234/SearchAds360Links/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSearchAds360LinkAsync(SearchAds360LinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSearchAds360LinkAsync(new DeleteSearchAds360LinkRequest
            {
                SearchAds360LinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the SearchAds360Link to delete.
        /// Example format: properties/1234/SearchAds360Links/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSearchAds360LinkAsync(SearchAds360LinkName name, st::CancellationToken cancellationToken) =>
            DeleteSearchAds360LinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SearchAds360Link UpdateSearchAds360Link(UpdateSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> UpdateSearchAds360LinkAsync(UpdateSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> UpdateSearchAds360LinkAsync(UpdateSearchAds360LinkRequest request, st::CancellationToken cancellationToken) =>
            UpdateSearchAds360LinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a SearchAds360Link on a property.
        /// </summary>
        /// <param name="searchAds360Link">
        /// The SearchAds360Link to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SearchAds360Link UpdateSearchAds360Link(SearchAds360Link searchAds360Link, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateSearchAds360Link(new UpdateSearchAds360LinkRequest
            {
                SearchAds360Link = searchAds360Link,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a SearchAds360Link on a property.
        /// </summary>
        /// <param name="searchAds360Link">
        /// The SearchAds360Link to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> UpdateSearchAds360LinkAsync(SearchAds360Link searchAds360Link, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateSearchAds360LinkAsync(new UpdateSearchAds360LinkRequest
            {
                SearchAds360Link = searchAds360Link,
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a SearchAds360Link on a property.
        /// </summary>
        /// <param name="searchAds360Link">
        /// The SearchAds360Link to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SearchAds360Link> UpdateSearchAds360LinkAsync(SearchAds360Link searchAds360Link, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateSearchAds360LinkAsync(searchAds360Link, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AttributionSettings GetAttributionSettings(GetAttributionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> GetAttributionSettingsAsync(GetAttributionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> GetAttributionSettingsAsync(GetAttributionSettingsRequest request, st::CancellationToken cancellationToken) =>
            GetAttributionSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the attribution settings to retrieve.
        /// Format: properties/{property}/attributionSettings
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AttributionSettings GetAttributionSettings(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAttributionSettings(new GetAttributionSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the attribution settings to retrieve.
        /// Format: properties/{property}/attributionSettings
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> GetAttributionSettingsAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAttributionSettingsAsync(new GetAttributionSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the attribution settings to retrieve.
        /// Format: properties/{property}/attributionSettings
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> GetAttributionSettingsAsync(string name, st::CancellationToken cancellationToken) =>
            GetAttributionSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the attribution settings to retrieve.
        /// Format: properties/{property}/attributionSettings
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AttributionSettings GetAttributionSettings(AttributionSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAttributionSettings(new GetAttributionSettingsRequest
            {
                AttributionSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the attribution settings to retrieve.
        /// Format: properties/{property}/attributionSettings
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> GetAttributionSettingsAsync(AttributionSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAttributionSettingsAsync(new GetAttributionSettingsRequest
            {
                AttributionSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the attribution settings to retrieve.
        /// Format: properties/{property}/attributionSettings
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> GetAttributionSettingsAsync(AttributionSettingsName name, st::CancellationToken cancellationToken) =>
            GetAttributionSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates attribution settings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AttributionSettings UpdateAttributionSettings(UpdateAttributionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates attribution settings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> UpdateAttributionSettingsAsync(UpdateAttributionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates attribution settings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> UpdateAttributionSettingsAsync(UpdateAttributionSettingsRequest request, st::CancellationToken cancellationToken) =>
            UpdateAttributionSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates attribution settings on a property.
        /// </summary>
        /// <param name="attributionSettings">
        /// Required. The attribution settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AttributionSettings UpdateAttributionSettings(AttributionSettings attributionSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateAttributionSettings(new UpdateAttributionSettingsRequest
            {
                AttributionSettings = gax::GaxPreconditions.CheckNotNull(attributionSettings, nameof(attributionSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates attribution settings on a property.
        /// </summary>
        /// <param name="attributionSettings">
        /// Required. The attribution settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> UpdateAttributionSettingsAsync(AttributionSettings attributionSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateAttributionSettingsAsync(new UpdateAttributionSettingsRequest
            {
                AttributionSettings = gax::GaxPreconditions.CheckNotNull(attributionSettings, nameof(attributionSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates attribution settings on a property.
        /// </summary>
        /// <param name="attributionSettings">
        /// Required. The attribution settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AttributionSettings> UpdateAttributionSettingsAsync(AttributionSettings attributionSettings, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateAttributionSettingsAsync(attributionSettings, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns a customized report of data access records. The report provides
        /// records of each time a user reads Google Analytics reporting data. Access
        /// records are retained for up to 2 years.
        /// 
        /// Data Access Reports can be requested for a property. Reports may be
        /// requested for any property, but dimensions that aren't related to quota can
        /// only be requested on Google Analytics 360 properties. This method is only
        /// available to Administrators.
        /// 
        /// These data access records include GA4 UI Reporting, GA4 UI Explorations,
        /// GA4 Data API, and other products like Firebase &amp; Admob that can retrieve
        /// data from Google Analytics through a linkage. These records don't include
        /// property configuration changes like adding a stream or changing a
        /// property's time zone. For configuration change history, see
        /// [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual RunAccessReportResponse RunAccessReport(RunAccessReportRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns a customized report of data access records. The report provides
        /// records of each time a user reads Google Analytics reporting data. Access
        /// records are retained for up to 2 years.
        /// 
        /// Data Access Reports can be requested for a property. Reports may be
        /// requested for any property, but dimensions that aren't related to quota can
        /// only be requested on Google Analytics 360 properties. This method is only
        /// available to Administrators.
        /// 
        /// These data access records include GA4 UI Reporting, GA4 UI Explorations,
        /// GA4 Data API, and other products like Firebase &amp; Admob that can retrieve
        /// data from Google Analytics through a linkage. These records don't include
        /// property configuration changes like adding a stream or changing a
        /// property's time zone. For configuration change history, see
        /// [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RunAccessReportResponse> RunAccessReportAsync(RunAccessReportRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns a customized report of data access records. The report provides
        /// records of each time a user reads Google Analytics reporting data. Access
        /// records are retained for up to 2 years.
        /// 
        /// Data Access Reports can be requested for a property. Reports may be
        /// requested for any property, but dimensions that aren't related to quota can
        /// only be requested on Google Analytics 360 properties. This method is only
        /// available to Administrators.
        /// 
        /// These data access records include GA4 UI Reporting, GA4 UI Explorations,
        /// GA4 Data API, and other products like Firebase &amp; Admob that can retrieve
        /// data from Google Analytics through a linkage. These records don't include
        /// property configuration changes like adding a stream or changing a
        /// property's time zone. For configuration change history, see
        /// [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RunAccessReportResponse> RunAccessReportAsync(RunAccessReportRequest request, st::CancellationToken cancellationToken) =>
            RunAccessReportAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding CreateAccessBinding(CreateAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> CreateAccessBindingAsync(CreateAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> CreateAccessBindingAsync(CreateAccessBindingRequest request, st::CancellationToken cancellationToken) =>
            CreateAccessBindingAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding CreateAccessBinding(string parent, AccessBinding accessBinding, gaxgrpc::CallSettings callSettings = null) =>
            CreateAccessBinding(new CreateAccessBindingRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                AccessBinding = gax::GaxPreconditions.CheckNotNull(accessBinding, nameof(accessBinding)),
            }, callSettings);

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> CreateAccessBindingAsync(string parent, AccessBinding accessBinding, gaxgrpc::CallSettings callSettings = null) =>
            CreateAccessBindingAsync(new CreateAccessBindingRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                AccessBinding = gax::GaxPreconditions.CheckNotNull(accessBinding, nameof(accessBinding)),
            }, callSettings);

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> CreateAccessBindingAsync(string parent, AccessBinding accessBinding, st::CancellationToken cancellationToken) =>
            CreateAccessBindingAsync(parent, accessBinding, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding CreateAccessBinding(AccountName parent, AccessBinding accessBinding, gaxgrpc::CallSettings callSettings = null) =>
            CreateAccessBinding(new CreateAccessBindingRequest
            {
                ParentAsAccountName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                AccessBinding = gax::GaxPreconditions.CheckNotNull(accessBinding, nameof(accessBinding)),
            }, callSettings);

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> CreateAccessBindingAsync(AccountName parent, AccessBinding accessBinding, gaxgrpc::CallSettings callSettings = null) =>
            CreateAccessBindingAsync(new CreateAccessBindingRequest
            {
                ParentAsAccountName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                AccessBinding = gax::GaxPreconditions.CheckNotNull(accessBinding, nameof(accessBinding)),
            }, callSettings);

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> CreateAccessBindingAsync(AccountName parent, AccessBinding accessBinding, st::CancellationToken cancellationToken) =>
            CreateAccessBindingAsync(parent, accessBinding, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding CreateAccessBinding(PropertyName parent, AccessBinding accessBinding, gaxgrpc::CallSettings callSettings = null) =>
            CreateAccessBinding(new CreateAccessBindingRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                AccessBinding = gax::GaxPreconditions.CheckNotNull(accessBinding, nameof(accessBinding)),
            }, callSettings);

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> CreateAccessBindingAsync(PropertyName parent, AccessBinding accessBinding, gaxgrpc::CallSettings callSettings = null) =>
            CreateAccessBindingAsync(new CreateAccessBindingRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                AccessBinding = gax::GaxPreconditions.CheckNotNull(accessBinding, nameof(accessBinding)),
            }, callSettings);

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="accessBinding">
        /// Required. The access binding to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> CreateAccessBindingAsync(PropertyName parent, AccessBinding accessBinding, st::CancellationToken cancellationToken) =>
            CreateAccessBindingAsync(parent, accessBinding, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding GetAccessBinding(GetAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> GetAccessBindingAsync(GetAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> GetAccessBindingAsync(GetAccessBindingRequest request, st::CancellationToken cancellationToken) =>
            GetAccessBindingAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the access binding to retrieve.
        /// Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding GetAccessBinding(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAccessBinding(new GetAccessBindingRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the access binding to retrieve.
        /// Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> GetAccessBindingAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAccessBindingAsync(new GetAccessBindingRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the access binding to retrieve.
        /// Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> GetAccessBindingAsync(string name, st::CancellationToken cancellationToken) =>
            GetAccessBindingAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the access binding to retrieve.
        /// Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding GetAccessBinding(AccessBindingName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAccessBinding(new GetAccessBindingRequest
            {
                AccessBindingName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the access binding to retrieve.
        /// Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> GetAccessBindingAsync(AccessBindingName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAccessBindingAsync(new GetAccessBindingRequest
            {
                AccessBindingName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the access binding to retrieve.
        /// Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> GetAccessBindingAsync(AccessBindingName name, st::CancellationToken cancellationToken) =>
            GetAccessBindingAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding UpdateAccessBinding(UpdateAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> UpdateAccessBindingAsync(UpdateAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> UpdateAccessBindingAsync(UpdateAccessBindingRequest request, st::CancellationToken cancellationToken) =>
            UpdateAccessBindingAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an access binding on an account or property.
        /// </summary>
        /// <param name="accessBinding">
        /// Required. The access binding to update.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AccessBinding UpdateAccessBinding(AccessBinding accessBinding, gaxgrpc::CallSettings callSettings = null) =>
            UpdateAccessBinding(new UpdateAccessBindingRequest
            {
                AccessBinding = gax::GaxPreconditions.CheckNotNull(accessBinding, nameof(accessBinding)),
            }, callSettings);

        /// <summary>
        /// Updates an access binding on an account or property.
        /// </summary>
        /// <param name="accessBinding">
        /// Required. The access binding to update.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> UpdateAccessBindingAsync(AccessBinding accessBinding, gaxgrpc::CallSettings callSettings = null) =>
            UpdateAccessBindingAsync(new UpdateAccessBindingRequest
            {
                AccessBinding = gax::GaxPreconditions.CheckNotNull(accessBinding, nameof(accessBinding)),
            }, callSettings);

        /// <summary>
        /// Updates an access binding on an account or property.
        /// </summary>
        /// <param name="accessBinding">
        /// Required. The access binding to update.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AccessBinding> UpdateAccessBindingAsync(AccessBinding accessBinding, st::CancellationToken cancellationToken) =>
            UpdateAccessBindingAsync(accessBinding, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAccessBinding(DeleteAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccessBindingAsync(DeleteAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccessBindingAsync(DeleteAccessBindingRequest request, st::CancellationToken cancellationToken) =>
            DeleteAccessBindingAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="name">
        /// Required. Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAccessBinding(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAccessBinding(new DeleteAccessBindingRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="name">
        /// Required. Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccessBindingAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAccessBindingAsync(new DeleteAccessBindingRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="name">
        /// Required. Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccessBindingAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteAccessBindingAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="name">
        /// Required. Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAccessBinding(AccessBindingName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAccessBinding(new DeleteAccessBindingRequest
            {
                AccessBindingName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="name">
        /// Required. Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccessBindingAsync(AccessBindingName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAccessBindingAsync(new DeleteAccessBindingRequest
            {
                AccessBindingName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="name">
        /// Required. Formats:
        /// - accounts/{account}/accessBindings/{accessBinding}
        /// - properties/{property}/accessBindings/{accessBinding}
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAccessBindingAsync(AccessBindingName name, st::CancellationToken cancellationToken) =>
            DeleteAccessBindingAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AccessBinding"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindings(ListAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AccessBinding"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindingsAsync(ListAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AccessBinding"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindings(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAccessBindingsRequest request = new ListAccessBindingsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAccessBindings(request, callSettings);
        }

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AccessBinding"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindingsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAccessBindingsRequest request = new ListAccessBindingsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAccessBindingsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AccessBinding"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindings(AccountName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAccessBindingsRequest request = new ListAccessBindingsRequest
            {
                ParentAsAccountName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAccessBindings(request, callSettings);
        }

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AccessBinding"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindingsAsync(AccountName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAccessBindingsRequest request = new ListAccessBindingsRequest
            {
                ParentAsAccountName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAccessBindingsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AccessBinding"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindings(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAccessBindingsRequest request = new ListAccessBindingsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAccessBindings(request, callSettings);
        }

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="parent">
        /// Required. Formats:
        /// - accounts/{account}
        /// - properties/{property}
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AccessBinding"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindingsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAccessBindingsRequest request = new ListAccessBindingsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAccessBindingsAsync(request, callSettings);
        }

        /// <summary>
        /// Creates information about multiple access bindings to an account or
        /// property.
        /// 
        /// This method is transactional. If any AccessBinding cannot be created, none
        /// of the AccessBindings will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BatchCreateAccessBindingsResponse BatchCreateAccessBindings(BatchCreateAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates information about multiple access bindings to an account or
        /// property.
        /// 
        /// This method is transactional. If any AccessBinding cannot be created, none
        /// of the AccessBindings will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BatchCreateAccessBindingsResponse> BatchCreateAccessBindingsAsync(BatchCreateAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates information about multiple access bindings to an account or
        /// property.
        /// 
        /// This method is transactional. If any AccessBinding cannot be created, none
        /// of the AccessBindings will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BatchCreateAccessBindingsResponse> BatchCreateAccessBindingsAsync(BatchCreateAccessBindingsRequest request, st::CancellationToken cancellationToken) =>
            BatchCreateAccessBindingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Gets information about multiple access bindings to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BatchGetAccessBindingsResponse BatchGetAccessBindings(BatchGetAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Gets information about multiple access bindings to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BatchGetAccessBindingsResponse> BatchGetAccessBindingsAsync(BatchGetAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Gets information about multiple access bindings to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BatchGetAccessBindingsResponse> BatchGetAccessBindingsAsync(BatchGetAccessBindingsRequest request, st::CancellationToken cancellationToken) =>
            BatchGetAccessBindingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates information about multiple access bindings to an account or
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BatchUpdateAccessBindingsResponse BatchUpdateAccessBindings(BatchUpdateAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates information about multiple access bindings to an account or
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BatchUpdateAccessBindingsResponse> BatchUpdateAccessBindingsAsync(BatchUpdateAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates information about multiple access bindings to an account or
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BatchUpdateAccessBindingsResponse> BatchUpdateAccessBindingsAsync(BatchUpdateAccessBindingsRequest request, st::CancellationToken cancellationToken) =>
            BatchUpdateAccessBindingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes information about multiple users' links to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void BatchDeleteAccessBindings(BatchDeleteAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes information about multiple users' links to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task BatchDeleteAccessBindingsAsync(BatchDeleteAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes information about multiple users' links to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task BatchDeleteAccessBindingsAsync(BatchDeleteAccessBindingsRequest request, st::CancellationToken cancellationToken) =>
            BatchDeleteAccessBindingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ExpandedDataSet GetExpandedDataSet(GetExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> GetExpandedDataSetAsync(GetExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> GetExpandedDataSetAsync(GetExpandedDataSetRequest request, st::CancellationToken cancellationToken) =>
            GetExpandedDataSetAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the ExpandedDataSet to get.
        /// Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ExpandedDataSet GetExpandedDataSet(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetExpandedDataSet(new GetExpandedDataSetRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the ExpandedDataSet to get.
        /// Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> GetExpandedDataSetAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetExpandedDataSetAsync(new GetExpandedDataSetRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the ExpandedDataSet to get.
        /// Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> GetExpandedDataSetAsync(string name, st::CancellationToken cancellationToken) =>
            GetExpandedDataSetAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the ExpandedDataSet to get.
        /// Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ExpandedDataSet GetExpandedDataSet(ExpandedDataSetName name, gaxgrpc::CallSettings callSettings = null) =>
            GetExpandedDataSet(new GetExpandedDataSetRequest
            {
                ExpandedDataSetName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the ExpandedDataSet to get.
        /// Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> GetExpandedDataSetAsync(ExpandedDataSetName name, gaxgrpc::CallSettings callSettings = null) =>
            GetExpandedDataSetAsync(new GetExpandedDataSetRequest
            {
                ExpandedDataSetName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the ExpandedDataSet to get.
        /// Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> GetExpandedDataSetAsync(ExpandedDataSetName name, st::CancellationToken cancellationToken) =>
            GetExpandedDataSetAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists ExpandedDataSets on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ExpandedDataSet"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListExpandedDataSetsResponse, ExpandedDataSet> ListExpandedDataSets(ListExpandedDataSetsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists ExpandedDataSets on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ExpandedDataSet"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListExpandedDataSetsResponse, ExpandedDataSet> ListExpandedDataSetsAsync(ListExpandedDataSetsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists ExpandedDataSets on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ExpandedDataSet"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListExpandedDataSetsResponse, ExpandedDataSet> ListExpandedDataSets(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListExpandedDataSetsRequest request = new ListExpandedDataSetsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListExpandedDataSets(request, callSettings);
        }

        /// <summary>
        /// Lists ExpandedDataSets on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ExpandedDataSet"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListExpandedDataSetsResponse, ExpandedDataSet> ListExpandedDataSetsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListExpandedDataSetsRequest request = new ListExpandedDataSetsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListExpandedDataSetsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists ExpandedDataSets on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ExpandedDataSet"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListExpandedDataSetsResponse, ExpandedDataSet> ListExpandedDataSets(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListExpandedDataSetsRequest request = new ListExpandedDataSetsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListExpandedDataSets(request, callSettings);
        }

        /// <summary>
        /// Lists ExpandedDataSets on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ExpandedDataSet"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListExpandedDataSetsResponse, ExpandedDataSet> ListExpandedDataSetsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListExpandedDataSetsRequest request = new ListExpandedDataSetsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListExpandedDataSetsAsync(request, callSettings);
        }

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ExpandedDataSet CreateExpandedDataSet(CreateExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> CreateExpandedDataSetAsync(CreateExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> CreateExpandedDataSetAsync(CreateExpandedDataSetRequest request, st::CancellationToken cancellationToken) =>
            CreateExpandedDataSetAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ExpandedDataSet CreateExpandedDataSet(string parent, ExpandedDataSet expandedDataSet, gaxgrpc::CallSettings callSettings = null) =>
            CreateExpandedDataSet(new CreateExpandedDataSetRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                ExpandedDataSet = gax::GaxPreconditions.CheckNotNull(expandedDataSet, nameof(expandedDataSet)),
            }, callSettings);

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> CreateExpandedDataSetAsync(string parent, ExpandedDataSet expandedDataSet, gaxgrpc::CallSettings callSettings = null) =>
            CreateExpandedDataSetAsync(new CreateExpandedDataSetRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                ExpandedDataSet = gax::GaxPreconditions.CheckNotNull(expandedDataSet, nameof(expandedDataSet)),
            }, callSettings);

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> CreateExpandedDataSetAsync(string parent, ExpandedDataSet expandedDataSet, st::CancellationToken cancellationToken) =>
            CreateExpandedDataSetAsync(parent, expandedDataSet, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ExpandedDataSet CreateExpandedDataSet(PropertyName parent, ExpandedDataSet expandedDataSet, gaxgrpc::CallSettings callSettings = null) =>
            CreateExpandedDataSet(new CreateExpandedDataSetRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                ExpandedDataSet = gax::GaxPreconditions.CheckNotNull(expandedDataSet, nameof(expandedDataSet)),
            }, callSettings);

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> CreateExpandedDataSetAsync(PropertyName parent, ExpandedDataSet expandedDataSet, gaxgrpc::CallSettings callSettings = null) =>
            CreateExpandedDataSetAsync(new CreateExpandedDataSetRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                ExpandedDataSet = gax::GaxPreconditions.CheckNotNull(expandedDataSet, nameof(expandedDataSet)),
            }, callSettings);

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> CreateExpandedDataSetAsync(PropertyName parent, ExpandedDataSet expandedDataSet, st::CancellationToken cancellationToken) =>
            CreateExpandedDataSetAsync(parent, expandedDataSet, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ExpandedDataSet UpdateExpandedDataSet(UpdateExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> UpdateExpandedDataSetAsync(UpdateExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> UpdateExpandedDataSetAsync(UpdateExpandedDataSetRequest request, st::CancellationToken cancellationToken) =>
            UpdateExpandedDataSetAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to update.
        /// The resource's `name` field is used to identify the ExpandedDataSet to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ExpandedDataSet UpdateExpandedDataSet(ExpandedDataSet expandedDataSet, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateExpandedDataSet(new UpdateExpandedDataSetRequest
            {
                ExpandedDataSet = gax::GaxPreconditions.CheckNotNull(expandedDataSet, nameof(expandedDataSet)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to update.
        /// The resource's `name` field is used to identify the ExpandedDataSet to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> UpdateExpandedDataSetAsync(ExpandedDataSet expandedDataSet, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateExpandedDataSetAsync(new UpdateExpandedDataSetRequest
            {
                ExpandedDataSet = gax::GaxPreconditions.CheckNotNull(expandedDataSet, nameof(expandedDataSet)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="expandedDataSet">
        /// Required. The ExpandedDataSet to update.
        /// The resource's `name` field is used to identify the ExpandedDataSet to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ExpandedDataSet> UpdateExpandedDataSetAsync(ExpandedDataSet expandedDataSet, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateExpandedDataSetAsync(expandedDataSet, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteExpandedDataSet(DeleteExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteExpandedDataSetAsync(DeleteExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteExpandedDataSetAsync(DeleteExpandedDataSetRequest request, st::CancellationToken cancellationToken) =>
            DeleteExpandedDataSetAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteExpandedDataSet(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteExpandedDataSet(new DeleteExpandedDataSetRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteExpandedDataSetAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteExpandedDataSetAsync(new DeleteExpandedDataSetRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteExpandedDataSetAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteExpandedDataSetAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteExpandedDataSet(ExpandedDataSetName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteExpandedDataSet(new DeleteExpandedDataSetRequest
            {
                ExpandedDataSetName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteExpandedDataSetAsync(ExpandedDataSetName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteExpandedDataSetAsync(new DeleteExpandedDataSetRequest
            {
                ExpandedDataSetName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/1234/expandedDataSets/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteExpandedDataSetAsync(ExpandedDataSetName name, st::CancellationToken cancellationToken) =>
            DeleteExpandedDataSetAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ChannelGroup GetChannelGroup(GetChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> GetChannelGroupAsync(GetChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> GetChannelGroupAsync(GetChannelGroupRequest request, st::CancellationToken cancellationToken) =>
            GetChannelGroupAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to get.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ChannelGroup GetChannelGroup(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetChannelGroup(new GetChannelGroupRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to get.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> GetChannelGroupAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetChannelGroupAsync(new GetChannelGroupRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to get.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> GetChannelGroupAsync(string name, st::CancellationToken cancellationToken) =>
            GetChannelGroupAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to get.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ChannelGroup GetChannelGroup(ChannelGroupName name, gaxgrpc::CallSettings callSettings = null) =>
            GetChannelGroup(new GetChannelGroupRequest
            {
                ChannelGroupName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to get.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> GetChannelGroupAsync(ChannelGroupName name, gaxgrpc::CallSettings callSettings = null) =>
            GetChannelGroupAsync(new GetChannelGroupRequest
            {
                ChannelGroupName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to get.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> GetChannelGroupAsync(ChannelGroupName name, st::CancellationToken cancellationToken) =>
            GetChannelGroupAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists ChannelGroups on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ChannelGroup"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListChannelGroupsResponse, ChannelGroup> ListChannelGroups(ListChannelGroupsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists ChannelGroups on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ChannelGroup"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListChannelGroupsResponse, ChannelGroup> ListChannelGroupsAsync(ListChannelGroupsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists ChannelGroups on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to list ChannelGroups.
        /// Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ChannelGroup"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListChannelGroupsResponse, ChannelGroup> ListChannelGroups(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListChannelGroupsRequest request = new ListChannelGroupsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListChannelGroups(request, callSettings);
        }

        /// <summary>
        /// Lists ChannelGroups on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to list ChannelGroups.
        /// Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ChannelGroup"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListChannelGroupsResponse, ChannelGroup> ListChannelGroupsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListChannelGroupsRequest request = new ListChannelGroupsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListChannelGroupsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists ChannelGroups on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to list ChannelGroups.
        /// Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ChannelGroup"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListChannelGroupsResponse, ChannelGroup> ListChannelGroups(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListChannelGroupsRequest request = new ListChannelGroupsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListChannelGroups(request, callSettings);
        }

        /// <summary>
        /// Lists ChannelGroups on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to list ChannelGroups.
        /// Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ChannelGroup"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListChannelGroupsResponse, ChannelGroup> ListChannelGroupsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListChannelGroupsRequest request = new ListChannelGroupsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListChannelGroupsAsync(request, callSettings);
        }

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ChannelGroup CreateChannelGroup(CreateChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> CreateChannelGroupAsync(CreateChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> CreateChannelGroupAsync(CreateChannelGroupRequest request, st::CancellationToken cancellationToken) =>
            CreateChannelGroupAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create a ChannelGroup.
        /// Example format: properties/1234
        /// </param>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ChannelGroup CreateChannelGroup(string parent, ChannelGroup channelGroup, gaxgrpc::CallSettings callSettings = null) =>
            CreateChannelGroup(new CreateChannelGroupRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                ChannelGroup = gax::GaxPreconditions.CheckNotNull(channelGroup, nameof(channelGroup)),
            }, callSettings);

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create a ChannelGroup.
        /// Example format: properties/1234
        /// </param>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> CreateChannelGroupAsync(string parent, ChannelGroup channelGroup, gaxgrpc::CallSettings callSettings = null) =>
            CreateChannelGroupAsync(new CreateChannelGroupRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                ChannelGroup = gax::GaxPreconditions.CheckNotNull(channelGroup, nameof(channelGroup)),
            }, callSettings);

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create a ChannelGroup.
        /// Example format: properties/1234
        /// </param>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> CreateChannelGroupAsync(string parent, ChannelGroup channelGroup, st::CancellationToken cancellationToken) =>
            CreateChannelGroupAsync(parent, channelGroup, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create a ChannelGroup.
        /// Example format: properties/1234
        /// </param>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ChannelGroup CreateChannelGroup(PropertyName parent, ChannelGroup channelGroup, gaxgrpc::CallSettings callSettings = null) =>
            CreateChannelGroup(new CreateChannelGroupRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                ChannelGroup = gax::GaxPreconditions.CheckNotNull(channelGroup, nameof(channelGroup)),
            }, callSettings);

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create a ChannelGroup.
        /// Example format: properties/1234
        /// </param>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> CreateChannelGroupAsync(PropertyName parent, ChannelGroup channelGroup, gaxgrpc::CallSettings callSettings = null) =>
            CreateChannelGroupAsync(new CreateChannelGroupRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                ChannelGroup = gax::GaxPreconditions.CheckNotNull(channelGroup, nameof(channelGroup)),
            }, callSettings);

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create a ChannelGroup.
        /// Example format: properties/1234
        /// </param>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> CreateChannelGroupAsync(PropertyName parent, ChannelGroup channelGroup, st::CancellationToken cancellationToken) =>
            CreateChannelGroupAsync(parent, channelGroup, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ChannelGroup UpdateChannelGroup(UpdateChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> UpdateChannelGroupAsync(UpdateChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> UpdateChannelGroupAsync(UpdateChannelGroupRequest request, st::CancellationToken cancellationToken) =>
            UpdateChannelGroupAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a ChannelGroup.
        /// </summary>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to update.
        /// The resource's `name` field is used to identify the ChannelGroup to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ChannelGroup UpdateChannelGroup(ChannelGroup channelGroup, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateChannelGroup(new UpdateChannelGroupRequest
            {
                ChannelGroup = gax::GaxPreconditions.CheckNotNull(channelGroup, nameof(channelGroup)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a ChannelGroup.
        /// </summary>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to update.
        /// The resource's `name` field is used to identify the ChannelGroup to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> UpdateChannelGroupAsync(ChannelGroup channelGroup, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateChannelGroupAsync(new UpdateChannelGroupRequest
            {
                ChannelGroup = gax::GaxPreconditions.CheckNotNull(channelGroup, nameof(channelGroup)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a ChannelGroup.
        /// </summary>
        /// <param name="channelGroup">
        /// Required. The ChannelGroup to update.
        /// The resource's `name` field is used to identify the ChannelGroup to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ChannelGroup> UpdateChannelGroupAsync(ChannelGroup channelGroup, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateChannelGroupAsync(channelGroup, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteChannelGroup(DeleteChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteChannelGroupAsync(DeleteChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteChannelGroupAsync(DeleteChannelGroupRequest request, st::CancellationToken cancellationToken) =>
            DeleteChannelGroupAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to delete.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteChannelGroup(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteChannelGroup(new DeleteChannelGroupRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to delete.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteChannelGroupAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteChannelGroupAsync(new DeleteChannelGroupRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to delete.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteChannelGroupAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteChannelGroupAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to delete.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteChannelGroup(ChannelGroupName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteChannelGroup(new DeleteChannelGroupRequest
            {
                ChannelGroupName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to delete.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteChannelGroupAsync(ChannelGroupName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteChannelGroupAsync(new DeleteChannelGroupRequest
            {
                ChannelGroupName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The ChannelGroup to delete.
        /// Example format: properties/1234/channelGroups/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteChannelGroupAsync(ChannelGroupName name, st::CancellationToken cancellationToken) =>
            DeleteChannelGroupAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Sets the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SetAutomatedGa4ConfigurationOptOutResponse SetAutomatedGa4ConfigurationOptOut(SetAutomatedGa4ConfigurationOptOutRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Sets the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SetAutomatedGa4ConfigurationOptOutResponse> SetAutomatedGa4ConfigurationOptOutAsync(SetAutomatedGa4ConfigurationOptOutRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Sets the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SetAutomatedGa4ConfigurationOptOutResponse> SetAutomatedGa4ConfigurationOptOutAsync(SetAutomatedGa4ConfigurationOptOutRequest request, st::CancellationToken cancellationToken) =>
            SetAutomatedGa4ConfigurationOptOutAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Fetches the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual FetchAutomatedGa4ConfigurationOptOutResponse FetchAutomatedGa4ConfigurationOptOut(FetchAutomatedGa4ConfigurationOptOutRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Fetches the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FetchAutomatedGa4ConfigurationOptOutResponse> FetchAutomatedGa4ConfigurationOptOutAsync(FetchAutomatedGa4ConfigurationOptOutRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Fetches the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FetchAutomatedGa4ConfigurationOptOutResponse> FetchAutomatedGa4ConfigurationOptOutAsync(FetchAutomatedGa4ConfigurationOptOutRequest request, st::CancellationToken cancellationToken) =>
            FetchAutomatedGa4ConfigurationOptOutAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BigQueryLink CreateBigQueryLink(CreateBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> CreateBigQueryLinkAsync(CreateBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> CreateBigQueryLinkAsync(CreateBigQueryLinkRequest request, st::CancellationToken cancellationToken) =>
            CreateBigQueryLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="bigqueryLink">
        /// Required. The BigQueryLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BigQueryLink CreateBigQueryLink(string parent, BigQueryLink bigqueryLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateBigQueryLink(new CreateBigQueryLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                BigqueryLink = gax::GaxPreconditions.CheckNotNull(bigqueryLink, nameof(bigqueryLink)),
            }, callSettings);

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="bigqueryLink">
        /// Required. The BigQueryLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> CreateBigQueryLinkAsync(string parent, BigQueryLink bigqueryLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateBigQueryLinkAsync(new CreateBigQueryLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                BigqueryLink = gax::GaxPreconditions.CheckNotNull(bigqueryLink, nameof(bigqueryLink)),
            }, callSettings);

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="bigqueryLink">
        /// Required. The BigQueryLink to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> CreateBigQueryLinkAsync(string parent, BigQueryLink bigqueryLink, st::CancellationToken cancellationToken) =>
            CreateBigQueryLinkAsync(parent, bigqueryLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="bigqueryLink">
        /// Required. The BigQueryLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BigQueryLink CreateBigQueryLink(PropertyName parent, BigQueryLink bigqueryLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateBigQueryLink(new CreateBigQueryLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                BigqueryLink = gax::GaxPreconditions.CheckNotNull(bigqueryLink, nameof(bigqueryLink)),
            }, callSettings);

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="bigqueryLink">
        /// Required. The BigQueryLink to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> CreateBigQueryLinkAsync(PropertyName parent, BigQueryLink bigqueryLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateBigQueryLinkAsync(new CreateBigQueryLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                BigqueryLink = gax::GaxPreconditions.CheckNotNull(bigqueryLink, nameof(bigqueryLink)),
            }, callSettings);

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="bigqueryLink">
        /// Required. The BigQueryLink to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> CreateBigQueryLinkAsync(PropertyName parent, BigQueryLink bigqueryLink, st::CancellationToken cancellationToken) =>
            CreateBigQueryLinkAsync(parent, bigqueryLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BigQueryLink GetBigQueryLink(GetBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> GetBigQueryLinkAsync(GetBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> GetBigQueryLinkAsync(GetBigQueryLinkRequest request, st::CancellationToken cancellationToken) =>
            GetBigQueryLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the BigQuery link to lookup.
        /// Format: properties/{property_id}/bigQueryLinks/{bigquery_link_id}
        /// Example: properties/123/bigQueryLinks/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BigQueryLink GetBigQueryLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetBigQueryLink(new GetBigQueryLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the BigQuery link to lookup.
        /// Format: properties/{property_id}/bigQueryLinks/{bigquery_link_id}
        /// Example: properties/123/bigQueryLinks/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> GetBigQueryLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetBigQueryLinkAsync(new GetBigQueryLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the BigQuery link to lookup.
        /// Format: properties/{property_id}/bigQueryLinks/{bigquery_link_id}
        /// Example: properties/123/bigQueryLinks/456
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> GetBigQueryLinkAsync(string name, st::CancellationToken cancellationToken) =>
            GetBigQueryLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the BigQuery link to lookup.
        /// Format: properties/{property_id}/bigQueryLinks/{bigquery_link_id}
        /// Example: properties/123/bigQueryLinks/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BigQueryLink GetBigQueryLink(BigQueryLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetBigQueryLink(new GetBigQueryLinkRequest
            {
                BigQueryLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the BigQuery link to lookup.
        /// Format: properties/{property_id}/bigQueryLinks/{bigquery_link_id}
        /// Example: properties/123/bigQueryLinks/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> GetBigQueryLinkAsync(BigQueryLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetBigQueryLinkAsync(new GetBigQueryLinkRequest
            {
                BigQueryLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the BigQuery link to lookup.
        /// Format: properties/{property_id}/bigQueryLinks/{bigquery_link_id}
        /// Example: properties/123/bigQueryLinks/456
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> GetBigQueryLinkAsync(BigQueryLinkName name, st::CancellationToken cancellationToken) =>
            GetBigQueryLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists BigQuery Links on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="BigQueryLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListBigQueryLinksResponse, BigQueryLink> ListBigQueryLinks(ListBigQueryLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists BigQuery Links on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="BigQueryLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListBigQueryLinksResponse, BigQueryLink> ListBigQueryLinksAsync(ListBigQueryLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists BigQuery Links on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. The name of the property to list BigQuery links under.
        /// Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="BigQueryLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListBigQueryLinksResponse, BigQueryLink> ListBigQueryLinks(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListBigQueryLinksRequest request = new ListBigQueryLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListBigQueryLinks(request, callSettings);
        }

        /// <summary>
        /// Lists BigQuery Links on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. The name of the property to list BigQuery links under.
        /// Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="BigQueryLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListBigQueryLinksResponse, BigQueryLink> ListBigQueryLinksAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListBigQueryLinksRequest request = new ListBigQueryLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListBigQueryLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Lists BigQuery Links on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. The name of the property to list BigQuery links under.
        /// Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="BigQueryLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListBigQueryLinksResponse, BigQueryLink> ListBigQueryLinks(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListBigQueryLinksRequest request = new ListBigQueryLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListBigQueryLinks(request, callSettings);
        }

        /// <summary>
        /// Lists BigQuery Links on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. The name of the property to list BigQuery links under.
        /// Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="BigQueryLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListBigQueryLinksResponse, BigQueryLink> ListBigQueryLinksAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListBigQueryLinksRequest request = new ListBigQueryLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListBigQueryLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteBigQueryLink(DeleteBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteBigQueryLinkAsync(DeleteBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteBigQueryLinkAsync(DeleteBigQueryLinkRequest request, st::CancellationToken cancellationToken) =>
            DeleteBigQueryLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The BigQueryLink to delete.
        /// Example format: properties/1234/bigQueryLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteBigQueryLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteBigQueryLink(new DeleteBigQueryLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The BigQueryLink to delete.
        /// Example format: properties/1234/bigQueryLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteBigQueryLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteBigQueryLinkAsync(new DeleteBigQueryLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The BigQueryLink to delete.
        /// Example format: properties/1234/bigQueryLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteBigQueryLinkAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteBigQueryLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The BigQueryLink to delete.
        /// Example format: properties/1234/bigQueryLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteBigQueryLink(BigQueryLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteBigQueryLink(new DeleteBigQueryLinkRequest
            {
                BigQueryLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The BigQueryLink to delete.
        /// Example format: properties/1234/bigQueryLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteBigQueryLinkAsync(BigQueryLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteBigQueryLinkAsync(new DeleteBigQueryLinkRequest
            {
                BigQueryLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The BigQueryLink to delete.
        /// Example format: properties/1234/bigQueryLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteBigQueryLinkAsync(BigQueryLinkName name, st::CancellationToken cancellationToken) =>
            DeleteBigQueryLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BigQueryLink UpdateBigQueryLink(UpdateBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> UpdateBigQueryLinkAsync(UpdateBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> UpdateBigQueryLinkAsync(UpdateBigQueryLinkRequest request, st::CancellationToken cancellationToken) =>
            UpdateBigQueryLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a BigQueryLink.
        /// </summary>
        /// <param name="bigqueryLink">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual BigQueryLink UpdateBigQueryLink(BigQueryLink bigqueryLink, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateBigQueryLink(new UpdateBigQueryLinkRequest
            {
                BigqueryLink = gax::GaxPreconditions.CheckNotNull(bigqueryLink, nameof(bigqueryLink)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a BigQueryLink.
        /// </summary>
        /// <param name="bigqueryLink">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> UpdateBigQueryLinkAsync(BigQueryLink bigqueryLink, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateBigQueryLinkAsync(new UpdateBigQueryLinkRequest
            {
                BigqueryLink = gax::GaxPreconditions.CheckNotNull(bigqueryLink, nameof(bigqueryLink)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a BigQueryLink.
        /// </summary>
        /// <param name="bigqueryLink">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<BigQueryLink> UpdateBigQueryLinkAsync(BigQueryLink bigqueryLink, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateBigQueryLinkAsync(bigqueryLink, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EnhancedMeasurementSettings GetEnhancedMeasurementSettings(GetEnhancedMeasurementSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> GetEnhancedMeasurementSettingsAsync(GetEnhancedMeasurementSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> GetEnhancedMeasurementSettingsAsync(GetEnhancedMeasurementSettingsRequest request, st::CancellationToken cancellationToken) =>
            GetEnhancedMeasurementSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/enhancedMeasurementSettings
        /// Example: "properties/1000/dataStreams/2000/enhancedMeasurementSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EnhancedMeasurementSettings GetEnhancedMeasurementSettings(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetEnhancedMeasurementSettings(new GetEnhancedMeasurementSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/enhancedMeasurementSettings
        /// Example: "properties/1000/dataStreams/2000/enhancedMeasurementSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> GetEnhancedMeasurementSettingsAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetEnhancedMeasurementSettingsAsync(new GetEnhancedMeasurementSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/enhancedMeasurementSettings
        /// Example: "properties/1000/dataStreams/2000/enhancedMeasurementSettings"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> GetEnhancedMeasurementSettingsAsync(string name, st::CancellationToken cancellationToken) =>
            GetEnhancedMeasurementSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/enhancedMeasurementSettings
        /// Example: "properties/1000/dataStreams/2000/enhancedMeasurementSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EnhancedMeasurementSettings GetEnhancedMeasurementSettings(EnhancedMeasurementSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetEnhancedMeasurementSettings(new GetEnhancedMeasurementSettingsRequest
            {
                EnhancedMeasurementSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/enhancedMeasurementSettings
        /// Example: "properties/1000/dataStreams/2000/enhancedMeasurementSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> GetEnhancedMeasurementSettingsAsync(EnhancedMeasurementSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetEnhancedMeasurementSettingsAsync(new GetEnhancedMeasurementSettingsRequest
            {
                EnhancedMeasurementSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/enhancedMeasurementSettings
        /// Example: "properties/1000/dataStreams/2000/enhancedMeasurementSettings"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> GetEnhancedMeasurementSettingsAsync(EnhancedMeasurementSettingsName name, st::CancellationToken cancellationToken) =>
            GetEnhancedMeasurementSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EnhancedMeasurementSettings UpdateEnhancedMeasurementSettings(UpdateEnhancedMeasurementSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> UpdateEnhancedMeasurementSettingsAsync(UpdateEnhancedMeasurementSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> UpdateEnhancedMeasurementSettingsAsync(UpdateEnhancedMeasurementSettingsRequest request, st::CancellationToken cancellationToken) =>
            UpdateEnhancedMeasurementSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="enhancedMeasurementSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EnhancedMeasurementSettings UpdateEnhancedMeasurementSettings(EnhancedMeasurementSettings enhancedMeasurementSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateEnhancedMeasurementSettings(new UpdateEnhancedMeasurementSettingsRequest
            {
                EnhancedMeasurementSettings = gax::GaxPreconditions.CheckNotNull(enhancedMeasurementSettings, nameof(enhancedMeasurementSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="enhancedMeasurementSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> UpdateEnhancedMeasurementSettingsAsync(EnhancedMeasurementSettings enhancedMeasurementSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateEnhancedMeasurementSettingsAsync(new UpdateEnhancedMeasurementSettingsRequest
            {
                EnhancedMeasurementSettings = gax::GaxPreconditions.CheckNotNull(enhancedMeasurementSettings, nameof(enhancedMeasurementSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="enhancedMeasurementSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EnhancedMeasurementSettings> UpdateEnhancedMeasurementSettingsAsync(EnhancedMeasurementSettings enhancedMeasurementSettings, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateEnhancedMeasurementSettingsAsync(enhancedMeasurementSettings, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a connected site tag for a Universal Analytics property. You can
        /// create a maximum of 20 connected site tags per property.
        /// Note: This API cannot be used on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CreateConnectedSiteTagResponse CreateConnectedSiteTag(CreateConnectedSiteTagRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a connected site tag for a Universal Analytics property. You can
        /// create a maximum of 20 connected site tags per property.
        /// Note: This API cannot be used on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CreateConnectedSiteTagResponse> CreateConnectedSiteTagAsync(CreateConnectedSiteTagRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a connected site tag for a Universal Analytics property. You can
        /// create a maximum of 20 connected site tags per property.
        /// Note: This API cannot be used on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CreateConnectedSiteTagResponse> CreateConnectedSiteTagAsync(CreateConnectedSiteTagRequest request, st::CancellationToken cancellationToken) =>
            CreateConnectedSiteTagAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a connected site tag for a Universal Analytics property.
        /// Note: this has no effect on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteConnectedSiteTag(DeleteConnectedSiteTagRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a connected site tag for a Universal Analytics property.
        /// Note: this has no effect on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteConnectedSiteTagAsync(DeleteConnectedSiteTagRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a connected site tag for a Universal Analytics property.
        /// Note: this has no effect on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteConnectedSiteTagAsync(DeleteConnectedSiteTagRequest request, st::CancellationToken cancellationToken) =>
            DeleteConnectedSiteTagAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists the connected site tags for a Universal Analytics property. A maximum
        /// of 20 connected site tags will be returned. Note: this has no effect on GA4
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ListConnectedSiteTagsResponse ListConnectedSiteTags(ListConnectedSiteTagsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists the connected site tags for a Universal Analytics property. A maximum
        /// of 20 connected site tags will be returned. Note: this has no effect on GA4
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ListConnectedSiteTagsResponse> ListConnectedSiteTagsAsync(ListConnectedSiteTagsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists the connected site tags for a Universal Analytics property. A maximum
        /// of 20 connected site tags will be returned. Note: this has no effect on GA4
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ListConnectedSiteTagsResponse> ListConnectedSiteTagsAsync(ListConnectedSiteTagsRequest request, st::CancellationToken cancellationToken) =>
            ListConnectedSiteTagsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Given a specified UA property, looks up the GA4 property connected to it.
        /// Note: this cannot be used with GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual FetchConnectedGa4PropertyResponse FetchConnectedGa4Property(FetchConnectedGa4PropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Given a specified UA property, looks up the GA4 property connected to it.
        /// Note: this cannot be used with GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FetchConnectedGa4PropertyResponse> FetchConnectedGa4PropertyAsync(FetchConnectedGa4PropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Given a specified UA property, looks up the GA4 property connected to it.
        /// Note: this cannot be used with GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<FetchConnectedGa4PropertyResponse> FetchConnectedGa4PropertyAsync(FetchConnectedGa4PropertyRequest request, st::CancellationToken cancellationToken) =>
            FetchConnectedGa4PropertyAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AdSenseLink GetAdSenseLink(GetAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> GetAdSenseLinkAsync(GetAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> GetAdSenseLinkAsync(GetAdSenseLinkRequest request, st::CancellationToken cancellationToken) =>
            GetAdSenseLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link requested.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AdSenseLink GetAdSenseLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAdSenseLink(new GetAdSenseLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link requested.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> GetAdSenseLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetAdSenseLinkAsync(new GetAdSenseLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link requested.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> GetAdSenseLinkAsync(string name, st::CancellationToken cancellationToken) =>
            GetAdSenseLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link requested.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AdSenseLink GetAdSenseLink(AdSenseLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAdSenseLink(new GetAdSenseLinkRequest
            {
                AdSenseLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link requested.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> GetAdSenseLinkAsync(AdSenseLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetAdSenseLinkAsync(new GetAdSenseLinkRequest
            {
                AdSenseLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link requested.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> GetAdSenseLinkAsync(AdSenseLinkName name, st::CancellationToken cancellationToken) =>
            GetAdSenseLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AdSenseLink CreateAdSenseLink(CreateAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> CreateAdSenseLinkAsync(CreateAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> CreateAdSenseLinkAsync(CreateAdSenseLinkRequest request, st::CancellationToken cancellationToken) =>
            CreateAdSenseLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create an AdSense Link.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="adsenseLink">
        /// Required. The AdSense Link to create
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AdSenseLink CreateAdSenseLink(string parent, AdSenseLink adsenseLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateAdSenseLink(new CreateAdSenseLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                AdsenseLink = gax::GaxPreconditions.CheckNotNull(adsenseLink, nameof(adsenseLink)),
            }, callSettings);

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create an AdSense Link.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="adsenseLink">
        /// Required. The AdSense Link to create
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> CreateAdSenseLinkAsync(string parent, AdSenseLink adsenseLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateAdSenseLinkAsync(new CreateAdSenseLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                AdsenseLink = gax::GaxPreconditions.CheckNotNull(adsenseLink, nameof(adsenseLink)),
            }, callSettings);

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create an AdSense Link.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="adsenseLink">
        /// Required. The AdSense Link to create
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> CreateAdSenseLinkAsync(string parent, AdSenseLink adsenseLink, st::CancellationToken cancellationToken) =>
            CreateAdSenseLinkAsync(parent, adsenseLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create an AdSense Link.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="adsenseLink">
        /// Required. The AdSense Link to create
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual AdSenseLink CreateAdSenseLink(PropertyName parent, AdSenseLink adsenseLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateAdSenseLink(new CreateAdSenseLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                AdsenseLink = gax::GaxPreconditions.CheckNotNull(adsenseLink, nameof(adsenseLink)),
            }, callSettings);

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create an AdSense Link.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="adsenseLink">
        /// Required. The AdSense Link to create
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> CreateAdSenseLinkAsync(PropertyName parent, AdSenseLink adsenseLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateAdSenseLinkAsync(new CreateAdSenseLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                AdsenseLink = gax::GaxPreconditions.CheckNotNull(adsenseLink, nameof(adsenseLink)),
            }, callSettings);

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="parent">
        /// Required. The property for which to create an AdSense Link.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="adsenseLink">
        /// Required. The AdSense Link to create
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<AdSenseLink> CreateAdSenseLinkAsync(PropertyName parent, AdSenseLink adsenseLink, st::CancellationToken cancellationToken) =>
            CreateAdSenseLinkAsync(parent, adsenseLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAdSenseLink(DeleteAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAdSenseLinkAsync(DeleteAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAdSenseLinkAsync(DeleteAdSenseLinkRequest request, st::CancellationToken cancellationToken) =>
            DeleteAdSenseLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link to be deleted.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAdSenseLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAdSenseLink(new DeleteAdSenseLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link to be deleted.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAdSenseLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAdSenseLinkAsync(new DeleteAdSenseLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link to be deleted.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAdSenseLinkAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteAdSenseLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link to be deleted.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteAdSenseLink(AdSenseLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAdSenseLink(new DeleteAdSenseLinkRequest
            {
                AdSenseLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link to be deleted.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAdSenseLinkAsync(AdSenseLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteAdSenseLinkAsync(new DeleteAdSenseLinkRequest
            {
                AdSenseLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="name">
        /// Required. Unique identifier for the AdSense Link to be deleted.
        /// Format: properties/{propertyId}/adSenseLinks/{linkId}
        /// Example: properties/1234/adSenseLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteAdSenseLinkAsync(AdSenseLinkName name, st::CancellationToken cancellationToken) =>
            DeleteAdSenseLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists AdSenseLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AdSenseLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAdSenseLinksResponse, AdSenseLink> ListAdSenseLinks(ListAdSenseLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists AdSenseLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AdSenseLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAdSenseLinksResponse, AdSenseLink> ListAdSenseLinksAsync(ListAdSenseLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists AdSenseLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Resource name of the parent property.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AdSenseLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAdSenseLinksResponse, AdSenseLink> ListAdSenseLinks(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAdSenseLinksRequest request = new ListAdSenseLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAdSenseLinks(request, callSettings);
        }

        /// <summary>
        /// Lists AdSenseLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Resource name of the parent property.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AdSenseLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAdSenseLinksResponse, AdSenseLink> ListAdSenseLinksAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAdSenseLinksRequest request = new ListAdSenseLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAdSenseLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Lists AdSenseLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Resource name of the parent property.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AdSenseLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListAdSenseLinksResponse, AdSenseLink> ListAdSenseLinks(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAdSenseLinksRequest request = new ListAdSenseLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAdSenseLinks(request, callSettings);
        }

        /// <summary>
        /// Lists AdSenseLinks on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Resource name of the parent property.
        /// Format: properties/{propertyId}
        /// Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AdSenseLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListAdSenseLinksResponse, AdSenseLink> ListAdSenseLinksAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListAdSenseLinksRequest request = new ListAdSenseLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListAdSenseLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventCreateRule GetEventCreateRule(GetEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> GetEventCreateRuleAsync(GetEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> GetEventCreateRuleAsync(GetEventCreateRuleRequest request, st::CancellationToken cancellationToken) =>
            GetEventCreateRuleAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventCreateRule to get.
        /// Example format: properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventCreateRule GetEventCreateRule(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetEventCreateRule(new GetEventCreateRuleRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventCreateRule to get.
        /// Example format: properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> GetEventCreateRuleAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetEventCreateRuleAsync(new GetEventCreateRuleRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventCreateRule to get.
        /// Example format: properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> GetEventCreateRuleAsync(string name, st::CancellationToken cancellationToken) =>
            GetEventCreateRuleAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventCreateRule to get.
        /// Example format: properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventCreateRule GetEventCreateRule(EventCreateRuleName name, gaxgrpc::CallSettings callSettings = null) =>
            GetEventCreateRule(new GetEventCreateRuleRequest
            {
                EventCreateRuleName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventCreateRule to get.
        /// Example format: properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> GetEventCreateRuleAsync(EventCreateRuleName name, gaxgrpc::CallSettings callSettings = null) =>
            GetEventCreateRuleAsync(new GetEventCreateRuleRequest
            {
                EventCreateRuleName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventCreateRule to get.
        /// Example format: properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> GetEventCreateRuleAsync(EventCreateRuleName name, st::CancellationToken cancellationToken) =>
            GetEventCreateRuleAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists EventCreateRules on a web data stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="EventCreateRule"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListEventCreateRulesResponse, EventCreateRule> ListEventCreateRules(ListEventCreateRulesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists EventCreateRules on a web data stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="EventCreateRule"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListEventCreateRulesResponse, EventCreateRule> ListEventCreateRulesAsync(ListEventCreateRulesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists EventCreateRules on a web data stream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="EventCreateRule"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListEventCreateRulesResponse, EventCreateRule> ListEventCreateRules(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListEventCreateRulesRequest request = new ListEventCreateRulesRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListEventCreateRules(request, callSettings);
        }

        /// <summary>
        /// Lists EventCreateRules on a web data stream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="EventCreateRule"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListEventCreateRulesResponse, EventCreateRule> ListEventCreateRulesAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListEventCreateRulesRequest request = new ListEventCreateRulesRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListEventCreateRulesAsync(request, callSettings);
        }

        /// <summary>
        /// Lists EventCreateRules on a web data stream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="EventCreateRule"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListEventCreateRulesResponse, EventCreateRule> ListEventCreateRules(DataStreamName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListEventCreateRulesRequest request = new ListEventCreateRulesRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListEventCreateRules(request, callSettings);
        }

        /// <summary>
        /// Lists EventCreateRules on a web data stream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="EventCreateRule"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListEventCreateRulesResponse, EventCreateRule> ListEventCreateRulesAsync(DataStreamName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListEventCreateRulesRequest request = new ListEventCreateRulesRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListEventCreateRulesAsync(request, callSettings);
        }

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventCreateRule CreateEventCreateRule(CreateEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> CreateEventCreateRuleAsync(CreateEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> CreateEventCreateRuleAsync(CreateEventCreateRuleRequest request, st::CancellationToken cancellationToken) =>
            CreateEventCreateRuleAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventCreateRule CreateEventCreateRule(string parent, EventCreateRule eventCreateRule, gaxgrpc::CallSettings callSettings = null) =>
            CreateEventCreateRule(new CreateEventCreateRuleRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                EventCreateRule = gax::GaxPreconditions.CheckNotNull(eventCreateRule, nameof(eventCreateRule)),
            }, callSettings);

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> CreateEventCreateRuleAsync(string parent, EventCreateRule eventCreateRule, gaxgrpc::CallSettings callSettings = null) =>
            CreateEventCreateRuleAsync(new CreateEventCreateRuleRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                EventCreateRule = gax::GaxPreconditions.CheckNotNull(eventCreateRule, nameof(eventCreateRule)),
            }, callSettings);

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> CreateEventCreateRuleAsync(string parent, EventCreateRule eventCreateRule, st::CancellationToken cancellationToken) =>
            CreateEventCreateRuleAsync(parent, eventCreateRule, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventCreateRule CreateEventCreateRule(DataStreamName parent, EventCreateRule eventCreateRule, gaxgrpc::CallSettings callSettings = null) =>
            CreateEventCreateRule(new CreateEventCreateRuleRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                EventCreateRule = gax::GaxPreconditions.CheckNotNull(eventCreateRule, nameof(eventCreateRule)),
            }, callSettings);

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> CreateEventCreateRuleAsync(DataStreamName parent, EventCreateRule eventCreateRule, gaxgrpc::CallSettings callSettings = null) =>
            CreateEventCreateRuleAsync(new CreateEventCreateRuleRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                EventCreateRule = gax::GaxPreconditions.CheckNotNull(eventCreateRule, nameof(eventCreateRule)),
            }, callSettings);

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> CreateEventCreateRuleAsync(DataStreamName parent, EventCreateRule eventCreateRule, st::CancellationToken cancellationToken) =>
            CreateEventCreateRuleAsync(parent, eventCreateRule, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventCreateRule UpdateEventCreateRule(UpdateEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> UpdateEventCreateRuleAsync(UpdateEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> UpdateEventCreateRuleAsync(UpdateEventCreateRuleRequest request, st::CancellationToken cancellationToken) =>
            UpdateEventCreateRuleAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an EventCreateRule.
        /// </summary>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to update.
        /// The resource's `name` field is used to identify the EventCreateRule to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventCreateRule UpdateEventCreateRule(EventCreateRule eventCreateRule, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateEventCreateRule(new UpdateEventCreateRuleRequest
            {
                EventCreateRule = gax::GaxPreconditions.CheckNotNull(eventCreateRule, nameof(eventCreateRule)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates an EventCreateRule.
        /// </summary>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to update.
        /// The resource's `name` field is used to identify the EventCreateRule to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> UpdateEventCreateRuleAsync(EventCreateRule eventCreateRule, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateEventCreateRuleAsync(new UpdateEventCreateRuleRequest
            {
                EventCreateRule = gax::GaxPreconditions.CheckNotNull(eventCreateRule, nameof(eventCreateRule)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates an EventCreateRule.
        /// </summary>
        /// <param name="eventCreateRule">
        /// Required. The EventCreateRule to update.
        /// The resource's `name` field is used to identify the EventCreateRule to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventCreateRule> UpdateEventCreateRuleAsync(EventCreateRule eventCreateRule, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateEventCreateRuleAsync(eventCreateRule, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteEventCreateRule(DeleteEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventCreateRuleAsync(DeleteEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventCreateRuleAsync(DeleteEventCreateRuleRequest request, st::CancellationToken cancellationToken) =>
            DeleteEventCreateRuleAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format:
        /// properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteEventCreateRule(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteEventCreateRule(new DeleteEventCreateRuleRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format:
        /// properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventCreateRuleAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteEventCreateRuleAsync(new DeleteEventCreateRuleRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format:
        /// properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventCreateRuleAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteEventCreateRuleAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format:
        /// properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteEventCreateRule(EventCreateRuleName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteEventCreateRule(new DeleteEventCreateRuleRequest
            {
                EventCreateRuleName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format:
        /// properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventCreateRuleAsync(EventCreateRuleName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteEventCreateRuleAsync(new DeleteEventCreateRuleRequest
            {
                EventCreateRuleName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format:
        /// properties/123/dataStreams/456/eventCreateRules/789
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventCreateRuleAsync(EventCreateRuleName name, st::CancellationToken cancellationToken) =>
            DeleteEventCreateRuleAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventEditRule GetEventEditRule(GetEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> GetEventEditRuleAsync(GetEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> GetEventEditRuleAsync(GetEventEditRuleRequest request, st::CancellationToken cancellationToken) =>
            GetEventEditRuleAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventEditRule to get.
        /// Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventEditRule GetEventEditRule(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetEventEditRule(new GetEventEditRuleRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventEditRule to get.
        /// Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> GetEventEditRuleAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetEventEditRuleAsync(new GetEventEditRuleRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventEditRule to get.
        /// Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> GetEventEditRuleAsync(string name, st::CancellationToken cancellationToken) =>
            GetEventEditRuleAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventEditRule to get.
        /// Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventEditRule GetEventEditRule(EventEditRuleName name, gaxgrpc::CallSettings callSettings = null) =>
            GetEventEditRule(new GetEventEditRuleRequest
            {
                EventEditRuleName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventEditRule to get.
        /// Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> GetEventEditRuleAsync(EventEditRuleName name, gaxgrpc::CallSettings callSettings = null) =>
            GetEventEditRuleAsync(new GetEventEditRuleRequest
            {
                EventEditRuleName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the EventEditRule to get.
        /// Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> GetEventEditRuleAsync(EventEditRuleName name, st::CancellationToken cancellationToken) =>
            GetEventEditRuleAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists EventEditRules on a web data stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="EventEditRule"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListEventEditRulesResponse, EventEditRule> ListEventEditRules(ListEventEditRulesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists EventEditRules on a web data stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="EventEditRule"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListEventEditRulesResponse, EventEditRule> ListEventEditRulesAsync(ListEventEditRulesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists EventEditRules on a web data stream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="EventEditRule"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListEventEditRulesResponse, EventEditRule> ListEventEditRules(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListEventEditRulesRequest request = new ListEventEditRulesRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListEventEditRules(request, callSettings);
        }

        /// <summary>
        /// Lists EventEditRules on a web data stream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="EventEditRule"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListEventEditRulesResponse, EventEditRule> ListEventEditRulesAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListEventEditRulesRequest request = new ListEventEditRulesRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListEventEditRulesAsync(request, callSettings);
        }

        /// <summary>
        /// Lists EventEditRules on a web data stream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="EventEditRule"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListEventEditRulesResponse, EventEditRule> ListEventEditRules(DataStreamName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListEventEditRulesRequest request = new ListEventEditRulesRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListEventEditRules(request, callSettings);
        }

        /// <summary>
        /// Lists EventEditRules on a web data stream.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="EventEditRule"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListEventEditRulesResponse, EventEditRule> ListEventEditRulesAsync(DataStreamName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListEventEditRulesRequest request = new ListEventEditRulesRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListEventEditRulesAsync(request, callSettings);
        }

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventEditRule CreateEventEditRule(CreateEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> CreateEventEditRuleAsync(CreateEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> CreateEventEditRuleAsync(CreateEventEditRuleRequest request, st::CancellationToken cancellationToken) =>
            CreateEventEditRuleAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventEditRule CreateEventEditRule(string parent, EventEditRule eventEditRule, gaxgrpc::CallSettings callSettings = null) =>
            CreateEventEditRule(new CreateEventEditRuleRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                EventEditRule = gax::GaxPreconditions.CheckNotNull(eventEditRule, nameof(eventEditRule)),
            }, callSettings);

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> CreateEventEditRuleAsync(string parent, EventEditRule eventEditRule, gaxgrpc::CallSettings callSettings = null) =>
            CreateEventEditRuleAsync(new CreateEventEditRuleRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                EventEditRule = gax::GaxPreconditions.CheckNotNull(eventEditRule, nameof(eventEditRule)),
            }, callSettings);

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> CreateEventEditRuleAsync(string parent, EventEditRule eventEditRule, st::CancellationToken cancellationToken) =>
            CreateEventEditRuleAsync(parent, eventEditRule, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventEditRule CreateEventEditRule(DataStreamName parent, EventEditRule eventEditRule, gaxgrpc::CallSettings callSettings = null) =>
            CreateEventEditRule(new CreateEventEditRuleRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                EventEditRule = gax::GaxPreconditions.CheckNotNull(eventEditRule, nameof(eventEditRule)),
            }, callSettings);

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> CreateEventEditRuleAsync(DataStreamName parent, EventEditRule eventEditRule, gaxgrpc::CallSettings callSettings = null) =>
            CreateEventEditRuleAsync(new CreateEventEditRuleRequest
            {
                ParentAsDataStreamName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                EventEditRule = gax::GaxPreconditions.CheckNotNull(eventEditRule, nameof(eventEditRule)),
            }, callSettings);

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/123/dataStreams/456
        /// </param>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> CreateEventEditRuleAsync(DataStreamName parent, EventEditRule eventEditRule, st::CancellationToken cancellationToken) =>
            CreateEventEditRuleAsync(parent, eventEditRule, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventEditRule UpdateEventEditRule(UpdateEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> UpdateEventEditRuleAsync(UpdateEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> UpdateEventEditRuleAsync(UpdateEventEditRuleRequest request, st::CancellationToken cancellationToken) =>
            UpdateEventEditRuleAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates an EventEditRule.
        /// </summary>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to update.
        /// The resource's `name` field is used to identify the EventEditRule to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual EventEditRule UpdateEventEditRule(EventEditRule eventEditRule, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateEventEditRule(new UpdateEventEditRuleRequest
            {
                EventEditRule = gax::GaxPreconditions.CheckNotNull(eventEditRule, nameof(eventEditRule)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates an EventEditRule.
        /// </summary>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to update.
        /// The resource's `name` field is used to identify the EventEditRule to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> UpdateEventEditRuleAsync(EventEditRule eventEditRule, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateEventEditRuleAsync(new UpdateEventEditRuleRequest
            {
                EventEditRule = gax::GaxPreconditions.CheckNotNull(eventEditRule, nameof(eventEditRule)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates an EventEditRule.
        /// </summary>
        /// <param name="eventEditRule">
        /// Required. The EventEditRule to update.
        /// The resource's `name` field is used to identify the EventEditRule to be
        /// updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<EventEditRule> UpdateEventEditRuleAsync(EventEditRule eventEditRule, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateEventEditRuleAsync(eventEditRule, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteEventEditRule(DeleteEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventEditRuleAsync(DeleteEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventEditRuleAsync(DeleteEventEditRuleRequest request, st::CancellationToken cancellationToken) =>
            DeleteEventEditRuleAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteEventEditRule(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteEventEditRule(new DeleteEventEditRuleRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventEditRuleAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteEventEditRuleAsync(new DeleteEventEditRuleRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventEditRuleAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteEventEditRuleAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteEventEditRule(EventEditRuleName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteEventEditRule(new DeleteEventEditRuleRequest
            {
                EventEditRuleName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventEditRuleAsync(EventEditRuleName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteEventEditRuleAsync(new DeleteEventEditRuleRequest
            {
                EventEditRuleName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="name">
        /// Required. Example format: properties/123/dataStreams/456/eventEditRules/789
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteEventEditRuleAsync(EventEditRuleName name, st::CancellationToken cancellationToken) =>
            DeleteEventEditRuleAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Changes the processing order of event edit rules on the specified stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void ReorderEventEditRules(ReorderEventEditRulesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Changes the processing order of event edit rules on the specified stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ReorderEventEditRulesAsync(ReorderEventEditRulesRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Changes the processing order of event edit rules on the specified stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task ReorderEventEditRulesAsync(ReorderEventEditRulesRequest request, st::CancellationToken cancellationToken) =>
            ReorderEventEditRulesAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a DataRedactionSettings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRedactionSettings UpdateDataRedactionSettings(UpdateDataRedactionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a DataRedactionSettings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> UpdateDataRedactionSettingsAsync(UpdateDataRedactionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a DataRedactionSettings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> UpdateDataRedactionSettingsAsync(UpdateDataRedactionSettingsRequest request, st::CancellationToken cancellationToken) =>
            UpdateDataRedactionSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a DataRedactionSettings on a property.
        /// </summary>
        /// <param name="dataRedactionSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRedactionSettings UpdateDataRedactionSettings(DataRedactionSettings dataRedactionSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateDataRedactionSettings(new UpdateDataRedactionSettingsRequest
            {
                DataRedactionSettings = gax::GaxPreconditions.CheckNotNull(dataRedactionSettings, nameof(dataRedactionSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a DataRedactionSettings on a property.
        /// </summary>
        /// <param name="dataRedactionSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> UpdateDataRedactionSettingsAsync(DataRedactionSettings dataRedactionSettings, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateDataRedactionSettingsAsync(new UpdateDataRedactionSettingsRequest
            {
                DataRedactionSettings = gax::GaxPreconditions.CheckNotNull(dataRedactionSettings, nameof(dataRedactionSettings)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a DataRedactionSettings on a property.
        /// </summary>
        /// <param name="dataRedactionSettings">
        /// Required. The settings to update.
        /// The `name` field is used to identify the settings to be updated.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Field names must be in snake
        /// case (e.g., "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> UpdateDataRedactionSettingsAsync(DataRedactionSettings dataRedactionSettings, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateDataRedactionSettingsAsync(dataRedactionSettings, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRedactionSettings GetDataRedactionSettings(GetDataRedactionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> GetDataRedactionSettingsAsync(GetDataRedactionSettingsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> GetDataRedactionSettingsAsync(GetDataRedactionSettingsRequest request, st::CancellationToken cancellationToken) =>
            GetDataRedactionSettingsAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/dataRedactionSettings
        /// Example: "properties/1000/dataStreams/2000/dataRedactionSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRedactionSettings GetDataRedactionSettings(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataRedactionSettings(new GetDataRedactionSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/dataRedactionSettings
        /// Example: "properties/1000/dataStreams/2000/dataRedactionSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> GetDataRedactionSettingsAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataRedactionSettingsAsync(new GetDataRedactionSettingsRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/dataRedactionSettings
        /// Example: "properties/1000/dataStreams/2000/dataRedactionSettings"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> GetDataRedactionSettingsAsync(string name, st::CancellationToken cancellationToken) =>
            GetDataRedactionSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/dataRedactionSettings
        /// Example: "properties/1000/dataStreams/2000/dataRedactionSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual DataRedactionSettings GetDataRedactionSettings(DataRedactionSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataRedactionSettings(new GetDataRedactionSettingsRequest
            {
                DataRedactionSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/dataRedactionSettings
        /// Example: "properties/1000/dataStreams/2000/dataRedactionSettings"
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> GetDataRedactionSettingsAsync(DataRedactionSettingsName name, gaxgrpc::CallSettings callSettings = null) =>
            GetDataRedactionSettingsAsync(new GetDataRedactionSettingsRequest
            {
                DataRedactionSettingsName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the settings to lookup.
        /// Format:
        /// properties/{property}/dataStreams/{data_stream}/dataRedactionSettings
        /// Example: "properties/1000/dataStreams/2000/dataRedactionSettings"
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<DataRedactionSettings> GetDataRedactionSettingsAsync(DataRedactionSettingsName name, st::CancellationToken cancellationToken) =>
            GetDataRedactionSettingsAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CalculatedMetric GetCalculatedMetric(GetCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> GetCalculatedMetricAsync(GetCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> GetCalculatedMetricAsync(GetCalculatedMetricRequest request, st::CancellationToken cancellationToken) =>
            GetCalculatedMetricAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to get.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CalculatedMetric GetCalculatedMetric(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetCalculatedMetric(new GetCalculatedMetricRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to get.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> GetCalculatedMetricAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetCalculatedMetricAsync(new GetCalculatedMetricRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to get.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> GetCalculatedMetricAsync(string name, st::CancellationToken cancellationToken) =>
            GetCalculatedMetricAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to get.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CalculatedMetric GetCalculatedMetric(CalculatedMetricName name, gaxgrpc::CallSettings callSettings = null) =>
            GetCalculatedMetric(new GetCalculatedMetricRequest
            {
                CalculatedMetricName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to get.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> GetCalculatedMetricAsync(CalculatedMetricName name, gaxgrpc::CallSettings callSettings = null) =>
            GetCalculatedMetricAsync(new GetCalculatedMetricRequest
            {
                CalculatedMetricName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to get.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> GetCalculatedMetricAsync(CalculatedMetricName name, st::CancellationToken cancellationToken) =>
            GetCalculatedMetricAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CalculatedMetric CreateCalculatedMetric(CreateCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> CreateCalculatedMetricAsync(CreateCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> CreateCalculatedMetricAsync(CreateCalculatedMetricRequest request, st::CancellationToken cancellationToken) =>
            CreateCalculatedMetricAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to create.
        /// </param>
        /// <param name="calculatedMetricId">
        /// Required. The ID to use for the calculated metric which will become the
        /// final component of the calculated metric's resource name.
        /// 
        /// This value should be 1-80 characters and valid characters are
        /// /[a-zA-Z0-9_]/, no spaces allowed. calculated_metric_id must be unique
        /// between all calculated metrics under a property. The calculated_metric_id
        /// is used when referencing this calculated metric from external APIs, for
        /// example, "calcMetric:{calculated_metric_id}".
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CalculatedMetric CreateCalculatedMetric(string parent, CalculatedMetric calculatedMetric, string calculatedMetricId, gaxgrpc::CallSettings callSettings = null) =>
            CreateCalculatedMetric(new CreateCalculatedMetricRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                CalculatedMetricId = gax::GaxPreconditions.CheckNotNullOrEmpty(calculatedMetricId, nameof(calculatedMetricId)),
                CalculatedMetric = gax::GaxPreconditions.CheckNotNull(calculatedMetric, nameof(calculatedMetric)),
            }, callSettings);

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to create.
        /// </param>
        /// <param name="calculatedMetricId">
        /// Required. The ID to use for the calculated metric which will become the
        /// final component of the calculated metric's resource name.
        /// 
        /// This value should be 1-80 characters and valid characters are
        /// /[a-zA-Z0-9_]/, no spaces allowed. calculated_metric_id must be unique
        /// between all calculated metrics under a property. The calculated_metric_id
        /// is used when referencing this calculated metric from external APIs, for
        /// example, "calcMetric:{calculated_metric_id}".
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> CreateCalculatedMetricAsync(string parent, CalculatedMetric calculatedMetric, string calculatedMetricId, gaxgrpc::CallSettings callSettings = null) =>
            CreateCalculatedMetricAsync(new CreateCalculatedMetricRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                CalculatedMetricId = gax::GaxPreconditions.CheckNotNullOrEmpty(calculatedMetricId, nameof(calculatedMetricId)),
                CalculatedMetric = gax::GaxPreconditions.CheckNotNull(calculatedMetric, nameof(calculatedMetric)),
            }, callSettings);

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to create.
        /// </param>
        /// <param name="calculatedMetricId">
        /// Required. The ID to use for the calculated metric which will become the
        /// final component of the calculated metric's resource name.
        /// 
        /// This value should be 1-80 characters and valid characters are
        /// /[a-zA-Z0-9_]/, no spaces allowed. calculated_metric_id must be unique
        /// between all calculated metrics under a property. The calculated_metric_id
        /// is used when referencing this calculated metric from external APIs, for
        /// example, "calcMetric:{calculated_metric_id}".
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> CreateCalculatedMetricAsync(string parent, CalculatedMetric calculatedMetric, string calculatedMetricId, st::CancellationToken cancellationToken) =>
            CreateCalculatedMetricAsync(parent, calculatedMetric, calculatedMetricId, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to create.
        /// </param>
        /// <param name="calculatedMetricId">
        /// Required. The ID to use for the calculated metric which will become the
        /// final component of the calculated metric's resource name.
        /// 
        /// This value should be 1-80 characters and valid characters are
        /// /[a-zA-Z0-9_]/, no spaces allowed. calculated_metric_id must be unique
        /// between all calculated metrics under a property. The calculated_metric_id
        /// is used when referencing this calculated metric from external APIs, for
        /// example, "calcMetric:{calculated_metric_id}".
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CalculatedMetric CreateCalculatedMetric(PropertyName parent, CalculatedMetric calculatedMetric, string calculatedMetricId, gaxgrpc::CallSettings callSettings = null) =>
            CreateCalculatedMetric(new CreateCalculatedMetricRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                CalculatedMetricId = gax::GaxPreconditions.CheckNotNullOrEmpty(calculatedMetricId, nameof(calculatedMetricId)),
                CalculatedMetric = gax::GaxPreconditions.CheckNotNull(calculatedMetric, nameof(calculatedMetric)),
            }, callSettings);

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to create.
        /// </param>
        /// <param name="calculatedMetricId">
        /// Required. The ID to use for the calculated metric which will become the
        /// final component of the calculated metric's resource name.
        /// 
        /// This value should be 1-80 characters and valid characters are
        /// /[a-zA-Z0-9_]/, no spaces allowed. calculated_metric_id must be unique
        /// between all calculated metrics under a property. The calculated_metric_id
        /// is used when referencing this calculated metric from external APIs, for
        /// example, "calcMetric:{calculated_metric_id}".
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> CreateCalculatedMetricAsync(PropertyName parent, CalculatedMetric calculatedMetric, string calculatedMetricId, gaxgrpc::CallSettings callSettings = null) =>
            CreateCalculatedMetricAsync(new CreateCalculatedMetricRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                CalculatedMetricId = gax::GaxPreconditions.CheckNotNullOrEmpty(calculatedMetricId, nameof(calculatedMetricId)),
                CalculatedMetric = gax::GaxPreconditions.CheckNotNull(calculatedMetric, nameof(calculatedMetric)),
            }, callSettings);

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to create.
        /// </param>
        /// <param name="calculatedMetricId">
        /// Required. The ID to use for the calculated metric which will become the
        /// final component of the calculated metric's resource name.
        /// 
        /// This value should be 1-80 characters and valid characters are
        /// /[a-zA-Z0-9_]/, no spaces allowed. calculated_metric_id must be unique
        /// between all calculated metrics under a property. The calculated_metric_id
        /// is used when referencing this calculated metric from external APIs, for
        /// example, "calcMetric:{calculated_metric_id}".
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> CreateCalculatedMetricAsync(PropertyName parent, CalculatedMetric calculatedMetric, string calculatedMetricId, st::CancellationToken cancellationToken) =>
            CreateCalculatedMetricAsync(parent, calculatedMetric, calculatedMetricId, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists CalculatedMetrics on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CalculatedMetric"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCalculatedMetricsResponse, CalculatedMetric> ListCalculatedMetrics(ListCalculatedMetricsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists CalculatedMetrics on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CalculatedMetric"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCalculatedMetricsResponse, CalculatedMetric> ListCalculatedMetricsAsync(ListCalculatedMetricsRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists CalculatedMetrics on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CalculatedMetric"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCalculatedMetricsResponse, CalculatedMetric> ListCalculatedMetrics(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCalculatedMetricsRequest request = new ListCalculatedMetricsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCalculatedMetrics(request, callSettings);
        }

        /// <summary>
        /// Lists CalculatedMetrics on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CalculatedMetric"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCalculatedMetricsResponse, CalculatedMetric> ListCalculatedMetricsAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCalculatedMetricsRequest request = new ListCalculatedMetricsRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCalculatedMetricsAsync(request, callSettings);
        }

        /// <summary>
        /// Lists CalculatedMetrics on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CalculatedMetric"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListCalculatedMetricsResponse, CalculatedMetric> ListCalculatedMetrics(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCalculatedMetricsRequest request = new ListCalculatedMetricsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCalculatedMetrics(request, callSettings);
        }

        /// <summary>
        /// Lists CalculatedMetrics on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Example format: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CalculatedMetric"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListCalculatedMetricsResponse, CalculatedMetric> ListCalculatedMetricsAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListCalculatedMetricsRequest request = new ListCalculatedMetricsRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListCalculatedMetricsAsync(request, callSettings);
        }

        /// <summary>
        /// Updates a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CalculatedMetric UpdateCalculatedMetric(UpdateCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> UpdateCalculatedMetricAsync(UpdateCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> UpdateCalculatedMetricAsync(UpdateCalculatedMetricRequest request, st::CancellationToken cancellationToken) =>
            UpdateCalculatedMetricAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a CalculatedMetric on a property.
        /// </summary>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CalculatedMetric UpdateCalculatedMetric(CalculatedMetric calculatedMetric, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateCalculatedMetric(new UpdateCalculatedMetricRequest
            {
                CalculatedMetric = gax::GaxPreconditions.CheckNotNull(calculatedMetric, nameof(calculatedMetric)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a CalculatedMetric on a property.
        /// </summary>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> UpdateCalculatedMetricAsync(CalculatedMetric calculatedMetric, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateCalculatedMetricAsync(new UpdateCalculatedMetricRequest
            {
                CalculatedMetric = gax::GaxPreconditions.CheckNotNull(calculatedMetric, nameof(calculatedMetric)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a CalculatedMetric on a property.
        /// </summary>
        /// <param name="calculatedMetric">
        /// Required. The CalculatedMetric to update
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to be updated. Omitted fields will not be
        /// updated. To replace the entire entity, use one path with the string "*" to
        /// match all fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CalculatedMetric> UpdateCalculatedMetricAsync(CalculatedMetric calculatedMetric, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateCalculatedMetricAsync(calculatedMetric, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteCalculatedMetric(DeleteCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteCalculatedMetricAsync(DeleteCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteCalculatedMetricAsync(DeleteCalculatedMetricRequest request, st::CancellationToken cancellationToken) =>
            DeleteCalculatedMetricAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to delete.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteCalculatedMetric(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteCalculatedMetric(new DeleteCalculatedMetricRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to delete.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteCalculatedMetricAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteCalculatedMetricAsync(new DeleteCalculatedMetricRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to delete.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteCalculatedMetricAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteCalculatedMetricAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to delete.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteCalculatedMetric(CalculatedMetricName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteCalculatedMetric(new DeleteCalculatedMetricRequest
            {
                CalculatedMetricName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to delete.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteCalculatedMetricAsync(CalculatedMetricName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteCalculatedMetricAsync(new DeleteCalculatedMetricRequest
            {
                CalculatedMetricName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the CalculatedMetric to delete.
        /// Format: properties/{property_id}/calculatedMetrics/{calculated_metric_id}
        /// Example: properties/1234/calculatedMetrics/Metric01
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteCalculatedMetricAsync(CalculatedMetricName name, st::CancellationToken cancellationToken) =>
            DeleteCalculatedMetricAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Create a roll-up property and all roll-up property source links.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual CreateRollupPropertyResponse CreateRollupProperty(CreateRollupPropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Create a roll-up property and all roll-up property source links.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CreateRollupPropertyResponse> CreateRollupPropertyAsync(CreateRollupPropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Create a roll-up property and all roll-up property source links.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<CreateRollupPropertyResponse> CreateRollupPropertyAsync(CreateRollupPropertyRequest request, st::CancellationToken cancellationToken) =>
            CreateRollupPropertyAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual RollupPropertySourceLink GetRollupPropertySourceLink(GetRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> GetRollupPropertySourceLinkAsync(GetRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> GetRollupPropertySourceLinkAsync(GetRollupPropertySourceLinkRequest request, st::CancellationToken cancellationToken) =>
            GetRollupPropertySourceLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the roll-up property source link to lookup.
        /// Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/123/rollupPropertySourceLinks/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual RollupPropertySourceLink GetRollupPropertySourceLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetRollupPropertySourceLink(new GetRollupPropertySourceLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the roll-up property source link to lookup.
        /// Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/123/rollupPropertySourceLinks/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> GetRollupPropertySourceLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetRollupPropertySourceLinkAsync(new GetRollupPropertySourceLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the roll-up property source link to lookup.
        /// Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/123/rollupPropertySourceLinks/456
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> GetRollupPropertySourceLinkAsync(string name, st::CancellationToken cancellationToken) =>
            GetRollupPropertySourceLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the roll-up property source link to lookup.
        /// Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/123/rollupPropertySourceLinks/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual RollupPropertySourceLink GetRollupPropertySourceLink(RollupPropertySourceLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetRollupPropertySourceLink(new GetRollupPropertySourceLinkRequest
            {
                RollupPropertySourceLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the roll-up property source link to lookup.
        /// Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/123/rollupPropertySourceLinks/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> GetRollupPropertySourceLinkAsync(RollupPropertySourceLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            GetRollupPropertySourceLinkAsync(new GetRollupPropertySourceLinkRequest
            {
                RollupPropertySourceLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. The name of the roll-up property source link to lookup.
        /// Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/123/rollupPropertySourceLinks/456
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> GetRollupPropertySourceLinkAsync(RollupPropertySourceLinkName name, st::CancellationToken cancellationToken) =>
            GetRollupPropertySourceLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lists roll-up property source Links on a property.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="RollupPropertySourceLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListRollupPropertySourceLinksResponse, RollupPropertySourceLink> ListRollupPropertySourceLinks(ListRollupPropertySourceLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists roll-up property source Links on a property.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="RollupPropertySourceLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListRollupPropertySourceLinksResponse, RollupPropertySourceLink> ListRollupPropertySourceLinksAsync(ListRollupPropertySourceLinksRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lists roll-up property source Links on a property.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. The name of the roll-up property to list roll-up property source
        /// links under. Format: properties/{property_id} Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="RollupPropertySourceLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListRollupPropertySourceLinksResponse, RollupPropertySourceLink> ListRollupPropertySourceLinks(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListRollupPropertySourceLinksRequest request = new ListRollupPropertySourceLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListRollupPropertySourceLinks(request, callSettings);
        }

        /// <summary>
        /// Lists roll-up property source Links on a property.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. The name of the roll-up property to list roll-up property source
        /// links under. Format: properties/{property_id} Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="RollupPropertySourceLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListRollupPropertySourceLinksResponse, RollupPropertySourceLink> ListRollupPropertySourceLinksAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListRollupPropertySourceLinksRequest request = new ListRollupPropertySourceLinksRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListRollupPropertySourceLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Lists roll-up property source Links on a property.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. The name of the roll-up property to list roll-up property source
        /// links under. Format: properties/{property_id} Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="RollupPropertySourceLink"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListRollupPropertySourceLinksResponse, RollupPropertySourceLink> ListRollupPropertySourceLinks(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListRollupPropertySourceLinksRequest request = new ListRollupPropertySourceLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListRollupPropertySourceLinks(request, callSettings);
        }

        /// <summary>
        /// Lists roll-up property source Links on a property.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. The name of the roll-up property to list roll-up property source
        /// links under. Format: properties/{property_id} Example: properties/1234
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="RollupPropertySourceLink"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListRollupPropertySourceLinksResponse, RollupPropertySourceLink> ListRollupPropertySourceLinksAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListRollupPropertySourceLinksRequest request = new ListRollupPropertySourceLinksRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListRollupPropertySourceLinksAsync(request, callSettings);
        }

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual RollupPropertySourceLink CreateRollupPropertySourceLink(CreateRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> CreateRollupPropertySourceLinkAsync(CreateRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> CreateRollupPropertySourceLinkAsync(CreateRollupPropertySourceLinkRequest request, st::CancellationToken cancellationToken) =>
            CreateRollupPropertySourceLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="rollupPropertySourceLink">
        /// Required. The roll-up property source link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual RollupPropertySourceLink CreateRollupPropertySourceLink(string parent, RollupPropertySourceLink rollupPropertySourceLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateRollupPropertySourceLink(new CreateRollupPropertySourceLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                RollupPropertySourceLink = gax::GaxPreconditions.CheckNotNull(rollupPropertySourceLink, nameof(rollupPropertySourceLink)),
            }, callSettings);

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="rollupPropertySourceLink">
        /// Required. The roll-up property source link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> CreateRollupPropertySourceLinkAsync(string parent, RollupPropertySourceLink rollupPropertySourceLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateRollupPropertySourceLinkAsync(new CreateRollupPropertySourceLinkRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                RollupPropertySourceLink = gax::GaxPreconditions.CheckNotNull(rollupPropertySourceLink, nameof(rollupPropertySourceLink)),
            }, callSettings);

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="rollupPropertySourceLink">
        /// Required. The roll-up property source link to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> CreateRollupPropertySourceLinkAsync(string parent, RollupPropertySourceLink rollupPropertySourceLink, st::CancellationToken cancellationToken) =>
            CreateRollupPropertySourceLinkAsync(parent, rollupPropertySourceLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="rollupPropertySourceLink">
        /// Required. The roll-up property source link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual RollupPropertySourceLink CreateRollupPropertySourceLink(PropertyName parent, RollupPropertySourceLink rollupPropertySourceLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateRollupPropertySourceLink(new CreateRollupPropertySourceLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                RollupPropertySourceLink = gax::GaxPreconditions.CheckNotNull(rollupPropertySourceLink, nameof(rollupPropertySourceLink)),
            }, callSettings);

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="rollupPropertySourceLink">
        /// Required. The roll-up property source link to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> CreateRollupPropertySourceLinkAsync(PropertyName parent, RollupPropertySourceLink rollupPropertySourceLink, gaxgrpc::CallSettings callSettings = null) =>
            CreateRollupPropertySourceLinkAsync(new CreateRollupPropertySourceLinkRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                RollupPropertySourceLink = gax::GaxPreconditions.CheckNotNull(rollupPropertySourceLink, nameof(rollupPropertySourceLink)),
            }, callSettings);

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="parent">
        /// Required. Format: properties/{property_id}
        /// Example: properties/1234
        /// </param>
        /// <param name="rollupPropertySourceLink">
        /// Required. The roll-up property source link to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<RollupPropertySourceLink> CreateRollupPropertySourceLinkAsync(PropertyName parent, RollupPropertySourceLink rollupPropertySourceLink, st::CancellationToken cancellationToken) =>
            CreateRollupPropertySourceLinkAsync(parent, rollupPropertySourceLink, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteRollupPropertySourceLink(DeleteRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteRollupPropertySourceLinkAsync(DeleteRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteRollupPropertySourceLinkAsync(DeleteRollupPropertySourceLinkRequest request, st::CancellationToken cancellationToken) =>
            DeleteRollupPropertySourceLinkAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/1234/rollupPropertySourceLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteRollupPropertySourceLink(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteRollupPropertySourceLink(new DeleteRollupPropertySourceLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/1234/rollupPropertySourceLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteRollupPropertySourceLinkAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteRollupPropertySourceLinkAsync(new DeleteRollupPropertySourceLinkRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/1234/rollupPropertySourceLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteRollupPropertySourceLinkAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteRollupPropertySourceLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/1234/rollupPropertySourceLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteRollupPropertySourceLink(RollupPropertySourceLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteRollupPropertySourceLink(new DeleteRollupPropertySourceLinkRequest
            {
                RollupPropertySourceLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/1234/rollupPropertySourceLinks/5678
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteRollupPropertySourceLinkAsync(RollupPropertySourceLinkName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteRollupPropertySourceLinkAsync(new DeleteRollupPropertySourceLinkRequest
            {
                RollupPropertySourceLinkName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="name">
        /// Required. Format:
        /// properties/{property_id}/rollupPropertySourceLinks/{rollup_property_source_link_id}
        /// Example: properties/1234/rollupPropertySourceLinks/5678
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteRollupPropertySourceLinkAsync(RollupPropertySourceLinkName name, st::CancellationToken cancellationToken) =>
            DeleteRollupPropertySourceLinkAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Create a subproperty and a subproperty event filter that applies to the
        /// created subproperty.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual ProvisionSubpropertyResponse ProvisionSubproperty(ProvisionSubpropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Create a subproperty and a subproperty event filter that applies to the
        /// created subproperty.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ProvisionSubpropertyResponse> ProvisionSubpropertyAsync(ProvisionSubpropertyRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Create a subproperty and a subproperty event filter that applies to the
        /// created subproperty.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<ProvisionSubpropertyResponse> ProvisionSubpropertyAsync(ProvisionSubpropertyRequest request, st::CancellationToken cancellationToken) =>
            ProvisionSubpropertyAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SubpropertyEventFilter CreateSubpropertyEventFilter(CreateSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> CreateSubpropertyEventFilterAsync(CreateSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> CreateSubpropertyEventFilterAsync(CreateSubpropertyEventFilterRequest request, st::CancellationToken cancellationToken) =>
            CreateSubpropertyEventFilterAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="parent">
        /// Required. The ordinary property for which to create a subproperty event
        /// filter. Format: properties/property_id Example: properties/123
        /// </param>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SubpropertyEventFilter CreateSubpropertyEventFilter(string parent, SubpropertyEventFilter subpropertyEventFilter, gaxgrpc::CallSettings callSettings = null) =>
            CreateSubpropertyEventFilter(new CreateSubpropertyEventFilterRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                SubpropertyEventFilter = gax::GaxPreconditions.CheckNotNull(subpropertyEventFilter, nameof(subpropertyEventFilter)),
            }, callSettings);

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="parent">
        /// Required. The ordinary property for which to create a subproperty event
        /// filter. Format: properties/property_id Example: properties/123
        /// </param>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> CreateSubpropertyEventFilterAsync(string parent, SubpropertyEventFilter subpropertyEventFilter, gaxgrpc::CallSettings callSettings = null) =>
            CreateSubpropertyEventFilterAsync(new CreateSubpropertyEventFilterRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
                SubpropertyEventFilter = gax::GaxPreconditions.CheckNotNull(subpropertyEventFilter, nameof(subpropertyEventFilter)),
            }, callSettings);

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="parent">
        /// Required. The ordinary property for which to create a subproperty event
        /// filter. Format: properties/property_id Example: properties/123
        /// </param>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> CreateSubpropertyEventFilterAsync(string parent, SubpropertyEventFilter subpropertyEventFilter, st::CancellationToken cancellationToken) =>
            CreateSubpropertyEventFilterAsync(parent, subpropertyEventFilter, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="parent">
        /// Required. The ordinary property for which to create a subproperty event
        /// filter. Format: properties/property_id Example: properties/123
        /// </param>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SubpropertyEventFilter CreateSubpropertyEventFilter(PropertyName parent, SubpropertyEventFilter subpropertyEventFilter, gaxgrpc::CallSettings callSettings = null) =>
            CreateSubpropertyEventFilter(new CreateSubpropertyEventFilterRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                SubpropertyEventFilter = gax::GaxPreconditions.CheckNotNull(subpropertyEventFilter, nameof(subpropertyEventFilter)),
            }, callSettings);

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="parent">
        /// Required. The ordinary property for which to create a subproperty event
        /// filter. Format: properties/property_id Example: properties/123
        /// </param>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to create.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> CreateSubpropertyEventFilterAsync(PropertyName parent, SubpropertyEventFilter subpropertyEventFilter, gaxgrpc::CallSettings callSettings = null) =>
            CreateSubpropertyEventFilterAsync(new CreateSubpropertyEventFilterRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
                SubpropertyEventFilter = gax::GaxPreconditions.CheckNotNull(subpropertyEventFilter, nameof(subpropertyEventFilter)),
            }, callSettings);

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="parent">
        /// Required. The ordinary property for which to create a subproperty event
        /// filter. Format: properties/property_id Example: properties/123
        /// </param>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to create.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> CreateSubpropertyEventFilterAsync(PropertyName parent, SubpropertyEventFilter subpropertyEventFilter, st::CancellationToken cancellationToken) =>
            CreateSubpropertyEventFilterAsync(parent, subpropertyEventFilter, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SubpropertyEventFilter GetSubpropertyEventFilter(GetSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> GetSubpropertyEventFilterAsync(GetSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> GetSubpropertyEventFilterAsync(GetSubpropertyEventFilterRequest request, st::CancellationToken cancellationToken) =>
            GetSubpropertyEventFilterAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to lookup.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SubpropertyEventFilter GetSubpropertyEventFilter(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetSubpropertyEventFilter(new GetSubpropertyEventFilterRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to lookup.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> GetSubpropertyEventFilterAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            GetSubpropertyEventFilterAsync(new GetSubpropertyEventFilterRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to lookup.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> GetSubpropertyEventFilterAsync(string name, st::CancellationToken cancellationToken) =>
            GetSubpropertyEventFilterAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to lookup.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SubpropertyEventFilter GetSubpropertyEventFilter(SubpropertyEventFilterName name, gaxgrpc::CallSettings callSettings = null) =>
            GetSubpropertyEventFilter(new GetSubpropertyEventFilterRequest
            {
                SubpropertyEventFilterName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to lookup.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> GetSubpropertyEventFilterAsync(SubpropertyEventFilterName name, gaxgrpc::CallSettings callSettings = null) =>
            GetSubpropertyEventFilterAsync(new GetSubpropertyEventFilterRequest
            {
                SubpropertyEventFilterName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to lookup.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> GetSubpropertyEventFilterAsync(SubpropertyEventFilterName name, st::CancellationToken cancellationToken) =>
            GetSubpropertyEventFilterAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// List all subproperty Event Filters on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SubpropertyEventFilter"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSubpropertyEventFiltersResponse, SubpropertyEventFilter> ListSubpropertyEventFilters(ListSubpropertyEventFiltersRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// List all subproperty Event Filters on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="SubpropertyEventFilter"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListSubpropertyEventFiltersResponse, SubpropertyEventFilter> ListSubpropertyEventFiltersAsync(ListSubpropertyEventFiltersRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// List all subproperty Event Filters on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Resource name of the ordinary property.
        /// Format: properties/property_id
        /// Example: properties/123
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SubpropertyEventFilter"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSubpropertyEventFiltersResponse, SubpropertyEventFilter> ListSubpropertyEventFilters(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSubpropertyEventFiltersRequest request = new ListSubpropertyEventFiltersRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSubpropertyEventFilters(request, callSettings);
        }

        /// <summary>
        /// List all subproperty Event Filters on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Resource name of the ordinary property.
        /// Format: properties/property_id
        /// Example: properties/123
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="SubpropertyEventFilter"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListSubpropertyEventFiltersResponse, SubpropertyEventFilter> ListSubpropertyEventFiltersAsync(string parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSubpropertyEventFiltersRequest request = new ListSubpropertyEventFiltersRequest
            {
                Parent = gax::GaxPreconditions.CheckNotNullOrEmpty(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSubpropertyEventFiltersAsync(request, callSettings);
        }

        /// <summary>
        /// List all subproperty Event Filters on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Resource name of the ordinary property.
        /// Format: properties/property_id
        /// Example: properties/123
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SubpropertyEventFilter"/> resources.</returns>
        public virtual gax::PagedEnumerable<ListSubpropertyEventFiltersResponse, SubpropertyEventFilter> ListSubpropertyEventFilters(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSubpropertyEventFiltersRequest request = new ListSubpropertyEventFiltersRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSubpropertyEventFilters(request, callSettings);
        }

        /// <summary>
        /// List all subproperty Event Filters on a property.
        /// </summary>
        /// <param name="parent">
        /// Required. Resource name of the ordinary property.
        /// Format: properties/property_id
        /// Example: properties/123
        /// </param>
        /// <param name="pageToken">
        /// The token returned from the previous request. A value of <c>null</c> or an empty string retrieves the first
        /// page.
        /// </param>
        /// <param name="pageSize">
        /// The size of page to request. The response will not be larger than this, but may be smaller. A value of
        /// <c>null</c> or <c>0</c> uses a server-defined page size.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="SubpropertyEventFilter"/> resources.</returns>
        public virtual gax::PagedAsyncEnumerable<ListSubpropertyEventFiltersResponse, SubpropertyEventFilter> ListSubpropertyEventFiltersAsync(PropertyName parent, string pageToken = null, int? pageSize = null, gaxgrpc::CallSettings callSettings = null)
        {
            ListSubpropertyEventFiltersRequest request = new ListSubpropertyEventFiltersRequest
            {
                ParentAsPropertyName = gax::GaxPreconditions.CheckNotNull(parent, nameof(parent)),
            };
            if (pageToken != null)
            {
                request.PageToken = pageToken;
            }
            if (pageSize != null)
            {
                request.PageSize = pageSize.Value;
            }
            return ListSubpropertyEventFiltersAsync(request, callSettings);
        }

        /// <summary>
        /// Updates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SubpropertyEventFilter UpdateSubpropertyEventFilter(UpdateSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> UpdateSubpropertyEventFilterAsync(UpdateSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Updates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> UpdateSubpropertyEventFilterAsync(UpdateSubpropertyEventFilterRequest request, st::CancellationToken cancellationToken) =>
            UpdateSubpropertyEventFilterAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Updates a subproperty Event Filter.
        /// </summary>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to update. Field names must be in snake case
        /// (for example, "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual SubpropertyEventFilter UpdateSubpropertyEventFilter(SubpropertyEventFilter subpropertyEventFilter, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateSubpropertyEventFilter(new UpdateSubpropertyEventFilterRequest
            {
                SubpropertyEventFilter = gax::GaxPreconditions.CheckNotNull(subpropertyEventFilter, nameof(subpropertyEventFilter)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a subproperty Event Filter.
        /// </summary>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to update. Field names must be in snake case
        /// (for example, "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> UpdateSubpropertyEventFilterAsync(SubpropertyEventFilter subpropertyEventFilter, wkt::FieldMask updateMask, gaxgrpc::CallSettings callSettings = null) =>
            UpdateSubpropertyEventFilterAsync(new UpdateSubpropertyEventFilterRequest
            {
                SubpropertyEventFilter = gax::GaxPreconditions.CheckNotNull(subpropertyEventFilter, nameof(subpropertyEventFilter)),
                UpdateMask = gax::GaxPreconditions.CheckNotNull(updateMask, nameof(updateMask)),
            }, callSettings);

        /// <summary>
        /// Updates a subproperty Event Filter.
        /// </summary>
        /// <param name="subpropertyEventFilter">
        /// Required. The subproperty event filter to update.
        /// </param>
        /// <param name="updateMask">
        /// Required. The list of fields to update. Field names must be in snake case
        /// (for example, "field_to_update"). Omitted fields will not be updated. To
        /// replace the entire entity, use one path with the string "*" to match all
        /// fields.
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task<SubpropertyEventFilter> UpdateSubpropertyEventFilterAsync(SubpropertyEventFilter subpropertyEventFilter, wkt::FieldMask updateMask, st::CancellationToken cancellationToken) =>
            UpdateSubpropertyEventFilterAsync(subpropertyEventFilter, updateMask, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSubpropertyEventFilter(DeleteSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSubpropertyEventFilterAsync(DeleteSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null) =>
            throw new sys::NotImplementedException();

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSubpropertyEventFilterAsync(DeleteSubpropertyEventFilterRequest request, st::CancellationToken cancellationToken) =>
            DeleteSubpropertyEventFilterAsync(request, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to delete.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSubpropertyEventFilter(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSubpropertyEventFilter(new DeleteSubpropertyEventFilterRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to delete.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSubpropertyEventFilterAsync(string name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSubpropertyEventFilterAsync(new DeleteSubpropertyEventFilterRequest
            {
                Name = gax::GaxPreconditions.CheckNotNullOrEmpty(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to delete.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSubpropertyEventFilterAsync(string name, st::CancellationToken cancellationToken) =>
            DeleteSubpropertyEventFilterAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to delete.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public virtual void DeleteSubpropertyEventFilter(SubpropertyEventFilterName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSubpropertyEventFilter(new DeleteSubpropertyEventFilterRequest
            {
                SubpropertyEventFilterName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to delete.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSubpropertyEventFilterAsync(SubpropertyEventFilterName name, gaxgrpc::CallSettings callSettings = null) =>
            DeleteSubpropertyEventFilterAsync(new DeleteSubpropertyEventFilterRequest
            {
                SubpropertyEventFilterName = gax::GaxPreconditions.CheckNotNull(name, nameof(name)),
            }, callSettings);

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="name">
        /// Required. Resource name of the subproperty event filter to delete.
        /// Format:
        /// properties/property_id/subpropertyEventFilters/subproperty_event_filter
        /// Example: properties/123/subpropertyEventFilters/456
        /// </param>
        /// <param name="cancellationToken">A <see cref="st::CancellationToken"/> to use for this RPC.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public virtual stt::Task DeleteSubpropertyEventFilterAsync(SubpropertyEventFilterName name, st::CancellationToken cancellationToken) =>
            DeleteSubpropertyEventFilterAsync(name, gaxgrpc::CallSettings.FromCancellationToken(cancellationToken));
    }

    /// <summary>AnalyticsAdminService client wrapper implementation, for convenient use.</summary>
    /// <remarks>
    /// Service Interface for the Analytics Admin API (GA4).
    /// </remarks>
    public sealed partial class AnalyticsAdminServiceClientImpl : AnalyticsAdminServiceClient
    {
        private readonly gaxgrpc::ApiCall<GetAccountRequest, Account> _callGetAccount;

        private readonly gaxgrpc::ApiCall<ListAccountsRequest, ListAccountsResponse> _callListAccounts;

        private readonly gaxgrpc::ApiCall<DeleteAccountRequest, wkt::Empty> _callDeleteAccount;

        private readonly gaxgrpc::ApiCall<UpdateAccountRequest, Account> _callUpdateAccount;

        private readonly gaxgrpc::ApiCall<ProvisionAccountTicketRequest, ProvisionAccountTicketResponse> _callProvisionAccountTicket;

        private readonly gaxgrpc::ApiCall<ListAccountSummariesRequest, ListAccountSummariesResponse> _callListAccountSummaries;

        private readonly gaxgrpc::ApiCall<GetPropertyRequest, Property> _callGetProperty;

        private readonly gaxgrpc::ApiCall<ListPropertiesRequest, ListPropertiesResponse> _callListProperties;

        private readonly gaxgrpc::ApiCall<CreatePropertyRequest, Property> _callCreateProperty;

        private readonly gaxgrpc::ApiCall<DeletePropertyRequest, Property> _callDeleteProperty;

        private readonly gaxgrpc::ApiCall<UpdatePropertyRequest, Property> _callUpdateProperty;

        private readonly gaxgrpc::ApiCall<CreateFirebaseLinkRequest, FirebaseLink> _callCreateFirebaseLink;

        private readonly gaxgrpc::ApiCall<DeleteFirebaseLinkRequest, wkt::Empty> _callDeleteFirebaseLink;

        private readonly gaxgrpc::ApiCall<ListFirebaseLinksRequest, ListFirebaseLinksResponse> _callListFirebaseLinks;

        private readonly gaxgrpc::ApiCall<GetGlobalSiteTagRequest, GlobalSiteTag> _callGetGlobalSiteTag;

        private readonly gaxgrpc::ApiCall<CreateGoogleAdsLinkRequest, GoogleAdsLink> _callCreateGoogleAdsLink;

        private readonly gaxgrpc::ApiCall<UpdateGoogleAdsLinkRequest, GoogleAdsLink> _callUpdateGoogleAdsLink;

        private readonly gaxgrpc::ApiCall<DeleteGoogleAdsLinkRequest, wkt::Empty> _callDeleteGoogleAdsLink;

        private readonly gaxgrpc::ApiCall<ListGoogleAdsLinksRequest, ListGoogleAdsLinksResponse> _callListGoogleAdsLinks;

        private readonly gaxgrpc::ApiCall<GetDataSharingSettingsRequest, DataSharingSettings> _callGetDataSharingSettings;

        private readonly gaxgrpc::ApiCall<GetMeasurementProtocolSecretRequest, MeasurementProtocolSecret> _callGetMeasurementProtocolSecret;

        private readonly gaxgrpc::ApiCall<ListMeasurementProtocolSecretsRequest, ListMeasurementProtocolSecretsResponse> _callListMeasurementProtocolSecrets;

        private readonly gaxgrpc::ApiCall<CreateMeasurementProtocolSecretRequest, MeasurementProtocolSecret> _callCreateMeasurementProtocolSecret;

        private readonly gaxgrpc::ApiCall<DeleteMeasurementProtocolSecretRequest, wkt::Empty> _callDeleteMeasurementProtocolSecret;

        private readonly gaxgrpc::ApiCall<UpdateMeasurementProtocolSecretRequest, MeasurementProtocolSecret> _callUpdateMeasurementProtocolSecret;

        private readonly gaxgrpc::ApiCall<AcknowledgeUserDataCollectionRequest, AcknowledgeUserDataCollectionResponse> _callAcknowledgeUserDataCollection;

        private readonly gaxgrpc::ApiCall<GetSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema> _callGetSKAdNetworkConversionValueSchema;

        private readonly gaxgrpc::ApiCall<CreateSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema> _callCreateSKAdNetworkConversionValueSchema;

        private readonly gaxgrpc::ApiCall<DeleteSKAdNetworkConversionValueSchemaRequest, wkt::Empty> _callDeleteSKAdNetworkConversionValueSchema;

        private readonly gaxgrpc::ApiCall<UpdateSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema> _callUpdateSKAdNetworkConversionValueSchema;

        private readonly gaxgrpc::ApiCall<ListSKAdNetworkConversionValueSchemasRequest, ListSKAdNetworkConversionValueSchemasResponse> _callListSKAdNetworkConversionValueSchemas;

        private readonly gaxgrpc::ApiCall<SearchChangeHistoryEventsRequest, SearchChangeHistoryEventsResponse> _callSearchChangeHistoryEvents;

        private readonly gaxgrpc::ApiCall<GetGoogleSignalsSettingsRequest, GoogleSignalsSettings> _callGetGoogleSignalsSettings;

        private readonly gaxgrpc::ApiCall<UpdateGoogleSignalsSettingsRequest, GoogleSignalsSettings> _callUpdateGoogleSignalsSettings;

        private readonly gaxgrpc::ApiCall<CreateConversionEventRequest, ConversionEvent> _callCreateConversionEvent;

        private readonly gaxgrpc::ApiCall<UpdateConversionEventRequest, ConversionEvent> _callUpdateConversionEvent;

        private readonly gaxgrpc::ApiCall<GetConversionEventRequest, ConversionEvent> _callGetConversionEvent;

        private readonly gaxgrpc::ApiCall<DeleteConversionEventRequest, wkt::Empty> _callDeleteConversionEvent;

        private readonly gaxgrpc::ApiCall<ListConversionEventsRequest, ListConversionEventsResponse> _callListConversionEvents;

        private readonly gaxgrpc::ApiCall<CreateKeyEventRequest, KeyEvent> _callCreateKeyEvent;

        private readonly gaxgrpc::ApiCall<UpdateKeyEventRequest, KeyEvent> _callUpdateKeyEvent;

        private readonly gaxgrpc::ApiCall<GetKeyEventRequest, KeyEvent> _callGetKeyEvent;

        private readonly gaxgrpc::ApiCall<DeleteKeyEventRequest, wkt::Empty> _callDeleteKeyEvent;

        private readonly gaxgrpc::ApiCall<ListKeyEventsRequest, ListKeyEventsResponse> _callListKeyEvents;

        private readonly gaxgrpc::ApiCall<GetDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink> _callGetDisplayVideo360AdvertiserLink;

        private readonly gaxgrpc::ApiCall<ListDisplayVideo360AdvertiserLinksRequest, ListDisplayVideo360AdvertiserLinksResponse> _callListDisplayVideo360AdvertiserLinks;

        private readonly gaxgrpc::ApiCall<CreateDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink> _callCreateDisplayVideo360AdvertiserLink;

        private readonly gaxgrpc::ApiCall<DeleteDisplayVideo360AdvertiserLinkRequest, wkt::Empty> _callDeleteDisplayVideo360AdvertiserLink;

        private readonly gaxgrpc::ApiCall<UpdateDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink> _callUpdateDisplayVideo360AdvertiserLink;

        private readonly gaxgrpc::ApiCall<GetDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal> _callGetDisplayVideo360AdvertiserLinkProposal;

        private readonly gaxgrpc::ApiCall<ListDisplayVideo360AdvertiserLinkProposalsRequest, ListDisplayVideo360AdvertiserLinkProposalsResponse> _callListDisplayVideo360AdvertiserLinkProposals;

        private readonly gaxgrpc::ApiCall<CreateDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal> _callCreateDisplayVideo360AdvertiserLinkProposal;

        private readonly gaxgrpc::ApiCall<DeleteDisplayVideo360AdvertiserLinkProposalRequest, wkt::Empty> _callDeleteDisplayVideo360AdvertiserLinkProposal;

        private readonly gaxgrpc::ApiCall<ApproveDisplayVideo360AdvertiserLinkProposalRequest, ApproveDisplayVideo360AdvertiserLinkProposalResponse> _callApproveDisplayVideo360AdvertiserLinkProposal;

        private readonly gaxgrpc::ApiCall<CancelDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal> _callCancelDisplayVideo360AdvertiserLinkProposal;

        private readonly gaxgrpc::ApiCall<CreateCustomDimensionRequest, CustomDimension> _callCreateCustomDimension;

        private readonly gaxgrpc::ApiCall<UpdateCustomDimensionRequest, CustomDimension> _callUpdateCustomDimension;

        private readonly gaxgrpc::ApiCall<ListCustomDimensionsRequest, ListCustomDimensionsResponse> _callListCustomDimensions;

        private readonly gaxgrpc::ApiCall<ArchiveCustomDimensionRequest, wkt::Empty> _callArchiveCustomDimension;

        private readonly gaxgrpc::ApiCall<GetCustomDimensionRequest, CustomDimension> _callGetCustomDimension;

        private readonly gaxgrpc::ApiCall<CreateCustomMetricRequest, CustomMetric> _callCreateCustomMetric;

        private readonly gaxgrpc::ApiCall<UpdateCustomMetricRequest, CustomMetric> _callUpdateCustomMetric;

        private readonly gaxgrpc::ApiCall<ListCustomMetricsRequest, ListCustomMetricsResponse> _callListCustomMetrics;

        private readonly gaxgrpc::ApiCall<ArchiveCustomMetricRequest, wkt::Empty> _callArchiveCustomMetric;

        private readonly gaxgrpc::ApiCall<GetCustomMetricRequest, CustomMetric> _callGetCustomMetric;

        private readonly gaxgrpc::ApiCall<GetDataRetentionSettingsRequest, DataRetentionSettings> _callGetDataRetentionSettings;

        private readonly gaxgrpc::ApiCall<UpdateDataRetentionSettingsRequest, DataRetentionSettings> _callUpdateDataRetentionSettings;

        private readonly gaxgrpc::ApiCall<CreateDataStreamRequest, DataStream> _callCreateDataStream;

        private readonly gaxgrpc::ApiCall<DeleteDataStreamRequest, wkt::Empty> _callDeleteDataStream;

        private readonly gaxgrpc::ApiCall<UpdateDataStreamRequest, DataStream> _callUpdateDataStream;

        private readonly gaxgrpc::ApiCall<ListDataStreamsRequest, ListDataStreamsResponse> _callListDataStreams;

        private readonly gaxgrpc::ApiCall<GetDataStreamRequest, DataStream> _callGetDataStream;

        private readonly gaxgrpc::ApiCall<GetAudienceRequest, Audience> _callGetAudience;

        private readonly gaxgrpc::ApiCall<ListAudiencesRequest, ListAudiencesResponse> _callListAudiences;

        private readonly gaxgrpc::ApiCall<CreateAudienceRequest, Audience> _callCreateAudience;

        private readonly gaxgrpc::ApiCall<UpdateAudienceRequest, Audience> _callUpdateAudience;

        private readonly gaxgrpc::ApiCall<ArchiveAudienceRequest, wkt::Empty> _callArchiveAudience;

        private readonly gaxgrpc::ApiCall<GetSearchAds360LinkRequest, SearchAds360Link> _callGetSearchAds360Link;

        private readonly gaxgrpc::ApiCall<ListSearchAds360LinksRequest, ListSearchAds360LinksResponse> _callListSearchAds360Links;

        private readonly gaxgrpc::ApiCall<CreateSearchAds360LinkRequest, SearchAds360Link> _callCreateSearchAds360Link;

        private readonly gaxgrpc::ApiCall<DeleteSearchAds360LinkRequest, wkt::Empty> _callDeleteSearchAds360Link;

        private readonly gaxgrpc::ApiCall<UpdateSearchAds360LinkRequest, SearchAds360Link> _callUpdateSearchAds360Link;

        private readonly gaxgrpc::ApiCall<GetAttributionSettingsRequest, AttributionSettings> _callGetAttributionSettings;

        private readonly gaxgrpc::ApiCall<UpdateAttributionSettingsRequest, AttributionSettings> _callUpdateAttributionSettings;

        private readonly gaxgrpc::ApiCall<RunAccessReportRequest, RunAccessReportResponse> _callRunAccessReport;

        private readonly gaxgrpc::ApiCall<CreateAccessBindingRequest, AccessBinding> _callCreateAccessBinding;

        private readonly gaxgrpc::ApiCall<GetAccessBindingRequest, AccessBinding> _callGetAccessBinding;

        private readonly gaxgrpc::ApiCall<UpdateAccessBindingRequest, AccessBinding> _callUpdateAccessBinding;

        private readonly gaxgrpc::ApiCall<DeleteAccessBindingRequest, wkt::Empty> _callDeleteAccessBinding;

        private readonly gaxgrpc::ApiCall<ListAccessBindingsRequest, ListAccessBindingsResponse> _callListAccessBindings;

        private readonly gaxgrpc::ApiCall<BatchCreateAccessBindingsRequest, BatchCreateAccessBindingsResponse> _callBatchCreateAccessBindings;

        private readonly gaxgrpc::ApiCall<BatchGetAccessBindingsRequest, BatchGetAccessBindingsResponse> _callBatchGetAccessBindings;

        private readonly gaxgrpc::ApiCall<BatchUpdateAccessBindingsRequest, BatchUpdateAccessBindingsResponse> _callBatchUpdateAccessBindings;

        private readonly gaxgrpc::ApiCall<BatchDeleteAccessBindingsRequest, wkt::Empty> _callBatchDeleteAccessBindings;

        private readonly gaxgrpc::ApiCall<GetExpandedDataSetRequest, ExpandedDataSet> _callGetExpandedDataSet;

        private readonly gaxgrpc::ApiCall<ListExpandedDataSetsRequest, ListExpandedDataSetsResponse> _callListExpandedDataSets;

        private readonly gaxgrpc::ApiCall<CreateExpandedDataSetRequest, ExpandedDataSet> _callCreateExpandedDataSet;

        private readonly gaxgrpc::ApiCall<UpdateExpandedDataSetRequest, ExpandedDataSet> _callUpdateExpandedDataSet;

        private readonly gaxgrpc::ApiCall<DeleteExpandedDataSetRequest, wkt::Empty> _callDeleteExpandedDataSet;

        private readonly gaxgrpc::ApiCall<GetChannelGroupRequest, ChannelGroup> _callGetChannelGroup;

        private readonly gaxgrpc::ApiCall<ListChannelGroupsRequest, ListChannelGroupsResponse> _callListChannelGroups;

        private readonly gaxgrpc::ApiCall<CreateChannelGroupRequest, ChannelGroup> _callCreateChannelGroup;

        private readonly gaxgrpc::ApiCall<UpdateChannelGroupRequest, ChannelGroup> _callUpdateChannelGroup;

        private readonly gaxgrpc::ApiCall<DeleteChannelGroupRequest, wkt::Empty> _callDeleteChannelGroup;

        private readonly gaxgrpc::ApiCall<SetAutomatedGa4ConfigurationOptOutRequest, SetAutomatedGa4ConfigurationOptOutResponse> _callSetAutomatedGa4ConfigurationOptOut;

        private readonly gaxgrpc::ApiCall<FetchAutomatedGa4ConfigurationOptOutRequest, FetchAutomatedGa4ConfigurationOptOutResponse> _callFetchAutomatedGa4ConfigurationOptOut;

        private readonly gaxgrpc::ApiCall<CreateBigQueryLinkRequest, BigQueryLink> _callCreateBigQueryLink;

        private readonly gaxgrpc::ApiCall<GetBigQueryLinkRequest, BigQueryLink> _callGetBigQueryLink;

        private readonly gaxgrpc::ApiCall<ListBigQueryLinksRequest, ListBigQueryLinksResponse> _callListBigQueryLinks;

        private readonly gaxgrpc::ApiCall<DeleteBigQueryLinkRequest, wkt::Empty> _callDeleteBigQueryLink;

        private readonly gaxgrpc::ApiCall<UpdateBigQueryLinkRequest, BigQueryLink> _callUpdateBigQueryLink;

        private readonly gaxgrpc::ApiCall<GetEnhancedMeasurementSettingsRequest, EnhancedMeasurementSettings> _callGetEnhancedMeasurementSettings;

        private readonly gaxgrpc::ApiCall<UpdateEnhancedMeasurementSettingsRequest, EnhancedMeasurementSettings> _callUpdateEnhancedMeasurementSettings;

        private readonly gaxgrpc::ApiCall<CreateConnectedSiteTagRequest, CreateConnectedSiteTagResponse> _callCreateConnectedSiteTag;

        private readonly gaxgrpc::ApiCall<DeleteConnectedSiteTagRequest, wkt::Empty> _callDeleteConnectedSiteTag;

        private readonly gaxgrpc::ApiCall<ListConnectedSiteTagsRequest, ListConnectedSiteTagsResponse> _callListConnectedSiteTags;

        private readonly gaxgrpc::ApiCall<FetchConnectedGa4PropertyRequest, FetchConnectedGa4PropertyResponse> _callFetchConnectedGa4Property;

        private readonly gaxgrpc::ApiCall<GetAdSenseLinkRequest, AdSenseLink> _callGetAdSenseLink;

        private readonly gaxgrpc::ApiCall<CreateAdSenseLinkRequest, AdSenseLink> _callCreateAdSenseLink;

        private readonly gaxgrpc::ApiCall<DeleteAdSenseLinkRequest, wkt::Empty> _callDeleteAdSenseLink;

        private readonly gaxgrpc::ApiCall<ListAdSenseLinksRequest, ListAdSenseLinksResponse> _callListAdSenseLinks;

        private readonly gaxgrpc::ApiCall<GetEventCreateRuleRequest, EventCreateRule> _callGetEventCreateRule;

        private readonly gaxgrpc::ApiCall<ListEventCreateRulesRequest, ListEventCreateRulesResponse> _callListEventCreateRules;

        private readonly gaxgrpc::ApiCall<CreateEventCreateRuleRequest, EventCreateRule> _callCreateEventCreateRule;

        private readonly gaxgrpc::ApiCall<UpdateEventCreateRuleRequest, EventCreateRule> _callUpdateEventCreateRule;

        private readonly gaxgrpc::ApiCall<DeleteEventCreateRuleRequest, wkt::Empty> _callDeleteEventCreateRule;

        private readonly gaxgrpc::ApiCall<GetEventEditRuleRequest, EventEditRule> _callGetEventEditRule;

        private readonly gaxgrpc::ApiCall<ListEventEditRulesRequest, ListEventEditRulesResponse> _callListEventEditRules;

        private readonly gaxgrpc::ApiCall<CreateEventEditRuleRequest, EventEditRule> _callCreateEventEditRule;

        private readonly gaxgrpc::ApiCall<UpdateEventEditRuleRequest, EventEditRule> _callUpdateEventEditRule;

        private readonly gaxgrpc::ApiCall<DeleteEventEditRuleRequest, wkt::Empty> _callDeleteEventEditRule;

        private readonly gaxgrpc::ApiCall<ReorderEventEditRulesRequest, wkt::Empty> _callReorderEventEditRules;

        private readonly gaxgrpc::ApiCall<UpdateDataRedactionSettingsRequest, DataRedactionSettings> _callUpdateDataRedactionSettings;

        private readonly gaxgrpc::ApiCall<GetDataRedactionSettingsRequest, DataRedactionSettings> _callGetDataRedactionSettings;

        private readonly gaxgrpc::ApiCall<GetCalculatedMetricRequest, CalculatedMetric> _callGetCalculatedMetric;

        private readonly gaxgrpc::ApiCall<CreateCalculatedMetricRequest, CalculatedMetric> _callCreateCalculatedMetric;

        private readonly gaxgrpc::ApiCall<ListCalculatedMetricsRequest, ListCalculatedMetricsResponse> _callListCalculatedMetrics;

        private readonly gaxgrpc::ApiCall<UpdateCalculatedMetricRequest, CalculatedMetric> _callUpdateCalculatedMetric;

        private readonly gaxgrpc::ApiCall<DeleteCalculatedMetricRequest, wkt::Empty> _callDeleteCalculatedMetric;

        private readonly gaxgrpc::ApiCall<CreateRollupPropertyRequest, CreateRollupPropertyResponse> _callCreateRollupProperty;

        private readonly gaxgrpc::ApiCall<GetRollupPropertySourceLinkRequest, RollupPropertySourceLink> _callGetRollupPropertySourceLink;

        private readonly gaxgrpc::ApiCall<ListRollupPropertySourceLinksRequest, ListRollupPropertySourceLinksResponse> _callListRollupPropertySourceLinks;

        private readonly gaxgrpc::ApiCall<CreateRollupPropertySourceLinkRequest, RollupPropertySourceLink> _callCreateRollupPropertySourceLink;

        private readonly gaxgrpc::ApiCall<DeleteRollupPropertySourceLinkRequest, wkt::Empty> _callDeleteRollupPropertySourceLink;

        private readonly gaxgrpc::ApiCall<ProvisionSubpropertyRequest, ProvisionSubpropertyResponse> _callProvisionSubproperty;

        private readonly gaxgrpc::ApiCall<CreateSubpropertyEventFilterRequest, SubpropertyEventFilter> _callCreateSubpropertyEventFilter;

        private readonly gaxgrpc::ApiCall<GetSubpropertyEventFilterRequest, SubpropertyEventFilter> _callGetSubpropertyEventFilter;

        private readonly gaxgrpc::ApiCall<ListSubpropertyEventFiltersRequest, ListSubpropertyEventFiltersResponse> _callListSubpropertyEventFilters;

        private readonly gaxgrpc::ApiCall<UpdateSubpropertyEventFilterRequest, SubpropertyEventFilter> _callUpdateSubpropertyEventFilter;

        private readonly gaxgrpc::ApiCall<DeleteSubpropertyEventFilterRequest, wkt::Empty> _callDeleteSubpropertyEventFilter;

        /// <summary>
        /// Constructs a client wrapper for the AnalyticsAdminService service, with the specified gRPC client and
        /// settings.
        /// </summary>
        /// <param name="grpcClient">The underlying gRPC client.</param>
        /// <param name="settings">The base <see cref="AnalyticsAdminServiceSettings"/> used within this client.</param>
        /// <param name="logger">Optional <see cref="mel::ILogger"/> to use within this client.</param>
        public AnalyticsAdminServiceClientImpl(AnalyticsAdminService.AnalyticsAdminServiceClient grpcClient, AnalyticsAdminServiceSettings settings, mel::ILogger logger)
        {
            GrpcClient = grpcClient;
            AnalyticsAdminServiceSettings effectiveSettings = settings ?? AnalyticsAdminServiceSettings.GetDefault();
            gaxgrpc::ClientHelper clientHelper = new gaxgrpc::ClientHelper(new gaxgrpc::ClientHelper.Options
            {
                Settings = effectiveSettings,
                Logger = logger,
            });
            _callGetAccount = clientHelper.BuildApiCall<GetAccountRequest, Account>("GetAccount", grpcClient.GetAccountAsync, grpcClient.GetAccount, effectiveSettings.GetAccountSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetAccount);
            Modify_GetAccountApiCall(ref _callGetAccount);
            _callListAccounts = clientHelper.BuildApiCall<ListAccountsRequest, ListAccountsResponse>("ListAccounts", grpcClient.ListAccountsAsync, grpcClient.ListAccounts, effectiveSettings.ListAccountsSettings);
            Modify_ApiCall(ref _callListAccounts);
            Modify_ListAccountsApiCall(ref _callListAccounts);
            _callDeleteAccount = clientHelper.BuildApiCall<DeleteAccountRequest, wkt::Empty>("DeleteAccount", grpcClient.DeleteAccountAsync, grpcClient.DeleteAccount, effectiveSettings.DeleteAccountSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteAccount);
            Modify_DeleteAccountApiCall(ref _callDeleteAccount);
            _callUpdateAccount = clientHelper.BuildApiCall<UpdateAccountRequest, Account>("UpdateAccount", grpcClient.UpdateAccountAsync, grpcClient.UpdateAccount, effectiveSettings.UpdateAccountSettings).WithGoogleRequestParam("account.name", request => request.Account?.Name);
            Modify_ApiCall(ref _callUpdateAccount);
            Modify_UpdateAccountApiCall(ref _callUpdateAccount);
            _callProvisionAccountTicket = clientHelper.BuildApiCall<ProvisionAccountTicketRequest, ProvisionAccountTicketResponse>("ProvisionAccountTicket", grpcClient.ProvisionAccountTicketAsync, grpcClient.ProvisionAccountTicket, effectiveSettings.ProvisionAccountTicketSettings);
            Modify_ApiCall(ref _callProvisionAccountTicket);
            Modify_ProvisionAccountTicketApiCall(ref _callProvisionAccountTicket);
            _callListAccountSummaries = clientHelper.BuildApiCall<ListAccountSummariesRequest, ListAccountSummariesResponse>("ListAccountSummaries", grpcClient.ListAccountSummariesAsync, grpcClient.ListAccountSummaries, effectiveSettings.ListAccountSummariesSettings);
            Modify_ApiCall(ref _callListAccountSummaries);
            Modify_ListAccountSummariesApiCall(ref _callListAccountSummaries);
            _callGetProperty = clientHelper.BuildApiCall<GetPropertyRequest, Property>("GetProperty", grpcClient.GetPropertyAsync, grpcClient.GetProperty, effectiveSettings.GetPropertySettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetProperty);
            Modify_GetPropertyApiCall(ref _callGetProperty);
            _callListProperties = clientHelper.BuildApiCall<ListPropertiesRequest, ListPropertiesResponse>("ListProperties", grpcClient.ListPropertiesAsync, grpcClient.ListProperties, effectiveSettings.ListPropertiesSettings);
            Modify_ApiCall(ref _callListProperties);
            Modify_ListPropertiesApiCall(ref _callListProperties);
            _callCreateProperty = clientHelper.BuildApiCall<CreatePropertyRequest, Property>("CreateProperty", grpcClient.CreatePropertyAsync, grpcClient.CreateProperty, effectiveSettings.CreatePropertySettings);
            Modify_ApiCall(ref _callCreateProperty);
            Modify_CreatePropertyApiCall(ref _callCreateProperty);
            _callDeleteProperty = clientHelper.BuildApiCall<DeletePropertyRequest, Property>("DeleteProperty", grpcClient.DeletePropertyAsync, grpcClient.DeleteProperty, effectiveSettings.DeletePropertySettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteProperty);
            Modify_DeletePropertyApiCall(ref _callDeleteProperty);
            _callUpdateProperty = clientHelper.BuildApiCall<UpdatePropertyRequest, Property>("UpdateProperty", grpcClient.UpdatePropertyAsync, grpcClient.UpdateProperty, effectiveSettings.UpdatePropertySettings).WithGoogleRequestParam("property.name", request => request.Property?.Name);
            Modify_ApiCall(ref _callUpdateProperty);
            Modify_UpdatePropertyApiCall(ref _callUpdateProperty);
            _callCreateFirebaseLink = clientHelper.BuildApiCall<CreateFirebaseLinkRequest, FirebaseLink>("CreateFirebaseLink", grpcClient.CreateFirebaseLinkAsync, grpcClient.CreateFirebaseLink, effectiveSettings.CreateFirebaseLinkSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateFirebaseLink);
            Modify_CreateFirebaseLinkApiCall(ref _callCreateFirebaseLink);
            _callDeleteFirebaseLink = clientHelper.BuildApiCall<DeleteFirebaseLinkRequest, wkt::Empty>("DeleteFirebaseLink", grpcClient.DeleteFirebaseLinkAsync, grpcClient.DeleteFirebaseLink, effectiveSettings.DeleteFirebaseLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteFirebaseLink);
            Modify_DeleteFirebaseLinkApiCall(ref _callDeleteFirebaseLink);
            _callListFirebaseLinks = clientHelper.BuildApiCall<ListFirebaseLinksRequest, ListFirebaseLinksResponse>("ListFirebaseLinks", grpcClient.ListFirebaseLinksAsync, grpcClient.ListFirebaseLinks, effectiveSettings.ListFirebaseLinksSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListFirebaseLinks);
            Modify_ListFirebaseLinksApiCall(ref _callListFirebaseLinks);
            _callGetGlobalSiteTag = clientHelper.BuildApiCall<GetGlobalSiteTagRequest, GlobalSiteTag>("GetGlobalSiteTag", grpcClient.GetGlobalSiteTagAsync, grpcClient.GetGlobalSiteTag, effectiveSettings.GetGlobalSiteTagSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetGlobalSiteTag);
            Modify_GetGlobalSiteTagApiCall(ref _callGetGlobalSiteTag);
            _callCreateGoogleAdsLink = clientHelper.BuildApiCall<CreateGoogleAdsLinkRequest, GoogleAdsLink>("CreateGoogleAdsLink", grpcClient.CreateGoogleAdsLinkAsync, grpcClient.CreateGoogleAdsLink, effectiveSettings.CreateGoogleAdsLinkSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateGoogleAdsLink);
            Modify_CreateGoogleAdsLinkApiCall(ref _callCreateGoogleAdsLink);
            _callUpdateGoogleAdsLink = clientHelper.BuildApiCall<UpdateGoogleAdsLinkRequest, GoogleAdsLink>("UpdateGoogleAdsLink", grpcClient.UpdateGoogleAdsLinkAsync, grpcClient.UpdateGoogleAdsLink, effectiveSettings.UpdateGoogleAdsLinkSettings).WithGoogleRequestParam("google_ads_link.name", request => request.GoogleAdsLink?.Name);
            Modify_ApiCall(ref _callUpdateGoogleAdsLink);
            Modify_UpdateGoogleAdsLinkApiCall(ref _callUpdateGoogleAdsLink);
            _callDeleteGoogleAdsLink = clientHelper.BuildApiCall<DeleteGoogleAdsLinkRequest, wkt::Empty>("DeleteGoogleAdsLink", grpcClient.DeleteGoogleAdsLinkAsync, grpcClient.DeleteGoogleAdsLink, effectiveSettings.DeleteGoogleAdsLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteGoogleAdsLink);
            Modify_DeleteGoogleAdsLinkApiCall(ref _callDeleteGoogleAdsLink);
            _callListGoogleAdsLinks = clientHelper.BuildApiCall<ListGoogleAdsLinksRequest, ListGoogleAdsLinksResponse>("ListGoogleAdsLinks", grpcClient.ListGoogleAdsLinksAsync, grpcClient.ListGoogleAdsLinks, effectiveSettings.ListGoogleAdsLinksSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListGoogleAdsLinks);
            Modify_ListGoogleAdsLinksApiCall(ref _callListGoogleAdsLinks);
            _callGetDataSharingSettings = clientHelper.BuildApiCall<GetDataSharingSettingsRequest, DataSharingSettings>("GetDataSharingSettings", grpcClient.GetDataSharingSettingsAsync, grpcClient.GetDataSharingSettings, effectiveSettings.GetDataSharingSettingsSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetDataSharingSettings);
            Modify_GetDataSharingSettingsApiCall(ref _callGetDataSharingSettings);
            _callGetMeasurementProtocolSecret = clientHelper.BuildApiCall<GetMeasurementProtocolSecretRequest, MeasurementProtocolSecret>("GetMeasurementProtocolSecret", grpcClient.GetMeasurementProtocolSecretAsync, grpcClient.GetMeasurementProtocolSecret, effectiveSettings.GetMeasurementProtocolSecretSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetMeasurementProtocolSecret);
            Modify_GetMeasurementProtocolSecretApiCall(ref _callGetMeasurementProtocolSecret);
            _callListMeasurementProtocolSecrets = clientHelper.BuildApiCall<ListMeasurementProtocolSecretsRequest, ListMeasurementProtocolSecretsResponse>("ListMeasurementProtocolSecrets", grpcClient.ListMeasurementProtocolSecretsAsync, grpcClient.ListMeasurementProtocolSecrets, effectiveSettings.ListMeasurementProtocolSecretsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListMeasurementProtocolSecrets);
            Modify_ListMeasurementProtocolSecretsApiCall(ref _callListMeasurementProtocolSecrets);
            _callCreateMeasurementProtocolSecret = clientHelper.BuildApiCall<CreateMeasurementProtocolSecretRequest, MeasurementProtocolSecret>("CreateMeasurementProtocolSecret", grpcClient.CreateMeasurementProtocolSecretAsync, grpcClient.CreateMeasurementProtocolSecret, effectiveSettings.CreateMeasurementProtocolSecretSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateMeasurementProtocolSecret);
            Modify_CreateMeasurementProtocolSecretApiCall(ref _callCreateMeasurementProtocolSecret);
            _callDeleteMeasurementProtocolSecret = clientHelper.BuildApiCall<DeleteMeasurementProtocolSecretRequest, wkt::Empty>("DeleteMeasurementProtocolSecret", grpcClient.DeleteMeasurementProtocolSecretAsync, grpcClient.DeleteMeasurementProtocolSecret, effectiveSettings.DeleteMeasurementProtocolSecretSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteMeasurementProtocolSecret);
            Modify_DeleteMeasurementProtocolSecretApiCall(ref _callDeleteMeasurementProtocolSecret);
            _callUpdateMeasurementProtocolSecret = clientHelper.BuildApiCall<UpdateMeasurementProtocolSecretRequest, MeasurementProtocolSecret>("UpdateMeasurementProtocolSecret", grpcClient.UpdateMeasurementProtocolSecretAsync, grpcClient.UpdateMeasurementProtocolSecret, effectiveSettings.UpdateMeasurementProtocolSecretSettings).WithGoogleRequestParam("measurement_protocol_secret.name", request => request.MeasurementProtocolSecret?.Name);
            Modify_ApiCall(ref _callUpdateMeasurementProtocolSecret);
            Modify_UpdateMeasurementProtocolSecretApiCall(ref _callUpdateMeasurementProtocolSecret);
            _callAcknowledgeUserDataCollection = clientHelper.BuildApiCall<AcknowledgeUserDataCollectionRequest, AcknowledgeUserDataCollectionResponse>("AcknowledgeUserDataCollection", grpcClient.AcknowledgeUserDataCollectionAsync, grpcClient.AcknowledgeUserDataCollection, effectiveSettings.AcknowledgeUserDataCollectionSettings).WithGoogleRequestParam("property", request => request.Property);
            Modify_ApiCall(ref _callAcknowledgeUserDataCollection);
            Modify_AcknowledgeUserDataCollectionApiCall(ref _callAcknowledgeUserDataCollection);
            _callGetSKAdNetworkConversionValueSchema = clientHelper.BuildApiCall<GetSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema>("GetSKAdNetworkConversionValueSchema", grpcClient.GetSKAdNetworkConversionValueSchemaAsync, grpcClient.GetSKAdNetworkConversionValueSchema, effectiveSettings.GetSKAdNetworkConversionValueSchemaSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetSKAdNetworkConversionValueSchema);
            Modify_GetSKAdNetworkConversionValueSchemaApiCall(ref _callGetSKAdNetworkConversionValueSchema);
            _callCreateSKAdNetworkConversionValueSchema = clientHelper.BuildApiCall<CreateSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema>("CreateSKAdNetworkConversionValueSchema", grpcClient.CreateSKAdNetworkConversionValueSchemaAsync, grpcClient.CreateSKAdNetworkConversionValueSchema, effectiveSettings.CreateSKAdNetworkConversionValueSchemaSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateSKAdNetworkConversionValueSchema);
            Modify_CreateSKAdNetworkConversionValueSchemaApiCall(ref _callCreateSKAdNetworkConversionValueSchema);
            _callDeleteSKAdNetworkConversionValueSchema = clientHelper.BuildApiCall<DeleteSKAdNetworkConversionValueSchemaRequest, wkt::Empty>("DeleteSKAdNetworkConversionValueSchema", grpcClient.DeleteSKAdNetworkConversionValueSchemaAsync, grpcClient.DeleteSKAdNetworkConversionValueSchema, effectiveSettings.DeleteSKAdNetworkConversionValueSchemaSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteSKAdNetworkConversionValueSchema);
            Modify_DeleteSKAdNetworkConversionValueSchemaApiCall(ref _callDeleteSKAdNetworkConversionValueSchema);
            _callUpdateSKAdNetworkConversionValueSchema = clientHelper.BuildApiCall<UpdateSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema>("UpdateSKAdNetworkConversionValueSchema", grpcClient.UpdateSKAdNetworkConversionValueSchemaAsync, grpcClient.UpdateSKAdNetworkConversionValueSchema, effectiveSettings.UpdateSKAdNetworkConversionValueSchemaSettings).WithGoogleRequestParam("skadnetwork_conversion_value_schema.name", request => request.SkadnetworkConversionValueSchema?.Name);
            Modify_ApiCall(ref _callUpdateSKAdNetworkConversionValueSchema);
            Modify_UpdateSKAdNetworkConversionValueSchemaApiCall(ref _callUpdateSKAdNetworkConversionValueSchema);
            _callListSKAdNetworkConversionValueSchemas = clientHelper.BuildApiCall<ListSKAdNetworkConversionValueSchemasRequest, ListSKAdNetworkConversionValueSchemasResponse>("ListSKAdNetworkConversionValueSchemas", grpcClient.ListSKAdNetworkConversionValueSchemasAsync, grpcClient.ListSKAdNetworkConversionValueSchemas, effectiveSettings.ListSKAdNetworkConversionValueSchemasSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListSKAdNetworkConversionValueSchemas);
            Modify_ListSKAdNetworkConversionValueSchemasApiCall(ref _callListSKAdNetworkConversionValueSchemas);
            _callSearchChangeHistoryEvents = clientHelper.BuildApiCall<SearchChangeHistoryEventsRequest, SearchChangeHistoryEventsResponse>("SearchChangeHistoryEvents", grpcClient.SearchChangeHistoryEventsAsync, grpcClient.SearchChangeHistoryEvents, effectiveSettings.SearchChangeHistoryEventsSettings).WithGoogleRequestParam("account", request => request.Account);
            Modify_ApiCall(ref _callSearchChangeHistoryEvents);
            Modify_SearchChangeHistoryEventsApiCall(ref _callSearchChangeHistoryEvents);
            _callGetGoogleSignalsSettings = clientHelper.BuildApiCall<GetGoogleSignalsSettingsRequest, GoogleSignalsSettings>("GetGoogleSignalsSettings", grpcClient.GetGoogleSignalsSettingsAsync, grpcClient.GetGoogleSignalsSettings, effectiveSettings.GetGoogleSignalsSettingsSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetGoogleSignalsSettings);
            Modify_GetGoogleSignalsSettingsApiCall(ref _callGetGoogleSignalsSettings);
            _callUpdateGoogleSignalsSettings = clientHelper.BuildApiCall<UpdateGoogleSignalsSettingsRequest, GoogleSignalsSettings>("UpdateGoogleSignalsSettings", grpcClient.UpdateGoogleSignalsSettingsAsync, grpcClient.UpdateGoogleSignalsSettings, effectiveSettings.UpdateGoogleSignalsSettingsSettings).WithGoogleRequestParam("google_signals_settings.name", request => request.GoogleSignalsSettings?.Name);
            Modify_ApiCall(ref _callUpdateGoogleSignalsSettings);
            Modify_UpdateGoogleSignalsSettingsApiCall(ref _callUpdateGoogleSignalsSettings);
#pragma warning disable CS0612
            _callCreateConversionEvent = clientHelper.BuildApiCall<CreateConversionEventRequest, ConversionEvent>("CreateConversionEvent", grpcClient.CreateConversionEventAsync, grpcClient.CreateConversionEvent, effectiveSettings.CreateConversionEventSettings).WithGoogleRequestParam("parent", request => request.Parent);
#pragma warning restore CS0612
            Modify_ApiCall(ref _callCreateConversionEvent);
            Modify_CreateConversionEventApiCall(ref _callCreateConversionEvent);
#pragma warning disable CS0612
            _callUpdateConversionEvent = clientHelper.BuildApiCall<UpdateConversionEventRequest, ConversionEvent>("UpdateConversionEvent", grpcClient.UpdateConversionEventAsync, grpcClient.UpdateConversionEvent, effectiveSettings.UpdateConversionEventSettings).WithGoogleRequestParam("conversion_event.name", request => request.ConversionEvent?.Name);
#pragma warning restore CS0612
            Modify_ApiCall(ref _callUpdateConversionEvent);
            Modify_UpdateConversionEventApiCall(ref _callUpdateConversionEvent);
#pragma warning disable CS0612
            _callGetConversionEvent = clientHelper.BuildApiCall<GetConversionEventRequest, ConversionEvent>("GetConversionEvent", grpcClient.GetConversionEventAsync, grpcClient.GetConversionEvent, effectiveSettings.GetConversionEventSettings).WithGoogleRequestParam("name", request => request.Name);
#pragma warning restore CS0612
            Modify_ApiCall(ref _callGetConversionEvent);
            Modify_GetConversionEventApiCall(ref _callGetConversionEvent);
#pragma warning disable CS0612
            _callDeleteConversionEvent = clientHelper.BuildApiCall<DeleteConversionEventRequest, wkt::Empty>("DeleteConversionEvent", grpcClient.DeleteConversionEventAsync, grpcClient.DeleteConversionEvent, effectiveSettings.DeleteConversionEventSettings).WithGoogleRequestParam("name", request => request.Name);
#pragma warning restore CS0612
            Modify_ApiCall(ref _callDeleteConversionEvent);
            Modify_DeleteConversionEventApiCall(ref _callDeleteConversionEvent);
#pragma warning disable CS0612
            _callListConversionEvents = clientHelper.BuildApiCall<ListConversionEventsRequest, ListConversionEventsResponse>("ListConversionEvents", grpcClient.ListConversionEventsAsync, grpcClient.ListConversionEvents, effectiveSettings.ListConversionEventsSettings).WithGoogleRequestParam("parent", request => request.Parent);
#pragma warning restore CS0612
            Modify_ApiCall(ref _callListConversionEvents);
            Modify_ListConversionEventsApiCall(ref _callListConversionEvents);
            _callCreateKeyEvent = clientHelper.BuildApiCall<CreateKeyEventRequest, KeyEvent>("CreateKeyEvent", grpcClient.CreateKeyEventAsync, grpcClient.CreateKeyEvent, effectiveSettings.CreateKeyEventSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateKeyEvent);
            Modify_CreateKeyEventApiCall(ref _callCreateKeyEvent);
            _callUpdateKeyEvent = clientHelper.BuildApiCall<UpdateKeyEventRequest, KeyEvent>("UpdateKeyEvent", grpcClient.UpdateKeyEventAsync, grpcClient.UpdateKeyEvent, effectiveSettings.UpdateKeyEventSettings).WithGoogleRequestParam("key_event.name", request => request.KeyEvent?.Name);
            Modify_ApiCall(ref _callUpdateKeyEvent);
            Modify_UpdateKeyEventApiCall(ref _callUpdateKeyEvent);
            _callGetKeyEvent = clientHelper.BuildApiCall<GetKeyEventRequest, KeyEvent>("GetKeyEvent", grpcClient.GetKeyEventAsync, grpcClient.GetKeyEvent, effectiveSettings.GetKeyEventSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetKeyEvent);
            Modify_GetKeyEventApiCall(ref _callGetKeyEvent);
            _callDeleteKeyEvent = clientHelper.BuildApiCall<DeleteKeyEventRequest, wkt::Empty>("DeleteKeyEvent", grpcClient.DeleteKeyEventAsync, grpcClient.DeleteKeyEvent, effectiveSettings.DeleteKeyEventSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteKeyEvent);
            Modify_DeleteKeyEventApiCall(ref _callDeleteKeyEvent);
            _callListKeyEvents = clientHelper.BuildApiCall<ListKeyEventsRequest, ListKeyEventsResponse>("ListKeyEvents", grpcClient.ListKeyEventsAsync, grpcClient.ListKeyEvents, effectiveSettings.ListKeyEventsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListKeyEvents);
            Modify_ListKeyEventsApiCall(ref _callListKeyEvents);
            _callGetDisplayVideo360AdvertiserLink = clientHelper.BuildApiCall<GetDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink>("GetDisplayVideo360AdvertiserLink", grpcClient.GetDisplayVideo360AdvertiserLinkAsync, grpcClient.GetDisplayVideo360AdvertiserLink, effectiveSettings.GetDisplayVideo360AdvertiserLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetDisplayVideo360AdvertiserLink);
            Modify_GetDisplayVideo360AdvertiserLinkApiCall(ref _callGetDisplayVideo360AdvertiserLink);
            _callListDisplayVideo360AdvertiserLinks = clientHelper.BuildApiCall<ListDisplayVideo360AdvertiserLinksRequest, ListDisplayVideo360AdvertiserLinksResponse>("ListDisplayVideo360AdvertiserLinks", grpcClient.ListDisplayVideo360AdvertiserLinksAsync, grpcClient.ListDisplayVideo360AdvertiserLinks, effectiveSettings.ListDisplayVideo360AdvertiserLinksSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListDisplayVideo360AdvertiserLinks);
            Modify_ListDisplayVideo360AdvertiserLinksApiCall(ref _callListDisplayVideo360AdvertiserLinks);
            _callCreateDisplayVideo360AdvertiserLink = clientHelper.BuildApiCall<CreateDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink>("CreateDisplayVideo360AdvertiserLink", grpcClient.CreateDisplayVideo360AdvertiserLinkAsync, grpcClient.CreateDisplayVideo360AdvertiserLink, effectiveSettings.CreateDisplayVideo360AdvertiserLinkSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateDisplayVideo360AdvertiserLink);
            Modify_CreateDisplayVideo360AdvertiserLinkApiCall(ref _callCreateDisplayVideo360AdvertiserLink);
            _callDeleteDisplayVideo360AdvertiserLink = clientHelper.BuildApiCall<DeleteDisplayVideo360AdvertiserLinkRequest, wkt::Empty>("DeleteDisplayVideo360AdvertiserLink", grpcClient.DeleteDisplayVideo360AdvertiserLinkAsync, grpcClient.DeleteDisplayVideo360AdvertiserLink, effectiveSettings.DeleteDisplayVideo360AdvertiserLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteDisplayVideo360AdvertiserLink);
            Modify_DeleteDisplayVideo360AdvertiserLinkApiCall(ref _callDeleteDisplayVideo360AdvertiserLink);
            _callUpdateDisplayVideo360AdvertiserLink = clientHelper.BuildApiCall<UpdateDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink>("UpdateDisplayVideo360AdvertiserLink", grpcClient.UpdateDisplayVideo360AdvertiserLinkAsync, grpcClient.UpdateDisplayVideo360AdvertiserLink, effectiveSettings.UpdateDisplayVideo360AdvertiserLinkSettings).WithGoogleRequestParam("display_video_360_advertiser_link.name", request => request.DisplayVideo360AdvertiserLink?.Name);
            Modify_ApiCall(ref _callUpdateDisplayVideo360AdvertiserLink);
            Modify_UpdateDisplayVideo360AdvertiserLinkApiCall(ref _callUpdateDisplayVideo360AdvertiserLink);
            _callGetDisplayVideo360AdvertiserLinkProposal = clientHelper.BuildApiCall<GetDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal>("GetDisplayVideo360AdvertiserLinkProposal", grpcClient.GetDisplayVideo360AdvertiserLinkProposalAsync, grpcClient.GetDisplayVideo360AdvertiserLinkProposal, effectiveSettings.GetDisplayVideo360AdvertiserLinkProposalSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetDisplayVideo360AdvertiserLinkProposal);
            Modify_GetDisplayVideo360AdvertiserLinkProposalApiCall(ref _callGetDisplayVideo360AdvertiserLinkProposal);
            _callListDisplayVideo360AdvertiserLinkProposals = clientHelper.BuildApiCall<ListDisplayVideo360AdvertiserLinkProposalsRequest, ListDisplayVideo360AdvertiserLinkProposalsResponse>("ListDisplayVideo360AdvertiserLinkProposals", grpcClient.ListDisplayVideo360AdvertiserLinkProposalsAsync, grpcClient.ListDisplayVideo360AdvertiserLinkProposals, effectiveSettings.ListDisplayVideo360AdvertiserLinkProposalsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListDisplayVideo360AdvertiserLinkProposals);
            Modify_ListDisplayVideo360AdvertiserLinkProposalsApiCall(ref _callListDisplayVideo360AdvertiserLinkProposals);
            _callCreateDisplayVideo360AdvertiserLinkProposal = clientHelper.BuildApiCall<CreateDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal>("CreateDisplayVideo360AdvertiserLinkProposal", grpcClient.CreateDisplayVideo360AdvertiserLinkProposalAsync, grpcClient.CreateDisplayVideo360AdvertiserLinkProposal, effectiveSettings.CreateDisplayVideo360AdvertiserLinkProposalSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateDisplayVideo360AdvertiserLinkProposal);
            Modify_CreateDisplayVideo360AdvertiserLinkProposalApiCall(ref _callCreateDisplayVideo360AdvertiserLinkProposal);
            _callDeleteDisplayVideo360AdvertiserLinkProposal = clientHelper.BuildApiCall<DeleteDisplayVideo360AdvertiserLinkProposalRequest, wkt::Empty>("DeleteDisplayVideo360AdvertiserLinkProposal", grpcClient.DeleteDisplayVideo360AdvertiserLinkProposalAsync, grpcClient.DeleteDisplayVideo360AdvertiserLinkProposal, effectiveSettings.DeleteDisplayVideo360AdvertiserLinkProposalSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteDisplayVideo360AdvertiserLinkProposal);
            Modify_DeleteDisplayVideo360AdvertiserLinkProposalApiCall(ref _callDeleteDisplayVideo360AdvertiserLinkProposal);
            _callApproveDisplayVideo360AdvertiserLinkProposal = clientHelper.BuildApiCall<ApproveDisplayVideo360AdvertiserLinkProposalRequest, ApproveDisplayVideo360AdvertiserLinkProposalResponse>("ApproveDisplayVideo360AdvertiserLinkProposal", grpcClient.ApproveDisplayVideo360AdvertiserLinkProposalAsync, grpcClient.ApproveDisplayVideo360AdvertiserLinkProposal, effectiveSettings.ApproveDisplayVideo360AdvertiserLinkProposalSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callApproveDisplayVideo360AdvertiserLinkProposal);
            Modify_ApproveDisplayVideo360AdvertiserLinkProposalApiCall(ref _callApproveDisplayVideo360AdvertiserLinkProposal);
            _callCancelDisplayVideo360AdvertiserLinkProposal = clientHelper.BuildApiCall<CancelDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal>("CancelDisplayVideo360AdvertiserLinkProposal", grpcClient.CancelDisplayVideo360AdvertiserLinkProposalAsync, grpcClient.CancelDisplayVideo360AdvertiserLinkProposal, effectiveSettings.CancelDisplayVideo360AdvertiserLinkProposalSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callCancelDisplayVideo360AdvertiserLinkProposal);
            Modify_CancelDisplayVideo360AdvertiserLinkProposalApiCall(ref _callCancelDisplayVideo360AdvertiserLinkProposal);
            _callCreateCustomDimension = clientHelper.BuildApiCall<CreateCustomDimensionRequest, CustomDimension>("CreateCustomDimension", grpcClient.CreateCustomDimensionAsync, grpcClient.CreateCustomDimension, effectiveSettings.CreateCustomDimensionSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateCustomDimension);
            Modify_CreateCustomDimensionApiCall(ref _callCreateCustomDimension);
            _callUpdateCustomDimension = clientHelper.BuildApiCall<UpdateCustomDimensionRequest, CustomDimension>("UpdateCustomDimension", grpcClient.UpdateCustomDimensionAsync, grpcClient.UpdateCustomDimension, effectiveSettings.UpdateCustomDimensionSettings).WithGoogleRequestParam("custom_dimension.name", request => request.CustomDimension?.Name);
            Modify_ApiCall(ref _callUpdateCustomDimension);
            Modify_UpdateCustomDimensionApiCall(ref _callUpdateCustomDimension);
            _callListCustomDimensions = clientHelper.BuildApiCall<ListCustomDimensionsRequest, ListCustomDimensionsResponse>("ListCustomDimensions", grpcClient.ListCustomDimensionsAsync, grpcClient.ListCustomDimensions, effectiveSettings.ListCustomDimensionsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListCustomDimensions);
            Modify_ListCustomDimensionsApiCall(ref _callListCustomDimensions);
            _callArchiveCustomDimension = clientHelper.BuildApiCall<ArchiveCustomDimensionRequest, wkt::Empty>("ArchiveCustomDimension", grpcClient.ArchiveCustomDimensionAsync, grpcClient.ArchiveCustomDimension, effectiveSettings.ArchiveCustomDimensionSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callArchiveCustomDimension);
            Modify_ArchiveCustomDimensionApiCall(ref _callArchiveCustomDimension);
            _callGetCustomDimension = clientHelper.BuildApiCall<GetCustomDimensionRequest, CustomDimension>("GetCustomDimension", grpcClient.GetCustomDimensionAsync, grpcClient.GetCustomDimension, effectiveSettings.GetCustomDimensionSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetCustomDimension);
            Modify_GetCustomDimensionApiCall(ref _callGetCustomDimension);
            _callCreateCustomMetric = clientHelper.BuildApiCall<CreateCustomMetricRequest, CustomMetric>("CreateCustomMetric", grpcClient.CreateCustomMetricAsync, grpcClient.CreateCustomMetric, effectiveSettings.CreateCustomMetricSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateCustomMetric);
            Modify_CreateCustomMetricApiCall(ref _callCreateCustomMetric);
            _callUpdateCustomMetric = clientHelper.BuildApiCall<UpdateCustomMetricRequest, CustomMetric>("UpdateCustomMetric", grpcClient.UpdateCustomMetricAsync, grpcClient.UpdateCustomMetric, effectiveSettings.UpdateCustomMetricSettings).WithGoogleRequestParam("custom_metric.name", request => request.CustomMetric?.Name);
            Modify_ApiCall(ref _callUpdateCustomMetric);
            Modify_UpdateCustomMetricApiCall(ref _callUpdateCustomMetric);
            _callListCustomMetrics = clientHelper.BuildApiCall<ListCustomMetricsRequest, ListCustomMetricsResponse>("ListCustomMetrics", grpcClient.ListCustomMetricsAsync, grpcClient.ListCustomMetrics, effectiveSettings.ListCustomMetricsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListCustomMetrics);
            Modify_ListCustomMetricsApiCall(ref _callListCustomMetrics);
            _callArchiveCustomMetric = clientHelper.BuildApiCall<ArchiveCustomMetricRequest, wkt::Empty>("ArchiveCustomMetric", grpcClient.ArchiveCustomMetricAsync, grpcClient.ArchiveCustomMetric, effectiveSettings.ArchiveCustomMetricSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callArchiveCustomMetric);
            Modify_ArchiveCustomMetricApiCall(ref _callArchiveCustomMetric);
            _callGetCustomMetric = clientHelper.BuildApiCall<GetCustomMetricRequest, CustomMetric>("GetCustomMetric", grpcClient.GetCustomMetricAsync, grpcClient.GetCustomMetric, effectiveSettings.GetCustomMetricSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetCustomMetric);
            Modify_GetCustomMetricApiCall(ref _callGetCustomMetric);
            _callGetDataRetentionSettings = clientHelper.BuildApiCall<GetDataRetentionSettingsRequest, DataRetentionSettings>("GetDataRetentionSettings", grpcClient.GetDataRetentionSettingsAsync, grpcClient.GetDataRetentionSettings, effectiveSettings.GetDataRetentionSettingsSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetDataRetentionSettings);
            Modify_GetDataRetentionSettingsApiCall(ref _callGetDataRetentionSettings);
            _callUpdateDataRetentionSettings = clientHelper.BuildApiCall<UpdateDataRetentionSettingsRequest, DataRetentionSettings>("UpdateDataRetentionSettings", grpcClient.UpdateDataRetentionSettingsAsync, grpcClient.UpdateDataRetentionSettings, effectiveSettings.UpdateDataRetentionSettingsSettings).WithGoogleRequestParam("data_retention_settings.name", request => request.DataRetentionSettings?.Name);
            Modify_ApiCall(ref _callUpdateDataRetentionSettings);
            Modify_UpdateDataRetentionSettingsApiCall(ref _callUpdateDataRetentionSettings);
            _callCreateDataStream = clientHelper.BuildApiCall<CreateDataStreamRequest, DataStream>("CreateDataStream", grpcClient.CreateDataStreamAsync, grpcClient.CreateDataStream, effectiveSettings.CreateDataStreamSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateDataStream);
            Modify_CreateDataStreamApiCall(ref _callCreateDataStream);
            _callDeleteDataStream = clientHelper.BuildApiCall<DeleteDataStreamRequest, wkt::Empty>("DeleteDataStream", grpcClient.DeleteDataStreamAsync, grpcClient.DeleteDataStream, effectiveSettings.DeleteDataStreamSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteDataStream);
            Modify_DeleteDataStreamApiCall(ref _callDeleteDataStream);
            _callUpdateDataStream = clientHelper.BuildApiCall<UpdateDataStreamRequest, DataStream>("UpdateDataStream", grpcClient.UpdateDataStreamAsync, grpcClient.UpdateDataStream, effectiveSettings.UpdateDataStreamSettings).WithGoogleRequestParam("data_stream.name", request => request.DataStream?.Name);
            Modify_ApiCall(ref _callUpdateDataStream);
            Modify_UpdateDataStreamApiCall(ref _callUpdateDataStream);
            _callListDataStreams = clientHelper.BuildApiCall<ListDataStreamsRequest, ListDataStreamsResponse>("ListDataStreams", grpcClient.ListDataStreamsAsync, grpcClient.ListDataStreams, effectiveSettings.ListDataStreamsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListDataStreams);
            Modify_ListDataStreamsApiCall(ref _callListDataStreams);
            _callGetDataStream = clientHelper.BuildApiCall<GetDataStreamRequest, DataStream>("GetDataStream", grpcClient.GetDataStreamAsync, grpcClient.GetDataStream, effectiveSettings.GetDataStreamSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetDataStream);
            Modify_GetDataStreamApiCall(ref _callGetDataStream);
            _callGetAudience = clientHelper.BuildApiCall<GetAudienceRequest, Audience>("GetAudience", grpcClient.GetAudienceAsync, grpcClient.GetAudience, effectiveSettings.GetAudienceSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetAudience);
            Modify_GetAudienceApiCall(ref _callGetAudience);
            _callListAudiences = clientHelper.BuildApiCall<ListAudiencesRequest, ListAudiencesResponse>("ListAudiences", grpcClient.ListAudiencesAsync, grpcClient.ListAudiences, effectiveSettings.ListAudiencesSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListAudiences);
            Modify_ListAudiencesApiCall(ref _callListAudiences);
            _callCreateAudience = clientHelper.BuildApiCall<CreateAudienceRequest, Audience>("CreateAudience", grpcClient.CreateAudienceAsync, grpcClient.CreateAudience, effectiveSettings.CreateAudienceSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateAudience);
            Modify_CreateAudienceApiCall(ref _callCreateAudience);
            _callUpdateAudience = clientHelper.BuildApiCall<UpdateAudienceRequest, Audience>("UpdateAudience", grpcClient.UpdateAudienceAsync, grpcClient.UpdateAudience, effectiveSettings.UpdateAudienceSettings).WithGoogleRequestParam("audience.name", request => request.Audience?.Name);
            Modify_ApiCall(ref _callUpdateAudience);
            Modify_UpdateAudienceApiCall(ref _callUpdateAudience);
            _callArchiveAudience = clientHelper.BuildApiCall<ArchiveAudienceRequest, wkt::Empty>("ArchiveAudience", grpcClient.ArchiveAudienceAsync, grpcClient.ArchiveAudience, effectiveSettings.ArchiveAudienceSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callArchiveAudience);
            Modify_ArchiveAudienceApiCall(ref _callArchiveAudience);
            _callGetSearchAds360Link = clientHelper.BuildApiCall<GetSearchAds360LinkRequest, SearchAds360Link>("GetSearchAds360Link", grpcClient.GetSearchAds360LinkAsync, grpcClient.GetSearchAds360Link, effectiveSettings.GetSearchAds360LinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetSearchAds360Link);
            Modify_GetSearchAds360LinkApiCall(ref _callGetSearchAds360Link);
            _callListSearchAds360Links = clientHelper.BuildApiCall<ListSearchAds360LinksRequest, ListSearchAds360LinksResponse>("ListSearchAds360Links", grpcClient.ListSearchAds360LinksAsync, grpcClient.ListSearchAds360Links, effectiveSettings.ListSearchAds360LinksSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListSearchAds360Links);
            Modify_ListSearchAds360LinksApiCall(ref _callListSearchAds360Links);
            _callCreateSearchAds360Link = clientHelper.BuildApiCall<CreateSearchAds360LinkRequest, SearchAds360Link>("CreateSearchAds360Link", grpcClient.CreateSearchAds360LinkAsync, grpcClient.CreateSearchAds360Link, effectiveSettings.CreateSearchAds360LinkSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateSearchAds360Link);
            Modify_CreateSearchAds360LinkApiCall(ref _callCreateSearchAds360Link);
            _callDeleteSearchAds360Link = clientHelper.BuildApiCall<DeleteSearchAds360LinkRequest, wkt::Empty>("DeleteSearchAds360Link", grpcClient.DeleteSearchAds360LinkAsync, grpcClient.DeleteSearchAds360Link, effectiveSettings.DeleteSearchAds360LinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteSearchAds360Link);
            Modify_DeleteSearchAds360LinkApiCall(ref _callDeleteSearchAds360Link);
            _callUpdateSearchAds360Link = clientHelper.BuildApiCall<UpdateSearchAds360LinkRequest, SearchAds360Link>("UpdateSearchAds360Link", grpcClient.UpdateSearchAds360LinkAsync, grpcClient.UpdateSearchAds360Link, effectiveSettings.UpdateSearchAds360LinkSettings).WithGoogleRequestParam("search_ads_360_link.name", request => request.SearchAds360Link?.Name);
            Modify_ApiCall(ref _callUpdateSearchAds360Link);
            Modify_UpdateSearchAds360LinkApiCall(ref _callUpdateSearchAds360Link);
            _callGetAttributionSettings = clientHelper.BuildApiCall<GetAttributionSettingsRequest, AttributionSettings>("GetAttributionSettings", grpcClient.GetAttributionSettingsAsync, grpcClient.GetAttributionSettings, effectiveSettings.GetAttributionSettingsSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetAttributionSettings);
            Modify_GetAttributionSettingsApiCall(ref _callGetAttributionSettings);
            _callUpdateAttributionSettings = clientHelper.BuildApiCall<UpdateAttributionSettingsRequest, AttributionSettings>("UpdateAttributionSettings", grpcClient.UpdateAttributionSettingsAsync, grpcClient.UpdateAttributionSettings, effectiveSettings.UpdateAttributionSettingsSettings).WithGoogleRequestParam("attribution_settings.name", request => request.AttributionSettings?.Name);
            Modify_ApiCall(ref _callUpdateAttributionSettings);
            Modify_UpdateAttributionSettingsApiCall(ref _callUpdateAttributionSettings);
            _callRunAccessReport = clientHelper.BuildApiCall<RunAccessReportRequest, RunAccessReportResponse>("RunAccessReport", grpcClient.RunAccessReportAsync, grpcClient.RunAccessReport, effectiveSettings.RunAccessReportSettings).WithGoogleRequestParam("entity", request => request.Entity);
            Modify_ApiCall(ref _callRunAccessReport);
            Modify_RunAccessReportApiCall(ref _callRunAccessReport);
            _callCreateAccessBinding = clientHelper.BuildApiCall<CreateAccessBindingRequest, AccessBinding>("CreateAccessBinding", grpcClient.CreateAccessBindingAsync, grpcClient.CreateAccessBinding, effectiveSettings.CreateAccessBindingSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateAccessBinding);
            Modify_CreateAccessBindingApiCall(ref _callCreateAccessBinding);
            _callGetAccessBinding = clientHelper.BuildApiCall<GetAccessBindingRequest, AccessBinding>("GetAccessBinding", grpcClient.GetAccessBindingAsync, grpcClient.GetAccessBinding, effectiveSettings.GetAccessBindingSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetAccessBinding);
            Modify_GetAccessBindingApiCall(ref _callGetAccessBinding);
            _callUpdateAccessBinding = clientHelper.BuildApiCall<UpdateAccessBindingRequest, AccessBinding>("UpdateAccessBinding", grpcClient.UpdateAccessBindingAsync, grpcClient.UpdateAccessBinding, effectiveSettings.UpdateAccessBindingSettings).WithGoogleRequestParam("access_binding.name", request => request.AccessBinding?.Name);
            Modify_ApiCall(ref _callUpdateAccessBinding);
            Modify_UpdateAccessBindingApiCall(ref _callUpdateAccessBinding);
            _callDeleteAccessBinding = clientHelper.BuildApiCall<DeleteAccessBindingRequest, wkt::Empty>("DeleteAccessBinding", grpcClient.DeleteAccessBindingAsync, grpcClient.DeleteAccessBinding, effectiveSettings.DeleteAccessBindingSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteAccessBinding);
            Modify_DeleteAccessBindingApiCall(ref _callDeleteAccessBinding);
            _callListAccessBindings = clientHelper.BuildApiCall<ListAccessBindingsRequest, ListAccessBindingsResponse>("ListAccessBindings", grpcClient.ListAccessBindingsAsync, grpcClient.ListAccessBindings, effectiveSettings.ListAccessBindingsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListAccessBindings);
            Modify_ListAccessBindingsApiCall(ref _callListAccessBindings);
            _callBatchCreateAccessBindings = clientHelper.BuildApiCall<BatchCreateAccessBindingsRequest, BatchCreateAccessBindingsResponse>("BatchCreateAccessBindings", grpcClient.BatchCreateAccessBindingsAsync, grpcClient.BatchCreateAccessBindings, effectiveSettings.BatchCreateAccessBindingsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callBatchCreateAccessBindings);
            Modify_BatchCreateAccessBindingsApiCall(ref _callBatchCreateAccessBindings);
            _callBatchGetAccessBindings = clientHelper.BuildApiCall<BatchGetAccessBindingsRequest, BatchGetAccessBindingsResponse>("BatchGetAccessBindings", grpcClient.BatchGetAccessBindingsAsync, grpcClient.BatchGetAccessBindings, effectiveSettings.BatchGetAccessBindingsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callBatchGetAccessBindings);
            Modify_BatchGetAccessBindingsApiCall(ref _callBatchGetAccessBindings);
            _callBatchUpdateAccessBindings = clientHelper.BuildApiCall<BatchUpdateAccessBindingsRequest, BatchUpdateAccessBindingsResponse>("BatchUpdateAccessBindings", grpcClient.BatchUpdateAccessBindingsAsync, grpcClient.BatchUpdateAccessBindings, effectiveSettings.BatchUpdateAccessBindingsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callBatchUpdateAccessBindings);
            Modify_BatchUpdateAccessBindingsApiCall(ref _callBatchUpdateAccessBindings);
            _callBatchDeleteAccessBindings = clientHelper.BuildApiCall<BatchDeleteAccessBindingsRequest, wkt::Empty>("BatchDeleteAccessBindings", grpcClient.BatchDeleteAccessBindingsAsync, grpcClient.BatchDeleteAccessBindings, effectiveSettings.BatchDeleteAccessBindingsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callBatchDeleteAccessBindings);
            Modify_BatchDeleteAccessBindingsApiCall(ref _callBatchDeleteAccessBindings);
            _callGetExpandedDataSet = clientHelper.BuildApiCall<GetExpandedDataSetRequest, ExpandedDataSet>("GetExpandedDataSet", grpcClient.GetExpandedDataSetAsync, grpcClient.GetExpandedDataSet, effectiveSettings.GetExpandedDataSetSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetExpandedDataSet);
            Modify_GetExpandedDataSetApiCall(ref _callGetExpandedDataSet);
            _callListExpandedDataSets = clientHelper.BuildApiCall<ListExpandedDataSetsRequest, ListExpandedDataSetsResponse>("ListExpandedDataSets", grpcClient.ListExpandedDataSetsAsync, grpcClient.ListExpandedDataSets, effectiveSettings.ListExpandedDataSetsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListExpandedDataSets);
            Modify_ListExpandedDataSetsApiCall(ref _callListExpandedDataSets);
            _callCreateExpandedDataSet = clientHelper.BuildApiCall<CreateExpandedDataSetRequest, ExpandedDataSet>("CreateExpandedDataSet", grpcClient.CreateExpandedDataSetAsync, grpcClient.CreateExpandedDataSet, effectiveSettings.CreateExpandedDataSetSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateExpandedDataSet);
            Modify_CreateExpandedDataSetApiCall(ref _callCreateExpandedDataSet);
            _callUpdateExpandedDataSet = clientHelper.BuildApiCall<UpdateExpandedDataSetRequest, ExpandedDataSet>("UpdateExpandedDataSet", grpcClient.UpdateExpandedDataSetAsync, grpcClient.UpdateExpandedDataSet, effectiveSettings.UpdateExpandedDataSetSettings).WithGoogleRequestParam("expanded_data_set.name", request => request.ExpandedDataSet?.Name);
            Modify_ApiCall(ref _callUpdateExpandedDataSet);
            Modify_UpdateExpandedDataSetApiCall(ref _callUpdateExpandedDataSet);
            _callDeleteExpandedDataSet = clientHelper.BuildApiCall<DeleteExpandedDataSetRequest, wkt::Empty>("DeleteExpandedDataSet", grpcClient.DeleteExpandedDataSetAsync, grpcClient.DeleteExpandedDataSet, effectiveSettings.DeleteExpandedDataSetSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteExpandedDataSet);
            Modify_DeleteExpandedDataSetApiCall(ref _callDeleteExpandedDataSet);
            _callGetChannelGroup = clientHelper.BuildApiCall<GetChannelGroupRequest, ChannelGroup>("GetChannelGroup", grpcClient.GetChannelGroupAsync, grpcClient.GetChannelGroup, effectiveSettings.GetChannelGroupSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetChannelGroup);
            Modify_GetChannelGroupApiCall(ref _callGetChannelGroup);
            _callListChannelGroups = clientHelper.BuildApiCall<ListChannelGroupsRequest, ListChannelGroupsResponse>("ListChannelGroups", grpcClient.ListChannelGroupsAsync, grpcClient.ListChannelGroups, effectiveSettings.ListChannelGroupsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListChannelGroups);
            Modify_ListChannelGroupsApiCall(ref _callListChannelGroups);
            _callCreateChannelGroup = clientHelper.BuildApiCall<CreateChannelGroupRequest, ChannelGroup>("CreateChannelGroup", grpcClient.CreateChannelGroupAsync, grpcClient.CreateChannelGroup, effectiveSettings.CreateChannelGroupSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateChannelGroup);
            Modify_CreateChannelGroupApiCall(ref _callCreateChannelGroup);
            _callUpdateChannelGroup = clientHelper.BuildApiCall<UpdateChannelGroupRequest, ChannelGroup>("UpdateChannelGroup", grpcClient.UpdateChannelGroupAsync, grpcClient.UpdateChannelGroup, effectiveSettings.UpdateChannelGroupSettings).WithGoogleRequestParam("channel_group.name", request => request.ChannelGroup?.Name);
            Modify_ApiCall(ref _callUpdateChannelGroup);
            Modify_UpdateChannelGroupApiCall(ref _callUpdateChannelGroup);
            _callDeleteChannelGroup = clientHelper.BuildApiCall<DeleteChannelGroupRequest, wkt::Empty>("DeleteChannelGroup", grpcClient.DeleteChannelGroupAsync, grpcClient.DeleteChannelGroup, effectiveSettings.DeleteChannelGroupSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteChannelGroup);
            Modify_DeleteChannelGroupApiCall(ref _callDeleteChannelGroup);
            _callSetAutomatedGa4ConfigurationOptOut = clientHelper.BuildApiCall<SetAutomatedGa4ConfigurationOptOutRequest, SetAutomatedGa4ConfigurationOptOutResponse>("SetAutomatedGa4ConfigurationOptOut", grpcClient.SetAutomatedGa4ConfigurationOptOutAsync, grpcClient.SetAutomatedGa4ConfigurationOptOut, effectiveSettings.SetAutomatedGa4ConfigurationOptOutSettings);
            Modify_ApiCall(ref _callSetAutomatedGa4ConfigurationOptOut);
            Modify_SetAutomatedGa4ConfigurationOptOutApiCall(ref _callSetAutomatedGa4ConfigurationOptOut);
            _callFetchAutomatedGa4ConfigurationOptOut = clientHelper.BuildApiCall<FetchAutomatedGa4ConfigurationOptOutRequest, FetchAutomatedGa4ConfigurationOptOutResponse>("FetchAutomatedGa4ConfigurationOptOut", grpcClient.FetchAutomatedGa4ConfigurationOptOutAsync, grpcClient.FetchAutomatedGa4ConfigurationOptOut, effectiveSettings.FetchAutomatedGa4ConfigurationOptOutSettings);
            Modify_ApiCall(ref _callFetchAutomatedGa4ConfigurationOptOut);
            Modify_FetchAutomatedGa4ConfigurationOptOutApiCall(ref _callFetchAutomatedGa4ConfigurationOptOut);
            _callCreateBigQueryLink = clientHelper.BuildApiCall<CreateBigQueryLinkRequest, BigQueryLink>("CreateBigQueryLink", grpcClient.CreateBigQueryLinkAsync, grpcClient.CreateBigQueryLink, effectiveSettings.CreateBigQueryLinkSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateBigQueryLink);
            Modify_CreateBigQueryLinkApiCall(ref _callCreateBigQueryLink);
            _callGetBigQueryLink = clientHelper.BuildApiCall<GetBigQueryLinkRequest, BigQueryLink>("GetBigQueryLink", grpcClient.GetBigQueryLinkAsync, grpcClient.GetBigQueryLink, effectiveSettings.GetBigQueryLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetBigQueryLink);
            Modify_GetBigQueryLinkApiCall(ref _callGetBigQueryLink);
            _callListBigQueryLinks = clientHelper.BuildApiCall<ListBigQueryLinksRequest, ListBigQueryLinksResponse>("ListBigQueryLinks", grpcClient.ListBigQueryLinksAsync, grpcClient.ListBigQueryLinks, effectiveSettings.ListBigQueryLinksSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListBigQueryLinks);
            Modify_ListBigQueryLinksApiCall(ref _callListBigQueryLinks);
            _callDeleteBigQueryLink = clientHelper.BuildApiCall<DeleteBigQueryLinkRequest, wkt::Empty>("DeleteBigQueryLink", grpcClient.DeleteBigQueryLinkAsync, grpcClient.DeleteBigQueryLink, effectiveSettings.DeleteBigQueryLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteBigQueryLink);
            Modify_DeleteBigQueryLinkApiCall(ref _callDeleteBigQueryLink);
            _callUpdateBigQueryLink = clientHelper.BuildApiCall<UpdateBigQueryLinkRequest, BigQueryLink>("UpdateBigQueryLink", grpcClient.UpdateBigQueryLinkAsync, grpcClient.UpdateBigQueryLink, effectiveSettings.UpdateBigQueryLinkSettings).WithGoogleRequestParam("bigquery_link.name", request => request.BigqueryLink?.Name);
            Modify_ApiCall(ref _callUpdateBigQueryLink);
            Modify_UpdateBigQueryLinkApiCall(ref _callUpdateBigQueryLink);
            _callGetEnhancedMeasurementSettings = clientHelper.BuildApiCall<GetEnhancedMeasurementSettingsRequest, EnhancedMeasurementSettings>("GetEnhancedMeasurementSettings", grpcClient.GetEnhancedMeasurementSettingsAsync, grpcClient.GetEnhancedMeasurementSettings, effectiveSettings.GetEnhancedMeasurementSettingsSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetEnhancedMeasurementSettings);
            Modify_GetEnhancedMeasurementSettingsApiCall(ref _callGetEnhancedMeasurementSettings);
            _callUpdateEnhancedMeasurementSettings = clientHelper.BuildApiCall<UpdateEnhancedMeasurementSettingsRequest, EnhancedMeasurementSettings>("UpdateEnhancedMeasurementSettings", grpcClient.UpdateEnhancedMeasurementSettingsAsync, grpcClient.UpdateEnhancedMeasurementSettings, effectiveSettings.UpdateEnhancedMeasurementSettingsSettings).WithGoogleRequestParam("enhanced_measurement_settings.name", request => request.EnhancedMeasurementSettings?.Name);
            Modify_ApiCall(ref _callUpdateEnhancedMeasurementSettings);
            Modify_UpdateEnhancedMeasurementSettingsApiCall(ref _callUpdateEnhancedMeasurementSettings);
            _callCreateConnectedSiteTag = clientHelper.BuildApiCall<CreateConnectedSiteTagRequest, CreateConnectedSiteTagResponse>("CreateConnectedSiteTag", grpcClient.CreateConnectedSiteTagAsync, grpcClient.CreateConnectedSiteTag, effectiveSettings.CreateConnectedSiteTagSettings);
            Modify_ApiCall(ref _callCreateConnectedSiteTag);
            Modify_CreateConnectedSiteTagApiCall(ref _callCreateConnectedSiteTag);
            _callDeleteConnectedSiteTag = clientHelper.BuildApiCall<DeleteConnectedSiteTagRequest, wkt::Empty>("DeleteConnectedSiteTag", grpcClient.DeleteConnectedSiteTagAsync, grpcClient.DeleteConnectedSiteTag, effectiveSettings.DeleteConnectedSiteTagSettings);
            Modify_ApiCall(ref _callDeleteConnectedSiteTag);
            Modify_DeleteConnectedSiteTagApiCall(ref _callDeleteConnectedSiteTag);
            _callListConnectedSiteTags = clientHelper.BuildApiCall<ListConnectedSiteTagsRequest, ListConnectedSiteTagsResponse>("ListConnectedSiteTags", grpcClient.ListConnectedSiteTagsAsync, grpcClient.ListConnectedSiteTags, effectiveSettings.ListConnectedSiteTagsSettings);
            Modify_ApiCall(ref _callListConnectedSiteTags);
            Modify_ListConnectedSiteTagsApiCall(ref _callListConnectedSiteTags);
            _callFetchConnectedGa4Property = clientHelper.BuildApiCall<FetchConnectedGa4PropertyRequest, FetchConnectedGa4PropertyResponse>("FetchConnectedGa4Property", grpcClient.FetchConnectedGa4PropertyAsync, grpcClient.FetchConnectedGa4Property, effectiveSettings.FetchConnectedGa4PropertySettings);
            Modify_ApiCall(ref _callFetchConnectedGa4Property);
            Modify_FetchConnectedGa4PropertyApiCall(ref _callFetchConnectedGa4Property);
            _callGetAdSenseLink = clientHelper.BuildApiCall<GetAdSenseLinkRequest, AdSenseLink>("GetAdSenseLink", grpcClient.GetAdSenseLinkAsync, grpcClient.GetAdSenseLink, effectiveSettings.GetAdSenseLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetAdSenseLink);
            Modify_GetAdSenseLinkApiCall(ref _callGetAdSenseLink);
            _callCreateAdSenseLink = clientHelper.BuildApiCall<CreateAdSenseLinkRequest, AdSenseLink>("CreateAdSenseLink", grpcClient.CreateAdSenseLinkAsync, grpcClient.CreateAdSenseLink, effectiveSettings.CreateAdSenseLinkSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateAdSenseLink);
            Modify_CreateAdSenseLinkApiCall(ref _callCreateAdSenseLink);
            _callDeleteAdSenseLink = clientHelper.BuildApiCall<DeleteAdSenseLinkRequest, wkt::Empty>("DeleteAdSenseLink", grpcClient.DeleteAdSenseLinkAsync, grpcClient.DeleteAdSenseLink, effectiveSettings.DeleteAdSenseLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteAdSenseLink);
            Modify_DeleteAdSenseLinkApiCall(ref _callDeleteAdSenseLink);
            _callListAdSenseLinks = clientHelper.BuildApiCall<ListAdSenseLinksRequest, ListAdSenseLinksResponse>("ListAdSenseLinks", grpcClient.ListAdSenseLinksAsync, grpcClient.ListAdSenseLinks, effectiveSettings.ListAdSenseLinksSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListAdSenseLinks);
            Modify_ListAdSenseLinksApiCall(ref _callListAdSenseLinks);
            _callGetEventCreateRule = clientHelper.BuildApiCall<GetEventCreateRuleRequest, EventCreateRule>("GetEventCreateRule", grpcClient.GetEventCreateRuleAsync, grpcClient.GetEventCreateRule, effectiveSettings.GetEventCreateRuleSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetEventCreateRule);
            Modify_GetEventCreateRuleApiCall(ref _callGetEventCreateRule);
            _callListEventCreateRules = clientHelper.BuildApiCall<ListEventCreateRulesRequest, ListEventCreateRulesResponse>("ListEventCreateRules", grpcClient.ListEventCreateRulesAsync, grpcClient.ListEventCreateRules, effectiveSettings.ListEventCreateRulesSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListEventCreateRules);
            Modify_ListEventCreateRulesApiCall(ref _callListEventCreateRules);
            _callCreateEventCreateRule = clientHelper.BuildApiCall<CreateEventCreateRuleRequest, EventCreateRule>("CreateEventCreateRule", grpcClient.CreateEventCreateRuleAsync, grpcClient.CreateEventCreateRule, effectiveSettings.CreateEventCreateRuleSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateEventCreateRule);
            Modify_CreateEventCreateRuleApiCall(ref _callCreateEventCreateRule);
            _callUpdateEventCreateRule = clientHelper.BuildApiCall<UpdateEventCreateRuleRequest, EventCreateRule>("UpdateEventCreateRule", grpcClient.UpdateEventCreateRuleAsync, grpcClient.UpdateEventCreateRule, effectiveSettings.UpdateEventCreateRuleSettings).WithGoogleRequestParam("event_create_rule.name", request => request.EventCreateRule?.Name);
            Modify_ApiCall(ref _callUpdateEventCreateRule);
            Modify_UpdateEventCreateRuleApiCall(ref _callUpdateEventCreateRule);
            _callDeleteEventCreateRule = clientHelper.BuildApiCall<DeleteEventCreateRuleRequest, wkt::Empty>("DeleteEventCreateRule", grpcClient.DeleteEventCreateRuleAsync, grpcClient.DeleteEventCreateRule, effectiveSettings.DeleteEventCreateRuleSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteEventCreateRule);
            Modify_DeleteEventCreateRuleApiCall(ref _callDeleteEventCreateRule);
            _callGetEventEditRule = clientHelper.BuildApiCall<GetEventEditRuleRequest, EventEditRule>("GetEventEditRule", grpcClient.GetEventEditRuleAsync, grpcClient.GetEventEditRule, effectiveSettings.GetEventEditRuleSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetEventEditRule);
            Modify_GetEventEditRuleApiCall(ref _callGetEventEditRule);
            _callListEventEditRules = clientHelper.BuildApiCall<ListEventEditRulesRequest, ListEventEditRulesResponse>("ListEventEditRules", grpcClient.ListEventEditRulesAsync, grpcClient.ListEventEditRules, effectiveSettings.ListEventEditRulesSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListEventEditRules);
            Modify_ListEventEditRulesApiCall(ref _callListEventEditRules);
            _callCreateEventEditRule = clientHelper.BuildApiCall<CreateEventEditRuleRequest, EventEditRule>("CreateEventEditRule", grpcClient.CreateEventEditRuleAsync, grpcClient.CreateEventEditRule, effectiveSettings.CreateEventEditRuleSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateEventEditRule);
            Modify_CreateEventEditRuleApiCall(ref _callCreateEventEditRule);
            _callUpdateEventEditRule = clientHelper.BuildApiCall<UpdateEventEditRuleRequest, EventEditRule>("UpdateEventEditRule", grpcClient.UpdateEventEditRuleAsync, grpcClient.UpdateEventEditRule, effectiveSettings.UpdateEventEditRuleSettings).WithGoogleRequestParam("event_edit_rule.name", request => request.EventEditRule?.Name);
            Modify_ApiCall(ref _callUpdateEventEditRule);
            Modify_UpdateEventEditRuleApiCall(ref _callUpdateEventEditRule);
            _callDeleteEventEditRule = clientHelper.BuildApiCall<DeleteEventEditRuleRequest, wkt::Empty>("DeleteEventEditRule", grpcClient.DeleteEventEditRuleAsync, grpcClient.DeleteEventEditRule, effectiveSettings.DeleteEventEditRuleSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteEventEditRule);
            Modify_DeleteEventEditRuleApiCall(ref _callDeleteEventEditRule);
            _callReorderEventEditRules = clientHelper.BuildApiCall<ReorderEventEditRulesRequest, wkt::Empty>("ReorderEventEditRules", grpcClient.ReorderEventEditRulesAsync, grpcClient.ReorderEventEditRules, effectiveSettings.ReorderEventEditRulesSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callReorderEventEditRules);
            Modify_ReorderEventEditRulesApiCall(ref _callReorderEventEditRules);
            _callUpdateDataRedactionSettings = clientHelper.BuildApiCall<UpdateDataRedactionSettingsRequest, DataRedactionSettings>("UpdateDataRedactionSettings", grpcClient.UpdateDataRedactionSettingsAsync, grpcClient.UpdateDataRedactionSettings, effectiveSettings.UpdateDataRedactionSettingsSettings).WithGoogleRequestParam("data_redaction_settings.name", request => request.DataRedactionSettings?.Name);
            Modify_ApiCall(ref _callUpdateDataRedactionSettings);
            Modify_UpdateDataRedactionSettingsApiCall(ref _callUpdateDataRedactionSettings);
            _callGetDataRedactionSettings = clientHelper.BuildApiCall<GetDataRedactionSettingsRequest, DataRedactionSettings>("GetDataRedactionSettings", grpcClient.GetDataRedactionSettingsAsync, grpcClient.GetDataRedactionSettings, effectiveSettings.GetDataRedactionSettingsSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetDataRedactionSettings);
            Modify_GetDataRedactionSettingsApiCall(ref _callGetDataRedactionSettings);
            _callGetCalculatedMetric = clientHelper.BuildApiCall<GetCalculatedMetricRequest, CalculatedMetric>("GetCalculatedMetric", grpcClient.GetCalculatedMetricAsync, grpcClient.GetCalculatedMetric, effectiveSettings.GetCalculatedMetricSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetCalculatedMetric);
            Modify_GetCalculatedMetricApiCall(ref _callGetCalculatedMetric);
            _callCreateCalculatedMetric = clientHelper.BuildApiCall<CreateCalculatedMetricRequest, CalculatedMetric>("CreateCalculatedMetric", grpcClient.CreateCalculatedMetricAsync, grpcClient.CreateCalculatedMetric, effectiveSettings.CreateCalculatedMetricSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateCalculatedMetric);
            Modify_CreateCalculatedMetricApiCall(ref _callCreateCalculatedMetric);
            _callListCalculatedMetrics = clientHelper.BuildApiCall<ListCalculatedMetricsRequest, ListCalculatedMetricsResponse>("ListCalculatedMetrics", grpcClient.ListCalculatedMetricsAsync, grpcClient.ListCalculatedMetrics, effectiveSettings.ListCalculatedMetricsSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListCalculatedMetrics);
            Modify_ListCalculatedMetricsApiCall(ref _callListCalculatedMetrics);
            _callUpdateCalculatedMetric = clientHelper.BuildApiCall<UpdateCalculatedMetricRequest, CalculatedMetric>("UpdateCalculatedMetric", grpcClient.UpdateCalculatedMetricAsync, grpcClient.UpdateCalculatedMetric, effectiveSettings.UpdateCalculatedMetricSettings).WithGoogleRequestParam("calculated_metric.name", request => request.CalculatedMetric?.Name);
            Modify_ApiCall(ref _callUpdateCalculatedMetric);
            Modify_UpdateCalculatedMetricApiCall(ref _callUpdateCalculatedMetric);
            _callDeleteCalculatedMetric = clientHelper.BuildApiCall<DeleteCalculatedMetricRequest, wkt::Empty>("DeleteCalculatedMetric", grpcClient.DeleteCalculatedMetricAsync, grpcClient.DeleteCalculatedMetric, effectiveSettings.DeleteCalculatedMetricSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteCalculatedMetric);
            Modify_DeleteCalculatedMetricApiCall(ref _callDeleteCalculatedMetric);
            _callCreateRollupProperty = clientHelper.BuildApiCall<CreateRollupPropertyRequest, CreateRollupPropertyResponse>("CreateRollupProperty", grpcClient.CreateRollupPropertyAsync, grpcClient.CreateRollupProperty, effectiveSettings.CreateRollupPropertySettings);
            Modify_ApiCall(ref _callCreateRollupProperty);
            Modify_CreateRollupPropertyApiCall(ref _callCreateRollupProperty);
            _callGetRollupPropertySourceLink = clientHelper.BuildApiCall<GetRollupPropertySourceLinkRequest, RollupPropertySourceLink>("GetRollupPropertySourceLink", grpcClient.GetRollupPropertySourceLinkAsync, grpcClient.GetRollupPropertySourceLink, effectiveSettings.GetRollupPropertySourceLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetRollupPropertySourceLink);
            Modify_GetRollupPropertySourceLinkApiCall(ref _callGetRollupPropertySourceLink);
            _callListRollupPropertySourceLinks = clientHelper.BuildApiCall<ListRollupPropertySourceLinksRequest, ListRollupPropertySourceLinksResponse>("ListRollupPropertySourceLinks", grpcClient.ListRollupPropertySourceLinksAsync, grpcClient.ListRollupPropertySourceLinks, effectiveSettings.ListRollupPropertySourceLinksSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListRollupPropertySourceLinks);
            Modify_ListRollupPropertySourceLinksApiCall(ref _callListRollupPropertySourceLinks);
            _callCreateRollupPropertySourceLink = clientHelper.BuildApiCall<CreateRollupPropertySourceLinkRequest, RollupPropertySourceLink>("CreateRollupPropertySourceLink", grpcClient.CreateRollupPropertySourceLinkAsync, grpcClient.CreateRollupPropertySourceLink, effectiveSettings.CreateRollupPropertySourceLinkSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateRollupPropertySourceLink);
            Modify_CreateRollupPropertySourceLinkApiCall(ref _callCreateRollupPropertySourceLink);
            _callDeleteRollupPropertySourceLink = clientHelper.BuildApiCall<DeleteRollupPropertySourceLinkRequest, wkt::Empty>("DeleteRollupPropertySourceLink", grpcClient.DeleteRollupPropertySourceLinkAsync, grpcClient.DeleteRollupPropertySourceLink, effectiveSettings.DeleteRollupPropertySourceLinkSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteRollupPropertySourceLink);
            Modify_DeleteRollupPropertySourceLinkApiCall(ref _callDeleteRollupPropertySourceLink);
            _callProvisionSubproperty = clientHelper.BuildApiCall<ProvisionSubpropertyRequest, ProvisionSubpropertyResponse>("ProvisionSubproperty", grpcClient.ProvisionSubpropertyAsync, grpcClient.ProvisionSubproperty, effectiveSettings.ProvisionSubpropertySettings);
            Modify_ApiCall(ref _callProvisionSubproperty);
            Modify_ProvisionSubpropertyApiCall(ref _callProvisionSubproperty);
            _callCreateSubpropertyEventFilter = clientHelper.BuildApiCall<CreateSubpropertyEventFilterRequest, SubpropertyEventFilter>("CreateSubpropertyEventFilter", grpcClient.CreateSubpropertyEventFilterAsync, grpcClient.CreateSubpropertyEventFilter, effectiveSettings.CreateSubpropertyEventFilterSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callCreateSubpropertyEventFilter);
            Modify_CreateSubpropertyEventFilterApiCall(ref _callCreateSubpropertyEventFilter);
            _callGetSubpropertyEventFilter = clientHelper.BuildApiCall<GetSubpropertyEventFilterRequest, SubpropertyEventFilter>("GetSubpropertyEventFilter", grpcClient.GetSubpropertyEventFilterAsync, grpcClient.GetSubpropertyEventFilter, effectiveSettings.GetSubpropertyEventFilterSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callGetSubpropertyEventFilter);
            Modify_GetSubpropertyEventFilterApiCall(ref _callGetSubpropertyEventFilter);
            _callListSubpropertyEventFilters = clientHelper.BuildApiCall<ListSubpropertyEventFiltersRequest, ListSubpropertyEventFiltersResponse>("ListSubpropertyEventFilters", grpcClient.ListSubpropertyEventFiltersAsync, grpcClient.ListSubpropertyEventFilters, effectiveSettings.ListSubpropertyEventFiltersSettings).WithGoogleRequestParam("parent", request => request.Parent);
            Modify_ApiCall(ref _callListSubpropertyEventFilters);
            Modify_ListSubpropertyEventFiltersApiCall(ref _callListSubpropertyEventFilters);
            _callUpdateSubpropertyEventFilter = clientHelper.BuildApiCall<UpdateSubpropertyEventFilterRequest, SubpropertyEventFilter>("UpdateSubpropertyEventFilter", grpcClient.UpdateSubpropertyEventFilterAsync, grpcClient.UpdateSubpropertyEventFilter, effectiveSettings.UpdateSubpropertyEventFilterSettings).WithGoogleRequestParam("subproperty_event_filter.name", request => request.SubpropertyEventFilter?.Name);
            Modify_ApiCall(ref _callUpdateSubpropertyEventFilter);
            Modify_UpdateSubpropertyEventFilterApiCall(ref _callUpdateSubpropertyEventFilter);
            _callDeleteSubpropertyEventFilter = clientHelper.BuildApiCall<DeleteSubpropertyEventFilterRequest, wkt::Empty>("DeleteSubpropertyEventFilter", grpcClient.DeleteSubpropertyEventFilterAsync, grpcClient.DeleteSubpropertyEventFilter, effectiveSettings.DeleteSubpropertyEventFilterSettings).WithGoogleRequestParam("name", request => request.Name);
            Modify_ApiCall(ref _callDeleteSubpropertyEventFilter);
            Modify_DeleteSubpropertyEventFilterApiCall(ref _callDeleteSubpropertyEventFilter);
            OnConstruction(grpcClient, effectiveSettings, clientHelper);
        }

        partial void Modify_ApiCall<TRequest, TResponse>(ref gaxgrpc::ApiCall<TRequest, TResponse> call) where TRequest : class, proto::IMessage<TRequest> where TResponse : class, proto::IMessage<TResponse>;

        partial void Modify_GetAccountApiCall(ref gaxgrpc::ApiCall<GetAccountRequest, Account> call);

        partial void Modify_ListAccountsApiCall(ref gaxgrpc::ApiCall<ListAccountsRequest, ListAccountsResponse> call);

        partial void Modify_DeleteAccountApiCall(ref gaxgrpc::ApiCall<DeleteAccountRequest, wkt::Empty> call);

        partial void Modify_UpdateAccountApiCall(ref gaxgrpc::ApiCall<UpdateAccountRequest, Account> call);

        partial void Modify_ProvisionAccountTicketApiCall(ref gaxgrpc::ApiCall<ProvisionAccountTicketRequest, ProvisionAccountTicketResponse> call);

        partial void Modify_ListAccountSummariesApiCall(ref gaxgrpc::ApiCall<ListAccountSummariesRequest, ListAccountSummariesResponse> call);

        partial void Modify_GetPropertyApiCall(ref gaxgrpc::ApiCall<GetPropertyRequest, Property> call);

        partial void Modify_ListPropertiesApiCall(ref gaxgrpc::ApiCall<ListPropertiesRequest, ListPropertiesResponse> call);

        partial void Modify_CreatePropertyApiCall(ref gaxgrpc::ApiCall<CreatePropertyRequest, Property> call);

        partial void Modify_DeletePropertyApiCall(ref gaxgrpc::ApiCall<DeletePropertyRequest, Property> call);

        partial void Modify_UpdatePropertyApiCall(ref gaxgrpc::ApiCall<UpdatePropertyRequest, Property> call);

        partial void Modify_CreateFirebaseLinkApiCall(ref gaxgrpc::ApiCall<CreateFirebaseLinkRequest, FirebaseLink> call);

        partial void Modify_DeleteFirebaseLinkApiCall(ref gaxgrpc::ApiCall<DeleteFirebaseLinkRequest, wkt::Empty> call);

        partial void Modify_ListFirebaseLinksApiCall(ref gaxgrpc::ApiCall<ListFirebaseLinksRequest, ListFirebaseLinksResponse> call);

        partial void Modify_GetGlobalSiteTagApiCall(ref gaxgrpc::ApiCall<GetGlobalSiteTagRequest, GlobalSiteTag> call);

        partial void Modify_CreateGoogleAdsLinkApiCall(ref gaxgrpc::ApiCall<CreateGoogleAdsLinkRequest, GoogleAdsLink> call);

        partial void Modify_UpdateGoogleAdsLinkApiCall(ref gaxgrpc::ApiCall<UpdateGoogleAdsLinkRequest, GoogleAdsLink> call);

        partial void Modify_DeleteGoogleAdsLinkApiCall(ref gaxgrpc::ApiCall<DeleteGoogleAdsLinkRequest, wkt::Empty> call);

        partial void Modify_ListGoogleAdsLinksApiCall(ref gaxgrpc::ApiCall<ListGoogleAdsLinksRequest, ListGoogleAdsLinksResponse> call);

        partial void Modify_GetDataSharingSettingsApiCall(ref gaxgrpc::ApiCall<GetDataSharingSettingsRequest, DataSharingSettings> call);

        partial void Modify_GetMeasurementProtocolSecretApiCall(ref gaxgrpc::ApiCall<GetMeasurementProtocolSecretRequest, MeasurementProtocolSecret> call);

        partial void Modify_ListMeasurementProtocolSecretsApiCall(ref gaxgrpc::ApiCall<ListMeasurementProtocolSecretsRequest, ListMeasurementProtocolSecretsResponse> call);

        partial void Modify_CreateMeasurementProtocolSecretApiCall(ref gaxgrpc::ApiCall<CreateMeasurementProtocolSecretRequest, MeasurementProtocolSecret> call);

        partial void Modify_DeleteMeasurementProtocolSecretApiCall(ref gaxgrpc::ApiCall<DeleteMeasurementProtocolSecretRequest, wkt::Empty> call);

        partial void Modify_UpdateMeasurementProtocolSecretApiCall(ref gaxgrpc::ApiCall<UpdateMeasurementProtocolSecretRequest, MeasurementProtocolSecret> call);

        partial void Modify_AcknowledgeUserDataCollectionApiCall(ref gaxgrpc::ApiCall<AcknowledgeUserDataCollectionRequest, AcknowledgeUserDataCollectionResponse> call);

        partial void Modify_GetSKAdNetworkConversionValueSchemaApiCall(ref gaxgrpc::ApiCall<GetSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema> call);

        partial void Modify_CreateSKAdNetworkConversionValueSchemaApiCall(ref gaxgrpc::ApiCall<CreateSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema> call);

        partial void Modify_DeleteSKAdNetworkConversionValueSchemaApiCall(ref gaxgrpc::ApiCall<DeleteSKAdNetworkConversionValueSchemaRequest, wkt::Empty> call);

        partial void Modify_UpdateSKAdNetworkConversionValueSchemaApiCall(ref gaxgrpc::ApiCall<UpdateSKAdNetworkConversionValueSchemaRequest, SKAdNetworkConversionValueSchema> call);

        partial void Modify_ListSKAdNetworkConversionValueSchemasApiCall(ref gaxgrpc::ApiCall<ListSKAdNetworkConversionValueSchemasRequest, ListSKAdNetworkConversionValueSchemasResponse> call);

        partial void Modify_SearchChangeHistoryEventsApiCall(ref gaxgrpc::ApiCall<SearchChangeHistoryEventsRequest, SearchChangeHistoryEventsResponse> call);

        partial void Modify_GetGoogleSignalsSettingsApiCall(ref gaxgrpc::ApiCall<GetGoogleSignalsSettingsRequest, GoogleSignalsSettings> call);

        partial void Modify_UpdateGoogleSignalsSettingsApiCall(ref gaxgrpc::ApiCall<UpdateGoogleSignalsSettingsRequest, GoogleSignalsSettings> call);

        partial void Modify_CreateConversionEventApiCall(ref gaxgrpc::ApiCall<CreateConversionEventRequest, ConversionEvent> call);

        partial void Modify_UpdateConversionEventApiCall(ref gaxgrpc::ApiCall<UpdateConversionEventRequest, ConversionEvent> call);

        partial void Modify_GetConversionEventApiCall(ref gaxgrpc::ApiCall<GetConversionEventRequest, ConversionEvent> call);

        partial void Modify_DeleteConversionEventApiCall(ref gaxgrpc::ApiCall<DeleteConversionEventRequest, wkt::Empty> call);

        partial void Modify_ListConversionEventsApiCall(ref gaxgrpc::ApiCall<ListConversionEventsRequest, ListConversionEventsResponse> call);

        partial void Modify_CreateKeyEventApiCall(ref gaxgrpc::ApiCall<CreateKeyEventRequest, KeyEvent> call);

        partial void Modify_UpdateKeyEventApiCall(ref gaxgrpc::ApiCall<UpdateKeyEventRequest, KeyEvent> call);

        partial void Modify_GetKeyEventApiCall(ref gaxgrpc::ApiCall<GetKeyEventRequest, KeyEvent> call);

        partial void Modify_DeleteKeyEventApiCall(ref gaxgrpc::ApiCall<DeleteKeyEventRequest, wkt::Empty> call);

        partial void Modify_ListKeyEventsApiCall(ref gaxgrpc::ApiCall<ListKeyEventsRequest, ListKeyEventsResponse> call);

        partial void Modify_GetDisplayVideo360AdvertiserLinkApiCall(ref gaxgrpc::ApiCall<GetDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink> call);

        partial void Modify_ListDisplayVideo360AdvertiserLinksApiCall(ref gaxgrpc::ApiCall<ListDisplayVideo360AdvertiserLinksRequest, ListDisplayVideo360AdvertiserLinksResponse> call);

        partial void Modify_CreateDisplayVideo360AdvertiserLinkApiCall(ref gaxgrpc::ApiCall<CreateDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink> call);

        partial void Modify_DeleteDisplayVideo360AdvertiserLinkApiCall(ref gaxgrpc::ApiCall<DeleteDisplayVideo360AdvertiserLinkRequest, wkt::Empty> call);

        partial void Modify_UpdateDisplayVideo360AdvertiserLinkApiCall(ref gaxgrpc::ApiCall<UpdateDisplayVideo360AdvertiserLinkRequest, DisplayVideo360AdvertiserLink> call);

        partial void Modify_GetDisplayVideo360AdvertiserLinkProposalApiCall(ref gaxgrpc::ApiCall<GetDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal> call);

        partial void Modify_ListDisplayVideo360AdvertiserLinkProposalsApiCall(ref gaxgrpc::ApiCall<ListDisplayVideo360AdvertiserLinkProposalsRequest, ListDisplayVideo360AdvertiserLinkProposalsResponse> call);

        partial void Modify_CreateDisplayVideo360AdvertiserLinkProposalApiCall(ref gaxgrpc::ApiCall<CreateDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal> call);

        partial void Modify_DeleteDisplayVideo360AdvertiserLinkProposalApiCall(ref gaxgrpc::ApiCall<DeleteDisplayVideo360AdvertiserLinkProposalRequest, wkt::Empty> call);

        partial void Modify_ApproveDisplayVideo360AdvertiserLinkProposalApiCall(ref gaxgrpc::ApiCall<ApproveDisplayVideo360AdvertiserLinkProposalRequest, ApproveDisplayVideo360AdvertiserLinkProposalResponse> call);

        partial void Modify_CancelDisplayVideo360AdvertiserLinkProposalApiCall(ref gaxgrpc::ApiCall<CancelDisplayVideo360AdvertiserLinkProposalRequest, DisplayVideo360AdvertiserLinkProposal> call);

        partial void Modify_CreateCustomDimensionApiCall(ref gaxgrpc::ApiCall<CreateCustomDimensionRequest, CustomDimension> call);

        partial void Modify_UpdateCustomDimensionApiCall(ref gaxgrpc::ApiCall<UpdateCustomDimensionRequest, CustomDimension> call);

        partial void Modify_ListCustomDimensionsApiCall(ref gaxgrpc::ApiCall<ListCustomDimensionsRequest, ListCustomDimensionsResponse> call);

        partial void Modify_ArchiveCustomDimensionApiCall(ref gaxgrpc::ApiCall<ArchiveCustomDimensionRequest, wkt::Empty> call);

        partial void Modify_GetCustomDimensionApiCall(ref gaxgrpc::ApiCall<GetCustomDimensionRequest, CustomDimension> call);

        partial void Modify_CreateCustomMetricApiCall(ref gaxgrpc::ApiCall<CreateCustomMetricRequest, CustomMetric> call);

        partial void Modify_UpdateCustomMetricApiCall(ref gaxgrpc::ApiCall<UpdateCustomMetricRequest, CustomMetric> call);

        partial void Modify_ListCustomMetricsApiCall(ref gaxgrpc::ApiCall<ListCustomMetricsRequest, ListCustomMetricsResponse> call);

        partial void Modify_ArchiveCustomMetricApiCall(ref gaxgrpc::ApiCall<ArchiveCustomMetricRequest, wkt::Empty> call);

        partial void Modify_GetCustomMetricApiCall(ref gaxgrpc::ApiCall<GetCustomMetricRequest, CustomMetric> call);

        partial void Modify_GetDataRetentionSettingsApiCall(ref gaxgrpc::ApiCall<GetDataRetentionSettingsRequest, DataRetentionSettings> call);

        partial void Modify_UpdateDataRetentionSettingsApiCall(ref gaxgrpc::ApiCall<UpdateDataRetentionSettingsRequest, DataRetentionSettings> call);

        partial void Modify_CreateDataStreamApiCall(ref gaxgrpc::ApiCall<CreateDataStreamRequest, DataStream> call);

        partial void Modify_DeleteDataStreamApiCall(ref gaxgrpc::ApiCall<DeleteDataStreamRequest, wkt::Empty> call);

        partial void Modify_UpdateDataStreamApiCall(ref gaxgrpc::ApiCall<UpdateDataStreamRequest, DataStream> call);

        partial void Modify_ListDataStreamsApiCall(ref gaxgrpc::ApiCall<ListDataStreamsRequest, ListDataStreamsResponse> call);

        partial void Modify_GetDataStreamApiCall(ref gaxgrpc::ApiCall<GetDataStreamRequest, DataStream> call);

        partial void Modify_GetAudienceApiCall(ref gaxgrpc::ApiCall<GetAudienceRequest, Audience> call);

        partial void Modify_ListAudiencesApiCall(ref gaxgrpc::ApiCall<ListAudiencesRequest, ListAudiencesResponse> call);

        partial void Modify_CreateAudienceApiCall(ref gaxgrpc::ApiCall<CreateAudienceRequest, Audience> call);

        partial void Modify_UpdateAudienceApiCall(ref gaxgrpc::ApiCall<UpdateAudienceRequest, Audience> call);

        partial void Modify_ArchiveAudienceApiCall(ref gaxgrpc::ApiCall<ArchiveAudienceRequest, wkt::Empty> call);

        partial void Modify_GetSearchAds360LinkApiCall(ref gaxgrpc::ApiCall<GetSearchAds360LinkRequest, SearchAds360Link> call);

        partial void Modify_ListSearchAds360LinksApiCall(ref gaxgrpc::ApiCall<ListSearchAds360LinksRequest, ListSearchAds360LinksResponse> call);

        partial void Modify_CreateSearchAds360LinkApiCall(ref gaxgrpc::ApiCall<CreateSearchAds360LinkRequest, SearchAds360Link> call);

        partial void Modify_DeleteSearchAds360LinkApiCall(ref gaxgrpc::ApiCall<DeleteSearchAds360LinkRequest, wkt::Empty> call);

        partial void Modify_UpdateSearchAds360LinkApiCall(ref gaxgrpc::ApiCall<UpdateSearchAds360LinkRequest, SearchAds360Link> call);

        partial void Modify_GetAttributionSettingsApiCall(ref gaxgrpc::ApiCall<GetAttributionSettingsRequest, AttributionSettings> call);

        partial void Modify_UpdateAttributionSettingsApiCall(ref gaxgrpc::ApiCall<UpdateAttributionSettingsRequest, AttributionSettings> call);

        partial void Modify_RunAccessReportApiCall(ref gaxgrpc::ApiCall<RunAccessReportRequest, RunAccessReportResponse> call);

        partial void Modify_CreateAccessBindingApiCall(ref gaxgrpc::ApiCall<CreateAccessBindingRequest, AccessBinding> call);

        partial void Modify_GetAccessBindingApiCall(ref gaxgrpc::ApiCall<GetAccessBindingRequest, AccessBinding> call);

        partial void Modify_UpdateAccessBindingApiCall(ref gaxgrpc::ApiCall<UpdateAccessBindingRequest, AccessBinding> call);

        partial void Modify_DeleteAccessBindingApiCall(ref gaxgrpc::ApiCall<DeleteAccessBindingRequest, wkt::Empty> call);

        partial void Modify_ListAccessBindingsApiCall(ref gaxgrpc::ApiCall<ListAccessBindingsRequest, ListAccessBindingsResponse> call);

        partial void Modify_BatchCreateAccessBindingsApiCall(ref gaxgrpc::ApiCall<BatchCreateAccessBindingsRequest, BatchCreateAccessBindingsResponse> call);

        partial void Modify_BatchGetAccessBindingsApiCall(ref gaxgrpc::ApiCall<BatchGetAccessBindingsRequest, BatchGetAccessBindingsResponse> call);

        partial void Modify_BatchUpdateAccessBindingsApiCall(ref gaxgrpc::ApiCall<BatchUpdateAccessBindingsRequest, BatchUpdateAccessBindingsResponse> call);

        partial void Modify_BatchDeleteAccessBindingsApiCall(ref gaxgrpc::ApiCall<BatchDeleteAccessBindingsRequest, wkt::Empty> call);

        partial void Modify_GetExpandedDataSetApiCall(ref gaxgrpc::ApiCall<GetExpandedDataSetRequest, ExpandedDataSet> call);

        partial void Modify_ListExpandedDataSetsApiCall(ref gaxgrpc::ApiCall<ListExpandedDataSetsRequest, ListExpandedDataSetsResponse> call);

        partial void Modify_CreateExpandedDataSetApiCall(ref gaxgrpc::ApiCall<CreateExpandedDataSetRequest, ExpandedDataSet> call);

        partial void Modify_UpdateExpandedDataSetApiCall(ref gaxgrpc::ApiCall<UpdateExpandedDataSetRequest, ExpandedDataSet> call);

        partial void Modify_DeleteExpandedDataSetApiCall(ref gaxgrpc::ApiCall<DeleteExpandedDataSetRequest, wkt::Empty> call);

        partial void Modify_GetChannelGroupApiCall(ref gaxgrpc::ApiCall<GetChannelGroupRequest, ChannelGroup> call);

        partial void Modify_ListChannelGroupsApiCall(ref gaxgrpc::ApiCall<ListChannelGroupsRequest, ListChannelGroupsResponse> call);

        partial void Modify_CreateChannelGroupApiCall(ref gaxgrpc::ApiCall<CreateChannelGroupRequest, ChannelGroup> call);

        partial void Modify_UpdateChannelGroupApiCall(ref gaxgrpc::ApiCall<UpdateChannelGroupRequest, ChannelGroup> call);

        partial void Modify_DeleteChannelGroupApiCall(ref gaxgrpc::ApiCall<DeleteChannelGroupRequest, wkt::Empty> call);

        partial void Modify_SetAutomatedGa4ConfigurationOptOutApiCall(ref gaxgrpc::ApiCall<SetAutomatedGa4ConfigurationOptOutRequest, SetAutomatedGa4ConfigurationOptOutResponse> call);

        partial void Modify_FetchAutomatedGa4ConfigurationOptOutApiCall(ref gaxgrpc::ApiCall<FetchAutomatedGa4ConfigurationOptOutRequest, FetchAutomatedGa4ConfigurationOptOutResponse> call);

        partial void Modify_CreateBigQueryLinkApiCall(ref gaxgrpc::ApiCall<CreateBigQueryLinkRequest, BigQueryLink> call);

        partial void Modify_GetBigQueryLinkApiCall(ref gaxgrpc::ApiCall<GetBigQueryLinkRequest, BigQueryLink> call);

        partial void Modify_ListBigQueryLinksApiCall(ref gaxgrpc::ApiCall<ListBigQueryLinksRequest, ListBigQueryLinksResponse> call);

        partial void Modify_DeleteBigQueryLinkApiCall(ref gaxgrpc::ApiCall<DeleteBigQueryLinkRequest, wkt::Empty> call);

        partial void Modify_UpdateBigQueryLinkApiCall(ref gaxgrpc::ApiCall<UpdateBigQueryLinkRequest, BigQueryLink> call);

        partial void Modify_GetEnhancedMeasurementSettingsApiCall(ref gaxgrpc::ApiCall<GetEnhancedMeasurementSettingsRequest, EnhancedMeasurementSettings> call);

        partial void Modify_UpdateEnhancedMeasurementSettingsApiCall(ref gaxgrpc::ApiCall<UpdateEnhancedMeasurementSettingsRequest, EnhancedMeasurementSettings> call);

        partial void Modify_CreateConnectedSiteTagApiCall(ref gaxgrpc::ApiCall<CreateConnectedSiteTagRequest, CreateConnectedSiteTagResponse> call);

        partial void Modify_DeleteConnectedSiteTagApiCall(ref gaxgrpc::ApiCall<DeleteConnectedSiteTagRequest, wkt::Empty> call);

        partial void Modify_ListConnectedSiteTagsApiCall(ref gaxgrpc::ApiCall<ListConnectedSiteTagsRequest, ListConnectedSiteTagsResponse> call);

        partial void Modify_FetchConnectedGa4PropertyApiCall(ref gaxgrpc::ApiCall<FetchConnectedGa4PropertyRequest, FetchConnectedGa4PropertyResponse> call);

        partial void Modify_GetAdSenseLinkApiCall(ref gaxgrpc::ApiCall<GetAdSenseLinkRequest, AdSenseLink> call);

        partial void Modify_CreateAdSenseLinkApiCall(ref gaxgrpc::ApiCall<CreateAdSenseLinkRequest, AdSenseLink> call);

        partial void Modify_DeleteAdSenseLinkApiCall(ref gaxgrpc::ApiCall<DeleteAdSenseLinkRequest, wkt::Empty> call);

        partial void Modify_ListAdSenseLinksApiCall(ref gaxgrpc::ApiCall<ListAdSenseLinksRequest, ListAdSenseLinksResponse> call);

        partial void Modify_GetEventCreateRuleApiCall(ref gaxgrpc::ApiCall<GetEventCreateRuleRequest, EventCreateRule> call);

        partial void Modify_ListEventCreateRulesApiCall(ref gaxgrpc::ApiCall<ListEventCreateRulesRequest, ListEventCreateRulesResponse> call);

        partial void Modify_CreateEventCreateRuleApiCall(ref gaxgrpc::ApiCall<CreateEventCreateRuleRequest, EventCreateRule> call);

        partial void Modify_UpdateEventCreateRuleApiCall(ref gaxgrpc::ApiCall<UpdateEventCreateRuleRequest, EventCreateRule> call);

        partial void Modify_DeleteEventCreateRuleApiCall(ref gaxgrpc::ApiCall<DeleteEventCreateRuleRequest, wkt::Empty> call);

        partial void Modify_GetEventEditRuleApiCall(ref gaxgrpc::ApiCall<GetEventEditRuleRequest, EventEditRule> call);

        partial void Modify_ListEventEditRulesApiCall(ref gaxgrpc::ApiCall<ListEventEditRulesRequest, ListEventEditRulesResponse> call);

        partial void Modify_CreateEventEditRuleApiCall(ref gaxgrpc::ApiCall<CreateEventEditRuleRequest, EventEditRule> call);

        partial void Modify_UpdateEventEditRuleApiCall(ref gaxgrpc::ApiCall<UpdateEventEditRuleRequest, EventEditRule> call);

        partial void Modify_DeleteEventEditRuleApiCall(ref gaxgrpc::ApiCall<DeleteEventEditRuleRequest, wkt::Empty> call);

        partial void Modify_ReorderEventEditRulesApiCall(ref gaxgrpc::ApiCall<ReorderEventEditRulesRequest, wkt::Empty> call);

        partial void Modify_UpdateDataRedactionSettingsApiCall(ref gaxgrpc::ApiCall<UpdateDataRedactionSettingsRequest, DataRedactionSettings> call);

        partial void Modify_GetDataRedactionSettingsApiCall(ref gaxgrpc::ApiCall<GetDataRedactionSettingsRequest, DataRedactionSettings> call);

        partial void Modify_GetCalculatedMetricApiCall(ref gaxgrpc::ApiCall<GetCalculatedMetricRequest, CalculatedMetric> call);

        partial void Modify_CreateCalculatedMetricApiCall(ref gaxgrpc::ApiCall<CreateCalculatedMetricRequest, CalculatedMetric> call);

        partial void Modify_ListCalculatedMetricsApiCall(ref gaxgrpc::ApiCall<ListCalculatedMetricsRequest, ListCalculatedMetricsResponse> call);

        partial void Modify_UpdateCalculatedMetricApiCall(ref gaxgrpc::ApiCall<UpdateCalculatedMetricRequest, CalculatedMetric> call);

        partial void Modify_DeleteCalculatedMetricApiCall(ref gaxgrpc::ApiCall<DeleteCalculatedMetricRequest, wkt::Empty> call);

        partial void Modify_CreateRollupPropertyApiCall(ref gaxgrpc::ApiCall<CreateRollupPropertyRequest, CreateRollupPropertyResponse> call);

        partial void Modify_GetRollupPropertySourceLinkApiCall(ref gaxgrpc::ApiCall<GetRollupPropertySourceLinkRequest, RollupPropertySourceLink> call);

        partial void Modify_ListRollupPropertySourceLinksApiCall(ref gaxgrpc::ApiCall<ListRollupPropertySourceLinksRequest, ListRollupPropertySourceLinksResponse> call);

        partial void Modify_CreateRollupPropertySourceLinkApiCall(ref gaxgrpc::ApiCall<CreateRollupPropertySourceLinkRequest, RollupPropertySourceLink> call);

        partial void Modify_DeleteRollupPropertySourceLinkApiCall(ref gaxgrpc::ApiCall<DeleteRollupPropertySourceLinkRequest, wkt::Empty> call);

        partial void Modify_ProvisionSubpropertyApiCall(ref gaxgrpc::ApiCall<ProvisionSubpropertyRequest, ProvisionSubpropertyResponse> call);

        partial void Modify_CreateSubpropertyEventFilterApiCall(ref gaxgrpc::ApiCall<CreateSubpropertyEventFilterRequest, SubpropertyEventFilter> call);

        partial void Modify_GetSubpropertyEventFilterApiCall(ref gaxgrpc::ApiCall<GetSubpropertyEventFilterRequest, SubpropertyEventFilter> call);

        partial void Modify_ListSubpropertyEventFiltersApiCall(ref gaxgrpc::ApiCall<ListSubpropertyEventFiltersRequest, ListSubpropertyEventFiltersResponse> call);

        partial void Modify_UpdateSubpropertyEventFilterApiCall(ref gaxgrpc::ApiCall<UpdateSubpropertyEventFilterRequest, SubpropertyEventFilter> call);

        partial void Modify_DeleteSubpropertyEventFilterApiCall(ref gaxgrpc::ApiCall<DeleteSubpropertyEventFilterRequest, wkt::Empty> call);

        partial void OnConstruction(AnalyticsAdminService.AnalyticsAdminServiceClient grpcClient, AnalyticsAdminServiceSettings effectiveSettings, gaxgrpc::ClientHelper clientHelper);

        /// <summary>The underlying gRPC AnalyticsAdminService client</summary>
        public override AnalyticsAdminService.AnalyticsAdminServiceClient GrpcClient { get; }

        partial void Modify_GetAccountRequest(ref GetAccountRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListAccountsRequest(ref ListAccountsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteAccountRequest(ref DeleteAccountRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateAccountRequest(ref UpdateAccountRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ProvisionAccountTicketRequest(ref ProvisionAccountTicketRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListAccountSummariesRequest(ref ListAccountSummariesRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetPropertyRequest(ref GetPropertyRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListPropertiesRequest(ref ListPropertiesRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreatePropertyRequest(ref CreatePropertyRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeletePropertyRequest(ref DeletePropertyRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdatePropertyRequest(ref UpdatePropertyRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateFirebaseLinkRequest(ref CreateFirebaseLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteFirebaseLinkRequest(ref DeleteFirebaseLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListFirebaseLinksRequest(ref ListFirebaseLinksRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetGlobalSiteTagRequest(ref GetGlobalSiteTagRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateGoogleAdsLinkRequest(ref CreateGoogleAdsLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateGoogleAdsLinkRequest(ref UpdateGoogleAdsLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteGoogleAdsLinkRequest(ref DeleteGoogleAdsLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListGoogleAdsLinksRequest(ref ListGoogleAdsLinksRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetDataSharingSettingsRequest(ref GetDataSharingSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetMeasurementProtocolSecretRequest(ref GetMeasurementProtocolSecretRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListMeasurementProtocolSecretsRequest(ref ListMeasurementProtocolSecretsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateMeasurementProtocolSecretRequest(ref CreateMeasurementProtocolSecretRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteMeasurementProtocolSecretRequest(ref DeleteMeasurementProtocolSecretRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateMeasurementProtocolSecretRequest(ref UpdateMeasurementProtocolSecretRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_AcknowledgeUserDataCollectionRequest(ref AcknowledgeUserDataCollectionRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetSKAdNetworkConversionValueSchemaRequest(ref GetSKAdNetworkConversionValueSchemaRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateSKAdNetworkConversionValueSchemaRequest(ref CreateSKAdNetworkConversionValueSchemaRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteSKAdNetworkConversionValueSchemaRequest(ref DeleteSKAdNetworkConversionValueSchemaRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateSKAdNetworkConversionValueSchemaRequest(ref UpdateSKAdNetworkConversionValueSchemaRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListSKAdNetworkConversionValueSchemasRequest(ref ListSKAdNetworkConversionValueSchemasRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_SearchChangeHistoryEventsRequest(ref SearchChangeHistoryEventsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetGoogleSignalsSettingsRequest(ref GetGoogleSignalsSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateGoogleSignalsSettingsRequest(ref UpdateGoogleSignalsSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateConversionEventRequest(ref CreateConversionEventRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateConversionEventRequest(ref UpdateConversionEventRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetConversionEventRequest(ref GetConversionEventRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteConversionEventRequest(ref DeleteConversionEventRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListConversionEventsRequest(ref ListConversionEventsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateKeyEventRequest(ref CreateKeyEventRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateKeyEventRequest(ref UpdateKeyEventRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetKeyEventRequest(ref GetKeyEventRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteKeyEventRequest(ref DeleteKeyEventRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListKeyEventsRequest(ref ListKeyEventsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetDisplayVideo360AdvertiserLinkRequest(ref GetDisplayVideo360AdvertiserLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListDisplayVideo360AdvertiserLinksRequest(ref ListDisplayVideo360AdvertiserLinksRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateDisplayVideo360AdvertiserLinkRequest(ref CreateDisplayVideo360AdvertiserLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteDisplayVideo360AdvertiserLinkRequest(ref DeleteDisplayVideo360AdvertiserLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateDisplayVideo360AdvertiserLinkRequest(ref UpdateDisplayVideo360AdvertiserLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetDisplayVideo360AdvertiserLinkProposalRequest(ref GetDisplayVideo360AdvertiserLinkProposalRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListDisplayVideo360AdvertiserLinkProposalsRequest(ref ListDisplayVideo360AdvertiserLinkProposalsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateDisplayVideo360AdvertiserLinkProposalRequest(ref CreateDisplayVideo360AdvertiserLinkProposalRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteDisplayVideo360AdvertiserLinkProposalRequest(ref DeleteDisplayVideo360AdvertiserLinkProposalRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ApproveDisplayVideo360AdvertiserLinkProposalRequest(ref ApproveDisplayVideo360AdvertiserLinkProposalRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CancelDisplayVideo360AdvertiserLinkProposalRequest(ref CancelDisplayVideo360AdvertiserLinkProposalRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateCustomDimensionRequest(ref CreateCustomDimensionRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateCustomDimensionRequest(ref UpdateCustomDimensionRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListCustomDimensionsRequest(ref ListCustomDimensionsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ArchiveCustomDimensionRequest(ref ArchiveCustomDimensionRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetCustomDimensionRequest(ref GetCustomDimensionRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateCustomMetricRequest(ref CreateCustomMetricRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateCustomMetricRequest(ref UpdateCustomMetricRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListCustomMetricsRequest(ref ListCustomMetricsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ArchiveCustomMetricRequest(ref ArchiveCustomMetricRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetCustomMetricRequest(ref GetCustomMetricRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetDataRetentionSettingsRequest(ref GetDataRetentionSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateDataRetentionSettingsRequest(ref UpdateDataRetentionSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateDataStreamRequest(ref CreateDataStreamRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteDataStreamRequest(ref DeleteDataStreamRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateDataStreamRequest(ref UpdateDataStreamRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListDataStreamsRequest(ref ListDataStreamsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetDataStreamRequest(ref GetDataStreamRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetAudienceRequest(ref GetAudienceRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListAudiencesRequest(ref ListAudiencesRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateAudienceRequest(ref CreateAudienceRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateAudienceRequest(ref UpdateAudienceRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ArchiveAudienceRequest(ref ArchiveAudienceRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetSearchAds360LinkRequest(ref GetSearchAds360LinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListSearchAds360LinksRequest(ref ListSearchAds360LinksRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateSearchAds360LinkRequest(ref CreateSearchAds360LinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteSearchAds360LinkRequest(ref DeleteSearchAds360LinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateSearchAds360LinkRequest(ref UpdateSearchAds360LinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetAttributionSettingsRequest(ref GetAttributionSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateAttributionSettingsRequest(ref UpdateAttributionSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_RunAccessReportRequest(ref RunAccessReportRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateAccessBindingRequest(ref CreateAccessBindingRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetAccessBindingRequest(ref GetAccessBindingRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateAccessBindingRequest(ref UpdateAccessBindingRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteAccessBindingRequest(ref DeleteAccessBindingRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListAccessBindingsRequest(ref ListAccessBindingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_BatchCreateAccessBindingsRequest(ref BatchCreateAccessBindingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_BatchGetAccessBindingsRequest(ref BatchGetAccessBindingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_BatchUpdateAccessBindingsRequest(ref BatchUpdateAccessBindingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_BatchDeleteAccessBindingsRequest(ref BatchDeleteAccessBindingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetExpandedDataSetRequest(ref GetExpandedDataSetRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListExpandedDataSetsRequest(ref ListExpandedDataSetsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateExpandedDataSetRequest(ref CreateExpandedDataSetRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateExpandedDataSetRequest(ref UpdateExpandedDataSetRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteExpandedDataSetRequest(ref DeleteExpandedDataSetRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetChannelGroupRequest(ref GetChannelGroupRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListChannelGroupsRequest(ref ListChannelGroupsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateChannelGroupRequest(ref CreateChannelGroupRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateChannelGroupRequest(ref UpdateChannelGroupRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteChannelGroupRequest(ref DeleteChannelGroupRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_SetAutomatedGa4ConfigurationOptOutRequest(ref SetAutomatedGa4ConfigurationOptOutRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_FetchAutomatedGa4ConfigurationOptOutRequest(ref FetchAutomatedGa4ConfigurationOptOutRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateBigQueryLinkRequest(ref CreateBigQueryLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetBigQueryLinkRequest(ref GetBigQueryLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListBigQueryLinksRequest(ref ListBigQueryLinksRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteBigQueryLinkRequest(ref DeleteBigQueryLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateBigQueryLinkRequest(ref UpdateBigQueryLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetEnhancedMeasurementSettingsRequest(ref GetEnhancedMeasurementSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateEnhancedMeasurementSettingsRequest(ref UpdateEnhancedMeasurementSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateConnectedSiteTagRequest(ref CreateConnectedSiteTagRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteConnectedSiteTagRequest(ref DeleteConnectedSiteTagRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListConnectedSiteTagsRequest(ref ListConnectedSiteTagsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_FetchConnectedGa4PropertyRequest(ref FetchConnectedGa4PropertyRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetAdSenseLinkRequest(ref GetAdSenseLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateAdSenseLinkRequest(ref CreateAdSenseLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteAdSenseLinkRequest(ref DeleteAdSenseLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListAdSenseLinksRequest(ref ListAdSenseLinksRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetEventCreateRuleRequest(ref GetEventCreateRuleRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListEventCreateRulesRequest(ref ListEventCreateRulesRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateEventCreateRuleRequest(ref CreateEventCreateRuleRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateEventCreateRuleRequest(ref UpdateEventCreateRuleRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteEventCreateRuleRequest(ref DeleteEventCreateRuleRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetEventEditRuleRequest(ref GetEventEditRuleRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListEventEditRulesRequest(ref ListEventEditRulesRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateEventEditRuleRequest(ref CreateEventEditRuleRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateEventEditRuleRequest(ref UpdateEventEditRuleRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteEventEditRuleRequest(ref DeleteEventEditRuleRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ReorderEventEditRulesRequest(ref ReorderEventEditRulesRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateDataRedactionSettingsRequest(ref UpdateDataRedactionSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetDataRedactionSettingsRequest(ref GetDataRedactionSettingsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetCalculatedMetricRequest(ref GetCalculatedMetricRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateCalculatedMetricRequest(ref CreateCalculatedMetricRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListCalculatedMetricsRequest(ref ListCalculatedMetricsRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateCalculatedMetricRequest(ref UpdateCalculatedMetricRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteCalculatedMetricRequest(ref DeleteCalculatedMetricRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateRollupPropertyRequest(ref CreateRollupPropertyRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetRollupPropertySourceLinkRequest(ref GetRollupPropertySourceLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListRollupPropertySourceLinksRequest(ref ListRollupPropertySourceLinksRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateRollupPropertySourceLinkRequest(ref CreateRollupPropertySourceLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteRollupPropertySourceLinkRequest(ref DeleteRollupPropertySourceLinkRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ProvisionSubpropertyRequest(ref ProvisionSubpropertyRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_CreateSubpropertyEventFilterRequest(ref CreateSubpropertyEventFilterRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_GetSubpropertyEventFilterRequest(ref GetSubpropertyEventFilterRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_ListSubpropertyEventFiltersRequest(ref ListSubpropertyEventFiltersRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_UpdateSubpropertyEventFilterRequest(ref UpdateSubpropertyEventFilterRequest request, ref gaxgrpc::CallSettings settings);

        partial void Modify_DeleteSubpropertyEventFilterRequest(ref DeleteSubpropertyEventFilterRequest request, ref gaxgrpc::CallSettings settings);

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Account GetAccount(GetAccountRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAccountRequest(ref request, ref callSettings);
            return _callGetAccount.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single Account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Account> GetAccountAsync(GetAccountRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAccountRequest(ref request, ref callSettings);
            return _callGetAccount.Async(request, callSettings);
        }

        /// <summary>
        /// Returns all accounts accessible by the caller.
        /// 
        /// Note that these accounts might not currently have GA4 properties.
        /// Soft-deleted (ie: "trashed") accounts are excluded by default.
        /// Returns an empty list if no relevant accounts are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="Account"/> resources.</returns>
        public override gax::PagedEnumerable<ListAccountsResponse, Account> ListAccounts(ListAccountsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAccountsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListAccountsRequest, ListAccountsResponse, Account>(_callListAccounts, request, callSettings);
        }

        /// <summary>
        /// Returns all accounts accessible by the caller.
        /// 
        /// Note that these accounts might not currently have GA4 properties.
        /// Soft-deleted (ie: "trashed") accounts are excluded by default.
        /// Returns an empty list if no relevant accounts are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="Account"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListAccountsResponse, Account> ListAccountsAsync(ListAccountsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAccountsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListAccountsRequest, ListAccountsResponse, Account>(_callListAccounts, request, callSettings);
        }

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteAccount(DeleteAccountRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteAccountRequest(ref request, ref callSettings);
            _callDeleteAccount.Sync(request, callSettings);
        }

        /// <summary>
        /// Marks target Account as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted accounts.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the accounts are not restored before the expiration time, the account
        /// and all child resources (eg: Properties, GoogleAdsLinks, Streams,
        /// AccessBindings) will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteAccountAsync(DeleteAccountRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteAccountRequest(ref request, ref callSettings);
            return _callDeleteAccount.Async(request, callSettings);
        }

        /// <summary>
        /// Updates an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Account UpdateAccount(UpdateAccountRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateAccountRequest(ref request, ref callSettings);
            return _callUpdateAccount.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Account> UpdateAccountAsync(UpdateAccountRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateAccountRequest(ref request, ref callSettings);
            return _callUpdateAccount.Async(request, callSettings);
        }

        /// <summary>
        /// Requests a ticket for creating an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ProvisionAccountTicketResponse ProvisionAccountTicket(ProvisionAccountTicketRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ProvisionAccountTicketRequest(ref request, ref callSettings);
            return _callProvisionAccountTicket.Sync(request, callSettings);
        }

        /// <summary>
        /// Requests a ticket for creating an account.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ProvisionAccountTicketResponse> ProvisionAccountTicketAsync(ProvisionAccountTicketRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ProvisionAccountTicketRequest(ref request, ref callSettings);
            return _callProvisionAccountTicket.Async(request, callSettings);
        }

        /// <summary>
        /// Returns summaries of all accounts accessible by the caller.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AccountSummary"/> resources.</returns>
        public override gax::PagedEnumerable<ListAccountSummariesResponse, AccountSummary> ListAccountSummaries(ListAccountSummariesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAccountSummariesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListAccountSummariesRequest, ListAccountSummariesResponse, AccountSummary>(_callListAccountSummaries, request, callSettings);
        }

        /// <summary>
        /// Returns summaries of all accounts accessible by the caller.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AccountSummary"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListAccountSummariesResponse, AccountSummary> ListAccountSummariesAsync(ListAccountSummariesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAccountSummariesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListAccountSummariesRequest, ListAccountSummariesResponse, AccountSummary>(_callListAccountSummaries, request, callSettings);
        }

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Property GetProperty(GetPropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetPropertyRequest(ref request, ref callSettings);
            return _callGetProperty.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single "GA4" Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Property> GetPropertyAsync(GetPropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetPropertyRequest(ref request, ref callSettings);
            return _callGetProperty.Async(request, callSettings);
        }

        /// <summary>
        /// Returns child Properties under the specified parent Account.
        /// 
        /// Only "GA4" properties will be returned.
        /// Properties will be excluded if the caller does not have access.
        /// Soft-deleted (ie: "trashed") properties are excluded by default.
        /// Returns an empty list if no relevant properties are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="Property"/> resources.</returns>
        public override gax::PagedEnumerable<ListPropertiesResponse, Property> ListProperties(ListPropertiesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListPropertiesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListPropertiesRequest, ListPropertiesResponse, Property>(_callListProperties, request, callSettings);
        }

        /// <summary>
        /// Returns child Properties under the specified parent Account.
        /// 
        /// Only "GA4" properties will be returned.
        /// Properties will be excluded if the caller does not have access.
        /// Soft-deleted (ie: "trashed") properties are excluded by default.
        /// Returns an empty list if no relevant properties are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="Property"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListPropertiesResponse, Property> ListPropertiesAsync(ListPropertiesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListPropertiesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListPropertiesRequest, ListPropertiesResponse, Property>(_callListProperties, request, callSettings);
        }

        /// <summary>
        /// Creates an "GA4" property with the specified location and attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Property CreateProperty(CreatePropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreatePropertyRequest(ref request, ref callSettings);
            return _callCreateProperty.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates an "GA4" property with the specified location and attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Property> CreatePropertyAsync(CreatePropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreatePropertyRequest(ref request, ref callSettings);
            return _callCreateProperty.Async(request, callSettings);
        }

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Property DeleteProperty(DeletePropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeletePropertyRequest(ref request, ref callSettings);
            return _callDeleteProperty.Sync(request, callSettings);
        }

        /// <summary>
        /// Marks target Property as soft-deleted (ie: "trashed") and returns it.
        /// 
        /// This API does not have a method to restore soft-deleted properties.
        /// However, they can be restored using the Trash Can UI.
        /// 
        /// If the properties are not restored before the expiration time, the Property
        /// and all child resources (eg: GoogleAdsLinks, Streams, AccessBindings)
        /// will be permanently purged.
        /// https://support.google.com/analytics/answer/6154772
        /// 
        /// Returns an error if the target is not found, or is not a GA4 Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Property> DeletePropertyAsync(DeletePropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeletePropertyRequest(ref request, ref callSettings);
            return _callDeleteProperty.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Property UpdateProperty(UpdatePropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdatePropertyRequest(ref request, ref callSettings);
            return _callUpdateProperty.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Property> UpdatePropertyAsync(UpdatePropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdatePropertyRequest(ref request, ref callSettings);
            return _callUpdateProperty.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override FirebaseLink CreateFirebaseLink(CreateFirebaseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateFirebaseLinkRequest(ref request, ref callSettings);
            return _callCreateFirebaseLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a FirebaseLink.
        /// 
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<FirebaseLink> CreateFirebaseLinkAsync(CreateFirebaseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateFirebaseLinkRequest(ref request, ref callSettings);
            return _callCreateFirebaseLink.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteFirebaseLink(DeleteFirebaseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteFirebaseLinkRequest(ref request, ref callSettings);
            _callDeleteFirebaseLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a FirebaseLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteFirebaseLinkAsync(DeleteFirebaseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteFirebaseLinkRequest(ref request, ref callSettings);
            return _callDeleteFirebaseLink.Async(request, callSettings);
        }

        /// <summary>
        /// Lists FirebaseLinks on a property.
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="FirebaseLink"/> resources.</returns>
        public override gax::PagedEnumerable<ListFirebaseLinksResponse, FirebaseLink> ListFirebaseLinks(ListFirebaseLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListFirebaseLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListFirebaseLinksRequest, ListFirebaseLinksResponse, FirebaseLink>(_callListFirebaseLinks, request, callSettings);
        }

        /// <summary>
        /// Lists FirebaseLinks on a property.
        /// Properties can have at most one FirebaseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="FirebaseLink"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListFirebaseLinksResponse, FirebaseLink> ListFirebaseLinksAsync(ListFirebaseLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListFirebaseLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListFirebaseLinksRequest, ListFirebaseLinksResponse, FirebaseLink>(_callListFirebaseLinks, request, callSettings);
        }

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override GlobalSiteTag GetGlobalSiteTag(GetGlobalSiteTagRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetGlobalSiteTagRequest(ref request, ref callSettings);
            return _callGetGlobalSiteTag.Sync(request, callSettings);
        }

        /// <summary>
        /// Returns the Site Tag for the specified web stream.
        /// Site Tags are immutable singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<GlobalSiteTag> GetGlobalSiteTagAsync(GetGlobalSiteTagRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetGlobalSiteTagRequest(ref request, ref callSettings);
            return _callGetGlobalSiteTag.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override GoogleAdsLink CreateGoogleAdsLink(CreateGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateGoogleAdsLinkRequest(ref request, ref callSettings);
            return _callCreateGoogleAdsLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a GoogleAdsLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<GoogleAdsLink> CreateGoogleAdsLinkAsync(CreateGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateGoogleAdsLinkRequest(ref request, ref callSettings);
            return _callCreateGoogleAdsLink.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override GoogleAdsLink UpdateGoogleAdsLink(UpdateGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateGoogleAdsLinkRequest(ref request, ref callSettings);
            return _callUpdateGoogleAdsLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<GoogleAdsLink> UpdateGoogleAdsLinkAsync(UpdateGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateGoogleAdsLinkRequest(ref request, ref callSettings);
            return _callUpdateGoogleAdsLink.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteGoogleAdsLink(DeleteGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteGoogleAdsLinkRequest(ref request, ref callSettings);
            _callDeleteGoogleAdsLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a GoogleAdsLink on a property
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteGoogleAdsLinkAsync(DeleteGoogleAdsLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteGoogleAdsLinkRequest(ref request, ref callSettings);
            return _callDeleteGoogleAdsLink.Async(request, callSettings);
        }

        /// <summary>
        /// Lists GoogleAdsLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="GoogleAdsLink"/> resources.</returns>
        public override gax::PagedEnumerable<ListGoogleAdsLinksResponse, GoogleAdsLink> ListGoogleAdsLinks(ListGoogleAdsLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListGoogleAdsLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListGoogleAdsLinksRequest, ListGoogleAdsLinksResponse, GoogleAdsLink>(_callListGoogleAdsLinks, request, callSettings);
        }

        /// <summary>
        /// Lists GoogleAdsLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="GoogleAdsLink"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListGoogleAdsLinksResponse, GoogleAdsLink> ListGoogleAdsLinksAsync(ListGoogleAdsLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListGoogleAdsLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListGoogleAdsLinksRequest, ListGoogleAdsLinksResponse, GoogleAdsLink>(_callListGoogleAdsLinks, request, callSettings);
        }

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DataSharingSettings GetDataSharingSettings(GetDataSharingSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDataSharingSettingsRequest(ref request, ref callSettings);
            return _callGetDataSharingSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Get data sharing settings on an account.
        /// Data sharing settings are singletons.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DataSharingSettings> GetDataSharingSettingsAsync(GetDataSharingSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDataSharingSettingsRequest(ref request, ref callSettings);
            return _callGetDataSharingSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override MeasurementProtocolSecret GetMeasurementProtocolSecret(GetMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetMeasurementProtocolSecretRequest(ref request, ref callSettings);
            return _callGetMeasurementProtocolSecret.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single "GA4" MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<MeasurementProtocolSecret> GetMeasurementProtocolSecretAsync(GetMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetMeasurementProtocolSecretRequest(ref request, ref callSettings);
            return _callGetMeasurementProtocolSecret.Async(request, callSettings);
        }

        /// <summary>
        /// Returns child MeasurementProtocolSecrets under the specified parent
        /// Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="MeasurementProtocolSecret"/> resources.</returns>
        public override gax::PagedEnumerable<ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret> ListMeasurementProtocolSecrets(ListMeasurementProtocolSecretsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListMeasurementProtocolSecretsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListMeasurementProtocolSecretsRequest, ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret>(_callListMeasurementProtocolSecrets, request, callSettings);
        }

        /// <summary>
        /// Returns child MeasurementProtocolSecrets under the specified parent
        /// Property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="MeasurementProtocolSecret"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret> ListMeasurementProtocolSecretsAsync(ListMeasurementProtocolSecretsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListMeasurementProtocolSecretsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListMeasurementProtocolSecretsRequest, ListMeasurementProtocolSecretsResponse, MeasurementProtocolSecret>(_callListMeasurementProtocolSecrets, request, callSettings);
        }

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override MeasurementProtocolSecret CreateMeasurementProtocolSecret(CreateMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateMeasurementProtocolSecretRequest(ref request, ref callSettings);
            return _callCreateMeasurementProtocolSecret.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<MeasurementProtocolSecret> CreateMeasurementProtocolSecretAsync(CreateMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateMeasurementProtocolSecretRequest(ref request, ref callSettings);
            return _callCreateMeasurementProtocolSecret.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteMeasurementProtocolSecret(DeleteMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteMeasurementProtocolSecretRequest(ref request, ref callSettings);
            _callDeleteMeasurementProtocolSecret.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes target MeasurementProtocolSecret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteMeasurementProtocolSecretAsync(DeleteMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteMeasurementProtocolSecretRequest(ref request, ref callSettings);
            return _callDeleteMeasurementProtocolSecret.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override MeasurementProtocolSecret UpdateMeasurementProtocolSecret(UpdateMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateMeasurementProtocolSecretRequest(ref request, ref callSettings);
            return _callUpdateMeasurementProtocolSecret.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a measurement protocol secret.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<MeasurementProtocolSecret> UpdateMeasurementProtocolSecretAsync(UpdateMeasurementProtocolSecretRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateMeasurementProtocolSecretRequest(ref request, ref callSettings);
            return _callUpdateMeasurementProtocolSecret.Async(request, callSettings);
        }

        /// <summary>
        /// Acknowledges the terms of user data collection for the specified property.
        /// 
        /// This acknowledgement must be completed (either in the Google Analytics UI
        /// or through this API) before MeasurementProtocolSecret resources may be
        /// created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override AcknowledgeUserDataCollectionResponse AcknowledgeUserDataCollection(AcknowledgeUserDataCollectionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_AcknowledgeUserDataCollectionRequest(ref request, ref callSettings);
            return _callAcknowledgeUserDataCollection.Sync(request, callSettings);
        }

        /// <summary>
        /// Acknowledges the terms of user data collection for the specified property.
        /// 
        /// This acknowledgement must be completed (either in the Google Analytics UI
        /// or through this API) before MeasurementProtocolSecret resources may be
        /// created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<AcknowledgeUserDataCollectionResponse> AcknowledgeUserDataCollectionAsync(AcknowledgeUserDataCollectionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_AcknowledgeUserDataCollectionRequest(ref request, ref callSettings);
            return _callAcknowledgeUserDataCollection.Async(request, callSettings);
        }

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SKAdNetworkConversionValueSchema GetSKAdNetworkConversionValueSchema(GetSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetSKAdNetworkConversionValueSchemaRequest(ref request, ref callSettings);
            return _callGetSKAdNetworkConversionValueSchema.Sync(request, callSettings);
        }

        /// <summary>
        /// Looks up a single SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SKAdNetworkConversionValueSchema> GetSKAdNetworkConversionValueSchemaAsync(GetSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetSKAdNetworkConversionValueSchemaRequest(ref request, ref callSettings);
            return _callGetSKAdNetworkConversionValueSchema.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SKAdNetworkConversionValueSchema CreateSKAdNetworkConversionValueSchema(CreateSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateSKAdNetworkConversionValueSchemaRequest(ref request, ref callSettings);
            return _callCreateSKAdNetworkConversionValueSchema.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SKAdNetworkConversionValueSchema> CreateSKAdNetworkConversionValueSchemaAsync(CreateSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateSKAdNetworkConversionValueSchemaRequest(ref request, ref callSettings);
            return _callCreateSKAdNetworkConversionValueSchema.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteSKAdNetworkConversionValueSchema(DeleteSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteSKAdNetworkConversionValueSchemaRequest(ref request, ref callSettings);
            _callDeleteSKAdNetworkConversionValueSchema.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes target SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteSKAdNetworkConversionValueSchemaAsync(DeleteSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteSKAdNetworkConversionValueSchemaRequest(ref request, ref callSettings);
            return _callDeleteSKAdNetworkConversionValueSchema.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SKAdNetworkConversionValueSchema UpdateSKAdNetworkConversionValueSchema(UpdateSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateSKAdNetworkConversionValueSchemaRequest(ref request, ref callSettings);
            return _callUpdateSKAdNetworkConversionValueSchema.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SKAdNetworkConversionValueSchema> UpdateSKAdNetworkConversionValueSchemaAsync(UpdateSKAdNetworkConversionValueSchemaRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateSKAdNetworkConversionValueSchemaRequest(ref request, ref callSettings);
            return _callUpdateSKAdNetworkConversionValueSchema.Async(request, callSettings);
        }

        /// <summary>
        /// Lists SKAdNetworkConversionValueSchema on a stream.
        /// Properties can have at most one SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SKAdNetworkConversionValueSchema"/> resources.</returns>
        public override gax::PagedEnumerable<ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema> ListSKAdNetworkConversionValueSchemas(ListSKAdNetworkConversionValueSchemasRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListSKAdNetworkConversionValueSchemasRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListSKAdNetworkConversionValueSchemasRequest, ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema>(_callListSKAdNetworkConversionValueSchemas, request, callSettings);
        }

        /// <summary>
        /// Lists SKAdNetworkConversionValueSchema on a stream.
        /// Properties can have at most one SKAdNetworkConversionValueSchema.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="SKAdNetworkConversionValueSchema"/> resources.
        /// </returns>
        public override gax::PagedAsyncEnumerable<ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema> ListSKAdNetworkConversionValueSchemasAsync(ListSKAdNetworkConversionValueSchemasRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListSKAdNetworkConversionValueSchemasRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListSKAdNetworkConversionValueSchemasRequest, ListSKAdNetworkConversionValueSchemasResponse, SKAdNetworkConversionValueSchema>(_callListSKAdNetworkConversionValueSchemas, request, callSettings);
        }

        /// <summary>
        /// Searches through all changes to an account or its children given the
        /// specified set of filters.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ChangeHistoryEvent"/> resources.</returns>
        public override gax::PagedEnumerable<SearchChangeHistoryEventsResponse, ChangeHistoryEvent> SearchChangeHistoryEvents(SearchChangeHistoryEventsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_SearchChangeHistoryEventsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<SearchChangeHistoryEventsRequest, SearchChangeHistoryEventsResponse, ChangeHistoryEvent>(_callSearchChangeHistoryEvents, request, callSettings);
        }

        /// <summary>
        /// Searches through all changes to an account or its children given the
        /// specified set of filters.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ChangeHistoryEvent"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<SearchChangeHistoryEventsResponse, ChangeHistoryEvent> SearchChangeHistoryEventsAsync(SearchChangeHistoryEventsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_SearchChangeHistoryEventsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<SearchChangeHistoryEventsRequest, SearchChangeHistoryEventsResponse, ChangeHistoryEvent>(_callSearchChangeHistoryEvents, request, callSettings);
        }

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override GoogleSignalsSettings GetGoogleSignalsSettings(GetGoogleSignalsSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetGoogleSignalsSettingsRequest(ref request, ref callSettings);
            return _callGetGoogleSignalsSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<GoogleSignalsSettings> GetGoogleSignalsSettingsAsync(GetGoogleSignalsSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetGoogleSignalsSettingsRequest(ref request, ref callSettings);
            return _callGetGoogleSignalsSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Updates Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override GoogleSignalsSettings UpdateGoogleSignalsSettings(UpdateGoogleSignalsSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateGoogleSignalsSettingsRequest(ref request, ref callSettings);
            return _callUpdateGoogleSignalsSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates Google Signals settings for a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<GoogleSignalsSettings> UpdateGoogleSignalsSettingsAsync(UpdateGoogleSignalsSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateGoogleSignalsSettingsRequest(ref request, ref callSettings);
            return _callUpdateGoogleSignalsSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public override ConversionEvent CreateConversionEvent(CreateConversionEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateConversionEventRequest(ref request, ref callSettings);
            return _callCreateConversionEvent.Sync(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `CreateKeyEvent` instead.
        /// Creates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public override stt::Task<ConversionEvent> CreateConversionEventAsync(CreateConversionEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateConversionEventRequest(ref request, ref callSettings);
            return _callCreateConversionEvent.Async(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `UpdateKeyEvent` instead.
        /// Updates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public override ConversionEvent UpdateConversionEvent(UpdateConversionEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateConversionEventRequest(ref request, ref callSettings);
            return _callUpdateConversionEvent.Sync(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `UpdateKeyEvent` instead.
        /// Updates a conversion event with the specified attributes.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public override stt::Task<ConversionEvent> UpdateConversionEventAsync(UpdateConversionEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateConversionEventRequest(ref request, ref callSettings);
            return _callUpdateConversionEvent.Async(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public override ConversionEvent GetConversionEvent(GetConversionEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetConversionEventRequest(ref request, ref callSettings);
            return _callGetConversionEvent.Sync(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `GetKeyEvent` instead.
        /// Retrieve a single conversion event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public override stt::Task<ConversionEvent> GetConversionEventAsync(GetConversionEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetConversionEventRequest(ref request, ref callSettings);
            return _callGetConversionEvent.Async(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        [sys::ObsoleteAttribute]
        public override void DeleteConversionEvent(DeleteConversionEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteConversionEventRequest(ref request, ref callSettings);
            _callDeleteConversionEvent.Sync(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `DeleteKeyEvent` instead.
        /// Deletes a conversion event in a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        [sys::ObsoleteAttribute]
        public override stt::Task DeleteConversionEventAsync(DeleteConversionEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteConversionEventRequest(ref request, ref callSettings);
            return _callDeleteConversionEvent.Async(request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `ListKeyEvents` instead.
        /// Returns a list of conversion events in the specified parent property.
        /// 
        /// Returns an empty list if no conversion events are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ConversionEvent"/> resources.</returns>
        [sys::ObsoleteAttribute]
        public override gax::PagedEnumerable<ListConversionEventsResponse, ConversionEvent> ListConversionEvents(ListConversionEventsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListConversionEventsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListConversionEventsRequest, ListConversionEventsResponse, ConversionEvent>(_callListConversionEvents, request, callSettings);
        }

        /// <summary>
        /// Deprecated: Use `ListKeyEvents` instead.
        /// Returns a list of conversion events in the specified parent property.
        /// 
        /// Returns an empty list if no conversion events are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ConversionEvent"/> resources.</returns>
        [sys::ObsoleteAttribute]
        public override gax::PagedAsyncEnumerable<ListConversionEventsResponse, ConversionEvent> ListConversionEventsAsync(ListConversionEventsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListConversionEventsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListConversionEventsRequest, ListConversionEventsResponse, ConversionEvent>(_callListConversionEvents, request, callSettings);
        }

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override KeyEvent CreateKeyEvent(CreateKeyEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateKeyEventRequest(ref request, ref callSettings);
            return _callCreateKeyEvent.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<KeyEvent> CreateKeyEventAsync(CreateKeyEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateKeyEventRequest(ref request, ref callSettings);
            return _callCreateKeyEvent.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override KeyEvent UpdateKeyEvent(UpdateKeyEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateKeyEventRequest(ref request, ref callSettings);
            return _callUpdateKeyEvent.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<KeyEvent> UpdateKeyEventAsync(UpdateKeyEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateKeyEventRequest(ref request, ref callSettings);
            return _callUpdateKeyEvent.Async(request, callSettings);
        }

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override KeyEvent GetKeyEvent(GetKeyEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetKeyEventRequest(ref request, ref callSettings);
            return _callGetKeyEvent.Sync(request, callSettings);
        }

        /// <summary>
        /// Retrieve a single Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<KeyEvent> GetKeyEventAsync(GetKeyEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetKeyEventRequest(ref request, ref callSettings);
            return _callGetKeyEvent.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteKeyEvent(DeleteKeyEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteKeyEventRequest(ref request, ref callSettings);
            _callDeleteKeyEvent.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a Key Event.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteKeyEventAsync(DeleteKeyEventRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteKeyEventRequest(ref request, ref callSettings);
            return _callDeleteKeyEvent.Async(request, callSettings);
        }

        /// <summary>
        /// Returns a list of Key Events in the specified parent property.
        /// Returns an empty list if no Key Events are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="KeyEvent"/> resources.</returns>
        public override gax::PagedEnumerable<ListKeyEventsResponse, KeyEvent> ListKeyEvents(ListKeyEventsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListKeyEventsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListKeyEventsRequest, ListKeyEventsResponse, KeyEvent>(_callListKeyEvents, request, callSettings);
        }

        /// <summary>
        /// Returns a list of Key Events in the specified parent property.
        /// Returns an empty list if no Key Events are found.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="KeyEvent"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListKeyEventsResponse, KeyEvent> ListKeyEventsAsync(ListKeyEventsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListKeyEventsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListKeyEventsRequest, ListKeyEventsResponse, KeyEvent>(_callListKeyEvents, request, callSettings);
        }

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DisplayVideo360AdvertiserLink GetDisplayVideo360AdvertiserLink(GetDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDisplayVideo360AdvertiserLinkRequest(ref request, ref callSettings);
            return _callGetDisplayVideo360AdvertiserLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Look up a single DisplayVideo360AdvertiserLink
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DisplayVideo360AdvertiserLink> GetDisplayVideo360AdvertiserLinkAsync(GetDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDisplayVideo360AdvertiserLinkRequest(ref request, ref callSettings);
            return _callGetDisplayVideo360AdvertiserLink.Async(request, callSettings);
        }

        /// <summary>
        /// Lists all DisplayVideo360AdvertiserLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DisplayVideo360AdvertiserLink"/> resources.</returns>
        public override gax::PagedEnumerable<ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink> ListDisplayVideo360AdvertiserLinks(ListDisplayVideo360AdvertiserLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListDisplayVideo360AdvertiserLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListDisplayVideo360AdvertiserLinksRequest, ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink>(_callListDisplayVideo360AdvertiserLinks, request, callSettings);
        }

        /// <summary>
        /// Lists all DisplayVideo360AdvertiserLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="DisplayVideo360AdvertiserLink"/> resources.
        /// </returns>
        public override gax::PagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink> ListDisplayVideo360AdvertiserLinksAsync(ListDisplayVideo360AdvertiserLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListDisplayVideo360AdvertiserLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinksRequest, ListDisplayVideo360AdvertiserLinksResponse, DisplayVideo360AdvertiserLink>(_callListDisplayVideo360AdvertiserLinks, request, callSettings);
        }

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DisplayVideo360AdvertiserLink CreateDisplayVideo360AdvertiserLink(CreateDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateDisplayVideo360AdvertiserLinkRequest(ref request, ref callSettings);
            return _callCreateDisplayVideo360AdvertiserLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLink.
        /// This can only be utilized by users who have proper authorization both on
        /// the Google Analytics property and on the Display &amp; Video 360 advertiser.
        /// Users who do not have access to the Display &amp; Video 360 advertiser should
        /// instead seek to create a DisplayVideo360LinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DisplayVideo360AdvertiserLink> CreateDisplayVideo360AdvertiserLinkAsync(CreateDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateDisplayVideo360AdvertiserLinkRequest(ref request, ref callSettings);
            return _callCreateDisplayVideo360AdvertiserLink.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteDisplayVideo360AdvertiserLink(DeleteDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteDisplayVideo360AdvertiserLinkRequest(ref request, ref callSettings);
            _callDeleteDisplayVideo360AdvertiserLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteDisplayVideo360AdvertiserLinkAsync(DeleteDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteDisplayVideo360AdvertiserLinkRequest(ref request, ref callSettings);
            return _callDeleteDisplayVideo360AdvertiserLink.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DisplayVideo360AdvertiserLink UpdateDisplayVideo360AdvertiserLink(UpdateDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateDisplayVideo360AdvertiserLinkRequest(ref request, ref callSettings);
            return _callUpdateDisplayVideo360AdvertiserLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a DisplayVideo360AdvertiserLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DisplayVideo360AdvertiserLink> UpdateDisplayVideo360AdvertiserLinkAsync(UpdateDisplayVideo360AdvertiserLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateDisplayVideo360AdvertiserLinkRequest(ref request, ref callSettings);
            return _callUpdateDisplayVideo360AdvertiserLink.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DisplayVideo360AdvertiserLinkProposal GetDisplayVideo360AdvertiserLinkProposal(GetDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callGetDisplayVideo360AdvertiserLinkProposal.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DisplayVideo360AdvertiserLinkProposal> GetDisplayVideo360AdvertiserLinkProposalAsync(GetDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callGetDisplayVideo360AdvertiserLinkProposal.Async(request, callSettings);
        }

        /// <summary>
        /// Lists DisplayVideo360AdvertiserLinkProposals on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DisplayVideo360AdvertiserLinkProposal"/> resources.</returns>
        public override gax::PagedEnumerable<ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal> ListDisplayVideo360AdvertiserLinkProposals(ListDisplayVideo360AdvertiserLinkProposalsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListDisplayVideo360AdvertiserLinkProposalsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListDisplayVideo360AdvertiserLinkProposalsRequest, ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal>(_callListDisplayVideo360AdvertiserLinkProposals, request, callSettings);
        }

        /// <summary>
        /// Lists DisplayVideo360AdvertiserLinkProposals on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>
        /// A pageable asynchronous sequence of <see cref="DisplayVideo360AdvertiserLinkProposal"/> resources.
        /// </returns>
        public override gax::PagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal> ListDisplayVideo360AdvertiserLinkProposalsAsync(ListDisplayVideo360AdvertiserLinkProposalsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListDisplayVideo360AdvertiserLinkProposalsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListDisplayVideo360AdvertiserLinkProposalsRequest, ListDisplayVideo360AdvertiserLinkProposalsResponse, DisplayVideo360AdvertiserLinkProposal>(_callListDisplayVideo360AdvertiserLinkProposals, request, callSettings);
        }

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DisplayVideo360AdvertiserLinkProposal CreateDisplayVideo360AdvertiserLinkProposal(CreateDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callCreateDisplayVideo360AdvertiserLinkProposal.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a DisplayVideo360AdvertiserLinkProposal.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DisplayVideo360AdvertiserLinkProposal> CreateDisplayVideo360AdvertiserLinkProposalAsync(CreateDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callCreateDisplayVideo360AdvertiserLinkProposal.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteDisplayVideo360AdvertiserLinkProposal(DeleteDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            _callDeleteDisplayVideo360AdvertiserLinkProposal.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a DisplayVideo360AdvertiserLinkProposal on a property.
        /// This can only be used on cancelled proposals.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteDisplayVideo360AdvertiserLinkProposalAsync(DeleteDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callDeleteDisplayVideo360AdvertiserLinkProposal.Async(request, callSettings);
        }

        /// <summary>
        /// Approves a DisplayVideo360AdvertiserLinkProposal.
        /// The DisplayVideo360AdvertiserLinkProposal will be deleted and a new
        /// DisplayVideo360AdvertiserLink will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ApproveDisplayVideo360AdvertiserLinkProposalResponse ApproveDisplayVideo360AdvertiserLinkProposal(ApproveDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ApproveDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callApproveDisplayVideo360AdvertiserLinkProposal.Sync(request, callSettings);
        }

        /// <summary>
        /// Approves a DisplayVideo360AdvertiserLinkProposal.
        /// The DisplayVideo360AdvertiserLinkProposal will be deleted and a new
        /// DisplayVideo360AdvertiserLink will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ApproveDisplayVideo360AdvertiserLinkProposalResponse> ApproveDisplayVideo360AdvertiserLinkProposalAsync(ApproveDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ApproveDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callApproveDisplayVideo360AdvertiserLinkProposal.Async(request, callSettings);
        }

        /// <summary>
        /// Cancels a DisplayVideo360AdvertiserLinkProposal.
        /// Cancelling can mean either:
        /// - Declining a proposal initiated from Display &amp; Video 360
        /// - Withdrawing a proposal initiated from Google Analytics
        /// After being cancelled, a proposal will eventually be deleted automatically.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DisplayVideo360AdvertiserLinkProposal CancelDisplayVideo360AdvertiserLinkProposal(CancelDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CancelDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callCancelDisplayVideo360AdvertiserLinkProposal.Sync(request, callSettings);
        }

        /// <summary>
        /// Cancels a DisplayVideo360AdvertiserLinkProposal.
        /// Cancelling can mean either:
        /// - Declining a proposal initiated from Display &amp; Video 360
        /// - Withdrawing a proposal initiated from Google Analytics
        /// After being cancelled, a proposal will eventually be deleted automatically.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DisplayVideo360AdvertiserLinkProposal> CancelDisplayVideo360AdvertiserLinkProposalAsync(CancelDisplayVideo360AdvertiserLinkProposalRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CancelDisplayVideo360AdvertiserLinkProposalRequest(ref request, ref callSettings);
            return _callCancelDisplayVideo360AdvertiserLinkProposal.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CustomDimension CreateCustomDimension(CreateCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateCustomDimensionRequest(ref request, ref callSettings);
            return _callCreateCustomDimension.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CustomDimension> CreateCustomDimensionAsync(CreateCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateCustomDimensionRequest(ref request, ref callSettings);
            return _callCreateCustomDimension.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CustomDimension UpdateCustomDimension(UpdateCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateCustomDimensionRequest(ref request, ref callSettings);
            return _callUpdateCustomDimension.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CustomDimension> UpdateCustomDimensionAsync(UpdateCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateCustomDimensionRequest(ref request, ref callSettings);
            return _callUpdateCustomDimension.Async(request, callSettings);
        }

        /// <summary>
        /// Lists CustomDimensions on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CustomDimension"/> resources.</returns>
        public override gax::PagedEnumerable<ListCustomDimensionsResponse, CustomDimension> ListCustomDimensions(ListCustomDimensionsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListCustomDimensionsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListCustomDimensionsRequest, ListCustomDimensionsResponse, CustomDimension>(_callListCustomDimensions, request, callSettings);
        }

        /// <summary>
        /// Lists CustomDimensions on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CustomDimension"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListCustomDimensionsResponse, CustomDimension> ListCustomDimensionsAsync(ListCustomDimensionsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListCustomDimensionsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListCustomDimensionsRequest, ListCustomDimensionsResponse, CustomDimension>(_callListCustomDimensions, request, callSettings);
        }

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void ArchiveCustomDimension(ArchiveCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ArchiveCustomDimensionRequest(ref request, ref callSettings);
            _callArchiveCustomDimension.Sync(request, callSettings);
        }

        /// <summary>
        /// Archives a CustomDimension on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task ArchiveCustomDimensionAsync(ArchiveCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ArchiveCustomDimensionRequest(ref request, ref callSettings);
            return _callArchiveCustomDimension.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CustomDimension GetCustomDimension(GetCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetCustomDimensionRequest(ref request, ref callSettings);
            return _callGetCustomDimension.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single CustomDimension.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CustomDimension> GetCustomDimensionAsync(GetCustomDimensionRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetCustomDimensionRequest(ref request, ref callSettings);
            return _callGetCustomDimension.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CustomMetric CreateCustomMetric(CreateCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateCustomMetricRequest(ref request, ref callSettings);
            return _callCreateCustomMetric.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CustomMetric> CreateCustomMetricAsync(CreateCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateCustomMetricRequest(ref request, ref callSettings);
            return _callCreateCustomMetric.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CustomMetric UpdateCustomMetric(UpdateCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateCustomMetricRequest(ref request, ref callSettings);
            return _callUpdateCustomMetric.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CustomMetric> UpdateCustomMetricAsync(UpdateCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateCustomMetricRequest(ref request, ref callSettings);
            return _callUpdateCustomMetric.Async(request, callSettings);
        }

        /// <summary>
        /// Lists CustomMetrics on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CustomMetric"/> resources.</returns>
        public override gax::PagedEnumerable<ListCustomMetricsResponse, CustomMetric> ListCustomMetrics(ListCustomMetricsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListCustomMetricsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListCustomMetricsRequest, ListCustomMetricsResponse, CustomMetric>(_callListCustomMetrics, request, callSettings);
        }

        /// <summary>
        /// Lists CustomMetrics on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CustomMetric"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListCustomMetricsResponse, CustomMetric> ListCustomMetricsAsync(ListCustomMetricsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListCustomMetricsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListCustomMetricsRequest, ListCustomMetricsResponse, CustomMetric>(_callListCustomMetrics, request, callSettings);
        }

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void ArchiveCustomMetric(ArchiveCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ArchiveCustomMetricRequest(ref request, ref callSettings);
            _callArchiveCustomMetric.Sync(request, callSettings);
        }

        /// <summary>
        /// Archives a CustomMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task ArchiveCustomMetricAsync(ArchiveCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ArchiveCustomMetricRequest(ref request, ref callSettings);
            return _callArchiveCustomMetric.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CustomMetric GetCustomMetric(GetCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetCustomMetricRequest(ref request, ref callSettings);
            return _callGetCustomMetric.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single CustomMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CustomMetric> GetCustomMetricAsync(GetCustomMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetCustomMetricRequest(ref request, ref callSettings);
            return _callGetCustomMetric.Async(request, callSettings);
        }

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DataRetentionSettings GetDataRetentionSettings(GetDataRetentionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDataRetentionSettingsRequest(ref request, ref callSettings);
            return _callGetDataRetentionSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Returns the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DataRetentionSettings> GetDataRetentionSettingsAsync(GetDataRetentionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDataRetentionSettingsRequest(ref request, ref callSettings);
            return _callGetDataRetentionSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Updates the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DataRetentionSettings UpdateDataRetentionSettings(UpdateDataRetentionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateDataRetentionSettingsRequest(ref request, ref callSettings);
            return _callUpdateDataRetentionSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates the singleton data retention settings for this property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DataRetentionSettings> UpdateDataRetentionSettingsAsync(UpdateDataRetentionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateDataRetentionSettingsRequest(ref request, ref callSettings);
            return _callUpdateDataRetentionSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DataStream CreateDataStream(CreateDataStreamRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateDataStreamRequest(ref request, ref callSettings);
            return _callCreateDataStream.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DataStream> CreateDataStreamAsync(CreateDataStreamRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateDataStreamRequest(ref request, ref callSettings);
            return _callCreateDataStream.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteDataStream(DeleteDataStreamRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteDataStreamRequest(ref request, ref callSettings);
            _callDeleteDataStream.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteDataStreamAsync(DeleteDataStreamRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteDataStreamRequest(ref request, ref callSettings);
            return _callDeleteDataStream.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DataStream UpdateDataStream(UpdateDataStreamRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateDataStreamRequest(ref request, ref callSettings);
            return _callUpdateDataStream.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a DataStream on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DataStream> UpdateDataStreamAsync(UpdateDataStreamRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateDataStreamRequest(ref request, ref callSettings);
            return _callUpdateDataStream.Async(request, callSettings);
        }

        /// <summary>
        /// Lists DataStreams on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="DataStream"/> resources.</returns>
        public override gax::PagedEnumerable<ListDataStreamsResponse, DataStream> ListDataStreams(ListDataStreamsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListDataStreamsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListDataStreamsRequest, ListDataStreamsResponse, DataStream>(_callListDataStreams, request, callSettings);
        }

        /// <summary>
        /// Lists DataStreams on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="DataStream"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListDataStreamsResponse, DataStream> ListDataStreamsAsync(ListDataStreamsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListDataStreamsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListDataStreamsRequest, ListDataStreamsResponse, DataStream>(_callListDataStreams, request, callSettings);
        }

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DataStream GetDataStream(GetDataStreamRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDataStreamRequest(ref request, ref callSettings);
            return _callGetDataStream.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single DataStream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DataStream> GetDataStreamAsync(GetDataStreamRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDataStreamRequest(ref request, ref callSettings);
            return _callGetDataStream.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Audience GetAudience(GetAudienceRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAudienceRequest(ref request, ref callSettings);
            return _callGetAudience.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single Audience.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Audience> GetAudienceAsync(GetAudienceRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAudienceRequest(ref request, ref callSettings);
            return _callGetAudience.Async(request, callSettings);
        }

        /// <summary>
        /// Lists Audiences on a property.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="Audience"/> resources.</returns>
        public override gax::PagedEnumerable<ListAudiencesResponse, Audience> ListAudiences(ListAudiencesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAudiencesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListAudiencesRequest, ListAudiencesResponse, Audience>(_callListAudiences, request, callSettings);
        }

        /// <summary>
        /// Lists Audiences on a property.
        /// Audiences created before 2020 may not be supported.
        /// Default audiences will not show filter definitions.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="Audience"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListAudiencesResponse, Audience> ListAudiencesAsync(ListAudiencesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAudiencesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListAudiencesRequest, ListAudiencesResponse, Audience>(_callListAudiences, request, callSettings);
        }

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Audience CreateAudience(CreateAudienceRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateAudienceRequest(ref request, ref callSettings);
            return _callCreateAudience.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates an Audience.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Audience> CreateAudienceAsync(CreateAudienceRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateAudienceRequest(ref request, ref callSettings);
            return _callCreateAudience.Async(request, callSettings);
        }

        /// <summary>
        /// Updates an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override Audience UpdateAudience(UpdateAudienceRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateAudienceRequest(ref request, ref callSettings);
            return _callUpdateAudience.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<Audience> UpdateAudienceAsync(UpdateAudienceRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateAudienceRequest(ref request, ref callSettings);
            return _callUpdateAudience.Async(request, callSettings);
        }

        /// <summary>
        /// Archives an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void ArchiveAudience(ArchiveAudienceRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ArchiveAudienceRequest(ref request, ref callSettings);
            _callArchiveAudience.Sync(request, callSettings);
        }

        /// <summary>
        /// Archives an Audience on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task ArchiveAudienceAsync(ArchiveAudienceRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ArchiveAudienceRequest(ref request, ref callSettings);
            return _callArchiveAudience.Async(request, callSettings);
        }

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SearchAds360Link GetSearchAds360Link(GetSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetSearchAds360LinkRequest(ref request, ref callSettings);
            return _callGetSearchAds360Link.Sync(request, callSettings);
        }

        /// <summary>
        /// Look up a single SearchAds360Link
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SearchAds360Link> GetSearchAds360LinkAsync(GetSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetSearchAds360LinkRequest(ref request, ref callSettings);
            return _callGetSearchAds360Link.Async(request, callSettings);
        }

        /// <summary>
        /// Lists all SearchAds360Links on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SearchAds360Link"/> resources.</returns>
        public override gax::PagedEnumerable<ListSearchAds360LinksResponse, SearchAds360Link> ListSearchAds360Links(ListSearchAds360LinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListSearchAds360LinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListSearchAds360LinksRequest, ListSearchAds360LinksResponse, SearchAds360Link>(_callListSearchAds360Links, request, callSettings);
        }

        /// <summary>
        /// Lists all SearchAds360Links on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="SearchAds360Link"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListSearchAds360LinksResponse, SearchAds360Link> ListSearchAds360LinksAsync(ListSearchAds360LinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListSearchAds360LinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListSearchAds360LinksRequest, ListSearchAds360LinksResponse, SearchAds360Link>(_callListSearchAds360Links, request, callSettings);
        }

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SearchAds360Link CreateSearchAds360Link(CreateSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateSearchAds360LinkRequest(ref request, ref callSettings);
            return _callCreateSearchAds360Link.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a SearchAds360Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SearchAds360Link> CreateSearchAds360LinkAsync(CreateSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateSearchAds360LinkRequest(ref request, ref callSettings);
            return _callCreateSearchAds360Link.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteSearchAds360Link(DeleteSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteSearchAds360LinkRequest(ref request, ref callSettings);
            _callDeleteSearchAds360Link.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteSearchAds360LinkAsync(DeleteSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteSearchAds360LinkRequest(ref request, ref callSettings);
            return _callDeleteSearchAds360Link.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SearchAds360Link UpdateSearchAds360Link(UpdateSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateSearchAds360LinkRequest(ref request, ref callSettings);
            return _callUpdateSearchAds360Link.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a SearchAds360Link on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SearchAds360Link> UpdateSearchAds360LinkAsync(UpdateSearchAds360LinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateSearchAds360LinkRequest(ref request, ref callSettings);
            return _callUpdateSearchAds360Link.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override AttributionSettings GetAttributionSettings(GetAttributionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAttributionSettingsRequest(ref request, ref callSettings);
            return _callGetAttributionSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a AttributionSettings singleton.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<AttributionSettings> GetAttributionSettingsAsync(GetAttributionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAttributionSettingsRequest(ref request, ref callSettings);
            return _callGetAttributionSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Updates attribution settings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override AttributionSettings UpdateAttributionSettings(UpdateAttributionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateAttributionSettingsRequest(ref request, ref callSettings);
            return _callUpdateAttributionSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates attribution settings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<AttributionSettings> UpdateAttributionSettingsAsync(UpdateAttributionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateAttributionSettingsRequest(ref request, ref callSettings);
            return _callUpdateAttributionSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Returns a customized report of data access records. The report provides
        /// records of each time a user reads Google Analytics reporting data. Access
        /// records are retained for up to 2 years.
        /// 
        /// Data Access Reports can be requested for a property. Reports may be
        /// requested for any property, but dimensions that aren't related to quota can
        /// only be requested on Google Analytics 360 properties. This method is only
        /// available to Administrators.
        /// 
        /// These data access records include GA4 UI Reporting, GA4 UI Explorations,
        /// GA4 Data API, and other products like Firebase &amp; Admob that can retrieve
        /// data from Google Analytics through a linkage. These records don't include
        /// property configuration changes like adding a stream or changing a
        /// property's time zone. For configuration change history, see
        /// [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override RunAccessReportResponse RunAccessReport(RunAccessReportRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_RunAccessReportRequest(ref request, ref callSettings);
            return _callRunAccessReport.Sync(request, callSettings);
        }

        /// <summary>
        /// Returns a customized report of data access records. The report provides
        /// records of each time a user reads Google Analytics reporting data. Access
        /// records are retained for up to 2 years.
        /// 
        /// Data Access Reports can be requested for a property. Reports may be
        /// requested for any property, but dimensions that aren't related to quota can
        /// only be requested on Google Analytics 360 properties. This method is only
        /// available to Administrators.
        /// 
        /// These data access records include GA4 UI Reporting, GA4 UI Explorations,
        /// GA4 Data API, and other products like Firebase &amp; Admob that can retrieve
        /// data from Google Analytics through a linkage. These records don't include
        /// property configuration changes like adding a stream or changing a
        /// property's time zone. For configuration change history, see
        /// [searchChangeHistoryEvents](https://developers.google.com/analytics/devguides/config/admin/v1/rest/v1alpha/accounts/searchChangeHistoryEvents).
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<RunAccessReportResponse> RunAccessReportAsync(RunAccessReportRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_RunAccessReportRequest(ref request, ref callSettings);
            return _callRunAccessReport.Async(request, callSettings);
        }

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override AccessBinding CreateAccessBinding(CreateAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateAccessBindingRequest(ref request, ref callSettings);
            return _callCreateAccessBinding.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<AccessBinding> CreateAccessBindingAsync(CreateAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateAccessBindingRequest(ref request, ref callSettings);
            return _callCreateAccessBinding.Async(request, callSettings);
        }

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override AccessBinding GetAccessBinding(GetAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAccessBindingRequest(ref request, ref callSettings);
            return _callGetAccessBinding.Sync(request, callSettings);
        }

        /// <summary>
        /// Gets information about an access binding.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<AccessBinding> GetAccessBindingAsync(GetAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAccessBindingRequest(ref request, ref callSettings);
            return _callGetAccessBinding.Async(request, callSettings);
        }

        /// <summary>
        /// Updates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override AccessBinding UpdateAccessBinding(UpdateAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateAccessBindingRequest(ref request, ref callSettings);
            return _callUpdateAccessBinding.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<AccessBinding> UpdateAccessBindingAsync(UpdateAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateAccessBindingRequest(ref request, ref callSettings);
            return _callUpdateAccessBinding.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteAccessBinding(DeleteAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteAccessBindingRequest(ref request, ref callSettings);
            _callDeleteAccessBinding.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes an access binding on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteAccessBindingAsync(DeleteAccessBindingRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteAccessBindingRequest(ref request, ref callSettings);
            return _callDeleteAccessBinding.Async(request, callSettings);
        }

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AccessBinding"/> resources.</returns>
        public override gax::PagedEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindings(ListAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAccessBindingsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListAccessBindingsRequest, ListAccessBindingsResponse, AccessBinding>(_callListAccessBindings, request, callSettings);
        }

        /// <summary>
        /// Lists all access bindings on an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AccessBinding"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListAccessBindingsResponse, AccessBinding> ListAccessBindingsAsync(ListAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAccessBindingsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListAccessBindingsRequest, ListAccessBindingsResponse, AccessBinding>(_callListAccessBindings, request, callSettings);
        }

        /// <summary>
        /// Creates information about multiple access bindings to an account or
        /// property.
        /// 
        /// This method is transactional. If any AccessBinding cannot be created, none
        /// of the AccessBindings will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override BatchCreateAccessBindingsResponse BatchCreateAccessBindings(BatchCreateAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_BatchCreateAccessBindingsRequest(ref request, ref callSettings);
            return _callBatchCreateAccessBindings.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates information about multiple access bindings to an account or
        /// property.
        /// 
        /// This method is transactional. If any AccessBinding cannot be created, none
        /// of the AccessBindings will be created.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<BatchCreateAccessBindingsResponse> BatchCreateAccessBindingsAsync(BatchCreateAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_BatchCreateAccessBindingsRequest(ref request, ref callSettings);
            return _callBatchCreateAccessBindings.Async(request, callSettings);
        }

        /// <summary>
        /// Gets information about multiple access bindings to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override BatchGetAccessBindingsResponse BatchGetAccessBindings(BatchGetAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_BatchGetAccessBindingsRequest(ref request, ref callSettings);
            return _callBatchGetAccessBindings.Sync(request, callSettings);
        }

        /// <summary>
        /// Gets information about multiple access bindings to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<BatchGetAccessBindingsResponse> BatchGetAccessBindingsAsync(BatchGetAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_BatchGetAccessBindingsRequest(ref request, ref callSettings);
            return _callBatchGetAccessBindings.Async(request, callSettings);
        }

        /// <summary>
        /// Updates information about multiple access bindings to an account or
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override BatchUpdateAccessBindingsResponse BatchUpdateAccessBindings(BatchUpdateAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_BatchUpdateAccessBindingsRequest(ref request, ref callSettings);
            return _callBatchUpdateAccessBindings.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates information about multiple access bindings to an account or
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<BatchUpdateAccessBindingsResponse> BatchUpdateAccessBindingsAsync(BatchUpdateAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_BatchUpdateAccessBindingsRequest(ref request, ref callSettings);
            return _callBatchUpdateAccessBindings.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes information about multiple users' links to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void BatchDeleteAccessBindings(BatchDeleteAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_BatchDeleteAccessBindingsRequest(ref request, ref callSettings);
            _callBatchDeleteAccessBindings.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes information about multiple users' links to an account or property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task BatchDeleteAccessBindingsAsync(BatchDeleteAccessBindingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_BatchDeleteAccessBindingsRequest(ref request, ref callSettings);
            return _callBatchDeleteAccessBindings.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ExpandedDataSet GetExpandedDataSet(GetExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetExpandedDataSetRequest(ref request, ref callSettings);
            return _callGetExpandedDataSet.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ExpandedDataSet> GetExpandedDataSetAsync(GetExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetExpandedDataSetRequest(ref request, ref callSettings);
            return _callGetExpandedDataSet.Async(request, callSettings);
        }

        /// <summary>
        /// Lists ExpandedDataSets on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ExpandedDataSet"/> resources.</returns>
        public override gax::PagedEnumerable<ListExpandedDataSetsResponse, ExpandedDataSet> ListExpandedDataSets(ListExpandedDataSetsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListExpandedDataSetsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListExpandedDataSetsRequest, ListExpandedDataSetsResponse, ExpandedDataSet>(_callListExpandedDataSets, request, callSettings);
        }

        /// <summary>
        /// Lists ExpandedDataSets on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ExpandedDataSet"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListExpandedDataSetsResponse, ExpandedDataSet> ListExpandedDataSetsAsync(ListExpandedDataSetsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListExpandedDataSetsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListExpandedDataSetsRequest, ListExpandedDataSetsResponse, ExpandedDataSet>(_callListExpandedDataSets, request, callSettings);
        }

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ExpandedDataSet CreateExpandedDataSet(CreateExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateExpandedDataSetRequest(ref request, ref callSettings);
            return _callCreateExpandedDataSet.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a ExpandedDataSet.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ExpandedDataSet> CreateExpandedDataSetAsync(CreateExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateExpandedDataSetRequest(ref request, ref callSettings);
            return _callCreateExpandedDataSet.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ExpandedDataSet UpdateExpandedDataSet(UpdateExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateExpandedDataSetRequest(ref request, ref callSettings);
            return _callUpdateExpandedDataSet.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ExpandedDataSet> UpdateExpandedDataSetAsync(UpdateExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateExpandedDataSetRequest(ref request, ref callSettings);
            return _callUpdateExpandedDataSet.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteExpandedDataSet(DeleteExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteExpandedDataSetRequest(ref request, ref callSettings);
            _callDeleteExpandedDataSet.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a ExpandedDataSet on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteExpandedDataSetAsync(DeleteExpandedDataSetRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteExpandedDataSetRequest(ref request, ref callSettings);
            return _callDeleteExpandedDataSet.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ChannelGroup GetChannelGroup(GetChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetChannelGroupRequest(ref request, ref callSettings);
            return _callGetChannelGroup.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ChannelGroup> GetChannelGroupAsync(GetChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetChannelGroupRequest(ref request, ref callSettings);
            return _callGetChannelGroup.Async(request, callSettings);
        }

        /// <summary>
        /// Lists ChannelGroups on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="ChannelGroup"/> resources.</returns>
        public override gax::PagedEnumerable<ListChannelGroupsResponse, ChannelGroup> ListChannelGroups(ListChannelGroupsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListChannelGroupsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListChannelGroupsRequest, ListChannelGroupsResponse, ChannelGroup>(_callListChannelGroups, request, callSettings);
        }

        /// <summary>
        /// Lists ChannelGroups on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="ChannelGroup"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListChannelGroupsResponse, ChannelGroup> ListChannelGroupsAsync(ListChannelGroupsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListChannelGroupsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListChannelGroupsRequest, ListChannelGroupsResponse, ChannelGroup>(_callListChannelGroups, request, callSettings);
        }

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ChannelGroup CreateChannelGroup(CreateChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateChannelGroupRequest(ref request, ref callSettings);
            return _callCreateChannelGroup.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ChannelGroup> CreateChannelGroupAsync(CreateChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateChannelGroupRequest(ref request, ref callSettings);
            return _callCreateChannelGroup.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ChannelGroup UpdateChannelGroup(UpdateChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateChannelGroupRequest(ref request, ref callSettings);
            return _callUpdateChannelGroup.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a ChannelGroup.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ChannelGroup> UpdateChannelGroupAsync(UpdateChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateChannelGroupRequest(ref request, ref callSettings);
            return _callUpdateChannelGroup.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteChannelGroup(DeleteChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteChannelGroupRequest(ref request, ref callSettings);
            _callDeleteChannelGroup.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a ChannelGroup on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteChannelGroupAsync(DeleteChannelGroupRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteChannelGroupRequest(ref request, ref callSettings);
            return _callDeleteChannelGroup.Async(request, callSettings);
        }

        /// <summary>
        /// Sets the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SetAutomatedGa4ConfigurationOptOutResponse SetAutomatedGa4ConfigurationOptOut(SetAutomatedGa4ConfigurationOptOutRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_SetAutomatedGa4ConfigurationOptOutRequest(ref request, ref callSettings);
            return _callSetAutomatedGa4ConfigurationOptOut.Sync(request, callSettings);
        }

        /// <summary>
        /// Sets the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SetAutomatedGa4ConfigurationOptOutResponse> SetAutomatedGa4ConfigurationOptOutAsync(SetAutomatedGa4ConfigurationOptOutRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_SetAutomatedGa4ConfigurationOptOutRequest(ref request, ref callSettings);
            return _callSetAutomatedGa4ConfigurationOptOut.Async(request, callSettings);
        }

        /// <summary>
        /// Fetches the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override FetchAutomatedGa4ConfigurationOptOutResponse FetchAutomatedGa4ConfigurationOptOut(FetchAutomatedGa4ConfigurationOptOutRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_FetchAutomatedGa4ConfigurationOptOutRequest(ref request, ref callSettings);
            return _callFetchAutomatedGa4ConfigurationOptOut.Sync(request, callSettings);
        }

        /// <summary>
        /// Fetches the opt out status for the automated GA4 setup process for a UA
        /// property.
        /// Note: this has no effect on GA4 property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<FetchAutomatedGa4ConfigurationOptOutResponse> FetchAutomatedGa4ConfigurationOptOutAsync(FetchAutomatedGa4ConfigurationOptOutRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_FetchAutomatedGa4ConfigurationOptOutRequest(ref request, ref callSettings);
            return _callFetchAutomatedGa4ConfigurationOptOut.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override BigQueryLink CreateBigQueryLink(CreateBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateBigQueryLinkRequest(ref request, ref callSettings);
            return _callCreateBigQueryLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<BigQueryLink> CreateBigQueryLinkAsync(CreateBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateBigQueryLinkRequest(ref request, ref callSettings);
            return _callCreateBigQueryLink.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override BigQueryLink GetBigQueryLink(GetBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetBigQueryLinkRequest(ref request, ref callSettings);
            return _callGetBigQueryLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single BigQuery Link.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<BigQueryLink> GetBigQueryLinkAsync(GetBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetBigQueryLinkRequest(ref request, ref callSettings);
            return _callGetBigQueryLink.Async(request, callSettings);
        }

        /// <summary>
        /// Lists BigQuery Links on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="BigQueryLink"/> resources.</returns>
        public override gax::PagedEnumerable<ListBigQueryLinksResponse, BigQueryLink> ListBigQueryLinks(ListBigQueryLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListBigQueryLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListBigQueryLinksRequest, ListBigQueryLinksResponse, BigQueryLink>(_callListBigQueryLinks, request, callSettings);
        }

        /// <summary>
        /// Lists BigQuery Links on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="BigQueryLink"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListBigQueryLinksResponse, BigQueryLink> ListBigQueryLinksAsync(ListBigQueryLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListBigQueryLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListBigQueryLinksRequest, ListBigQueryLinksResponse, BigQueryLink>(_callListBigQueryLinks, request, callSettings);
        }

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteBigQueryLink(DeleteBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteBigQueryLinkRequest(ref request, ref callSettings);
            _callDeleteBigQueryLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a BigQueryLink on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteBigQueryLinkAsync(DeleteBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteBigQueryLinkRequest(ref request, ref callSettings);
            return _callDeleteBigQueryLink.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override BigQueryLink UpdateBigQueryLink(UpdateBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateBigQueryLinkRequest(ref request, ref callSettings);
            return _callUpdateBigQueryLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a BigQueryLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<BigQueryLink> UpdateBigQueryLinkAsync(UpdateBigQueryLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateBigQueryLinkRequest(ref request, ref callSettings);
            return _callUpdateBigQueryLink.Async(request, callSettings);
        }

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override EnhancedMeasurementSettings GetEnhancedMeasurementSettings(GetEnhancedMeasurementSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetEnhancedMeasurementSettingsRequest(ref request, ref callSettings);
            return _callGetEnhancedMeasurementSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Returns the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<EnhancedMeasurementSettings> GetEnhancedMeasurementSettingsAsync(GetEnhancedMeasurementSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetEnhancedMeasurementSettingsRequest(ref request, ref callSettings);
            return _callGetEnhancedMeasurementSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Updates the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override EnhancedMeasurementSettings UpdateEnhancedMeasurementSettings(UpdateEnhancedMeasurementSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateEnhancedMeasurementSettingsRequest(ref request, ref callSettings);
            return _callUpdateEnhancedMeasurementSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates the enhanced measurement settings for this data stream.
        /// Note that the stream must enable enhanced measurement for these settings to
        /// take effect.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<EnhancedMeasurementSettings> UpdateEnhancedMeasurementSettingsAsync(UpdateEnhancedMeasurementSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateEnhancedMeasurementSettingsRequest(ref request, ref callSettings);
            return _callUpdateEnhancedMeasurementSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a connected site tag for a Universal Analytics property. You can
        /// create a maximum of 20 connected site tags per property.
        /// Note: This API cannot be used on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CreateConnectedSiteTagResponse CreateConnectedSiteTag(CreateConnectedSiteTagRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateConnectedSiteTagRequest(ref request, ref callSettings);
            return _callCreateConnectedSiteTag.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a connected site tag for a Universal Analytics property. You can
        /// create a maximum of 20 connected site tags per property.
        /// Note: This API cannot be used on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CreateConnectedSiteTagResponse> CreateConnectedSiteTagAsync(CreateConnectedSiteTagRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateConnectedSiteTagRequest(ref request, ref callSettings);
            return _callCreateConnectedSiteTag.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a connected site tag for a Universal Analytics property.
        /// Note: this has no effect on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteConnectedSiteTag(DeleteConnectedSiteTagRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteConnectedSiteTagRequest(ref request, ref callSettings);
            _callDeleteConnectedSiteTag.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a connected site tag for a Universal Analytics property.
        /// Note: this has no effect on GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteConnectedSiteTagAsync(DeleteConnectedSiteTagRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteConnectedSiteTagRequest(ref request, ref callSettings);
            return _callDeleteConnectedSiteTag.Async(request, callSettings);
        }

        /// <summary>
        /// Lists the connected site tags for a Universal Analytics property. A maximum
        /// of 20 connected site tags will be returned. Note: this has no effect on GA4
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ListConnectedSiteTagsResponse ListConnectedSiteTags(ListConnectedSiteTagsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListConnectedSiteTagsRequest(ref request, ref callSettings);
            return _callListConnectedSiteTags.Sync(request, callSettings);
        }

        /// <summary>
        /// Lists the connected site tags for a Universal Analytics property. A maximum
        /// of 20 connected site tags will be returned. Note: this has no effect on GA4
        /// property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ListConnectedSiteTagsResponse> ListConnectedSiteTagsAsync(ListConnectedSiteTagsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListConnectedSiteTagsRequest(ref request, ref callSettings);
            return _callListConnectedSiteTags.Async(request, callSettings);
        }

        /// <summary>
        /// Given a specified UA property, looks up the GA4 property connected to it.
        /// Note: this cannot be used with GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override FetchConnectedGa4PropertyResponse FetchConnectedGa4Property(FetchConnectedGa4PropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_FetchConnectedGa4PropertyRequest(ref request, ref callSettings);
            return _callFetchConnectedGa4Property.Sync(request, callSettings);
        }

        /// <summary>
        /// Given a specified UA property, looks up the GA4 property connected to it.
        /// Note: this cannot be used with GA4 properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<FetchConnectedGa4PropertyResponse> FetchConnectedGa4PropertyAsync(FetchConnectedGa4PropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_FetchConnectedGa4PropertyRequest(ref request, ref callSettings);
            return _callFetchConnectedGa4Property.Async(request, callSettings);
        }

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override AdSenseLink GetAdSenseLink(GetAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAdSenseLinkRequest(ref request, ref callSettings);
            return _callGetAdSenseLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Looks up a single AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<AdSenseLink> GetAdSenseLinkAsync(GetAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetAdSenseLinkRequest(ref request, ref callSettings);
            return _callGetAdSenseLink.Async(request, callSettings);
        }

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override AdSenseLink CreateAdSenseLink(CreateAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateAdSenseLinkRequest(ref request, ref callSettings);
            return _callCreateAdSenseLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<AdSenseLink> CreateAdSenseLinkAsync(CreateAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateAdSenseLinkRequest(ref request, ref callSettings);
            return _callCreateAdSenseLink.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteAdSenseLink(DeleteAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteAdSenseLinkRequest(ref request, ref callSettings);
            _callDeleteAdSenseLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes an AdSenseLink.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteAdSenseLinkAsync(DeleteAdSenseLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteAdSenseLinkRequest(ref request, ref callSettings);
            return _callDeleteAdSenseLink.Async(request, callSettings);
        }

        /// <summary>
        /// Lists AdSenseLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="AdSenseLink"/> resources.</returns>
        public override gax::PagedEnumerable<ListAdSenseLinksResponse, AdSenseLink> ListAdSenseLinks(ListAdSenseLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAdSenseLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListAdSenseLinksRequest, ListAdSenseLinksResponse, AdSenseLink>(_callListAdSenseLinks, request, callSettings);
        }

        /// <summary>
        /// Lists AdSenseLinks on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="AdSenseLink"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListAdSenseLinksResponse, AdSenseLink> ListAdSenseLinksAsync(ListAdSenseLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListAdSenseLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListAdSenseLinksRequest, ListAdSenseLinksResponse, AdSenseLink>(_callListAdSenseLinks, request, callSettings);
        }

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override EventCreateRule GetEventCreateRule(GetEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetEventCreateRuleRequest(ref request, ref callSettings);
            return _callGetEventCreateRule.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<EventCreateRule> GetEventCreateRuleAsync(GetEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetEventCreateRuleRequest(ref request, ref callSettings);
            return _callGetEventCreateRule.Async(request, callSettings);
        }

        /// <summary>
        /// Lists EventCreateRules on a web data stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="EventCreateRule"/> resources.</returns>
        public override gax::PagedEnumerable<ListEventCreateRulesResponse, EventCreateRule> ListEventCreateRules(ListEventCreateRulesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListEventCreateRulesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListEventCreateRulesRequest, ListEventCreateRulesResponse, EventCreateRule>(_callListEventCreateRules, request, callSettings);
        }

        /// <summary>
        /// Lists EventCreateRules on a web data stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="EventCreateRule"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListEventCreateRulesResponse, EventCreateRule> ListEventCreateRulesAsync(ListEventCreateRulesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListEventCreateRulesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListEventCreateRulesRequest, ListEventCreateRulesResponse, EventCreateRule>(_callListEventCreateRules, request, callSettings);
        }

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override EventCreateRule CreateEventCreateRule(CreateEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateEventCreateRuleRequest(ref request, ref callSettings);
            return _callCreateEventCreateRule.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<EventCreateRule> CreateEventCreateRuleAsync(CreateEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateEventCreateRuleRequest(ref request, ref callSettings);
            return _callCreateEventCreateRule.Async(request, callSettings);
        }

        /// <summary>
        /// Updates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override EventCreateRule UpdateEventCreateRule(UpdateEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateEventCreateRuleRequest(ref request, ref callSettings);
            return _callUpdateEventCreateRule.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<EventCreateRule> UpdateEventCreateRuleAsync(UpdateEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateEventCreateRuleRequest(ref request, ref callSettings);
            return _callUpdateEventCreateRule.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteEventCreateRule(DeleteEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteEventCreateRuleRequest(ref request, ref callSettings);
            _callDeleteEventCreateRule.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes an EventCreateRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteEventCreateRuleAsync(DeleteEventCreateRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteEventCreateRuleRequest(ref request, ref callSettings);
            return _callDeleteEventCreateRule.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override EventEditRule GetEventEditRule(GetEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetEventEditRuleRequest(ref request, ref callSettings);
            return _callGetEventEditRule.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<EventEditRule> GetEventEditRuleAsync(GetEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetEventEditRuleRequest(ref request, ref callSettings);
            return _callGetEventEditRule.Async(request, callSettings);
        }

        /// <summary>
        /// Lists EventEditRules on a web data stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="EventEditRule"/> resources.</returns>
        public override gax::PagedEnumerable<ListEventEditRulesResponse, EventEditRule> ListEventEditRules(ListEventEditRulesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListEventEditRulesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListEventEditRulesRequest, ListEventEditRulesResponse, EventEditRule>(_callListEventEditRules, request, callSettings);
        }

        /// <summary>
        /// Lists EventEditRules on a web data stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="EventEditRule"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListEventEditRulesResponse, EventEditRule> ListEventEditRulesAsync(ListEventEditRulesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListEventEditRulesRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListEventEditRulesRequest, ListEventEditRulesResponse, EventEditRule>(_callListEventEditRules, request, callSettings);
        }

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override EventEditRule CreateEventEditRule(CreateEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateEventEditRuleRequest(ref request, ref callSettings);
            return _callCreateEventEditRule.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<EventEditRule> CreateEventEditRuleAsync(CreateEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateEventEditRuleRequest(ref request, ref callSettings);
            return _callCreateEventEditRule.Async(request, callSettings);
        }

        /// <summary>
        /// Updates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override EventEditRule UpdateEventEditRule(UpdateEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateEventEditRuleRequest(ref request, ref callSettings);
            return _callUpdateEventEditRule.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<EventEditRule> UpdateEventEditRuleAsync(UpdateEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateEventEditRuleRequest(ref request, ref callSettings);
            return _callUpdateEventEditRule.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteEventEditRule(DeleteEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteEventEditRuleRequest(ref request, ref callSettings);
            _callDeleteEventEditRule.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes an EventEditRule.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteEventEditRuleAsync(DeleteEventEditRuleRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteEventEditRuleRequest(ref request, ref callSettings);
            return _callDeleteEventEditRule.Async(request, callSettings);
        }

        /// <summary>
        /// Changes the processing order of event edit rules on the specified stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void ReorderEventEditRules(ReorderEventEditRulesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ReorderEventEditRulesRequest(ref request, ref callSettings);
            _callReorderEventEditRules.Sync(request, callSettings);
        }

        /// <summary>
        /// Changes the processing order of event edit rules on the specified stream.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task ReorderEventEditRulesAsync(ReorderEventEditRulesRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ReorderEventEditRulesRequest(ref request, ref callSettings);
            return _callReorderEventEditRules.Async(request, callSettings);
        }

        /// <summary>
        /// Updates a DataRedactionSettings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DataRedactionSettings UpdateDataRedactionSettings(UpdateDataRedactionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateDataRedactionSettingsRequest(ref request, ref callSettings);
            return _callUpdateDataRedactionSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a DataRedactionSettings on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DataRedactionSettings> UpdateDataRedactionSettingsAsync(UpdateDataRedactionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateDataRedactionSettingsRequest(ref request, ref callSettings);
            return _callUpdateDataRedactionSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override DataRedactionSettings GetDataRedactionSettings(GetDataRedactionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDataRedactionSettingsRequest(ref request, ref callSettings);
            return _callGetDataRedactionSettings.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single DataRedactionSettings.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<DataRedactionSettings> GetDataRedactionSettingsAsync(GetDataRedactionSettingsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetDataRedactionSettingsRequest(ref request, ref callSettings);
            return _callGetDataRedactionSettings.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CalculatedMetric GetCalculatedMetric(GetCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetCalculatedMetricRequest(ref request, ref callSettings);
            return _callGetCalculatedMetric.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CalculatedMetric> GetCalculatedMetricAsync(GetCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetCalculatedMetricRequest(ref request, ref callSettings);
            return _callGetCalculatedMetric.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CalculatedMetric CreateCalculatedMetric(CreateCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateCalculatedMetricRequest(ref request, ref callSettings);
            return _callCreateCalculatedMetric.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a CalculatedMetric.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CalculatedMetric> CreateCalculatedMetricAsync(CreateCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateCalculatedMetricRequest(ref request, ref callSettings);
            return _callCreateCalculatedMetric.Async(request, callSettings);
        }

        /// <summary>
        /// Lists CalculatedMetrics on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="CalculatedMetric"/> resources.</returns>
        public override gax::PagedEnumerable<ListCalculatedMetricsResponse, CalculatedMetric> ListCalculatedMetrics(ListCalculatedMetricsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListCalculatedMetricsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListCalculatedMetricsRequest, ListCalculatedMetricsResponse, CalculatedMetric>(_callListCalculatedMetrics, request, callSettings);
        }

        /// <summary>
        /// Lists CalculatedMetrics on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="CalculatedMetric"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListCalculatedMetricsResponse, CalculatedMetric> ListCalculatedMetricsAsync(ListCalculatedMetricsRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListCalculatedMetricsRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListCalculatedMetricsRequest, ListCalculatedMetricsResponse, CalculatedMetric>(_callListCalculatedMetrics, request, callSettings);
        }

        /// <summary>
        /// Updates a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CalculatedMetric UpdateCalculatedMetric(UpdateCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateCalculatedMetricRequest(ref request, ref callSettings);
            return _callUpdateCalculatedMetric.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CalculatedMetric> UpdateCalculatedMetricAsync(UpdateCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateCalculatedMetricRequest(ref request, ref callSettings);
            return _callUpdateCalculatedMetric.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteCalculatedMetric(DeleteCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteCalculatedMetricRequest(ref request, ref callSettings);
            _callDeleteCalculatedMetric.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a CalculatedMetric on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteCalculatedMetricAsync(DeleteCalculatedMetricRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteCalculatedMetricRequest(ref request, ref callSettings);
            return _callDeleteCalculatedMetric.Async(request, callSettings);
        }

        /// <summary>
        /// Create a roll-up property and all roll-up property source links.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override CreateRollupPropertyResponse CreateRollupProperty(CreateRollupPropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateRollupPropertyRequest(ref request, ref callSettings);
            return _callCreateRollupProperty.Sync(request, callSettings);
        }

        /// <summary>
        /// Create a roll-up property and all roll-up property source links.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<CreateRollupPropertyResponse> CreateRollupPropertyAsync(CreateRollupPropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateRollupPropertyRequest(ref request, ref callSettings);
            return _callCreateRollupProperty.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override RollupPropertySourceLink GetRollupPropertySourceLink(GetRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetRollupPropertySourceLinkRequest(ref request, ref callSettings);
            return _callGetRollupPropertySourceLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single roll-up property source Link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<RollupPropertySourceLink> GetRollupPropertySourceLinkAsync(GetRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetRollupPropertySourceLinkRequest(ref request, ref callSettings);
            return _callGetRollupPropertySourceLink.Async(request, callSettings);
        }

        /// <summary>
        /// Lists roll-up property source Links on a property.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="RollupPropertySourceLink"/> resources.</returns>
        public override gax::PagedEnumerable<ListRollupPropertySourceLinksResponse, RollupPropertySourceLink> ListRollupPropertySourceLinks(ListRollupPropertySourceLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListRollupPropertySourceLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListRollupPropertySourceLinksRequest, ListRollupPropertySourceLinksResponse, RollupPropertySourceLink>(_callListRollupPropertySourceLinks, request, callSettings);
        }

        /// <summary>
        /// Lists roll-up property source Links on a property.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="RollupPropertySourceLink"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListRollupPropertySourceLinksResponse, RollupPropertySourceLink> ListRollupPropertySourceLinksAsync(ListRollupPropertySourceLinksRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListRollupPropertySourceLinksRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListRollupPropertySourceLinksRequest, ListRollupPropertySourceLinksResponse, RollupPropertySourceLink>(_callListRollupPropertySourceLinks, request, callSettings);
        }

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override RollupPropertySourceLink CreateRollupPropertySourceLink(CreateRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateRollupPropertySourceLinkRequest(ref request, ref callSettings);
            return _callCreateRollupPropertySourceLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<RollupPropertySourceLink> CreateRollupPropertySourceLinkAsync(CreateRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateRollupPropertySourceLinkRequest(ref request, ref callSettings);
            return _callCreateRollupPropertySourceLink.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteRollupPropertySourceLink(DeleteRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteRollupPropertySourceLinkRequest(ref request, ref callSettings);
            _callDeleteRollupPropertySourceLink.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a roll-up property source link.
        /// Only roll-up properties can have source links, so this method will throw an
        /// error if used on other types of properties.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteRollupPropertySourceLinkAsync(DeleteRollupPropertySourceLinkRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteRollupPropertySourceLinkRequest(ref request, ref callSettings);
            return _callDeleteRollupPropertySourceLink.Async(request, callSettings);
        }

        /// <summary>
        /// Create a subproperty and a subproperty event filter that applies to the
        /// created subproperty.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override ProvisionSubpropertyResponse ProvisionSubproperty(ProvisionSubpropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ProvisionSubpropertyRequest(ref request, ref callSettings);
            return _callProvisionSubproperty.Sync(request, callSettings);
        }

        /// <summary>
        /// Create a subproperty and a subproperty event filter that applies to the
        /// created subproperty.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<ProvisionSubpropertyResponse> ProvisionSubpropertyAsync(ProvisionSubpropertyRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ProvisionSubpropertyRequest(ref request, ref callSettings);
            return _callProvisionSubproperty.Async(request, callSettings);
        }

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SubpropertyEventFilter CreateSubpropertyEventFilter(CreateSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateSubpropertyEventFilterRequest(ref request, ref callSettings);
            return _callCreateSubpropertyEventFilter.Sync(request, callSettings);
        }

        /// <summary>
        /// Creates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SubpropertyEventFilter> CreateSubpropertyEventFilterAsync(CreateSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_CreateSubpropertyEventFilterRequest(ref request, ref callSettings);
            return _callCreateSubpropertyEventFilter.Async(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SubpropertyEventFilter GetSubpropertyEventFilter(GetSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetSubpropertyEventFilterRequest(ref request, ref callSettings);
            return _callGetSubpropertyEventFilter.Sync(request, callSettings);
        }

        /// <summary>
        /// Lookup for a single subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SubpropertyEventFilter> GetSubpropertyEventFilterAsync(GetSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_GetSubpropertyEventFilterRequest(ref request, ref callSettings);
            return _callGetSubpropertyEventFilter.Async(request, callSettings);
        }

        /// <summary>
        /// List all subproperty Event Filters on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable sequence of <see cref="SubpropertyEventFilter"/> resources.</returns>
        public override gax::PagedEnumerable<ListSubpropertyEventFiltersResponse, SubpropertyEventFilter> ListSubpropertyEventFilters(ListSubpropertyEventFiltersRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListSubpropertyEventFiltersRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedEnumerable<ListSubpropertyEventFiltersRequest, ListSubpropertyEventFiltersResponse, SubpropertyEventFilter>(_callListSubpropertyEventFilters, request, callSettings);
        }

        /// <summary>
        /// List all subproperty Event Filters on a property.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A pageable asynchronous sequence of <see cref="SubpropertyEventFilter"/> resources.</returns>
        public override gax::PagedAsyncEnumerable<ListSubpropertyEventFiltersResponse, SubpropertyEventFilter> ListSubpropertyEventFiltersAsync(ListSubpropertyEventFiltersRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_ListSubpropertyEventFiltersRequest(ref request, ref callSettings);
            return new gaxgrpc::GrpcPagedAsyncEnumerable<ListSubpropertyEventFiltersRequest, ListSubpropertyEventFiltersResponse, SubpropertyEventFilter>(_callListSubpropertyEventFilters, request, callSettings);
        }

        /// <summary>
        /// Updates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override SubpropertyEventFilter UpdateSubpropertyEventFilter(UpdateSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateSubpropertyEventFilterRequest(ref request, ref callSettings);
            return _callUpdateSubpropertyEventFilter.Sync(request, callSettings);
        }

        /// <summary>
        /// Updates a subproperty Event Filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task<SubpropertyEventFilter> UpdateSubpropertyEventFilterAsync(UpdateSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_UpdateSubpropertyEventFilterRequest(ref request, ref callSettings);
            return _callUpdateSubpropertyEventFilter.Async(request, callSettings);
        }

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>The RPC response.</returns>
        public override void DeleteSubpropertyEventFilter(DeleteSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteSubpropertyEventFilterRequest(ref request, ref callSettings);
            _callDeleteSubpropertyEventFilter.Sync(request, callSettings);
        }

        /// <summary>
        /// Deletes a subproperty event filter.
        /// </summary>
        /// <param name="request">The request object containing all of the parameters for the API call.</param>
        /// <param name="callSettings">If not null, applies overrides to this RPC call.</param>
        /// <returns>A Task containing the RPC response.</returns>
        public override stt::Task DeleteSubpropertyEventFilterAsync(DeleteSubpropertyEventFilterRequest request, gaxgrpc::CallSettings callSettings = null)
        {
            Modify_DeleteSubpropertyEventFilterRequest(ref request, ref callSettings);
            return _callDeleteSubpropertyEventFilter.Async(request, callSettings);
        }
    }

    public partial class ListAccountsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListAccountSummariesRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListPropertiesRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListFirebaseLinksRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListGoogleAdsLinksRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListMeasurementProtocolSecretsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListSKAdNetworkConversionValueSchemasRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class SearchChangeHistoryEventsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListConversionEventsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListKeyEventsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListDisplayVideo360AdvertiserLinksRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListDisplayVideo360AdvertiserLinkProposalsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListCustomDimensionsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListCustomMetricsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListDataStreamsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListAudiencesRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListSearchAds360LinksRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListAccessBindingsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListExpandedDataSetsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListChannelGroupsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListBigQueryLinksRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListAdSenseLinksRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListEventCreateRulesRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListEventEditRulesRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListCalculatedMetricsRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListRollupPropertySourceLinksRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListSubpropertyEventFiltersRequest : gaxgrpc::IPageRequest
    {
    }

    public partial class ListAccountsResponse : gaxgrpc::IPageResponse<Account>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<Account> GetEnumerator() => Accounts.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListAccountSummariesResponse : gaxgrpc::IPageResponse<AccountSummary>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<AccountSummary> GetEnumerator() => AccountSummaries.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListPropertiesResponse : gaxgrpc::IPageResponse<Property>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<Property> GetEnumerator() => Properties.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListFirebaseLinksResponse : gaxgrpc::IPageResponse<FirebaseLink>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<FirebaseLink> GetEnumerator() => FirebaseLinks.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListGoogleAdsLinksResponse : gaxgrpc::IPageResponse<GoogleAdsLink>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<GoogleAdsLink> GetEnumerator() => GoogleAdsLinks.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListMeasurementProtocolSecretsResponse : gaxgrpc::IPageResponse<MeasurementProtocolSecret>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<MeasurementProtocolSecret> GetEnumerator() => MeasurementProtocolSecrets.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListSKAdNetworkConversionValueSchemasResponse : gaxgrpc::IPageResponse<SKAdNetworkConversionValueSchema>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<SKAdNetworkConversionValueSchema> GetEnumerator() =>
            SkadnetworkConversionValueSchemas.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class SearchChangeHistoryEventsResponse : gaxgrpc::IPageResponse<ChangeHistoryEvent>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<ChangeHistoryEvent> GetEnumerator() => ChangeHistoryEvents.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListConversionEventsResponse : gaxgrpc::IPageResponse<ConversionEvent>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<ConversionEvent> GetEnumerator() => ConversionEvents.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListKeyEventsResponse : gaxgrpc::IPageResponse<KeyEvent>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<KeyEvent> GetEnumerator() => KeyEvents.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListDisplayVideo360AdvertiserLinksResponse : gaxgrpc::IPageResponse<DisplayVideo360AdvertiserLink>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<DisplayVideo360AdvertiserLink> GetEnumerator() =>
            DisplayVideo360AdvertiserLinks.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListDisplayVideo360AdvertiserLinkProposalsResponse : gaxgrpc::IPageResponse<DisplayVideo360AdvertiserLinkProposal>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<DisplayVideo360AdvertiserLinkProposal> GetEnumerator() =>
            DisplayVideo360AdvertiserLinkProposals.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListCustomDimensionsResponse : gaxgrpc::IPageResponse<CustomDimension>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<CustomDimension> GetEnumerator() => CustomDimensions.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListCustomMetricsResponse : gaxgrpc::IPageResponse<CustomMetric>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<CustomMetric> GetEnumerator() => CustomMetrics.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListDataStreamsResponse : gaxgrpc::IPageResponse<DataStream>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<DataStream> GetEnumerator() => DataStreams.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListAudiencesResponse : gaxgrpc::IPageResponse<Audience>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<Audience> GetEnumerator() => Audiences.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListSearchAds360LinksResponse : gaxgrpc::IPageResponse<SearchAds360Link>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<SearchAds360Link> GetEnumerator() => SearchAds360Links.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListAccessBindingsResponse : gaxgrpc::IPageResponse<AccessBinding>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<AccessBinding> GetEnumerator() => AccessBindings.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListExpandedDataSetsResponse : gaxgrpc::IPageResponse<ExpandedDataSet>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<ExpandedDataSet> GetEnumerator() => ExpandedDataSets.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListChannelGroupsResponse : gaxgrpc::IPageResponse<ChannelGroup>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<ChannelGroup> GetEnumerator() => ChannelGroups.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListBigQueryLinksResponse : gaxgrpc::IPageResponse<BigQueryLink>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<BigQueryLink> GetEnumerator() => BigqueryLinks.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListAdSenseLinksResponse : gaxgrpc::IPageResponse<AdSenseLink>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<AdSenseLink> GetEnumerator() => AdsenseLinks.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListEventCreateRulesResponse : gaxgrpc::IPageResponse<EventCreateRule>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<EventCreateRule> GetEnumerator() => EventCreateRules.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListEventEditRulesResponse : gaxgrpc::IPageResponse<EventEditRule>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<EventEditRule> GetEnumerator() => EventEditRules.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListCalculatedMetricsResponse : gaxgrpc::IPageResponse<CalculatedMetric>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<CalculatedMetric> GetEnumerator() => CalculatedMetrics.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListRollupPropertySourceLinksResponse : gaxgrpc::IPageResponse<RollupPropertySourceLink>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<RollupPropertySourceLink> GetEnumerator() => RollupPropertySourceLinks.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public partial class ListSubpropertyEventFiltersResponse : gaxgrpc::IPageResponse<SubpropertyEventFilter>
    {
        /// <summary>Returns an enumerator that iterates through the resources in this response.</summary>
        public scg::IEnumerator<SubpropertyEventFilter> GetEnumerator() => SubpropertyEventFilters.GetEnumerator();

        sc::IEnumerator sc::IEnumerable.GetEnumerator() => GetEnumerator();
    }
}
