// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: google/iam/v3/policy_bindings_service.proto
// </auto-generated>
// Original file comments:
// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Google.Cloud.Iam.V3 {
  /// <summary>
  /// An interface for managing Identity and Access Management (IAM) policy
  /// bindings.
  /// </summary>
  public static partial class PolicyBindings
  {
    static readonly string __ServiceName = "google.iam.v3.PolicyBindings";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest> __Marshaller_google_iam_v3_CreatePolicyBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.LongRunning.Operation> __Marshaller_google_longrunning_Operation = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.LongRunning.Operation.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.GetPolicyBindingRequest> __Marshaller_google_iam_v3_GetPolicyBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.GetPolicyBindingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.PolicyBinding> __Marshaller_google_iam_v3_PolicyBinding = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.PolicyBinding.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest> __Marshaller_google_iam_v3_UpdatePolicyBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest> __Marshaller_google_iam_v3_DeletePolicyBindingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest> __Marshaller_google_iam_v3_ListPolicyBindingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse> __Marshaller_google_iam_v3_ListPolicyBindingsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest> __Marshaller_google_iam_v3_SearchTargetPolicyBindingsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse> __Marshaller_google_iam_v3_SearchTargetPolicyBindingsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest, global::Google.LongRunning.Operation> __Method_CreatePolicyBinding = new grpc::Method<global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePolicyBinding",
        __Marshaller_google_iam_v3_CreatePolicyBindingRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V3.GetPolicyBindingRequest, global::Google.Cloud.Iam.V3.PolicyBinding> __Method_GetPolicyBinding = new grpc::Method<global::Google.Cloud.Iam.V3.GetPolicyBindingRequest, global::Google.Cloud.Iam.V3.PolicyBinding>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPolicyBinding",
        __Marshaller_google_iam_v3_GetPolicyBindingRequest,
        __Marshaller_google_iam_v3_PolicyBinding);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest, global::Google.LongRunning.Operation> __Method_UpdatePolicyBinding = new grpc::Method<global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdatePolicyBinding",
        __Marshaller_google_iam_v3_UpdatePolicyBindingRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest, global::Google.LongRunning.Operation> __Method_DeletePolicyBinding = new grpc::Method<global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest, global::Google.LongRunning.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeletePolicyBinding",
        __Marshaller_google_iam_v3_DeletePolicyBindingRequest,
        __Marshaller_google_longrunning_Operation);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest, global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse> __Method_ListPolicyBindings = new grpc::Method<global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest, global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPolicyBindings",
        __Marshaller_google_iam_v3_ListPolicyBindingsRequest,
        __Marshaller_google_iam_v3_ListPolicyBindingsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest, global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse> __Method_SearchTargetPolicyBindings = new grpc::Method<global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest, global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchTargetPolicyBindings",
        __Marshaller_google_iam_v3_SearchTargetPolicyBindingsRequest,
        __Marshaller_google_iam_v3_SearchTargetPolicyBindingsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Cloud.Iam.V3.PolicyBindingsServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PolicyBindings</summary>
    [grpc::BindServiceMethod(typeof(PolicyBindings), "BindService")]
    public abstract partial class PolicyBindingsBase
    {
      /// <summary>
      /// Creates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is created, the policy is applied to the target.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> CreatePolicyBinding(global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets a policy binding.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V3.PolicyBinding> GetPolicyBinding(global::Google.Cloud.Iam.V3.GetPolicyBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on the policy and target in the
      /// binding to update, and the IAM permission to remove the existing policy
      /// from the binding. Target is immutable and cannot be updated. Once the
      /// binding is updated, the new policy is applied to the target.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> UpdatePolicyBinding(global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is deleted, the policy no longer applies to the target.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.LongRunning.Operation> DeletePolicyBinding(global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists policy bindings.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse> ListPolicyBindings(global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Search policy bindings by target. Returns all policy binding objects bound
      /// directly to target.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse> SearchTargetPolicyBindings(global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PolicyBindings</summary>
    public partial class PolicyBindingsClient : grpc::ClientBase<PolicyBindingsClient>
    {
      /// <summary>Creates a new client for PolicyBindings</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PolicyBindingsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PolicyBindings that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PolicyBindingsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PolicyBindingsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PolicyBindingsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is created, the policy is applied to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreatePolicyBinding(global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePolicyBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is created, the policy is applied to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation CreatePolicyBinding(global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePolicyBinding, null, options, request);
      }
      /// <summary>
      /// Creates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is created, the policy is applied to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreatePolicyBindingAsync(global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePolicyBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is created, the policy is applied to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> CreatePolicyBindingAsync(global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePolicyBinding, null, options, request);
      }
      /// <summary>
      /// Gets a policy binding.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V3.PolicyBinding GetPolicyBinding(global::Google.Cloud.Iam.V3.GetPolicyBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a policy binding.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V3.PolicyBinding GetPolicyBinding(global::Google.Cloud.Iam.V3.GetPolicyBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPolicyBinding, null, options, request);
      }
      /// <summary>
      /// Gets a policy binding.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V3.PolicyBinding> GetPolicyBindingAsync(global::Google.Cloud.Iam.V3.GetPolicyBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPolicyBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a policy binding.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V3.PolicyBinding> GetPolicyBindingAsync(global::Google.Cloud.Iam.V3.GetPolicyBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPolicyBinding, null, options, request);
      }
      /// <summary>
      /// Updates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on the policy and target in the
      /// binding to update, and the IAM permission to remove the existing policy
      /// from the binding. Target is immutable and cannot be updated. Once the
      /// binding is updated, the new policy is applied to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdatePolicyBinding(global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePolicyBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on the policy and target in the
      /// binding to update, and the IAM permission to remove the existing policy
      /// from the binding. Target is immutable and cannot be updated. Once the
      /// binding is updated, the new policy is applied to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation UpdatePolicyBinding(global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdatePolicyBinding, null, options, request);
      }
      /// <summary>
      /// Updates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on the policy and target in the
      /// binding to update, and the IAM permission to remove the existing policy
      /// from the binding. Target is immutable and cannot be updated. Once the
      /// binding is updated, the new policy is applied to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdatePolicyBindingAsync(global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdatePolicyBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on the policy and target in the
      /// binding to update, and the IAM permission to remove the existing policy
      /// from the binding. Target is immutable and cannot be updated. Once the
      /// binding is updated, the new policy is applied to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> UpdatePolicyBindingAsync(global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdatePolicyBinding, null, options, request);
      }
      /// <summary>
      /// Deletes a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is deleted, the policy no longer applies to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeletePolicyBinding(global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePolicyBinding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is deleted, the policy no longer applies to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.LongRunning.Operation DeletePolicyBinding(global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeletePolicyBinding, null, options, request);
      }
      /// <summary>
      /// Deletes a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is deleted, the policy no longer applies to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeletePolicyBindingAsync(global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeletePolicyBindingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a policy binding and returns a long-running operation.
      /// Callers will need the IAM permissions on both the policy and target.
      /// Once the binding is deleted, the policy no longer applies to the target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.LongRunning.Operation> DeletePolicyBindingAsync(global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeletePolicyBinding, null, options, request);
      }
      /// <summary>
      /// Lists policy bindings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse ListPolicyBindings(global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPolicyBindings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists policy bindings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse ListPolicyBindings(global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPolicyBindings, null, options, request);
      }
      /// <summary>
      /// Lists policy bindings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse> ListPolicyBindingsAsync(global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPolicyBindingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists policy bindings.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse> ListPolicyBindingsAsync(global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPolicyBindings, null, options, request);
      }
      /// <summary>
      /// Search policy bindings by target. Returns all policy binding objects bound
      /// directly to target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse SearchTargetPolicyBindings(global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchTargetPolicyBindings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search policy bindings by target. Returns all policy binding objects bound
      /// directly to target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse SearchTargetPolicyBindings(global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchTargetPolicyBindings, null, options, request);
      }
      /// <summary>
      /// Search policy bindings by target. Returns all policy binding objects bound
      /// directly to target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse> SearchTargetPolicyBindingsAsync(global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchTargetPolicyBindingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search policy bindings by target. Returns all policy binding objects bound
      /// directly to target.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse> SearchTargetPolicyBindingsAsync(global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchTargetPolicyBindings, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PolicyBindingsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PolicyBindingsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PolicyBindingsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreatePolicyBinding, serviceImpl.CreatePolicyBinding)
          .AddMethod(__Method_GetPolicyBinding, serviceImpl.GetPolicyBinding)
          .AddMethod(__Method_UpdatePolicyBinding, serviceImpl.UpdatePolicyBinding)
          .AddMethod(__Method_DeletePolicyBinding, serviceImpl.DeletePolicyBinding)
          .AddMethod(__Method_ListPolicyBindings, serviceImpl.ListPolicyBindings)
          .AddMethod(__Method_SearchTargetPolicyBindings, serviceImpl.SearchTargetPolicyBindings).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PolicyBindingsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreatePolicyBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V3.CreatePolicyBindingRequest, global::Google.LongRunning.Operation>(serviceImpl.CreatePolicyBinding));
      serviceBinder.AddMethod(__Method_GetPolicyBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V3.GetPolicyBindingRequest, global::Google.Cloud.Iam.V3.PolicyBinding>(serviceImpl.GetPolicyBinding));
      serviceBinder.AddMethod(__Method_UpdatePolicyBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V3.UpdatePolicyBindingRequest, global::Google.LongRunning.Operation>(serviceImpl.UpdatePolicyBinding));
      serviceBinder.AddMethod(__Method_DeletePolicyBinding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V3.DeletePolicyBindingRequest, global::Google.LongRunning.Operation>(serviceImpl.DeletePolicyBinding));
      serviceBinder.AddMethod(__Method_ListPolicyBindings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V3.ListPolicyBindingsRequest, global::Google.Cloud.Iam.V3.ListPolicyBindingsResponse>(serviceImpl.ListPolicyBindings));
      serviceBinder.AddMethod(__Method_SearchTargetPolicyBindings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsRequest, global::Google.Cloud.Iam.V3.SearchTargetPolicyBindingsResponse>(serviceImpl.SearchTargetPolicyBindings));
    }

  }
}
#endregion
